#!/bin/sh
# the next line restarts using wish\
exec wish "$0" "$@" 

if {![info exists vTcl(sourcing)]} {

    # Provoke name search
    catch {package require bogus-package-name}
    set packageNames [package names]

    package require BWidget
    switch $tcl_platform(platform) {
	windows {
	}
	default {
	    option add *ScrolledWindow.size 14
	}
    }
    
    package require Tk
    switch $tcl_platform(platform) {
	windows {
            option add *Button.padY 0
	}
	default {
            option add *Scrollbar.width 10
            option add *Scrollbar.highlightThickness 0
            option add *Scrollbar.elementBorderWidth 2
            option add *Scrollbar.borderWidth 2
	}
    }
    
}

#############################################################################
# Visual Tcl v1.60 Project
#




#############################################################################
## vTcl Code to Load Stock Images


if {![info exist vTcl(sourcing)]} {
#############################################################################
## Procedure:  vTcl:rename

proc ::vTcl:rename {name} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    regsub -all "\\." $name "_" ret
    regsub -all "\\-" $ret "_" ret
    regsub -all " " $ret "_" ret
    regsub -all "/" $ret "__" ret
    regsub -all "::" $ret "__" ret

    return [string tolower $ret]
}

#############################################################################
## Procedure:  vTcl:image:create_new_image

proc ::vTcl:image:create_new_image {filename {description {no description}} {type {}} {data {}}} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    # Does the image already exist?
    if {[info exists ::vTcl(images,files)]} {
        if {[lsearch -exact $::vTcl(images,files) $filename] > -1} { return }
    }

    if {![info exists ::vTcl(sourcing)] && [string length $data] > 0} {
        set object [image create  [vTcl:image:get_creation_type $filename]  -data $data]
    } else {
        # Wait a minute... Does the file actually exist?
        if {! [file exists $filename] } {
            # Try current directory
            set script [file dirname [info script]]
            set filename [file join $script [file tail $filename] ]
        }

        if {![file exists $filename]} {
            set description "file not found!"
            ## will add 'broken image' again when img is fixed, for now create empty
            set object [image create photo -width 1 -height 1]
        } else {
            set object [image create  [vTcl:image:get_creation_type $filename]  -file $filename]
        }
    }

    set reference [vTcl:rename $filename]
    set ::vTcl(images,$reference,image)       $object
    set ::vTcl(images,$reference,description) $description
    set ::vTcl(images,$reference,type)        $type
    set ::vTcl(images,filename,$object)       $filename

    lappend ::vTcl(images,files) $filename
    lappend ::vTcl(images,$type) $object

    # return image name in case caller might want it
    return $object
}

#############################################################################
## Procedure:  vTcl:image:get_image

proc ::vTcl:image:get_image {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    set reference [vTcl:rename $filename]

    # Let's do some checking first
    if {![info exists ::vTcl(images,$reference,image)]} {
        # Well, the path may be wrong; in that case check
        # only the filename instead, without the path.

        set imageTail [file tail $filename]

        foreach oneFile $::vTcl(images,files) {
            if {[file tail $oneFile] == $imageTail} {
                set reference [vTcl:rename $oneFile]
                break
            }
        }
    }
    return $::vTcl(images,$reference,image)
}

#############################################################################
## Procedure:  vTcl:image:get_creation_type

proc ::vTcl:image:get_creation_type {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    switch [string tolower [file extension $filename]] {
        .ppm -
        .jpg -
        .bmp -
        .gif    {return photo}
        .xbm    {return bitmap}
        default {return photo}
    }
}

foreach img {


            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

}
#############################################################################
## vTcl Code to Load User Images

catch {package require Img}

foreach img {

        {{[file join . GUI Images AIRSARsmall.gif]} {user image} user {}}
        {{[file join . GUI Images CONVAIRsmall.gif]} {user image} user {}}
        {{[file join . GUI Images EMISARsmall.gif]} {user image} user {}}
        {{[file join . GUI Images ESARsmall.gif]} {user image} user {}}
        {{[file join . GUI Images PISARsmall.gif]} {user image} user {}}
        {{[file join . GUI Images PVv3shortcut.gif]} {user image} user {}}
        {{[file join . GUI Images Displayshortcut.gif]} {user image} user {}}
        {{[file join . GUI Images Toolsshortcut.gif]} {user image} user {}}
        {{[file join . GUI Images SIRCsmall.gif]} {user image} user {}}
        {{[file join . GUI Images SETHIsmall.gif]} {user image} user {}}
        {{[file join . GUI Images adobe_pdf2.gif]} {user image} user {}}
        {{[file join . GUI Images google_earth.gif]} {user image} user {}}
        {{[file join . GUI Images GIMPshortcut.gif]} {user image} user {}}
        {{[file join . GUI Images SNAP.gif]} {user image} user {}}
        {{[file join . GUI Images SRTM.gif]} {user image} user {}}
        {{[file join . GUI Images PolSARproSIMshortcut.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg1.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg21.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg221.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg222.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg223.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg224.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg225.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg23.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv5pdg3.gif]} {user image} user {}}
        {{[file join . GUI Images ASF.gif]} {user image} user {}}
        {{[file join . GUI Images UAVSARsmall.gif]} {user image} user {}}
        {{[file join . GUI Images down.gif]} {user image} user {}}
        {{[file join . GUI Images memory.gif]} {user image} user {}}
        {{[file join . GUI Images image_magick_shortcut.gif]} {user image} user {}}
        {{[file join . GUI Images calculator.gif]} {user image} user {}}
        {{[file join . GUI Images SENTINEL1small.gif]} {user image} user {}}
        {{[file join . GUI Images ALOS2small.gif]} {user image} user {}}
        {{[file join . GUI Images balai.gif]} {user image} user {}}
        {{[file join . GUI Images RISATsmall.gif]} {user image} user {}}
        {{[file join . GUI Images RCMsmall.gif]} {user image} user {}}
        {{[file join . GUI Images TANDEMXsmall.gif]} {user image} user {}}
        {{[file join . GUI Images WidgetCenter.gif]} {user image} user {}}
        {{[file join . GUI Images ASTER.gif]} {user image} user {}}
        {{[file join . GUI Images TUTORIALsmall.gif]} {user image} user {}}
        {{[file join . GUI Images HELPBOOKsmall.gif]} {user image} user {}}
        {{[file join . GUI Images help.gif]} {user image} user {}}
        {{[file join . GUI Images PSPv2small.gif]} {user image} user {}}
        {{[file join . GUI Images TERRASARXsmall.gif]} {user image} user {}}
        {{[file join . GUI Images ALOSsmall.gif]} {user image} user {}}
        {{[file join . GUI Images CSKsmall.gif]} {user image} user {}}
        {{[file join . GUI Images PolSARapsmall.gif]} {user image} user {}}
        {{[file join . GUI Images ASARsmall.gif]} {user image} user {}}
        {{[file join . GUI Images RADARSAT2small.gif]} {user image} user {}}

            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

#################################
# VTCL LIBRARY PROCEDURES
#

if {![info exists vTcl(sourcing)]} {
#############################################################################
## Library Procedure:  Window

proc ::Window {args} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    global vTcl
    foreach {cmd name newname} [lrange $args 0 2] {}
    set rest    [lrange $args 3 end]
    if {$name == "" || $cmd == ""} { return }
    if {$newname == ""} { set newname $name }
    if {$name == "."} { wm withdraw $name; return }
    set exists [winfo exists $newname]
    switch $cmd {
        show {
            if {$exists} {
                wm deiconify $newname
            } elseif {[info procs vTclWindow$name] != ""} {
                eval "vTclWindow$name $newname $rest"
            }
            if {[winfo exists $newname] && [wm state $newname] == "normal"} {
                vTcl:FireEvent $newname <<Show>>
            }
        }
        hide    {
            if {$exists} {
                wm withdraw $newname
                vTcl:FireEvent $newname <<Hide>>
                return}
        }
        iconify { if $exists {wm iconify $newname; return} }
        destroy { if $exists {destroy $newname; return} }
    }
}
#############################################################################
## Library Procedure:  ::progressbar::Build

namespace eval ::progressbar {
proc Build {w args} {
  variable widgetOptions
  variable widgetGlobals

  if {$widgetGlobals(debug)} {
    puts stderr "pb_Build '$w' '$args'"
  }

  # create the namespace for this instance, and define a few
  # variables
  namespace eval ::progressbar::$w {
    variable options
    variable widgets
    variable info
  }

  # this gives us access to the namespace variables within
  # this proc
  upvar ::progressbar::${w}::widgets widgets
  upvar ::progressbar::${w}::options options
  upvar ::progressbar::${w}::info info

  set info(rgb) ""
  set info(rgbHasChanged) 0

  # this is our widget -- a frame of class Progressbar. Naturally,
  # it will contain other widgets. We create it here because
  # we need it to be able to set our default options.
  set widgets(this) [frame $w -class Progressbar1]

  # this defines all of the default options. We get the
  # values from the option database. Note that if an array
  # value is a list of length one it is an alias to another
  # option, so we just ignore it
  foreach name [array names widgetOptions] {
    if {[llength $widgetOptions($name)] == 1} continue
    set optName  [lindex $widgetOptions($name) 0]
    set optClass [lindex $widgetOptions($name) 1]
    set options($name) [option get $w $optName $optClass]
    if {$widgetGlobals(debug) > 1} {
      puts stderr "pb_Build:Opt '$w' '$optName' '$optClass' '$options($name)'"
    }
  }

  # now apply any of the options supplied on the command
  # line. This may overwrite our defaults, which is OK
  if {[llength $args] > 0} {
    array set options $args
  }
  
  # this will only set the name of canvas's widget, we will
  # later create the canvas in our drawing procedure.
  set widgets(canvas) $w.pb

  # we will later rename the frame's widget proc to be our
  # own custom widget proc. We need to keep track of this
  # new name, so we'll define and store it here...
  set widgets(frame) ::progressbar::${w}::$w

  # this moves the original frame widget proc into our
  # namespace and gives it a handy name
  rename ::$w $widgets(frame)

  # Alias the window to our WidgetProc and pass the window name.
  interp alias {} ::$w {} ::progressbar::WidgetProc $w

  # ok, the thing exists... let's do a bit more configuration. 
  if {[catch "Configure $widgets(this) [array get options]" error]} {
    return -code error $error
    catch {destroy $w}
  }

  return $w
}
}
#############################################################################
## Library Procedure:  ::progressbar::Canonize

namespace eval ::progressbar {
proc Canonize {w object opt} {
  variable widgetOptions
  variable widgetCommands
  variable widgetGlobals
  variable widgetShapes

  if {$widgetGlobals(debug)} {
    puts stderr "pb_Canonize '$w' '$object' '$opt'"
  }

  switch $object {
    command {
      if {[lsearch -exact $widgetCommands $opt] >= 0} {
	return $opt
      }

      # command names aren't stored in an array, and there
      # isn't a way to get all the matches in a list, so
      # we'll stuff the columns in a temporary array so
      # we can use [array names]
      set list $widgetCommands
      foreach element $list {
	set tmp($element) ""
      }
      set matches [array names tmp ${opt}*]
    }

    option {
      if {[info exists widgetOptions($opt)]  && [llength $widgetOptions($opt)] == 3} {
	return $opt
      }
      set list [array names widgetOptions]
      set matches [array names widgetOptions ${opt}*]
    }

    shape {
      if {[lsearch -exact $widgetShapes $opt] >= 0} {
	return $opt
      }

      # same procedure as command
      set list $widgetShapes
      foreach element $list {
	set tmp($element) ""
      }
      set matches [array names tmp ${opt}*]
    }
  }
  if {[llength $matches] == 0} {
    set choices [HumanizeList $list]
    return -code error "unknown $object \"$opt\"; must be one of $choices"
  } elseif {[llength $matches] == 1} {
    # deal with option aliases
    set opt [lindex $matches 0]
    switch $object {
      option {
	if {[llength $widgetOptions($opt)] == 1} {
	  set opt $widgetOptions($opt)
	}
      }
    }
    return $opt
  } else {
      set choices [HumanizeList $list]
      return -code error "ambiguous $object \"$opt\"; must be one of $choices"
  }
}
}
#############################################################################
## Library Procedure:  ::progressbar::Configure

namespace eval ::progressbar {
proc Configure {w args} {
  variable widgetOptions
  variable widgetGlobals

  if {$widgetGlobals(debug)} {
    puts stderr "pb_Configure '$w' '$args'"
  }

  upvar ${w}::widgets widgets
  upvar ${w}::options options
  upvar ${w}::info info
  
  if {[llength $args] == 0} {
    # hmmm. User must be wanting all configuration information
    # note that if the value of an array element is of length
    # one it is an alias, which needs to be handled slightly
    # differently
    set results {}
    foreach opt [lsort [array names widgetOptions]] {
      if {[llength $widgetOptions($opt)] == 1} {
	set alias $widgetOptions($opt)
	set optName $widgetOptions($alias)
	lappend results [list $opt $optName]
      } else {
	set optName  [lindex $widgetOptions($opt) 0]
	set optClass [lindex $widgetOptions($opt) 1]
	set default [option get $w $optName $optClass]
	lappend results [list $opt $optName $optClass $default $options($opt)]
      }
    }
    return $results
  }
  
  # one argument means we are looking for configuration
  # information on a single option
  if {[llength $args] == 1} {
    set opt [Canonize $w option [lindex $args 0]]
    set optName  [lindex $widgetOptions($opt) 0]
    set optClass [lindex $widgetOptions($opt) 1]
    set default [option get $w $optName $optClass]
    set results [list $opt $optName $optClass $default $options($opt)]
    return $results
  }

  # if we have an odd number of values, bail. 
  if {[expr {[llength $args]%2}] == 1} {
    # hmmm. An odd number of elements in args
    return -code error "value for \"[lindex $args end]\" missing"
  }
  
  # Great. An even number of options. Let's make sure they 
  # are all valid before we do anything. Note that Canonize
  # will generate an error if it finds a bogus option; otherwise
  # it returns the canonical option name
  foreach {name value} $args {
    set name [Canonize $w option $name]
    set opts($name) $value
  }

  # process all of the configuration options
  foreach option [array names opts] {
    set newValue $opts($option)
    if {[info exists options($option)]} {
      set oldValue $options($option)
    }

    if {$widgetGlobals(debug) > 2} {
      puts stderr "pb_Configure:Opt '$option' n='$newValue' o='$oldValue'"
    }
    switch -- $option {
      -background  -
      -borderwidth -
      -relief      {
	if {[winfo exists $widgets(this)]} {
	  $widgets(frame) configure $option $newValue
	  set options($option) [$widgets(frame) cget $option]
	}
      }
      -color {
        switch -- $newValue {
	  @blue0    -
	  @blue1    -
	  @blue2    -
	  @blue3    -
	  @blue4    -
	  @green0   -
	  @green1   -
	  @green2   -
	  @green3   -
	  @yellow0  -
	  @yellow1  -
	  @red0     -
	  @red1     -
	  @magenta0 -
	  @brown0   -
	  @brown1   -
	  @gray0    {
	    set info(rgb) $widgetGlobals($newValue)
	  }
	  @* {
	    set info(rgb) $widgetGlobals(@saphir)
	  }
	  default {
	    set info(rgb) [RGBs $newValue]
	  }
	}
	set info(rgbHasChanged) 1
      }
      -percent {
	set options($option) $newValue
      }
      -shape {
	set options($option) [Canonize $w shape $newValue]
	set info(rgbHasChanged) 1
      }
      -variable {
	# hmmm .. are there any traces left? Yes! Destroy!
	if {[info procs Trace($w)] != ""} {
	  uplevel #0 trace vdelete $oldValue wu ::progressbar::Trace($w)
	  unset widgetGlobals($w)
	  rename Trace($w) {}
	}
	if {$newValue != ""} {
	  # there is a new variable to trace. build a new proc to trace it.
	  proc ::progressbar::Trace($w) {name1 name2 op} "
	    variable widgetGlobals

	    if {\$widgetGlobals(debug)} {
	      puts stderr \"pb_Trace($w) '\$name1' '\$name2' '\$op'\"
	    }
	    switch -- \$op {
	      w {
		if {\$name2 != \"\"} {
		  upvar 1 \${name1}(\$name2) var
		  catch {$w configure -percent \$var}
		} else {
		  upvar 1 \$name1 var
		  catch {$w configure -percent \$var}
		}
	      }
	      u {
		if {\[info procs Trace($w)\] != \"\"} {  unset widgetGlobals($w);  rename Trace($w) {};  }
	      }
	    }
	  "
	  # install trace proc for variable
	  uplevel #0 trace variable $newValue wu ::progressbar::Trace($w)
	}
	set options($option) $newValue
	set widgetGlobals($w) $newValue
      }
      -width {
	if {$newValue < 20} {
	  return -code error "a -width of less than 20 is not supported."
	}
	if {[winfo exists $widgets(canvas)]} {
	  $widgets(canvas) configure $option $newValue
	  set options($option) [$widgets(canvas) cget $option]
	} else {
          set options($option) $newValue
	}
      }
      -textvalue {
        set options($option) $newValue
	if {![winfo exists $widgets(canvas)]} { continue }
	$widgets(canvas) itemconfigure ttxt -text $newValue
      }
      -textcolor {
        set options($option) $newValue
	if {![winfo exists $widgets(canvas)]} { continue }
	$widgets(canvas) itemconfigure ttxt -fill $newValue
      }
    }
  }

  Draw $w
}
}
#############################################################################
## Library Procedure:  ::progressbar::DestroyHandler

namespace eval ::progressbar {
proc DestroyHandler {w} {
  variable widgetGlobals

  if {$widgetGlobals(debug)} {
    puts stderr "pb_DestroyHandler '$w'"
  }

  # hmmm .. are there any traces left? Yes! Destroy!
  if {[info procs Trace($w)] != ""} {
    uplevel 1 trace vdelete $widgetGlobals($w) wu ::progressbar::Trace($w)
    unset widgetGlobals($w)
    rename Trace($w) {}
  }

  # if the widget actually being destroyed is of class Progressbar,
  # crush the namespace and kill the proc. Get it? Crush. Kill. 
  # Destroy. Heh. Danger Will Robinson! Oh, man! I'm so funny it
  # brings tears to my eyes.
  if {[string compare [winfo class $w] "Progressbar1"] == 0} {
    namespace delete ::progressbar::$w
    rename $w {}
  }
}
}
#############################################################################
## Library Procedure:  ::progressbar::Draw

namespace eval ::progressbar {
proc Draw {w} {
  variable widgetGlobals

  if {$widgetGlobals(debug) > 2} {
    puts stderr "pb_Draw '$w'"
  }

  upvar ${w}::widgets widgets
  upvar ${w}::options options
  upvar ${w}::info info

  set width   $options(-width)
  set percent $options(-percent)
  set text    $options(-textvalue)

  if {$options(-shape) == "flat"} {
    set minDisplay 0
    if {[llength $info(rgb)] == 7} {
      set rgb(0) [lindex $info(rgb) 6]
    } else {
      set rgb(0) [lindex $info(rgb) 2]
    }
    set rgb(1) $rgb(0)
    set rgb(2) $rgb(0)
    set rgb(3) $rgb(0)
    set rgb(4) $rgb(0)
    set rgb(5) $rgb(0)
  } else {
    set minDisplay 7
    set rgb(0) [lindex $info(rgb) 0]
    set rgb(1) [lindex $info(rgb) 1]
    set rgb(2) [lindex $info(rgb) 2]
    set rgb(3) [lindex $info(rgb) 3]
    set rgb(4) [lindex $info(rgb) 4]
    set rgb(5) [lindex $info(rgb) 5]
  }

  if {$percent < 0} {
    set percent 0
  } elseif {$percent > 100} {
    set percent 100
  }
  if {$percent == 0} {
    set mark $minDisplay
  } else {
    set mark [expr (($width - $minDisplay) / 100.0 * $percent) + $minDisplay]
  }

  if {![winfo exists $widgets(canvas)]} {
    canvas $widgets(canvas) -width $width -height 14 -bd 0 -highlightthickness 0
    pack $widgets(canvas) -side left -anchor nw -fill both

    foreach {type color tag coords opts} $widgetGlobals(toDraw) {
      eval $widgets(canvas) create $type $coords -fill $color -tag t$tag $opts
    }

    set info(rgbHasChanged) 0
    # nothing more to do
    return
  }

  foreach {type color tag coords opts} $widgetGlobals(toDraw) {
    eval $widgets(canvas) coords t$tag $coords
    if {$info(rgbHasChanged)} {
      eval $widgets(canvas) itemconfigure t$tag -fill $color
    }
  }
  set info(rgbHasChanged) 0
}
}
#############################################################################
## Library Procedure:  ::progressbar::HumanizeList

namespace eval ::progressbar {
proc HumanizeList {list} {
  variable widgetGlobals

  if {$widgetGlobals(debug)} {
    puts stderr "pb_HumanizeList $list"
  }

  if {[llength $list] == 1} {
    return [lindex $list 0]
  } else {
    set list [lsort $list]
    set secondToLast [expr {[llength $list] -2}]
    set most [lrange $list 0 $secondToLast]
    set last [lindex $list end]

    return "[join $most {, }] or $last"
  }
}
}
#############################################################################
## Library Procedure:  ::progressbar::Init

namespace eval ::progressbar {
proc Init {} {
  variable widgetOptions
  variable widgetCommands
  variable widgetGlobals
  variable widgetShapes

  if {$widgetGlobals(debug)} {
    puts stderr "pb_Init"
  }

  # here we match up command line options with option database names
  # and classes. As it turns out, this is a handy reference of all of the
  # available options. Note that if an item has a value with only one
  # item (like -bd, for example) it is a synonym and the value is the
  # actual item.

  array set widgetOptions {
    -background		{background	Background	}
    -borderwidth	{borderWidth	BorderWidth	}
    -color		{color		Color		}
    -cursor		{cursor		Cursor		}
    -percent		{percent	Percent		}
    -relief		{relief		Relief		}
    -shape		{shape		Shape		}
    -variable		{variable	Variable	}
    -width		{width		Width		}
    -textvalue		{textValue	TextValue	}
    -textcolor		{textColor	TextColor	}

    -bg			-background
    -bd			-borderwidth
    -pc			-percent
  } 

  # this defines the valid widget commands. It's important to
  # list them here; we use this list to validate commands and
  # expand abbreviations.

  set widgetCommands {
      cget
      configure
      incr
      step
  }

  # this defines the valid shape options. It's important to
  # list them here; we use this list to validate options and
  # expand abbreviations.

  set widgetShapes {
      3D
      3d
      flat
  }
      
  set widgetGlobals(toDraw) {
    rect #bdbdbd es0 {[expr $mark +3] 2 [expr $width -2] 11} {-outline ""}
    line #525252 es1 {[expr $mark +1] 2 [expr $mark +1] 11} {}
    line #8c8c8c es2 {[expr $mark +2] 11 [expr $mark +2] 2  [expr $width -4] 2} {}
    line #8c8c8c es3 {[expr $mark +3] 11 [expr $width -3] 11  [expr $width -3] 3} {}
    line $rgb(0) pb0 {4 11 [expr $mark -1] 11 [expr $mark -1] 3} {}
    line $rgb(1) pb1 {3 11 3 10 [expr $mark -2] 10 [expr $mark -2] 2  [expr $mark -1] 2 4 2} {}
    line $rgb(2) pb2 {3 2 2 2 2 11 2 10 3 10 3 9 [expr $mark -3] 9  [expr $mark -3] 3 [expr $mark -2] 3 4 3} {}
    line $rgb(3) pb3 {3 3 3 9 3 8 [expr $mark -3] 8 [expr $mark -3] 4 4 4} {}
    line $rgb(4) pb4 {3 4 3 8 3 7 [expr $mark -3] 7 [expr $mark -3] 5 4 5} {}
    line $rgb(5) pb5 {3 5 3 7 3 6 [expr $mark -3] 6} {}
    line #000000 mrk {$mark 1 $mark 12} {}
    line #adadad fr0 {0 12 0 0 [expr $width -1] 0} {}
    line #ffffff fr1 {1 13 [expr $width -1] 13 [expr $width -1] 1} {}
    line #000000 fr2 {1 1 [expr $width -2] 1 [expr $width -2] 12 1 12 1 1} {}
    text #000000 txt {[expr $width / 2] 8} {-text $text}
  }

  set widgetGlobals(@blue0) {#000052 #0031ce #3163ff #639cff #9cceff #efefef}
  set widgetGlobals(@blue1) {#000021 #00639c #009cce #00ceff #63ffff #ceffff}
  set widgetGlobals(@blue2) {#000052 #31319c #6363ce #9c9cff #ceceff #efefef}
  set widgetGlobals(@blue3)	 {#21214a #52527b #63639c #8484bd #b5b5ef #ceceff}
  set widgetGlobals(@blue4) {#29396b #4a6b9c #6384b5 #739cd6 #94b5ef #adceff}
  set widgetGlobals(@green0)	 {#003131 #08736b #318c94 #5abdad #63dece #ceffef}
  set widgetGlobals(@green1) {#001000 #003100 #316331 #639c63 #9cce9c #ceffce}
  set widgetGlobals(@green2) {#002100 #006331 #319c63 #31ce63 #63ff9c #ceffce}
  set widgetGlobals(@green3) {#003131 #316363 #427b7b #639c9c #9ccece #bdefef}
  set widgetGlobals(@yellow0) {#101010 #636300 #9c9c00 #cece00 #ffff00 #ffff9c}
  set widgetGlobals(@yellow1) {#8c7321 #cead39 #e7c642 #f7de63 #f7de63 #ffffe7}
  set widgetGlobals(@red0) {#420000 #9c0000 #ce3131 #ff6363 #ff9c9c #ffcece}
  set widgetGlobals(@red1) {#210000 #9c3100 #ce6331 #ff9c63 #ffce9c #ffffce}
  set widgetGlobals(@magenta0) {#210000 #630063 #9c319c #ce63ce #ff9cff #ffceff}
  set widgetGlobals(@brown0) {#210000 #633100 #9c6331 #ce9c63 #efb573 #ffdeb5}
  set widgetGlobals(@brown1) {#310000 #7b4242 #9c6363 #ce9c9c #efcece #ffdede}
  set widgetGlobals(@gray0) {#212121 #525252 #737373 #adadad #cecece #efefef}

  # this initializes the option database. Kinda gross, but it works
  # (I think).
  set tmpWidget ".__tmp__"

  # steal some options from frame widgets; we only want a subset
  # so we'll use a slightly different method. No harm in *not*
  # adding in the one or two that we don't use... :-)
  label $tmpWidget
  foreach option [list Background Relief] {
    set values [$tmpWidget configure -[string tolower $option]]
    option add *Progressbar1.$option [lindex $values 3]
  }
  destroy $tmpWidget

  # these are unique to us...
  option add *Progressbar1.borderWidth	5		widgetDefault
  option add *Progressbar1.color	@blue0		widgetDefault
  option add *Progressbar1.percent	0		widgetDefault
  option add *Progressbar1.shape	3D		widgetDefault
  option add *Progressbar1.variable	{}		widgetDefault
  option add *Progressbar1.width	180		widgetDefault
  option add *Progressbar1.textColor	black		widgetDefault

  # define the class bindings
  # this allows us to clean up some things when we go away
  bind Progressbar1 <Destroy> [list ::progressbar::DestroyHandler %W]
}
}
#############################################################################
## Library Procedure:  ::progressbar::RGBs

namespace eval ::progressbar {
proc RGBs {color} {
  variable widgetGlobals

  if {$widgetGlobals(debug)} {
    puts stderr "pb_RGB '$color'"
  }

  # get rgb values of given color
  set color [winfo rgb . $color]

  set R [expr int([lindex $color 0] / 256)]
  set G [expr int([lindex $color 1] / 256)]
  set B [expr int([lindex $color 2] / 256)]

  set rgb {}
  foreach factor {0.13 0.32 0.45 0.68 0.8 0.93} {
    set r [expr int($R * $factor)]
    set g [expr int($G * $factor)]
    set b [expr int($B * $factor)]
    lappend rgb [format "#%02x%02x%02x" $r $g $b]
  }
  lappend rgb [format "#%02x%02x%02x" $R $G $B]

  return $rgb
}
}
#############################################################################
## Library Procedure:  ::progressbar::WidgetProc

namespace eval ::progressbar {
proc WidgetProc {w args} {
  variable widgetOptions
  variable widgetGlobals

  if {[llength $args] == 0} {
      return -code error [vTcl:WrongNumArgs "$w option ?arg arg ...?"]
  }

  set command [lindex $args 0]
  set args [lrange $args 1 end]

  if {$widgetGlobals(debug)} {
    puts stderr "pb_WidgetProc '$w' '$command' '$args'"
  }

  upvar ::progressbar::${w}::widgets   widgets
  upvar ::progressbar::${w}::options   options
  upvar ::progressbar::${w}::info info

  set command [Canonize $w command $command]

  set result ""

  switch $command {
    cget {
      if {[llength $args] != 1} {
	return -code error "wrong # args: should be $w cget option"
      }
      set opt [Canonize $w option [lindex $args 0]]
      set result $options($opt)
    }

    configure {
      set result [eval Configure {$w} $args]
    }

    incr -
    step {
      set val 1
      if {[llength $args] > 1} {
      	return -code error "wrong # args: should be $w $command <incrValue>"
      } elseif {[llength $args] == 1} {
      	set val $args
      }
      set percent [$w cget -percent]
      set result [eval Configure $w -percent [expr $percent + $val]]
    }

    default {
	return -code error "bad option \"$command\": must be cget or configure"
    }
  }
  return $result
}
}
#############################################################################
## Library Procedure:  ::progressbar::progressbar

namespace eval ::progressbar {
proc progressbar {args} {
  variable widgetOptions
  variable widgetGlobals

  # perform a one time initialization
  if {![info exists widgetOptions]} {
    __progressbar_Setup
    Init
  }

  if {$widgetGlobals(debug)} {
    puts stderr "pb_progressbar '$args'"
  }

  # make sure we at least have a widget name
  if {[llength $args] == 0} {
    return -code error  "wrong # args: should be \"progressbar pathName ?options?\""
  }

  # ... and make sure a widget doesn't already exist by that name
  if {[winfo exists [lindex $args 0]]} {
    return -code error "window name \"[lindex $args 0]\" already exists"
  }

  # and check that all of the args are valid
  foreach {name value} [lrange $args 1 end] {
    Canonize [lindex $args 0] option $name
  }

  # build it...
  set w [eval Build $args]

  # and we are done!
  return $w
}
}
#############################################################################
## Library Procedure:  __progressbar_Setup

proc ::__progressbar_Setup {} {
  namespace eval ::progressbar {
    # this is the public interface
    namespace export progressbar

    # these contain references to available options
    variable widgetOptions

    # these contain references to available commands
    variable widgetCommands

    # these contain references to available options for shape option
    variable widgetShapes

    # these contain references to global variables
    variable widgetGlobals

    set widgetGlobals(debug) 0
  }
}
#############################################################################
## Library Procedure:  vTcl:DefineAlias

proc ::vTcl:DefineAlias {target alias widgetProc top_or_alias cmdalias} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    global widget
    set widget($alias) $target
    set widget(rev,$target) $alias
    if {$cmdalias} {
        interp alias {} $alias {} $widgetProc $target
    }
    if {$top_or_alias != ""} {
        set widget($top_or_alias,$alias) $target
        if {$cmdalias} {
            interp alias {} $top_or_alias.$alias {} $widgetProc $target
        }
    }
}
#############################################################################
## Library Procedure:  vTcl:DoCmdOption

proc ::vTcl:DoCmdOption {target cmd} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    ## menus are considered toplevel windows
    set parent $target
    while {[winfo class $parent] == "Menu"} {
        set parent [winfo parent $parent]
    }

    regsub -all {\%widget} $cmd $target cmd
    regsub -all {\%top} $cmd [winfo toplevel $parent] cmd

    uplevel #0 [list eval $cmd]
}
#############################################################################
## Library Procedure:  vTcl:FireEvent

proc ::vTcl:FireEvent {target event {params {}}} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    ## The window may have disappeared
    if {![winfo exists $target]} return
    ## Process each binding tag, looking for the event
    foreach bindtag [bindtags $target] {
        set tag_events [bind $bindtag]
        set stop_processing 0
        foreach tag_event $tag_events {
            if {$tag_event == $event} {
                set bind_code [bind $bindtag $tag_event]
                foreach rep "\{%W $target\} $params" {
                    regsub -all [lindex $rep 0] $bind_code [lindex $rep 1] bind_code
                }
                set result [catch {uplevel #0 $bind_code} errortext]
                if {$result == 3} {
                    ## break exception, stop processing
                    set stop_processing 1
                } elseif {$result != 0} {
                    bgerror $errortext
                }
                break
            }
        }
        if {$stop_processing} {break}
    }
}
#############################################################################
## Library Procedure:  vTcl:Toplevel:WidgetProc

proc ::vTcl:Toplevel:WidgetProc {w args} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    if {[llength $args] == 0} {
        ## If no arguments, returns the path the alias points to
        return $w
    }
    set command [lindex $args 0]
    set args [lrange $args 1 end]
    switch -- [string tolower $command] {
        "setvar" {
            foreach {varname value} $args {}
            if {$value == ""} {
                return [set ::${w}::${varname}]
            } else {
                return [set ::${w}::${varname} $value]
            }
        }
        "hide" - "show" {
            Window [string tolower $command] $w
        }
        "showmodal" {
            ## modal dialog ends when window is destroyed
            Window show $w; raise $w
            grab $w; tkwait window $w; grab release $w
        }
        "startmodal" {
            ## ends when endmodal called
            Window show $w; raise $w
            set ::${w}::_modal 1
            grab $w; tkwait variable ::${w}::_modal; grab release $w
        }
        "endmodal" {
            ## ends modal dialog started with startmodal, argument is var name
            set ::${w}::_modal 0
            Window hide $w
        }
        default {
            uplevel $w $command $args
        }
    }
}
#############################################################################
## Library Procedure:  vTcl:WidgetProc

proc ::vTcl:WidgetProc {w args} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    if {[llength $args] == 0} {
        ## If no arguments, returns the path the alias points to
        return $w
    }

    set command [lindex $args 0]
    set args [lrange $args 1 end]
    uplevel $w $command $args
}
#############################################################################
## Library Procedure:  vTcl:toplevel

proc ::vTcl:toplevel {args} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    uplevel #0 eval toplevel $args
    set target [lindex $args 0]
    namespace eval ::$target {set _modal 0}
}
}


if {[info exists vTcl(sourcing)]} {

proc vTcl:project:info {} {
    set base .top1
    namespace eval ::widgets::$base {
        set set,origin 1
        set set,size 1
        set runvisible 1
    }
    namespace eval ::widgets::$base.lab80 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -underline 1}
    }
    namespace eval ::widgets::$base.fra66 {
        array set save {-height 1 -width 1}
    }
    set site_3_0 $base.fra66
    namespace eval ::widgets::$site_3_0.cpd70 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$site_3_0.cpd69 {
        array set save {-background 1 -cursor 1 -highlightbackground 1 -width 1}
    }
    set site_4_0 $site_3_0.cpd69
    namespace eval ::widgets::$site_4_0.lab66 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$site_4_0.but93 {
        array set save {-_tooltip 1 -background 1 -borderwidth 1 -command 1 -highlightthickness 1 -image 1 -padx 1 -pady 1 -relief 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$site_4_0.lab67 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$site_4_0.but57 {
        array set save {-_tooltip 1 -background 1 -borderwidth 1 -command 1 -foreground 1 -highlightthickness 1 -image 1 -padx 1 -pady 1 -relief 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$site_4_0.lab68 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$site_3_0.lab72 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$base.lab67 {
        array set save {-borderwidth 1 -image 1 -padx 1 -pady 1 -text 1 -underline 1}
    }
    namespace eval ::widgets::$base.m66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
    }
    set base .top2
    namespace eval ::widgets::$base {
        set set,origin 1
        set set,size 1
        set runvisible 1
    }
    namespace eval ::widgets::$base.fra71 {
        array set save {-borderwidth 1 -relief 1 -width 1}
    }
    set site_3_0 $base.fra71
    namespace eval ::widgets::$site_3_0.fra72 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra72
    namespace eval ::widgets::$site_4_0.cpd75 {
        array set save {-_tooltip 1 -background 1 -command 1 -image 1 -pady 1 -width 1}
    }
    namespace eval ::widgets::$site_4_0.cpd74 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1}
    }
    namespace eval ::widgets::$site_4_0.men71 {
        array set save {-_tooltip 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1}
    }
    namespace eval ::widgets::$site_4_0.men71.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men75 {
        array set save {-_tooltip 1 -height 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -width 1}
    }
    namespace eval ::widgets::$site_4_0.men75.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.cpd76 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1}
    }
    namespace eval ::widgets::$site_4_0.men66 {
        array set save {-_tooltip 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men66.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men67 {
        array set save {-_tooltip 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men67.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.cpd66 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1}
    }
    namespace eval ::widgets::$site_4_0.but67 {
        array set save {-command 1 -image 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.cpd73 {
        array set save {-_tooltip 1 -background 1 -command 1 -padx 1 -pady 1 -text 1 -width 1}
    }
    namespace eval ::widgets::$site_4_0.but66 {
        array set save {-borderwidth 1 -command 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men77 {
        array set save {-_tooltip 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men77.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -image 1 -label 1 -menu 1}
        }
    }
    namespace eval ::widgets::$site_4_0.but68 {
        array set save {-_tooltip 1 -command 1 -image 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_3_0.fra70 {
        array set save {-borderwidth 1 -height 1 -relief 1 -width 1}
    }
    set site_4_0 $site_3_0.fra70
    namespace eval ::widgets::$site_4_0.cpd68 {
        array set save {-command 1 -image 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.ent72 {
        array set save {-_tooltip 1 -background 1 -disabledbackground 1 -disabledforeground 1 -justify 1 -state 1 -textvariable 1 -width 1}
    }
    namespace eval ::widgets::$site_3_0.fra75 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra75
    namespace eval ::widgets::$site_4_0.cpd74 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -highlightthickness 1 -padx 1 -pady 1 -relief 1 -state 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.cpd73 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -highlightthickness 1 -padx 1 -pady 1 -relief 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.cpd67 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -highlightthickness 1 -padx 1 -pady 1 -relief 1 -state 1}
    }
    namespace eval ::widgets::$site_3_0.fra76 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra76
    namespace eval ::widgets::$site_4_0.men69 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men69.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men69.m
    namespace eval ::widgets::$site_6_0.men70 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men69.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-label 1 -menu 1}
        }
    }
    set site_8_0 $site_7_0.men72
    namespace eval ::widgets::$site_8_0.men77 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-label 1 -menu 1}
        }
    }
    set site_9_0 $site_8_0.men77
    namespace eval ::widgets::$site_9_0.men79 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_9_0 $site_8_0.men77
    namespace eval ::widgets::$site_9_0.men80 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_8_0 $site_7_0.men72
    namespace eval ::widgets::$site_8_0.men78 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men73 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-label 1 -menu 1}
        }
    }
    set site_8_0 $site_7_0.men73
    namespace eval ::widgets::$site_8_0.men74 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_8_0 $site_7_0.men73
    namespace eval ::widgets::$site_8_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men74 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
    }
    set site_6_0 $site_4_0.men69.m
    namespace eval ::widgets::$site_6_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men98 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men98.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men98.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men74 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men74.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men83 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men76 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men76.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men76.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men70 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men70.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men70.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_3_0.fra77 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra77
    namespace eval ::widgets::$site_4_0.cpd67 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -pady 1 -relief 1 -state 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.cpd68 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -pady 1 -relief 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.cpd69 {
        array set save {-borderwidth 1 -command 1 -pady 1 -relief 1 -state 1}
    }
    namespace eval ::widgets::$site_3_0.fra78 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra78
    namespace eval ::widgets::$site_4_0.men58 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men58.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men68 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men69 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men70 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men76 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men73 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men73
    namespace eval ::widgets::$site_7_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men58.m
    namespace eval ::widgets::$site_6_0.men74 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men71 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men71.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men71.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men71.m
    namespace eval ::widgets::$site_6_0.men73 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men71.m
    namespace eval ::widgets::$site_6_0.men74 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men75 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men75.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men75.m
    namespace eval ::widgets::$site_6_0.men82 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men77 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men77.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men77.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men101 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men101.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men101.m
    namespace eval ::widgets::$site_6_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men74 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men74.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men70 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men68 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men68
    namespace eval ::widgets::$site_7_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men69 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men68 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1}
    }
    namespace eval ::widgets::$site_4_0.men68.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men73 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men70 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men74 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men74
    namespace eval ::widgets::$site_7_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_3_0.fra79 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra79
    namespace eval ::widgets::$site_4_0.cpd75 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -padx 1 -pady 1 -relief 1 -state 1 -text 1}
    }
    namespace eval ::widgets::$site_3_0.fra81 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra81
    namespace eval ::widgets::$site_4_0.men78 {
        array set save {-_tooltip 1 -borderwidth 1 -menu 1 -padx 1 -pady 1 -state 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men78.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_3_0.but66 {
        array set save {-_tooltip 1 -command 1 -image 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_3_0.fra67 {
        array set save {-height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra67
    namespace eval ::widgets::$site_4_0.men68 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men68.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men66
    namespace eval ::widgets::$site_7_0.men70 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men66
    namespace eval ::widgets::$site_7_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men67
    namespace eval ::widgets::$site_7_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men67
    namespace eval ::widgets::$site_7_0.men73 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men68.m
    namespace eval ::widgets::$site_6_0.men68 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men68
    namespace eval ::widgets::$site_7_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men68
    namespace eval ::widgets::$site_7_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men69 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men69.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men69.m
    namespace eval ::widgets::$site_6_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men66
    namespace eval ::widgets::$site_7_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men66
    namespace eval ::widgets::$site_7_0.men68 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men69.m
    namespace eval ::widgets::$site_6_0.men69 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men69
    namespace eval ::widgets::$site_7_0.men70 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men69
    namespace eval ::widgets::$site_7_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_3_0.fra66 {
        array set save {-height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra66
    namespace eval ::widgets::$site_4_0.men67 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men67.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men68 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men68.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$base.cpd73 {
        array set save {-borderwidth 1 -relief 1 -width 1}
    }
    set site_3_0 $base.cpd73
    namespace eval ::widgets::$site_3_0.cpd79 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.cpd79
    namespace eval ::widgets::$site_4_0.men73 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men73.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men73.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    namespace eval ::widgets::$site_3_0.fra23 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra23
    namespace eval ::widgets::$site_4_0.men72 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men72.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men72.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men73 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men74 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_6_0 $site_4_0.men72.m
    namespace eval ::widgets::$site_6_0.men72 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men67 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men67.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.cpd66 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men71 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men71.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.cpd68 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.cpd70 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.cpd67 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men74 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men74.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men75 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men74.m
    namespace eval ::widgets::$site_6_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.cpd69 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men75 {
        array set save {-_tooltip 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men75.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -image 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men75.m
    namespace eval ::widgets::$site_6_0.men76 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_3_0.fra29 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra29
    namespace eval ::widgets::$site_4_0.but24 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men66 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men66.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.but23 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.cpd66 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men67 {
        array set save {-_tooltip 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men67.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -image 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_3_0.cpd74 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.cpd74
    namespace eval ::widgets::$site_4_0.men68 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men68.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men75 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men75.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men75.m
    namespace eval ::widgets::$site_6_0.men76 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1 -variable 1}
        }
    }
    set site_6_0 $site_4_0.men75.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men66 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    set site_7_0 $site_6_0.men71
    namespace eval ::widgets::$site_7_0.men67 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1}
        }
    }
    namespace eval ::widgets::$site_4_0.men72 {
        array set save {-_tooltip 1 -borderwidth 1 -image 1 -menu 1 -padx 1 -pady 1 -relief 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.men72.m {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    set site_6_0 $site_4_0.men72.m
    namespace eval ::widgets::$site_6_0.men71 {
        array set save {-activeborderwidth 1 -borderwidth 1 -tearoff 1}
        namespace eval subOptions {
            array set save {-command 1 -label 1 -menu 1}
        }
    }
    namespace eval ::widgets::$site_4_0.cpd66 {
        array set save {-_tooltip 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$base.fra84 {
        array set save {-height 1 -width 1}
    }
    set site_3_0 $base.fra84
    namespace eval ::widgets::$site_3_0.fra71 {
        array set save {-background 1 -borderwidth 1 -height 1 -relief 1 -width 1}
    }
    namespace eval ::widgets::$site_3_0.fra66 {
        array set save {-borderwidth 1 -height 1 -width 1}
    }
    set site_4_0 $site_3_0.fra66
    namespace eval ::widgets::$site_4_0.cpd67 {
        array set save {-_tooltip 1 -borderwidth 1 -command 1 -image 1 -padx 1 -pady 1 -text 1}
    }
    namespace eval ::widgets::$site_4_0.pro68 {
        array set save {-borderwidth 1 -variable 1 -width 1}
    }
    namespace eval ::widgets::$site_3_0.cpd67 {
        array set save {-ipad 1 -text 1}
    }
    set site_5_0 [$site_3_0.cpd67 getframe]
    namespace eval ::widgets::$site_5_0 {
        array set save {}
    }
    set site_5_0 $site_5_0
    namespace eval ::widgets::$site_5_0.cpd69 {
        array set save {-background 1 -height 1 -width 1 -yscrollcommand 1}
    }
    namespace eval ::widgets::$site_5_0.scr70 {
        array set save {-command 1 -width 1}
    }
    namespace eval ::widgets_bindings {
        set tagslist {_TopLevel _vTclBalloon}
    }
    namespace eval ::vTcl::modules::main {
        set procs {
            init
            main
            WmTransient
            ConCat
            LoadConfig
            MouseButtonDown
            MouseButtonMotion
            MouseButtonRelease
            MouseButtonRightDown
            MouseMotion
            OpenDir
            OpenFile
            PsPprogressBar
            PsPprogressBarSnap
            RectLensMove
            TextEditor
            TextEditorFromWidget
            WriteConfig
            load_bmp_caracteristics
            load_bmp_file
            vTclWindow.
            vTclWindow.top1
            vTclWindow.top3
            vTclWindow.top2
            vTclWindow.top4
            vTclWindow.top5
            vTclWindow.top6
            vTclWindow.top7
            vTclWindow.top8
            EnviWriteConfig
            EnviWriteConfigS
            EnviWriteConfigC
            EnviWriteConfigT
            EnviWriteConfigI
            EnviWriteConfigCheck
            TextEditorRunTrace
            TextEditorRunTraceInit
            CheckRunTimeError
            MouseActiveFunction
            LoadPSPViewer
            MouseBMPValue
            MouseMotionLens
            MouseMotionOverview
            RectOverviewMove
            CloseAllWidget
            ClosePSPViewer
            UpdateColorMap
            UpdateColorMap8
            UpdateColorMap16
            UpdateColorMap32
            UpdateColorMap256
            HelpPdfEdit
            CheckEnvironnement
            MenuOn
            MenuOff
            load_bmp_lens_line
            MouseButtonDownLens
            GnuPlotInit
            CloseAllPipe
            GnuPlot3D
            GnuPlotTerm
            WriteConfigSubApt
            LoadConfigSubApt
            TestVar
            ReadXML
            load_bmp_lens
            load_bmp_file_line_2
            MouseMotionLine_2
            MouseBMPValue_2
            load_bmp_file_2
            RAZ_PolInSARDataAnalysis
            GoogleEarth
            InitDataDir
            MouseButtonDownOverviewAll
            RectOverviewAllMove
            MouseButtonReleaseOverviewAll
            MouseMotionViewAll
            MouseButtonDownLensAll
            MouseButtonReleaseLensAll
            RectLensAllMove
            MouseButtonRightDownLensAll
            MouseMotionLensAll
            CleanTMPDirectory
            MenuEnv
            MenuRAZ
            OpenCloseProgressBar
            EnviWriteConfigClassif
            Gimp
            Snap
            Dem_Kml
            CheckDataDirMult
            WriteConfigMult
            LoadConfigMult
            CheckEnvBinData
            MapReady
            MapReadyDelete
            MapReadyGeocode
            MapReadyMatrix
            MapReadyParameter
            MapInfoReadConfig
            MapInfoWriteConfig
            InitPolSARproEnv
            WidgetShow
            DeleteFile
            DeleteMatrixT
            DeleteMatrixC
            DeleteMatrixS
            DeleteMatrixI
            MenuEnvImp
            WaitUntilDeleted
            WaitUntilCreated
            WaitUntilDeletedDir
            CopyFile
            WaitUntilCreatedDir
            CopyDir
            DeleteDir
            PSPcreate_bmp_file
            PSPcluster_avg_prm
            PSPCreateDirectoryMult
            PSPCreateDirectory
            WidgetShowFromWidget
            WidgetShowFromObject
            WidgetShowFromMenuAuto
            WidgetShowFromMenuFix
            WidgetGeometryCenter
            WidgetGeometryLeft
            WidgetGeometryRight
            PsPPTOMDisplayThumb
            PsPPTOMDisplay
            PsPScatterPlotThumb
            PsPScatterPlot
            SNAPReadXML
            SNAPBatchProcess
            SNAPDelete
            SNAPConvertIEEE
            CSKBatchProcess
            WidgetShowTop28
            WidgetShowTop399
            WidgetHideTop399
            WidgetHideTop28
            ViewGnuPlotTK
            PSPcreate_bmp_file_mask
            PSPCreateDirectoryMask
            PSPCreateDirectoryMaskMult
            CheckEnvBinData2
            CheckEnvironnement2
            Sentinel1_FlipUpDown
            LoadConfigTomo
        }
        set compounds {
        }
        set projectType single
    }
}
}

#################################
# USER DEFINED PROCEDURES
#
#############################################################################
## Procedure:  main

proc ::main {argc argv} {
## This will clean up and call exit properly on Windows.
#vTcl:WindowsCleanup
}
#############################################################################
## Procedure:  WmTransient

proc ::WmTransient {WidgetNum WidgetTop} {
global ScreenRatio PlatForm

set ResizeFlag "true"

if {$WidgetNum == ".top10"} {set ResizeFlag "false" }
if {$WidgetNum == ".top27"} {set ResizeFlag "false" }
if {$WidgetNum == ".top28"} {set ResizeFlag "false" }
if {$WidgetNum == ".top32"} {set ResizeFlag "false" }
if {$WidgetNum == ".top35"} {set ResizeFlag "false" }
if {$WidgetNum == ".top38"} {set ResizeFlag "false" }
if {$WidgetNum == ".top44"} {set ResizeFlag "false" }
if {$WidgetNum == ".top45"} {set ResizeFlag "false" }
if {$WidgetNum == ".top51"} {set ResizeFlag "false" }
if {$WidgetNum == ".top64"} {set ResizeFlag "false" }
if {$WidgetNum == ".top73"} {set ResizeFlag "false" }
if {$WidgetNum == ".top78"} {set ResizeFlag "false" }
if {$WidgetNum == ".top82"} {set ResizeFlag "false" }
if {$WidgetNum == ".top207"} {set ResizeFlag "false" }
if {$WidgetNum == ".top215"} {set ResizeFlag "false" }
if {$WidgetNum == ".top216"} {set ResizeFlag "false" }
if {$WidgetNum == ".top236"} {set ResizeFlag "false" }
if {$WidgetNum == ".top242"} {set ResizeFlag "false" }
if {$WidgetNum == ".top255"} {set ResizeFlag "false" }
if {$WidgetNum == ".top336"} {set ResizeFlag "false" }
if {$WidgetNum == ".top338"} {set ResizeFlag "false" }
if {$WidgetNum == ".top344"} {set ResizeFlag "false" }
if {$WidgetNum == ".top345"} {set ResizeFlag "false" }
if {$WidgetNum == ".top377"} {set ResizeFlag "false" }
if {$WidgetNum == ".top387"} {set ResizeFlag "false" }
if {$WidgetNum == ".top388"} {set ResizeFlag "false" }
if {$WidgetNum == ".top399"} {set ResizeFlag "false" }
if {$WidgetNum == ".top401"} {set ResizeFlag "false" }
if {$WidgetNum == ".top402"} {set ResizeFlag "false" }
if {$WidgetNum == ".top419"} {set ResizeFlag "false" }
if {$WidgetNum == ".top420"} {set ResizeFlag "false" }
if {$WidgetNum == ".top421"} {set ResizeFlag "false" }
if {$WidgetNum == ".top422"} {set ResizeFlag "false" }
if {$WidgetNum == ".top423"} {set ResizeFlag "false" }
if {$WidgetNum == ".top424"} {set ResizeFlag "false" }
if {$WidgetNum == ".top425"} {set ResizeFlag "false" }
if {$WidgetNum == ".top448"} {set ResizeFlag "false" }
if {$WidgetNum == ".top530"} {set ResizeFlag "false" }
if {$WidgetNum == ".top401tomo"} {set ResizeFlag "false" }

if {$PlatForm == "windows"} {
    if {$ResizeFlag == "true" } {
        if {$ScreenRatio > 1.6} {
            set RatioScreenRatio [expr ($ScreenRatio / 1.6)]
            set geowidgetwidth [winfo width $WidgetNum]
            set geowidgetheight [winfo height $WidgetNum]
            set newwidgetwidth [expr round($geowidgetwidth * 1.2)]
            set newwidgetheight [expr round($geowidgetheight * $RatioScreenRatio)]
            set positionx [winfo x $WidgetNum]
            set positiony [winfo y $WidgetNum]
            set geometrie $newwidgetwidth; append geometrie "x"; append geometrie $newwidgetheight; append geometrie "+";
            append geometrie $positionx; append geometrie "+"; append geometrie $positiony
            wm geometry $WidgetNum $geometrie; update
            }
        }
    }

wm transient $WidgetNum $WidgetTop

}
#############################################################################
## Procedure:  ConCat

proc ::ConCat {args} {
regsub -all {[      \.]+} $args . args
return $args
}
#############################################################################
## Procedure:  LoadConfig

proc ::LoadConfig {} {
global ConfigFile NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize PolarCase PolarType
global MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global ErrorMessage FatalErrorMessage VarFatalError

set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""

if [file exists $ConfigFile] {
    set f [open $ConfigFile r]
    gets $f tmp
    gets $f NligFullSize
    gets $f tmp
    gets $f tmp
    gets $f NcolFullSize
    gets $f tmp
    gets $f tmp
    gets $f PolarCase
    gets $f tmp
    gets $f tmp
    gets $f PolarType
    close $f
    set config "false"
    if {$PolarCase == "monostatic"} {set config "true"}
    if {$PolarCase == "bistatic"} {set config "true"}
    if {$PolarCase == "intensities"} {set config "true"}
    if {$config == "false"} {
        set VarFatalError ""
        set FatalErrorMessage "WRONG POLAR-CASE ARGUMENT IN CONFIG.TXT"
        .top236.fra34.cpd68 configure -state disable
        Window show .top236
        tkwait variable VarFatalError
        }
    set config "false"
    if {$PolarType == "full"} {set config "true"}
    if {$PolarType == "pp1"} {set config "true"}
    if {$PolarType == "pp2"} {set config "true"}
    if {$PolarType == "pp3"} {set config "true"}
    if {$PolarType == "pp4"} {set config "true"}
    if {$PolarType == "pp5"} {set config "true"}
    if {$PolarType == "pp6"} {set config "true"}
    if {$PolarType == "pp7"} {set config "true"}
    if {$config == "false"} {
        set VarFatalError ""
        set FatalErrorMessage "WRONG POLAR-TYPE ARGUMENT IN CONFIG.TXT"
        .top236.fra34.cpd68 configure -state disable
        Window show .top236
        tkwait variable VarFatalError
        }
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolInit 1
    set NcolEnd $NcolFullSize
    set ErrorMessage ""
    
    set MapInfoConfigFile [file rootname $ConfigFile]
    append MapInfoConfigFile "_mapinfo.txt" 
    if [file exists $MapInfoConfigFile] { MapInfoReadConfig $MapInfoConfigFile }
            
    } else {
    set ErrorMessage "NO CONFIG FILE !"
    set NligInit 0
    set NligEnd 0
    set NcolInit 0
    set NcolEnd 0
    }
}
#############################################################################
## Procedure:  MouseButtonDown

proc ::MouseButtonDown {sx sy} {
global SourceWidth SourceHeight ImageSource
global MouseNlig MouseNcol MouseX1 MouseY1 MouseInitX MouseInitY MouseEndX MouseEndY
global QLMouseNlig QLMouseNcol QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY
global x y obj plot widget rect_color LensX1 LensY1
global BMPView BMPCanvas BMPImage BMPImageOpen BMPViewFileInput BMPLens BMPOverview BMPImageOverview
global BMPWidthSource BMPHeightSource BMPSampleSource BMPSampleOverview
global SizeOverviewWidth SizeOverviewHeight SizeBMPOverview
global AreaTiePointN TrainingAreaTool TrainingAreaToolLine AreaPoint AreaClassN AreaN AreaPointLig AreaPointCol
global WidthBMP HeightBMP BMPWidth BMPHeight  
global BMPImageLens SizeRect SizeLens SizeLensOverview
global RectLensCenter RectLensCenterX RectLensCenterY RectLens MouseRectLens
global ZoomLensBMP ZoomBMP ZoomBMPTmp ZoomBMPSource QLZoom ZoomBMPQL
global MouseActiveButton BMPDropperFlag BMPSubAreaFlag
global VarError ErrorMessage
global LineXLensInit LineYLensInit LineXLens LineYLens plot2 line_color
global Load_Statistics Load_Histograms
global MouseActiveFunctionButton VarStatToolLine
global BMPImage_2 BMPImageOpen_2

if {$MouseActiveButton == "Training"} {

if {$Load_Statistics == 1} {
    if {$MouseActiveFunctionButton == "TrainingStat"} {
        if {$VarStatToolLine == "stop"} {
            ClearStatBmp
            set VarStatToolLine "run"
            }
        }
    }        
if {$Load_Histograms == 1} {
    if {$MouseActiveFunctionButton == "TrainingHisto"} {
        if {$VarStatToolLine == "stop"} {
            ClearHistoBMP
            set VarStatToolLine "run"
            }
        }
    }

set Num1 ""
set Num2 ""
set Num1 [string index $ZoomBMP 0]
set Num2 [string index $ZoomBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 2]
    set Den2 [string index $ZoomBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 3]
    set Den2 [string index $ZoomBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set MouseX1 [expr round($sx*$BMPSample)]
    set MouseY1 [expr round($sy*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set MouseX1 [expr round($sx/$BMPZoom)]
    set MouseY1 [expr round($sy/$BMPZoom)]
    }

if {$MouseX1 < 0} {set MouseX1 0}
if {$MouseX1 > [expr abs($SourceWidth -1)]} {set MouseX1 [expr abs($SourceWidth -1)]}
if {$MouseY1 < 0} {set MouseY1 0}
if {$MouseY1 > [expr abs($SourceHeight -1)]} {set MouseY1 [expr abs($SourceHeight -1)]}

if {$TrainingAreaTool == "rect"} {
    set MouseInitX $MouseX1
    set MouseInitY $MouseY1
    set MouseEndX $MouseX1
    set MouseEndY $MouseY1
    set MouseNlig [expr abs($MouseEndY - $MouseInitY) +1]
    set MouseNcol [expr abs($MouseEndX - $MouseInitX) +1]
    
    if {$BMPSubAreaFlag == "1"} {
        #Clear the Image
        if {$Den >= $Num} {
            set BMPSample $Den
            set Xmax [expr round($BMPWidth * $BMPSample)]
            set Ymax [expr round($BMPHeight * $BMPSample)]
            BMPImage copy ImageSource -from 0 0 $Xmax $Ymax -subsample $BMPSample $BMPSample
            $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
            $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
            }
        if {$Den < $Num} {
            set BMPZoom $Num
            set Xmax [expr round($BMPWidth / $BMPZoom)]
            set Ymax [expr round($BMPHeight / $BMPZoom)]
            BMPImage copy ImageSource -from 0 0 $Xmax $Ymax -zoom $BMPZoom $BMPZoom
            $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
            $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
            }
        }
    set QLMouseInitX [expr ($MouseX1 * $QLZoom)]
    set QLMouseInitY [expr ($MouseY1 * $QLZoom)]
    set QLMouseEndX [expr ($MouseX1 * $QLZoom)]
    set QLMouseEndY [expr ($MouseY1 * $QLZoom)]
    set QLMouseNlig [expr abs($QLMouseEndY - $QLMouseInitY) +1]
    set QLMouseNcol [expr abs($QLMouseEndX - $QLMouseInitX) +1]

    set x $sx
    set y $sy
    set obj [$widget($BMPCanvas) create rectangle $x $y $x $y -outline $rect_color -width 2 ]
    }


if {$TrainingAreaTool == "line"} {
    if {$AreaTiePointN == ""} {
        set MouseInitX $MouseX1
        set MouseInitY $MouseY1
        set MouseEndX $MouseX1
        set MouseEndY $MouseY1
        set AreaTiePointN 1
        } else {
        set MouseInitX $MouseEndX
        set MouseInitY $MouseEndY
        incr AreaTiePointN
        } 
    set Argument [expr (10000*$AreaClassN + 100*$AreaN + $AreaTiePointN)]
    set AreaPointLig($Argument) $MouseInitY
    set AreaPointCol($Argument) $MouseInitX
    set Argument [expr (100*$AreaClassN + $AreaN)]
    set AreaPoint($Argument) $AreaTiePointN

    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }

    if {$Den >= $Num} {
        set BMPSample $Den
        set x [expr round($MouseInitX / $BMPSample)]
        set y [expr round($MouseInitY / $BMPSample)]
        }
    if {$Den < $Num} {
        set BMPZoom $Num
        set x [expr round($MouseInitX * $BMPZoom)]
        set y [expr round($MouseInitY * $BMPZoom)]
        }
    set obj [$widget($BMPCanvas) create line $x $y $x $y -fill $rect_color -width 2 ]
    set TrainingAreaToolLine "true"
    }
}

if {$MouseActiveButton == "Dropper"} { set BMPDropperFlag 1 }
    
if {$MouseActiveButton == "Zoom"} {
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
    
    if {$Num >= $Den} {
        set MemorySize [expr ($Num + 1) * $SourceWidth * $SourceHeight]
        } else {
        set MemorySize [expr  $SourceWidth * $SourceHeight / ($Den - 1)]
        }
    if {$MemorySize <= 10000000} {
        if {$Num >= $Den} {
            set BMPZoom [expr $Num +1]
            if {$BMPZoom > 99} {
                #warning
                set BMPZoom 99
                } else {
                #process
                set ZoomBMP "$BMPZoom:1"
                set QLZoomQL [expr ($BMPZoom * $QLZoom)]
                set ZoomBMPQL "$QLZoomQL:1"
                set BMPWidth [expr round($SourceWidth * $BMPZoom)]
                set BMPHeight [expr round($SourceHeight * $BMPZoom)]
        
                set BMPView ""
                if {$BMPWidth > $WidthBMP} {
                    append BMPView "VIEWBMP"
                    set BMPCanvas "CANVASBMP"
                    }
                if {$BMPHeight > $HeightBMP} {
                    append BMPView "VIEWBMP"
                    set BMPCanvas "CANVASBMP"
                    }
                if {$BMPView == "VIEWBMPVIEWBMP" } {
                    set BMPView "VIEWBMP"
                    set BMPCanvas "CANVASBMP"
                    }
                if {$BMPView == ""} {
                    set BMPView "VIEWBMP1"
                    set BMPCanvas "CANVASBMP1"
                    }
                    
                Window hide $widget(VIEWBMP); TextEditorRunTrace "Close Window View BMP File" "b"
                Window hide $widget(VIEWBMP1); TextEditorRunTrace "Close Window View BMP1" "b"
                image delete BMPImage
                image create photo BMPImage
                BMPImage blank
                BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -zoom $BMPZoom $BMPZoom
                if {$BMPWidth > $WidthBMP} {set BMPWidth $WidthBMP}
                if {$BMPHeight > $HeightBMP} {set BMPHeight $HeightBMP}
                }
            } else {
            set BMPSample [expr $Den -1]
            set ZoomBMP "1:$BMPSample"
            set QLZoomQL [expr ($BMPSample * $QLZoom)]
            set ZoomBMPQL "1:$QLZoomQL"
            set BMPWidth [expr round($SourceWidth / $BMPSample)]
            set BMPHeight [expr round($SourceHeight / $BMPSample)]
        
            set BMPView ""
            if {$BMPWidth > $WidthBMP} {
                append BMPView "VIEWBMP"
                set BMPCanvas "CANVASBMP"
                }
            if {$BMPHeight > $HeightBMP} {
                append BMPView "VIEWBMP"
                set BMPCanvas "CANVASBMP"
                }
            if {$BMPView == "VIEWBMPVIEWBMP" } {
                set BMPView "VIEWBMP"
                set BMPCanvas "CANVASBMP"
                }
            if {$BMPView == ""} {
                set BMPView "VIEWBMP1"
                set BMPCanvas "CANVASBMP1"
                }
        
            Window hide $widget(VIEWBMP); TextEditorRunTrace "Close Window View BMP File" "b"
            Window hide $widget(VIEWBMP1); TextEditorRunTrace "Close Window View BMP1" "b"
            image delete BMPImage
            image create photo BMPImage
            BMPImage blank
            BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample
            if {$BMPWidth > $WidthBMP} {set BMPWidth $WidthBMP}
            if {$BMPHeight > $HeightBMP} {set BMPHeight $HeightBMP}
            }
        $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
        $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
        $widget($BMPCanvas) configure -scrollregion [$widget($BMPCanvas) bbox all]
        wm title $widget($BMPView) [file tail $BMPViewFileInput]
        set x [winfo x $widget($BMPView)]
        set y [winfo y $widget($BMPView)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget($BMPView) $geometrie; update
        WidgetGeometryLeft $widget($BMPView)
        catch {wm geometry $widget($BMPView) {}}
        Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"
        } else {
        set ErrorMessage "SORRY ! NOT ENOUGH MEMORY TO PROCESS THE ZOOM FUNCTION"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

set config "false"
if {$MouseActiveButton == "Lens"} {set config "true"}
if {$MouseActiveButton == "LensPOLSIG"} {set config "true"}
if {$MouseActiveButton == "LensCALIB"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANE"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {set config "true"}
if {$MouseActiveButton == "LensPOLINSAR"} {set config "true"}
if {$MouseActiveButton == "LensPROFILE"} {set config "true"}
if {$MouseActiveButton == "LensPCT"} {set config "true"}
if {$MouseActiveButton == "LensPTOM"} {set config "true"}
if {$config == "true"} {

if {$MouseRectLens == "Inside"} {
    set RectLensX1New [expr $sx - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensY1New [expr $sy - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensX2New [expr $RectLensX1New + round($SizeRect / $BMPSampleSource)]
    set RectLensY2New [expr $RectLensY1New + round($SizeRect / $BMPSampleSource)]

    set config "true"
    if { $RectLensX1New < 0 } {set config "false"}
    if { $RectLensX1New > $BMPWidthSource } {set config "false"}
    if { $RectLensX2New < 0 } {set config "false"}
    if { $RectLensX2New > $BMPWidthSource } {set config "false"}
    if { $RectLensY1New < 0 } {set config "false"}
    if { $RectLensY1New > $BMPHeightSource } {set config "false"}
    if { $RectLensY2New < 0 } {set config "false"}
    if { $RectLensY2New > $BMPHeightSource } {set config "false"}

    if { "$config" == "true" } {
        set RectLensX1 $RectLensX1New
        set RectLensY1 $RectLensY1New
        set RectLensX2 $RectLensX2New
        set RectLensY2 $RectLensY2New
        $widget(CANVASBMPLENS) dtag RectLensCenter
        $widget(CANVASBMPLENS) create image 0 0 -anchor nw -image BMPImageLens
        set RectLens [$widget(CANVASBMPLENS) create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $widget(CANVASBMPLENS) addtag RectLensCenter withtag $RectLens
        set plot(lastX) $sx
        set plot(lastY) $sy
        if {$MouseActiveButton == "LensPOLSIG"} {
            $widget(CANVASLENSPOLSIG) dtag LineXLensInit
            $widget(CANVASLENSPOLSIG) dtag LineYLensInit
            $widget(CANVASLENSPOLSIG) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPOLSIG) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPOLSIG) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPOLSIG) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPOLSIG) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensPCT"} {
            $widget(CANVASLENSPCT) dtag LineXLensInit
            $widget(CANVASLENSPCT) dtag LineYLensInit
            $widget(CANVASLENSPCT) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPCT) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPCT) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPCT) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPCT) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensPOLINSAR"} {
            $widget(CANVASLENSPOLINSARIN) create image 0 0 -anchor nw -image BMPLens

            RAZ_PolInSARDataAnalysis
            load_bmp_file_2 "GUI/Images/MireTV.bmp" $widget(CANVASPOLINSAROUT)
            }        
        if {$MouseActiveButton == "LensCALIB"} {
            $widget(CANVASLENSCALIB) dtag LineXLensInit
            $widget(CANVASLENSCALIB) dtag LineYLensInit
            $widget(CANVASLENSCALIB) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSCALIB) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSCALIB) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSCALIB) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSCALIB) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensPROFILE"} {
            $widget(CANVASLENSPROFILE) dtag LineXLensInit
            $widget(CANVASLENSPROFILE) dtag LineYLensInit
            $widget(CANVASLENSPROFILE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPROFILE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPROFILE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPROFILE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPROFILE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensCMPLXPLANE"} {
            $widget(CANVASLENSCMPLXPLANE) dtag LineXLensInit
            $widget(CANVASLENSCMPLXPLANE) dtag LineYLensInit
            $widget(CANVASLENSCMPLXPLANE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSCMPLXPLANE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSCMPLXPLANE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSCMPLXPLANE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSCMPLXPLANE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensCMPLXPLANEPP"} {
            $widget(CANVASLENSCMPLXPLANEPP) dtag LineXLensInit
            $widget(CANVASLENSCMPLXPLANEPP) dtag LineYLensInit
            $widget(CANVASLENSCMPLXPLANEPP) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSCMPLXPLANEPP) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSCMPLXPLANEPP) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSCMPLXPLANEPP) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSCMPLXPLANEPP) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        if {$MouseActiveButton == "LensPTOM"} {
            $widget(CANVASLENSPTOM) dtag LineXLensInit
            $widget(CANVASLENSPTOM) dtag LineYLensInit
            $widget(CANVASLENSPTOM) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPTOM) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPTOM) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPTOM) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPTOM) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }        
        }
    }

if {$MouseRectLens == "Outside"} {
        
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
     if {$Num >= $Den} {
        set BMPZoom [expr $Num +1]
        if {$BMPZoom > 99} {
            #warning
            set BMPZoom 99
            } else {
            #process
            set ZoomLensBMPNew "$BMPZoom:1"
            set SizeRectNew [expr round($SizeLens / $BMPZoom)]
            }
        } else {
        set BMPSample [expr $Den -1]
        set ZoomLensBMPNew "1:$BMPSample"
        set SizeRectNew [expr round($SizeLens * $BMPSample)]
        }
    set RectLensX1New [expr [lindex $RectLensCenter 0] - round($SizeRectNew / 2 / $BMPSampleSource)]
    set RectLensY1New [expr [lindex $RectLensCenter 1] - round($SizeRectNew / 2 / $BMPSampleSource)]
    set RectLensX2New [expr $RectLensX1New + round($SizeRectNew / $BMPSampleSource)]
    set RectLensY2New [expr $RectLensY1New + round($SizeRectNew / $BMPSampleSource)]

    set config "true"
    if { $RectLensX1New < 0 } {set config "false"}
    if { $RectLensX1New > $BMPWidthSource } {set config "false"}
    if { $RectLensX2New < 0 } {set config "false"}
    if { $RectLensX2New > $BMPWidthSource } {set config "false"}
    if { $RectLensY1New < 0 } {set config "false"}
    if { $RectLensY1New > $BMPHeightSource } {set config "false"}
    if { $RectLensY2New < 0 } {set config "false"}
    if { $RectLensY2New > $BMPHeightSource } {set config "false"}
    
    if { "$config" == "true" } {
        set RectLensX1 $RectLensX1New
        set RectLensY1 $RectLensY1New
        set RectLensX2 $RectLensX2New
        set RectLensY2 $RectLensY2New
        set SizeRect $SizeRectNew
        set ZoomLensBMP $ZoomLensBMPNew
        $widget(CANVASBMPLENS) dtag RectLensCenter
        $widget(CANVASBMPLENS) create image 0 0 -anchor nw -image BMPImageLens
        if {$MouseActiveButton == "Lens"} {
            set BMPTitleLens "Zoom "
            append BMPTitleLens $ZoomLensBMP
            wm title $widget(VIEWLENS) [file tail $BMPTitleLens]
            }
        set RectLens [$widget(CANVASBMPLENS) create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $widget(CANVASBMPLENS) addtag RectLensCenter withtag $RectLens
    
        set LensX1 [expr round($RectLensX1*$BMPSampleSource)]
        set LensY1 [expr round($RectLensY1*$BMPSampleSource)]
        
        set Num1 ""
        set Num2 ""
        set Num1 [string index $ZoomLensBMP 0]
        set Num2 [string index $ZoomLensBMP 1]
        if {$Num2 == ":"} {
            set Num $Num1
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 2]
            set Den2 [string index $ZoomLensBMP 3]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            } else {
            set Num [expr 10*$Num1 + $Num2]
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 3]
            set Den2 [string index $ZoomLensBMP 4]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            }

        if {$Den >= $Num} {
            set BMPSample $Den
            set LensSize [expr round($SizeLens * $BMPSample)]
            set LensX2 [expr $LensX1 + $LensSize]
            set LensY2 [expr $LensY1 + $LensSize]
            BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -subsample $BMPSample $BMPSample
            set LensSize [expr round($LensSize / $BMPSample)]
            }
        if {$Den < $Num} {
            set BMPZoom $Num
            set LensSize [expr round($SizeLens / $BMPZoom)]
            set LensX2 [expr $LensX1 + $LensSize]
            set LensY2 [expr $LensY1 + $LensSize]
            BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -zoom $BMPZoom $BMPZoom
            set LensSize [expr round($LensSize * $BMPZoom)]
            }
        if {$MouseActiveButton == "Lens"} {
            $widget(CANVASLENS) configure -width $LensSize -height $LensSize
            $widget(CANVASLENS) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensPOLSIG"} {
            $widget(CANVASLENSPOLSIG) dtag LineXLensInit
            $widget(CANVASLENSPOLSIG) dtag LineYLensInit
            $widget(CANVASLENSPOLSIG) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPOLSIG) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPOLSIG) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPOLSIG) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPOLSIG) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPOLSIG) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensPCT"} {
            $widget(CANVASLENSPCT) dtag LineXLensInit
            $widget(CANVASLENSPCT) dtag LineYLensInit
            $widget(CANVASLENSPCT) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPCT) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPCT) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPCT) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPCT) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPCT) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensPOLINSAR"} {
            $widget(CANVASLENSPOLINSARIN) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPOLINSARIN) create image 0 0 -anchor nw -image BMPLens

            RAZ_PolInSARDataAnalysis
            load_bmp_file_2 "GUI/Images/MireTV.bmp" $widget(CANVASPOLINSAROUT)
            }
        if {$MouseActiveButton == "LensCALIB"} {
            $widget(CANVASLENSCALIB) dtag LineXLensInit
            $widget(CANVASLENSCALIB) dtag LineYLensInit
            $widget(CANVASLENSCALIB) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSCALIB) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSCALIB) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSCALIB) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSCALIB) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSCALIB) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensCMPLXPLANE"} {
            $widget(CANVASLENSCMPLXPLANE) dtag LineXLensInit
            $widget(CANVASLENSCMPLXPLANE) dtag LineYLensInit
            $widget(CANVASLENSCMPLXPLANE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSCMPLXPLANE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSCMPLXPLANE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSCMPLXPLANE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSCMPLXPLANE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSCMPLXPLANE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensCMPLXPLANEPP"} {
            $widget(CANVASLENSCMPLXPLANEPP) dtag LineXLensInit
            $widget(CANVASLENSCMPLXPLANEPP) dtag LineYLensInit
            $widget(CANVASLENSCMPLXPLANEPP) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSCMPLXPLANEPP) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSCMPLXPLANEPP) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSCMPLXPLANEPP) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSCMPLXPLANEPP) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSCMPLXPLANEPP) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANE) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANE) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANE) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANEPP) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineXLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) dtag LineYLensInit
            $widget(CANVASLENSLOCICMPLXPLANEPP) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANEPP) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSLOCICMPLXPLANEPP) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSLOCICMPLXPLANEPP) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        if {$MouseActiveButton == "LensPTOM"} {
            $widget(CANVASLENSPTOM) dtag LineXLensInit
            $widget(CANVASLENSPTOM) dtag LineYLensInit
            $widget(CANVASLENSPTOM) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPTOM) create image 0 0 -anchor nw -image BMPLens
            set LineXLensInit {0 0}
            set LineYLensInit {0 0}
            set LineXLens [$widget(CANVASLENSPTOM) create line 0 0 0 $SizeLens -fill $line_color -width 2]
            set LineYLens [$widget(CANVASLENSPTOM) create line 0 0 $SizeLens 0 -fill $line_color -width 2]
            $widget(CANVASLENSPTOM) addtag LineXLensInit withtag $LineXLens
            $widget(CANVASLENSPTOM) addtag LineYLensInit withtag $LineYLens
            set plot2(lastX) 0
            set plot2(lastY) 0        
            }
        }
    }
}

if {$MouseActiveButton == "Overview"} {

if {$MouseRectLens == "Inside"} {
    set RectLensX1New [expr $sx - round($SizeRect / 2 / $BMPSampleOverview)]
    set RectLensY1New [expr $sy - round($SizeRect / 2 / $BMPSampleOverview)]
    set RectLensX2New [expr $RectLensX1New + round($SizeRect / $BMPSampleOverview)]
    set RectLensY2New [expr $RectLensY1New + round($SizeRect / $BMPSampleOverview)]

    if { $RectLensX1New < 0 } {set RectLensX1New 0}
    if { $RectLensX1New > $SizeOverviewWidth } {set RectLensX1New $SizeOverviewWidth}
    if { $RectLensX2New < 0 } {set RectLensX2New 0}
    if { $RectLensX2New > $SizeOverviewWidth } {set RectLensX2New $SizeOverviewWidth}
    if { $RectLensY1New < 0 } {set RectLensY1New 0}
    if { $RectLensY1New > $SizeOverviewHeight } {set RectLensY1New $SizeOverviewHeight}
    if { $RectLensY2New < 0 } {set RectLensY2New 0}
    if { $RectLensY2New > $SizeOverviewHeight } {set RectLensY2New $SizeOverviewHeight}

    set RectLensX1 $RectLensX1New
    set RectLensY1 $RectLensY1New
    set RectLensX2 $RectLensX2New
    set RectLensY2 $RectLensY2New
    $widget(CANVASOVERVIEW) dtag RectLensCenter
    $widget(CANVASOVERVIEW) create image 0 0 -anchor nw -image BMPOverview
    set RectLens [$widget(CANVASOVERVIEW) create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
    $widget(CANVASOVERVIEW) addtag RectLensCenter withtag $RectLens
    set plot(lastX) $sx
    set plot(lastY) $sy
    }

if {$MouseRectLens == "Outside"} {
        
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
    set BMPZoom [expr $Num +1]
    if {$BMPZoom > 99} {
       #warning
       set BMPZoom 99
       set ZoomBMPNew $ZoomBMP
       } else {
       #process
       set ZoomBMPNew "$BMPZoom:1"
       }
    set SizeLensOverviewNew $SizeBMPOverview
    if {[expr round($SourceWidth * $BMPZoom)] <= $SizeLensOverviewNew} {set SizeLensOverviewNew [expr round($SourceWidth * $BMPZoom)]}
    if {[expr round($SourceHeight * $BMPZoom)] <= $SizeLensOverviewNew} {set SizeLensOverviewNew [expr round($SourceHeight * $BMPZoom)]}
    set SizeRectNew [expr round($SizeLensOverviewNew / $BMPZoom)]
               
    set RectLensX1New [expr [lindex $RectLensCenter 0] - round($SizeRectNew / 2 / $BMPSampleOverview)]
    set RectLensY1New [expr [lindex $RectLensCenter 1] - round($SizeRectNew / 2 / $BMPSampleOverview)]
    set RectLensX2New [expr $RectLensX1New + round($SizeRectNew / $BMPSampleOverview)]
    set RectLensY2New [expr $RectLensY1New + round($SizeRectNew / $BMPSampleOverview)]

    set config "true"
    if { $RectLensX1New < 0 } {set config "false"}
    if { $RectLensX1New > $SizeOverviewWidth } {set config "false"}
    if { $RectLensX2New < 0 } {set config "false"}
    if { $RectLensX2New > $SizeOverviewWidth } {set config "false"}
    if { $RectLensY1New < 0 } {set config "false"}
    if { $RectLensY1New > $SizeOverviewHeight } {set config "false"}
    if { $RectLensY2New < 0 } {set config "false"}
    if { $RectLensY2New > $SizeOverviewHeight } {set config "false"}

    if { "$config" == "true" } {
        set RectLensX1 $RectLensX1New
        set RectLensY1 $RectLensY1New
        set RectLensX2 $RectLensX2New
        set RectLensY2 $RectLensY2New
        set SizeRect $SizeRectNew
        set ZoomBMP $ZoomBMPNew
        set SizeLensOverview $SizeLensOverviewNew
        $widget(CANVASOVERVIEW) dtag RectLensCenter
        $widget(CANVASOVERVIEW) create image 0 0 -anchor nw -image BMPOverview
        set RectLens [$widget(CANVASOVERVIEW) create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $widget(CANVASOVERVIEW) addtag RectLensCenter withtag $RectLens
    
        set LensX1 [expr round($RectLensX1*$BMPSampleOverview)]
        set LensY1 [expr round($RectLensY1*$BMPSampleOverview)]
        set LensX2 [expr $LensX1 + $SizeRect]
        set LensY2 [expr $LensY1 + $SizeRect]
        BMPImageOverview blank
        BMPImageOverview copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -zoom $BMPZoom $BMPZoom
        $widget(CANVASBMPOVERVIEW) configure -width $SizeLensOverview -height $SizeLensOverview
        $widget(CANVASBMPOVERVIEW) create image 0 0 -anchor nw -image BMPImageOverview
        catch {wm geometry $widget(VIEWBMPOVERVIEW) {}} 
        wm title $widget(VIEWBMPOVERVIEW) [file tail $BMPViewFileInput]
        }
    }
}
}
#############################################################################
## Procedure:  MouseButtonMotion

proc ::MouseButtonMotion {nx ny} {
global SourceWidth SourceHeight
global x y obj widget
global BMPMouseX BMPMouseY MouseInitX MouseInitY MouseEndX MouseEndY MouseNlig MouseNcol
global QLBMPMouseX QLBMPMouseY QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol
global ZoomBMP BMPView BMPCanvas ColorNumber ZoomBMPQL QLZoom
global TrainingAreaTool TrainingAreaToolLine
global MouseActiveButton BMPDropperFlag MouseRectLens

if {$MouseActiveButton == "Training"} {
    if {$TrainingAreaTool == "rect"} {
        set Num1 ""
        set Num2 ""
        set Num1 [string index $ZoomBMP 0]
        set Num2 [string index $ZoomBMP 1]
        if {$Num2 == ":"} {
            set Num $Num1
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomBMP 2]
            set Den2 [string index $ZoomBMP 3]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            } else {
            set Num [expr 10*$Num1 + $Num2]
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomBMP 3]
            set Den2 [string index $ZoomBMP 4]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            }

        if {$Den >= $Num} {
            set BMPSample $Den
            set BMPMouseX [expr round($nx*$BMPSample)]
            set BMPMouseY [expr round($ny*$BMPSample)]
            }
        if {$Den < $Num} {
            set BMPZoom $Num
            set BMPMouseX [expr round($nx/$BMPZoom)]
            set BMPMouseY [expr round($ny/$BMPZoom)]
            }

        if {$BMPMouseX < 0} {set BMPMouseX 0}
        if {$BMPMouseX > [expr abs($SourceWidth -1)]} {set BMPMouseX [expr abs($SourceWidth -1)]}
        if {$BMPMouseY < 0} {set BMPMouseY 0}
        if {$BMPMouseY > [expr abs($SourceHeight -1)]} {set BMPMouseY [expr abs($SourceHeight -1)]}
        
        if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }
        
        set MouseEndX $BMPMouseX
        set MouseEndY $BMPMouseY
        set MouseNlig [expr abs($MouseEndY - $MouseInitY) +1]
        set MouseNcol [expr abs($MouseEndX - $MouseInitX) +1]

        set QLBMPMouseX [expr ($BMPMouseX * $QLZoom)]
        set QLBMPMouseY [expr ($BMPMouseY * $QLZoom)]
        set QLMouseEndX $QLBMPMouseX
        set QLMouseEndY $QLBMPMouseY
        set QLMouseNlig [expr abs($QLMouseEndY - $QLMouseInitY) +1]
        set QLMouseNcol [expr abs($QLMouseEndX - $QLMouseInitX) +1]

        $widget($BMPCanvas) coords $obj $x $y $nx $ny
        }
    if {$TrainingAreaTool == "line"} {
        if {$TrainingAreaToolLine == "true"} {
            set MouseEndX $BMPMouseX
            set MouseEndY $BMPMouseY
            if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }            
            $widget($BMPCanvas) coords $obj $x $y $nx $ny
            }
        }
    }
}
#############################################################################
## Procedure:  MouseButtonRelease

proc ::MouseButtonRelease {nx ny} {
global SourceWidth SourceHeight
global x y
global MouseX1 MouseY1 MouseInitX MouseInitY MouseEndX MouseEndY MouseNlig MouseNcol
global QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol
global ZoomBMP QLZoom
global BMPSubAreaFlag RectLensCenter
global TrainingAreaTool AreaPoint AreaClassN AreaN AreaPointLig AreaPointCol
global MouseActiveButton BMPDropperFlag MouseRectLens
global Load_Statistics Load_Histograms
global MouseActiveFunctionButton VarStatToolLine

set config "false"
if {$MouseActiveButton == "Lens"} {set config "true"}
if {$MouseActiveButton == "LensPOLSIG"} {set config "true"}
if {$MouseActiveButton == "LensPCT"} {set config "true"}
if {$MouseActiveButton == "LensPOLINSAR"} {set config "true"}
if {$MouseActiveButton == "LensCALIB"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANE"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {set config "true"}
if {$MouseActiveButton == "LensPROFILE"} {set config "true"}
if {$MouseActiveButton == "LensPTOM"} {set config "true"}
if {$config == "true"} {
    if {$MouseRectLens == "Inside"} {
        #Rem: .top73.can81 = CANVASBMPLENS Widget
        .top73.can81 dtag RectLensCenter
        }
    }        

if {$MouseActiveButton == "Overview"} {
    if {$MouseRectLens == "Inside"} {
        #Rem: .top73.can81 = CANVASOVERVIEW Widget
        .top216.can81 dtag RectLensCenter
        }
    }        

if {$MouseActiveButton == "Training"} {

    if {$Load_Statistics == 1} {
        if {$MouseActiveFunctionButton == "TrainingStat"} {
            if {$VarStatToolLine == "run"} {
                if {$TrainingAreaTool == "rect"} {set VarStatToolLine "stop"}
                }
            }
        }
    if {$Load_Histograms == 1} {
        if {$MouseActiveFunctionButton == "TrainingHisto"} {
            if {$VarStatToolLine == "run"} {
                if {$TrainingAreaTool == "rect"} {set VarStatToolLine "stop"}
                }
            }
        }

set Num1 ""
set Num2 ""
set Num1 [string index $ZoomBMP 0]
set Num2 [string index $ZoomBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 2]
    set Den2 [string index $ZoomBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 3]
    set Den2 [string index $ZoomBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set MouseX2 [expr round($nx*$BMPSample)]
    set MouseY2 [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set MouseX2 [expr round($nx/$BMPZoom)]
    set MouseY2 [expr round($ny/$BMPZoom)]
    }

if {$MouseX2 < 0} {set MouseX2 0}
if {$MouseX2 > [expr abs($SourceWidth -1)]} {set MouseX2 [expr abs($SourceWidth -1)]}
if {$MouseY2 < 0} {set MouseY2 0}
if {$MouseY2 > [expr abs($SourceHeight -1)]} {set MouseY2 [expr abs($SourceHeight -1)]}

if {$TrainingAreaTool == "line"} {
    set MouseEndX $MouseX2
    set MouseEndY $MouseY2
    }

if {$TrainingAreaTool == "rect"} {
if {$MouseX2 >= $MouseX1} {
    if {$MouseY2 >= $MouseY1} {
        set MouseInitX $MouseX1
        set MouseInitY $MouseY1
        set MouseEndX $MouseX2
        set MouseEndY $MouseY2
        set QLMouseInitX [expr ($MouseX1 * $QLZoom)]
        set QLMouseInitY [expr ($MouseY1 * $QLZoom)]
        set QLMouseEndX [expr ($MouseX2 * $QLZoom)]
        set QLMouseEndY [expr ($MouseY2 * $QLZoom)]
        } else {
        set MouseInitX $MouseX1
        set MouseInitY $MouseY2
        set MouseEndX $MouseX2
        set MouseEndY $MouseY1
        set QLMouseInitX [expr ($MouseX1 * $QLZoom)]
        set QLMouseInitY [expr ($MouseY2 * $QLZoom)]
        set QLMouseEndX [expr ($MouseX2 * $QLZoom)]
        set QLMouseEndY [expr ($MouseY1 * $QLZoom)]
        } 
    } else {
    if {$MouseY2 >= $MouseY1} {
        set MouseInitX $MouseX2
        set MouseInitY $MouseY1
        set MouseEndX $MouseX1
        set MouseEndY $MouseY2
        set QLMouseInitX [expr ($MouseX2 * $QLZoom)]
        set QLMouseInitY [expr ($MouseY1 * $QLZoom)]
        set QLMouseEndX [expr ($MouseX1 * $QLZoom)]
        set QLMouseEndY [expr ($MouseY2 * $QLZoom)]
        } else {
        set MouseInitX $MouseX2
        set MouseInitY $MouseY2
        set MouseEndX $MouseX1
        set MouseEndY $MouseY1
        set QLMouseInitX [expr ($MouseX2 * $QLZoom)]
        set QLMouseInitY [expr ($MouseY2 * $QLZoom)]
        set QLMouseEndX [expr ($MouseX1 * $QLZoom)]
        set QLMouseEndY [expr ($MouseY1 * $QLZoom)]
        } 
    }

set MouseNlig [expr abs($MouseEndY - $MouseInitY) +1]
set MouseNcol [expr abs($MouseEndX - $MouseInitX) +1]
set QLMouseNlig [expr abs($QLMouseEndY - $QLMouseInitY) +1]
set QLMouseNcol [expr abs($QLMouseEndX - $QLMouseInitX) +1]

#Not used in the SubArea functionality
if {$BMPSubAreaFlag == 0} {
    set Argument [expr (100*$AreaClassN + $AreaN)]
    set AreaPoint($Argument) 4
    set Argument [expr (10000*$AreaClassN + 100*$AreaN + 1)]
    set AreaPointLig($Argument) $MouseInitY
    set AreaPointCol($Argument) $MouseInitX
    set Argument [expr (10000*$AreaClassN + 100*$AreaN + 2)]
    set AreaPointLig($Argument) $MouseEndY
    set AreaPointCol($Argument) $MouseInitX
    set Argument [expr (10000*$AreaClassN + 100*$AreaN + 3)]
    set AreaPointLig($Argument) $MouseEndY
    set AreaPointCol($Argument) $MouseEndX
    set Argument [expr (10000*$AreaClassN + 100*$AreaN + 4)]
    set AreaPointLig($Argument) $MouseInitY
    set AreaPointCol($Argument) $MouseEndX
    }
}    
}
}
#############################################################################
## Procedure:  MouseButtonRightDown

proc ::MouseButtonRightDown {} {
global SourceWidth SourceHeight ImageSource
global MouseNlig MouseNcol MouseX1 MouseY1 MouseInitX MouseInitY MouseEndX MouseEndY
global QLMouseNlig QLMouseNcol QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY
global x y obj plot widget rect_color LensX1 LensY1
global BMPView BMPCanvas BMPImage BMPImageOpen BMPViewFileInput BMPLens BMPOverview BMPImageOverview
global BMPWidthSource BMPHeightSource BMPSampleSource BMPSampleOverview
global SizeOverviewWidth SizeOverviewHeight SizeBMPOverview
global AreaTiePointN TrainingAreaTool TrainingAreaToolLine AreaPoint AreaClassN AreaN AreaPointLig AreaPointCol
global WidthBMP HeightBMP BMPWidth BMPHeight  
global BMPImageLens SizeRect SizeLens SizeLensOverview
global RectLensCenter RectLensCenterX RectLensCenterY RectLens MouseRectLens
global ZoomLensBMP ZoomBMP ZoomBMPTmp ZoomBMPSource QLZoom ZoomBMPQL
global MouseActiveButton BMPDropperFlag BMPSubAreaFlag
global VarError ErrorMessage
global Load_Statistics Load_Histograms
global MouseActiveFunctionButton VarStatToolLine
global BMPImage_2 BMPImageOpen_2

if {$MouseActiveButton == "Training"} {

    if {$Load_Statistics == 1} {
        if {$MouseActiveFunctionButton == "TrainingStat"} {
            if {$VarStatToolLine == "run"} {
                if {$TrainingAreaTool == "line"} {set VarStatToolLine "stop"}
                }
            }
        }
    if {$Load_Histograms == 1} {
        if {$MouseActiveFunctionButton == "TrainingHisto"} {
            if {$VarStatToolLine == "run"} {
                if {$TrainingAreaTool == "line"} {set VarStatToolLine "stop"}
                }
            }
        }

    if {$TrainingAreaTool == "line"} {
        if {$TrainingAreaToolLine == "true"} {
            #incr AreaTiePointN
            #set Argument [expr (10000*$AreaClassN + 100*$AreaN + $AreaTiePointN)]
            #set AreaPointLig($Argument) $MouseEndY
            #set AreaPointCol($Argument) $MouseEndX
            #set Argument [expr (100*$AreaClassN + $AreaN)]
            #set AreaPoint($Argument) $AreaTiePointN
        
            set Num1 ""
            set Num2 ""
            set Num1 [string index $ZoomBMP 0]
            set Num2 [string index $ZoomBMP 1]
            if {$Num2 == ":"} {
                set Num $Num1
                set Den1 ""
                set Den2 ""
                set Den1 [string index $ZoomBMP 2]
                set Den2 [string index $ZoomBMP 3]
                if {$Den2 == ""} {
                    set Den $Den1
                    } else {
                    set Den [expr 10*$Den1 + $Den2]
                    }
                } else {
                set Num [expr 10*$Num1 + $Num2]
                set Den1 ""
                set Den2 ""
                set Den1 [string index $ZoomBMP 3]
                set Den2 [string index $ZoomBMP 4]
                if {$Den2 == ""} {
                    set Den $Den1
                    } else {
                    set Den [expr 10*$Den1 + $Den2]
                    }
                }

            if {$Den >= $Num} {
                set BMPSample $Den
                set Argument [expr (10000*$AreaClassN + 100*$AreaN + $AreaTiePointN)]
                set sx1 [expr round($AreaPointCol($Argument) / $BMPSample)]
                set sy1 [expr round($AreaPointLig($Argument) / $BMPSample)]
                set Argument [expr (10000*$AreaClassN + 100*$AreaN + 1)]
                set sx2 [expr round($AreaPointCol($Argument) / $BMPSample)]
                set sy2 [expr round($AreaPointLig($Argument) / $BMPSample)]
                }
            if {$Den < $Num} {
                set BMPZoom $Num
                set Argument [expr (10000*$AreaClassN + 100*$AreaN + $AreaTiePointN)]
                set sx1 [expr round($AreaPointCol($Argument) * $BMPZoom)]
                set sy1 [expr round($AreaPointLig($Argument) * $BMPZoom)]
                set Argument [expr (10000*$AreaClassN + 100*$AreaN + 1)]
                set sx2 [expr round($AreaPointCol($Argument) * $BMPZoom)]
                set sy2 [expr round($AreaPointLig($Argument) * $BMPZoom)]
                }
            set obj [$widget($BMPCanvas) create line $sx1 $sy1 $sx2 $sy2 -fill $rect_color -width 2 ]
            set AreaTiePointN ""
            set TrainingAreaToolLine "false"
            }
        }
    }
    
if {$MouseActiveButton == "Zoom"} {
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
 
    if {$Num >= $Den} {
        set MemorySize [expr ($Num - 1) * $SourceWidth * $SourceHeight]
        } else {
        set MemorySize [expr  $SourceWidth * $SourceHeight / ($Den + 1)]
        }
    if {$MemorySize <= 10000000} {
        if {$Den >= $Num} {
            set BMPSample [expr $Den +1]
            if {$BMPSample > 99} {
                #warning
                set BMPSample 99
                } else {
                set ZoomBMP "1:$BMPSample"
                set QLZoomQL [expr ($BMPSample * $QLZoom)]
                set ZoomBMPQL "1:$QLZoomQL"
                set BMPWidth [expr round($SourceWidth / $BMPSample)]
                set BMPHeight [expr round($SourceHeight / $BMPSample)]
            
                set BMPView ""
                if {$BMPWidth > $WidthBMP} {
                    append BMPView "VIEWBMP"
                    set BMPCanvas "CANVASBMP"
                    }
                if {$BMPHeight > $HeightBMP} {
                    append BMPView "VIEWBMP"
                    set BMPCanvas "CANVASBMP"
                    }
                if {$BMPView == "VIEWBMPVIEWBMP" } {
                    set BMPView "VIEWBMP"
                    set BMPCanvas "CANVASBMP"
                    }
                if {$BMPView == ""} {
                    set BMPView "VIEWBMP1"
                    set BMPCanvas "CANVASBMP1"
                    }
            
                Window hide $widget(VIEWBMP); TextEditorRunTrace "Close Window View BMP File" "b"
                Window hide $widget(VIEWBMP1); TextEditorRunTrace "Close Window View BMP1" "b"
                image delete BMPImage
                image create photo BMPImage
                BMPImage blank
                BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample
                if {$BMPWidth > $WidthBMP} {set BMPWidth $WidthBMP}
                if {$BMPHeight > $HeightBMP} {set BMPHeight $HeightBMP}
                }
            } else {
            set BMPZoom [expr $Num -1]
            set ZoomBMP "$BMPZoom:1"
            set QLZoomQL [expr ($BMPZoom * $QLZoom)]
            set ZoomBMPQL "$QLZoomQL:1"
            set BMPWidth [expr round($SourceWidth * $BMPZoom)]
            set BMPHeight [expr round($SourceHeight * $BMPZoom)]
    
            set BMPView ""
            if {$BMPWidth > $WidthBMP} {
                append BMPView "VIEWBMP"
                set BMPCanvas "CANVASBMP"
                }
            if {$BMPHeight > $HeightBMP} {
                append BMPView "VIEWBMP"
                set BMPCanvas "CANVASBMP"
                }
            if {$BMPView == "VIEWBMPVIEWBMP" } {
                set BMPView "VIEWBMP"
                set BMPCanvas "CANVASBMP"
                }
            if {$BMPView == ""} {
                set BMPView "VIEWBMP1"
                set BMPCanvas "CANVASBMP1"
                }
                
            Window hide $widget(VIEWBMP); TextEditorRunTrace "Close Window View BMP File" "b"
            Window hide $widget(VIEWBMP1); TextEditorRunTrace "Close Window View BMP1" "b"
            image delete BMPImage
            image create photo BMPImage
            BMPImage blank
            BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -zoom $BMPZoom $BMPZoom
            if {$BMPWidth > $WidthBMP} {set BMPWidth $WidthBMP}
            if {$BMPHeight > $HeightBMP} {set BMPHeight $HeightBMP}
            }
        $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
        $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
        $widget($BMPCanvas) xview moveto 0
        $widget($BMPCanvas) yview moveto 0
        $widget($BMPCanvas) configure -scrollregion [$widget($BMPCanvas) bbox all]
        wm title $widget($BMPView) [file tail $BMPViewFileInput]
        set x [winfo x $widget($BMPView)]
        set y [winfo y $widget($BMPView)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget($BMPView) $geometrie; update
        WidgetGeometryLeft $widget($BMPView)
        catch {wm geometry $widget($BMPView) {}}
        Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"
        } else {
        set ErrorMessage "SORRY ! NOT ENOUGH MEMORY TO PROCESS THE ZOOM FUNCTION"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

set config "false"
if {$MouseActiveButton == "Lens"} {set config "true"}
if {$MouseActiveButton == "LensPOLSIG"} {set config "true"}
if {$MouseActiveButton == "LensPCT"} {set config "true"}
if {$MouseActiveButton == "LensPOLINSAR"} {set config "true"}
if {$MouseActiveButton == "LensCALIB"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANE"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {set config "true"}
if {$MouseActiveButton == "LensPROFILE"} {set config "true"}
if {$MouseActiveButton == "LensPTOM"} {set config "true"}
if {$config == "true"} {
if {$MouseRectLens == "Outside"} {
               
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
     if {$Den >= $Num} {
        set BMPSample [expr $Den +1]
        if {$BMPSample > 99} { 
            #warning
            set BMPSample 99
            } else {
            #process
            set ZoomLensBMPNew "1:$BMPSample"
            set SizeRectNew [expr round($SizeLens * $BMPSample)]                
            }
        } else {
        set BMPZoom [expr $Num -1]
        set ZoomLensBMPNew "$BMPZoom:1"
        set SizeRectNew [expr round($SizeLens / $BMPZoom)]            
        }
    set RectLensX1New [expr [lindex $RectLensCenter 0] - round($SizeRectNew / 2 / $BMPSampleSource)]
    set RectLensY1New [expr [lindex $RectLensCenter 1] - round($SizeRectNew / 2 / $BMPSampleSource)]
    set RectLensX2New [expr $RectLensX1New + round($SizeRectNew / $BMPSampleSource)]
    set RectLensY2New [expr $RectLensY1New + round($SizeRectNew / $BMPSampleSource)]
    set config "true"
    if { $RectLensX1New < 0 } {set config "false"}
    if { $RectLensX1New > $BMPWidthSource } {set config "false"}
    if { $RectLensX2New < 0 } {set config "false"}
    if { $RectLensX2New > $BMPWidthSource } {set config "false"}
    if { $RectLensY1New < 0 } {set config "false"}
    if { $RectLensY1New > $BMPHeightSource } {set config "false"}
    if { $RectLensY2New < 0 } {set config "false"}
    if { $RectLensY2New > $BMPHeightSource } {set config "false"}
   
    if { "$config" == "true" } {
        set RectLensX1 $RectLensX1New
        set RectLensX2 $RectLensX2New
        set RectLensY1 $RectLensY1New
        set RectLensY2 $RectLensY2New
        set SizeRect $SizeRectNew
        set ZoomLensBMP $ZoomLensBMPNew
        $widget(CANVASBMPLENS) dtag $RectLensCenter
        $widget(CANVASBMPLENS) create image 0 0 -anchor nw -image BMPImageLens
        if {$MouseActiveButton == "Lens"} {
            set BMPTitleLens "Zoom "
            append BMPTitleLens $ZoomLensBMP
            wm title $widget(VIEWLENS) [file tail $BMPTitleLens]
            }
        set RectLens [$widget(CANVASBMPLENS) create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $widget(CANVASBMPLENS) addtag RectLensCenter withtag $RectLens

        set LensX1 [expr round($RectLensX1*$BMPSampleSource)]
        set LensY1 [expr round($RectLensY1*$BMPSampleSource)]
    
        set Num1 ""
        set Num2 ""
        set Num1 [string index $ZoomLensBMP 0]
        set Num2 [string index $ZoomLensBMP 1]
        if {$Num2 == ":"} {
            set Num $Num1
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 2]
            set Den2 [string index $ZoomLensBMP 3]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            } else {
            set Num [expr 10*$Num1 + $Num2]
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 3]
            set Den2 [string index $ZoomLensBMP 4]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            }
        if {$Den >= $Num} {
            set BMPSample $Den
            set LensSize [expr round($SizeLens * $BMPSample)]
            set LensX2 [expr $LensX1 + $LensSize]
            set LensY2 [expr $LensY1 + $LensSize]
            BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -subsample $BMPSample $BMPSample
            set LensSize [expr round($LensSize / $BMPSample)]
            }
        if {$Den < $Num} {
            set BMPZoom $Num
            set LensSize [expr round($SizeLens / $BMPZoom)]
            set LensX2 [expr $LensX1 + $LensSize]
            set LensY2 [expr $LensY1 + $LensSize]
            BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -zoom $BMPZoom $BMPZoom
            set LensSize [expr round($LensSize * $BMPZoom)]
            }
        if {$MouseActiveButton == "Lens"} {
            $widget(CANVASLENS) configure -width $LensSize -height $LensSize
            $widget(CANVASLENS) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensPOLSIG"} {
            $widget(CANVASLENSPOLSIG) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPOLSIG) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensPCT"} {
            $widget(CANVASLENSPCT) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPCT) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensPOLINSAR"} {
            $widget(CANVASLENSPOLINSARIN) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPOLINSARIN) itemconfigure current -image BMPLens
            
            RAZ_PolInSARDataAnalysis
            load_bmp_file_2 "GUI/Images/MireTV.bmp" $widget(CANVASPOLINSAROUT)
            }
        if {$MouseActiveButton == "LensCALIB"} {
            $widget(CANVASLENSCALIB) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSCALIB) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensCMPLXPLANE"} {
            $widget(CANVASLENSCMPLXPLANE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSCMPLXPLANE) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensCMPLXPLANEPP"} {
            $widget(CANVASLENSCMPLXPLANEPP) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSCMPLXPLANEPP) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {
            $widget(CANVASLENSLOCICMPLXPLANE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANE) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {
            $widget(CANVASLENSLOCICMPLXPLANE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANE) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {
            $widget(CANVASLENSLOCICMPLXPLANEPP) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANEPP) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {
            $widget(CANVASLENSLOCICMPLXPLANEPP) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSLOCICMPLXPLANEPP) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensPROFILE"} {
            $widget(CANVASLENSPROFILE) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPROFILE) itemconfigure current -image BMPLens
            }
        if {$MouseActiveButton == "LensPTOM"} {
            $widget(CANVASLENSPTOM) configure -width $LensSize -height $LensSize
            $widget(CANVASLENSPTOM) itemconfigure current -image BMPLens
            }
        }
    }
    }

if {$MouseActiveButton == "Dropper"} { set BMPDropperFlag 0 }
        
if {$MouseActiveButton == "Overview"} {

if {$MouseRectLens == "Outside"} {
        
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
    set BMPZoom [expr $Num -1]
    if {$BMPZoom < 1} {
       #warning
       set BMPZoom 1
       set ZoomBMPNew $ZoomBMP
       } else {
       #process
       set ZoomBMPNew "$BMPZoom:1"
       }
    set SizeLensOverviewNew $SizeBMPOverview
    if {[expr round($SourceWidth * $BMPZoom)] <= $SizeLensOverviewNew} {set SizeLensOverviewNew [expr round($SourceWidth * $BMPZoom)]}
    if {[expr round($SourceHeight * $BMPZoom)] <= $SizeLensOverviewNew} {set SizeLensOverviewNew [expr round($SourceHeight * $BMPZoom)]}
    set SizeRectNew [expr round($SizeLensOverviewNew / $BMPZoom)]
               
    set RectLensX1New [expr [lindex $RectLensCenter 0] - round($SizeRectNew / 2 / $BMPSampleOverview)]
    set RectLensY1New [expr [lindex $RectLensCenter 1] - round($SizeRectNew / 2 / $BMPSampleOverview)]
    set RectLensX2New [expr $RectLensX1New + round($SizeRectNew / $BMPSampleOverview)]
    set RectLensY2New [expr $RectLensY1New + round($SizeRectNew / $BMPSampleOverview)]

    set config "true"
    if { $RectLensX1New < 0 } {set config "false"}
    if { $RectLensX1New > $SizeOverviewWidth } {set config "false"}
    if { $RectLensX2New < 0 } {set config "false"}
    if { $RectLensX2New > $SizeOverviewWidth } {set config "false"}
    if { $RectLensY1New < 0 } {set config "false"}
    if { $RectLensY1New > $SizeOverviewHeight } {set config "false"}
    if { $RectLensY2New < 0 } {set config "false"}
    if { $RectLensY2New > $SizeOverviewHeight } {set config "false"}

    if { "$config" == "true" } {
        set RectLensX1 $RectLensX1New
        set RectLensX2 $RectLensX2New
        set RectLensY1 $RectLensY1New
        set RectLensY2 $RectLensY2New
        set SizeRect $SizeRectNew
        set ZoomBMP $ZoomBMPNew
        set SizeLensOverview $SizeLensOverviewNew
        $widget(CANVASOVERVIEW) dtag RectLensCenter
        $widget(CANVASOVERVIEW) create image 0 0 -anchor nw -image BMPOverview
        set RectLens [$widget(CANVASOVERVIEW) create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $widget(CANVASOVERVIEW) addtag RectLensCenter withtag $RectLens
    
        set LensX1 [expr round($RectLensX1*$BMPSampleOverview)]
        set LensY1 [expr round($RectLensY1*$BMPSampleOverview)]
        set LensX2 [expr $LensX1 + $SizeRect]
        set LensY2 [expr $LensY1 + $SizeRect]
        BMPImageOverview blank
        BMPImageOverview copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -zoom $BMPZoom $BMPZoom
        $widget(CANVASBMPOVERVIEW) configure -width $SizeLensOverview -height $SizeLensOverview
        $widget(CANVASBMPOVERVIEW) create image 0 0 -anchor nw -image BMPImageOverview
        catch {wm geometry $widget(VIEWBMPOVERVIEW) {}} 
        wm title $widget(VIEWBMPOVERVIEW) [file tail $BMPViewFileInput]
        }
    }
}    
}
#############################################################################
## Procedure:  MouseMotion

proc ::MouseMotion {nx ny} {
global ImageSource SourceWidth SourceHeight
global x y obj widget LensX1 LensY1 LensX2 LensY2
global BMPMouseX BMPMouseY MouseInitX MouseInitY MouseEndX MouseEndY MouseNlig MouseNcol
global QLBMPMouseX QLBMPMouseY QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol
global ZoomBMP BMPView BMPCanvas ColorNumber QLZoom
global BMPDropperFlag TrainingAreaTool TrainingAreaToolLine
global RectLensCenter RectLensCenterX RectLensCenterY SizeRect BMPSampleSource
global MouseActiveButton MouseRectLens

set Num1 ""
set Num2 ""
set Num1 [string index $ZoomBMP 0]
set Num2 [string index $ZoomBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 2]
    set Den2 [string index $ZoomBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 3]
    set Den2 [string index $ZoomBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set BMPMouseX [expr round($nx*$BMPSample)]
    set BMPMouseY [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set BMPMouseX [expr round($nx/$BMPZoom)]
    set BMPMouseY [expr round($ny/$BMPZoom)]
    }

if {$MouseActiveButton != "Overview"} {
    if {$BMPMouseX < 0} {set BMPMouseX 0}
    if {$BMPMouseX > [expr abs($SourceWidth -1)]} {set BMPMouseX [expr abs($SourceWidth -1)]}
    if {$BMPMouseY < 0} {set BMPMouseY 0}
    if {$BMPMouseY > [expr abs($SourceHeight -1)]} {set BMPMouseY [expr abs($SourceHeight -1)]}

    set QLBMPMouseX [expr ($BMPMouseX * $QLZoom)]
    set QLBMPMouseY [expr ($BMPMouseY * $QLZoom)]
    } else {
    set BMPMouseXX $BMPMouseX
    if {$BMPMouseXX < 0} {set BMPMouseXX 0}
    set BMPMouseXX [expr abs($BMPMouseXX + $LensX1)]
    if {$BMPMouseXX < $LensX1} {set BMPMouseXX "ko"}
    if {$BMPMouseXX > $LensX2} {set BMPMouseXX "ko"}
    #if {$BMPMouseX > [expr abs($SourceWidth -1)]} {set BMPMouseX [expr abs($SourceWidth -1)]}
    
    set BMPMouseYY $BMPMouseY
    if {$BMPMouseYY < 0} {set BMPMouseYY 0}
    set BMPMouseYY [expr abs($BMPMouseYY + $LensY1)]
    if {$BMPMouseYY < $LensY1} {set BMPMouseYY "ko"}
    if {$BMPMouseYY > $LensY2} {set BMPMouseYY "ko"}
    #if {$BMPMouseY > [expr abs($SourceHeight -1)]} {set BMPMouseY [expr abs($SourceHeight -1)]}
    
    if {$BMPMouseXX == "ko"} {
        set BMPMouseX $LensX1; set BMPMouseY $LensY1
        } else {
        if {$BMPMouseYY == "ko"} {
            set BMPMouseX $LensX1; set BMPMouseY $LensY1
            } else {
            set BMPMouseX $BMPMouseXX; set BMPMouseY $BMPMouseYY
            }
        }
    }

if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }

if {$MouseActiveButton == "Training"} {
    if {$TrainingAreaTool == "line"} {
        if {$TrainingAreaToolLine == "true"} {
            set MouseEndX $BMPMouseX
            set MouseEndY $BMPMouseY
            $widget($BMPCanvas) coords $obj $x $y $nx $ny
            }
        }
    }

if {$MouseActiveButton == "Dropper"} {
    if {"$BMPDropperFlag" == 0 } {
        set c0 .top64.cpd90.f.cpd92
        set pixcolor [ImageSource get $BMPMouseX $BMPMouseY]
        set couleur [format #%02x%02x%02x [lindex $pixcolor 0] [lindex $pixcolor 1] [lindex $pixcolor 2]]
        $c0 configure -background $couleur
        if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }
        }
    }        

set config "false"
if {$MouseActiveButton == "Lens"} {set config "true"}
if {$MouseActiveButton == "LensPOLSIG"} {set config "true"}
if {$MouseActiveButton == "LensPCT"} {set config "true"}
if {$MouseActiveButton == "LensPOLINSAR"} {set config "true"}
if {$MouseActiveButton == "LensCALIB"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANE"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {set config "true"}
if {$MouseActiveButton == "LensPROFILE"} {set config "true"}
if {$MouseActiveButton == "LensPTOM"} {set config "true"}
if {$config == "true"} {
    set RectLensX1 [expr [lindex $RectLensCenter 0] - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensY1 [expr [lindex $RectLensCenter 1] - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRect / $BMPSampleSource)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRect / $BMPSampleSource)]
    set MouseRectLens ""
    set RectLensMouse "OK"
    if {[expr ($nx-$RectLensX1)] > 0} {append RectLensMouse "1"}
    if {[expr ($nx-$RectLensX2)] < 0} {append RectLensMouse "2"}
    if {[expr ($ny-$RectLensY1)] > 0} {append RectLensMouse "3"}
    if {[expr ($ny-$RectLensY2)] < 0} {append RectLensMouse "4"}
    #Rem: .top73.can81 = CANVASBMPLENS Widget
    if {$RectLensMouse == "OK1234"} {
        set MouseRectLens "Inside"
        .top73.can81 configure -cursor X_cursor
        } else {
        set MouseRectLens "Outside"
        .top73.can81 configure -cursor arrow
        }
    }
    
}
#############################################################################
## Procedure:  OpenDir

proc ::OpenDir {DirInit Message} {
global DirName OpenDirFile
set OpenDirFile 1
set dirname ""
set dirname [tk_chooseDirectory -initialdir $DirInit -title $Message]
if {"$dirname"!=""} {
    set DirName $dirname
    }
set OpenDirFile 0    
}
#############################################################################
## Procedure:  OpenFile

proc ::OpenFile {DirInit Types Message} {
global FileName OpenDirFile
set OpenDirFile 1
set filename ""
set filename [tk_getOpenFile -initialdir $DirInit -filetypes $Types -title $Message]
if {"$filename"!=""} {
    set FileName $filename
    }
set OpenDirFile 0
    
}
#############################################################################
## Procedure:  PsPprogressBar

proc ::PsPprogressBar {ProgressFile} {
global ProgressLine FunctionAbort

set FunctionAbort "ok"
set FlagStop 0
fconfigure $ProgressFile -buffering line
set ProgLine .top2.fra84.fra66.pro68
set ProgLine2 .top28.pro35
while {$FlagStop == 0} {
    if {$FunctionAbort != "abort"} {
        if {![eof $ProgressFile]} {
            gets $ProgressFile ProgressLine
            set n [expr {$ProgressLine < 0? 0: $ProgressLine > 100? 100: int($ProgressLine)}]
            if {$n < 100} {
                set Red   [expr {$n > 75? 60 - $n * 15 / 25 : 15}]
                set Green [expr {$n < 50? $n * 15 / 50 : 15}]
                set couleur [format #%01x%01x0 $Red $Green]
                $ProgLine configure -color $couleur
                $ProgLine2 configure -color $couleur
                }
            update
            } else {
            set FlagStop 1
            catch "close $ProgressFile"
            }
        } else {
        set FlagStop 2
        catch "close $ProgressFile"
        }
    }
}
#############################################################################
## Procedure:  PsPprogressBarSnap

proc ::PsPprogressBarSnap {ProgressFile} {
global ProgressLine FunctionAbort

set FunctionAbort "ok"
set FlagStop 0
fconfigure $ProgressFile -buffering line
set ProgLine .top2.fra84.fra66.pro68
set ProgLine2 .top28.pro35
while {$FlagStop == 0} {
    if {$FunctionAbort != "abort"} {
        if {![eof $ProgressFile]} {
            gets $ProgressFile ProgressLineTmp
    TextEditorRunTrace "$ProgressLineTmp" "k"
            if {[string first "10%" $ProgressLineTmp] != "-1"} {set ProgressLine "10"}
            if {[string first "20%" $ProgressLineTmp] != "-1"} {set ProgressLine "20"}
            if {[string first "30%" $ProgressLineTmp] != "-1"} {set ProgressLine "30"}
            if {[string first "40%" $ProgressLineTmp] != "-1"} {set ProgressLine "40"}
            if {[string first "50%" $ProgressLineTmp] != "-1"} {set ProgressLine "50"}
            if {[string first "60%" $ProgressLineTmp] != "-1"} {set ProgressLine "60"}
            if {[string first "70%" $ProgressLineTmp] != "-1"} {set ProgressLine "70"}
            if {[string first "80%" $ProgressLineTmp] != "-1"} {set ProgressLine "80"}
            if {[string first "90%" $ProgressLineTmp] != "-1"} {set ProgressLine "90"}
            if {[string first "100%" $ProgressLineTmp] != "-1"} {set ProgressLine "100"}
            set n [expr {$ProgressLine < 0? 0: $ProgressLine > 100? 100: int($ProgressLine)}]
            if {$n < 100} {
                set Red   [expr {$n > 75? 60 - $n * 15 / 25 : 15}]
                set Green [expr {$n < 50? $n * 15 / 50 : 15}]
                set couleur [format #%01x%01x0 $Red $Green]
                $ProgLine configure -color $couleur
                $ProgLine2 configure -color $couleur
                }
            update
            } else {
            set FlagStop 1
            catch "close $ProgressFile"
            }
        } else {
        set FlagStop 2
        catch "close $ProgressFile"
        }
    }
}
#############################################################################
## Procedure:  RectLensMove

proc ::RectLensMove {w x y wz} {
global BMPImageOpen SourceWidth SourceHeight BMPLens ImageSource BMPSampleSource
global ZoomLensBMP BMPSampleSource BMPWidthSource BMPHeightSource
global RectLensCenterX RectLensCenterY RectLensCenter RectLens SizeRect SizeLens
global BMPLensContact BMPLensDeltaX BMPLensDeltaY BMPSampleLens
global plot BMPMouseX BMPMouseY BMPZoomLens
global MouseActiveButton MouseRectLens LensX1 LensY1

set config "false"
if {$MouseActiveButton == "Lens"} {set config "true"}
if {$MouseActiveButton == "LensPOLSIG"} {set config "true"}
if {$MouseActiveButton == "LensPCT"} {set config "true"}
if {$MouseActiveButton == "LensPOLINSAR"} {set config "true"}
if {$MouseActiveButton == "LensCALIB"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANE"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {set config "true"}
if {$MouseActiveButton == "LensPROFILE"} {set config "true"}
if {$MouseActiveButton == "LensPTOM"} {set config "true"}
if {$config == "true"} {
if {$MouseRectLens == "Inside"} {
    set RectLensX1 [expr $x + $BMPLensDeltaX - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensY1 [expr $y + $BMPLensDeltaY - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRect / $BMPSampleSource)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRect / $BMPSampleSource)]

    set config "true"
    if { $RectLensX1 < 0 } {set config "false"}
    if { $RectLensX1 > $BMPWidthSource } {set config "false"}
    if { $RectLensX2 < 0 } {set config "false"}
    if { $RectLensX2 > $BMPWidthSource } {set config "false"}
    if { $RectLensY1 < 0 } {set config "false"}
    if { $RectLensY1 > $BMPHeightSource } {set config "false"}
    if { $RectLensY2 < 0 } {set config "false"}
    if { $RectLensY2 > $BMPHeightSource } {set config "false"}
    
    if { "$config" == "true" } {
        $w move RectLensCenter [expr $x-$plot(lastX)] [expr $y-$plot(lastY)]
        set plot(lastX) $x
        set plot(lastY) $y

        set BMPMouseX [expr round($x*$BMPSampleSource)]
        set BMPMouseY [expr round($y*$BMPSampleSource)]
    
        set RectLensCenterX [expr $RectLensX1 + round($SizeRect / 2 / $BMPSampleSource)]
        set RectLensCenterY [expr $RectLensY1 + round($SizeRect / 2 / $BMPSampleSource)]
        set RectLensCenter {$RectLensCenterX $RectLensCenterY}

        set LensX1 [expr round($RectLensX1 * $BMPSampleSource)]
        set LensY1 [expr round($RectLensY1 * $BMPSampleSource)]
        
        set Num1 ""
        set Num2 ""
        set Num1 [string index $ZoomLensBMP 0]
        set Num2 [string index $ZoomLensBMP 1]
        if {$Num2 == ":"} {
            set Num $Num1
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 2]
            set Den2 [string index $ZoomLensBMP 3]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            } else {
            set Num [expr 10*$Num1 + $Num2]
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 3]
            set Den2 [string index $ZoomLensBMP 4]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            }

        if {$Den >= $Num} {
            set BMPSampleLens $Den
            set LensSize [expr round($SizeLens * $BMPSampleLens)]
            set LensX2 [expr $LensX1 + $LensSize]
            set LensY2 [expr $LensY1 + $LensSize]
            set config "true"
            if { $LensX1 < 0 } {set config "false"}
            if { $LensX1 > $SourceWidth } {set config "false"}
            if { $LensX2 < 0 } {set config "false"}
            if { $LensX2 > $SourceWidth } {set config "false"}
            if { $LensY1 < 0 } {set config "false"}
            if { $LensY1 > $SourceHeight } {set config "false"}
            if { $LensY2 < 0 } {set config "false"}
            if { $LensY2 > $SourceHeight } {set config "false"}
            if { "$config" == "true" } {
                BMPLens blank
                BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -subsample $BMPSampleLens $BMPSampleLens
                set LensSize [expr round($LensSize / $BMPSampleLens)]
                }
            }
        if {$Den < $Num} {
            set BMPZoomLens $Num
            set LensSize [expr round($SizeLens / $BMPZoomLens)]
            set LensX2 [expr $LensX1 + $LensSize]
            set LensY2 [expr $LensY1 + $LensSize]
            set config "true"
            if { $LensX1 < 0 } {set config "false"}
            if { $LensX1 > $SourceWidth } {set config "false"}
            if { $LensX2 < 0 } {set config "false"}
            if { $LensX2 > $SourceWidth } {set config "false"}
            if { $LensY1 < 0 } {set config "false"}
            if { $LensY1 > $SourceHeight } {set config "false"}
            if { $LensY2 < 0 } {set config "false"}
            if { $LensY2 > $SourceHeight } {set config "false"}
            if { "$config" == "true" } {
                BMPLens blank
                BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -zoom $BMPZoomLens $BMPZoomLens
                set LensSize [expr round($LensSize * $BMPZoomLens)]
                }
            }
        $wz configure -width $LensSize -height $LensSize
        $wz itemconfigure current -image BMPLens
        }
    }
}
}
#############################################################################
## Procedure:  TextEditor

proc ::TextEditor {FileText} {
global TextFile
#UTIL
global Load_TextEdit

if {$Load_TextEdit == 1} {

    set TextFile $FileText

    if {$TextFile != ""} {
        set OpenTextFile [open $TextFile]
        set ReadTextFile [read $OpenTextFile]
        .top95.fra97.tex100 delete 1.0 end
        .top95.fra97.tex100 insert end $ReadTextFile
        .top95.fra97.tex100 configure -wrap none
        close $OpenTextFile
        wm title .top95 $TextFile
        }
    WidgetShow .top95
    }
}
#############################################################################
## Procedure:  TextEditorFromWidget

proc ::TextEditorFromWidget {WidgetNum FileText} {
global TextFile
#UTIL
global Load_TextEdit

if {$Load_TextEdit == 1} {

    set TextFile $FileText

    if {$TextFile != ""} {
        set OpenTextFile [open $TextFile]
        set ReadTextFile [read $OpenTextFile]
        .top95.fra97.tex100 delete 1.0 end
        .top95.fra97.tex100 insert end $ReadTextFile
        .top95.fra97.tex100 configure -wrap none
        close $OpenTextFile
        wm title .top95 $TextFile
        }
    WidgetShowFromWidget $WidgetNum .top95
    }
}
#############################################################################
## Procedure:  WriteConfig

proc ::WriteConfig {} {
global ConfigFile FinalNlig FinalNcol PolarCase PolarType

set f [open $ConfigFile w]
puts $f "Nrow"
puts $f $FinalNlig
puts $f "---------"
puts $f "Ncol"
puts $f $FinalNcol
puts $f "---------"
puts $f "PolarCase"
puts $f $PolarCase
puts $f "---------"
puts $f "PolarType"
puts $f $PolarType
close $f

set MapInfoConfigDir [file dirname $ConfigFile]
MapInfoWriteConfig $MapInfoConfigDir
}
#############################################################################
## Procedure:  load_bmp_caracteristics

proc ::load_bmp_caracteristics {bmpfile} {
global SourceWidth SourceHeight BMPWidth BMPHeight WidthBMP HeightBMP ZoomBMP BMPImage BMPImageLens ImageSource BMPView BMPCanvas BMPFrame
global ColorNumber ColorNumberUtil ColorNumberUtilDisplay ColorMapBMP ColorBarBMP RedPalette GreenPalette BluePalette
global BMPMax BMPMin BMPValue
global TMPBmpTmpHeader TMPBmpTmpData TMPBmp24TmpData TMPBmpTmpColormap TMPBmpColorBar TMPColorMapBMP

#read colormap
set ColorMapBMP $TMPColorMapBMP
DeleteFile $ColorMapBMP
set ColorBarBMP $TMPBmpColorBar
DeleteFile $ColorBarBMP

TextEditorRunTrace "Process The Function Soft/bmp_process/extract_bmp_colormap.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$bmpfile\x22 -ofh \x22$TMPBmpTmpHeader\x22 -ofd \x22$TMPBmpTmpData\x22 -ofd24 \x22$TMPBmp24TmpData\x22 -ofcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22 -ocf \x22$TMPColorMapBMP\x22" "k"
set f [ open "| Soft/bmp_process/extract_bmp_colormap.exe -if \x22$bmpfile\x22 -ofh \x22$TMPBmpTmpHeader\x22 -ofd \x22$TMPBmpTmpData\x22 -ofd24 \x22$TMPBmp24TmpData\x22 -ofcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22 -ocf \x22$TMPColorMapBMP\x22" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError

for {set i 0} {$i <= 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set BMPMax ""
set BMPMin ""
set BMPValue ""

WaitUntilCreated $TMPBmpTmpHeader
if [file exists $TMPBmpTmpHeader] {
    set f [open $TMPBmpTmpHeader r]
    gets $f tmp
    gets $f tmp
    gets $f tmp
    set BMPMax [format %5.2f $tmp]
    gets $f tmp
    set BMPMin [format %5.2f $tmp]
    gets $f ColorNumber
    close $f

    if {$ColorNumber == "BMP 24 Bits"} {
        set BMPMax ""
        set BMPMin ""
        }

    if {$ColorNumber != "BMP 24 Bits"} {
        set ColorNumberUtil $ColorNumber
        set ColorNumberUtilDisplay 256
        if {$ColorNumberUtil <= 32 } {set ColorNumberUtilDisplay 32}
        if {$ColorNumberUtil <= 16 } {set ColorNumberUtilDisplay 16}
        if {$ColorNumberUtil <=  8 } {set ColorNumberUtilDisplay  8}
        image create photo BMPColorBar -file $ColorBarBMP
        WaitUntilCreated $ColorMapBMP
        set f [open $ColorMapBMP r]
        gets $f tmp
        gets $f tmp
        gets $f ColorNumber
        for {set i 1} {$i <= $ColorNumber} {incr i} {
            gets $f couleur
            set RedPalette($i) [lindex $couleur 0]
            set GreenPalette($i) [lindex $couleur 1]
            set BluePalette($i) [lindex $couleur 2]
            }
        close $f
        }
    }
}
#############################################################################
## Procedure:  load_bmp_file

proc ::load_bmp_file {bmpfile} {
global DataDir FileName BMPChange BMPImageOpen BMPDirInput BMPViewFileInput SourceWidth SourceHeight 
global BMPWidth BMPHeight WidthBMP HeightBMP ZoomBMP BMPImage BMPImageLens
global ImageSource BMPView BMPCanvas BMPFrame
global BMPImage BMPImageLens BMPLens BMPImageOverview BMPOverview
global BMPViewAll BMPOverviewAll BMPLensAll
global ColorNumber ColorNumberUtil ColorMapBMP RedPalette GreenPalette BluePalette
global RectLensCenter BMPWidthSource BMPHeightSource BMPSampleSource ZoomBMPSource
global BMPColorMapDisplay BMPColorMapGrayJetHsv
global QLZoom ZoomBMPQL

image create photo ImageSource -file $bmpfile
set SourceWidth [image width ImageSource]
set SourceHeight [image height ImageSource]

image create photo BMPImage; BMPImage blank
image create photo BMPImageLens; BMPImageLens blank
image create photo BMPLens; BMPLens blank
image create photo BMPImageOverview; BMPImageOverview blank
image create photo BMPOverview; BMPOverview blank
image create photo BMPOverviewAll; BMPOverviewAll blank
image create photo BMPViewAll; BMPViewAll blank
image create photo BMPLensAll; BMPLensAll blank

#show image
set ZoomBMP "0:0"
set subsample 0
if {$SourceWidth > $WidthBMP} {set subsample 1}
if {$SourceHeight > $HeightBMP} {set subsample 1}

set BMPView "VIEWBMP1"
set BMPCanvas "CANVASBMP1"
set BMPFrame "FRAMEBMP1"

set BMPSample 1
if {$subsample == 0} {
    set ZoomBMP "1:$BMPSample"
    set BMPWidth $SourceWidth
    set BMPHeight $SourceHeight
    } else {
    if {$SourceWidth >= $SourceHeight} {
        while {[expr round($SourceWidth / $BMPSample)] > $WidthBMP} {incr BMPSample}
        } else {
        while {[expr round($SourceHeight / $BMPSample)] > $HeightBMP} {incr BMPSample}
        } 
    set ZoomBMP "1:$BMPSample"
    set BMPWidth [expr round($SourceWidth / $BMPSample)]
    set BMPHeight [expr round($SourceHeight / $BMPSample)]
    } 

BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample

set BMPSampleSource $BMPSample
set BMPWidthSource $BMPWidth
set BMPHeightSource $BMPHeight
set ZoomBMPSource $ZoomBMP
set QLZoomQL [expr ($BMPSample * $QLZoom)]
set ZoomBMPQL "1:$QLZoomQL"
}
#############################################################################
## Procedure:  EnviWriteConfig

proc ::EnviWriteConfig {EnviFile EnviNlig EnviNcol EnviType} {
global ENVIConfigFile MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit

if {$ENVIConfigFile == 1} {
    if [file exists $EnviFile] {
        set EnviNameHdr $EnviFile
        append EnviNameHdr ".hdr"
        set EnviName [file tail $EnviFile]
        set f [open $EnviNameHdr w]
        puts $f "ENVI"
        puts $f "description = {"
        puts $f "PolSARpro File Imported to ENVI}"
        puts $f "samples = $EnviNcol"
        puts $f "lines   = $EnviNlig"
        puts $f "bands   = 1"
        puts $f "header offset = 0"
        puts $f "file type = ENVI Standard"
        puts $f "data type = $EnviType"
        puts $f "interleave = bsq"
        if {$MapInfoActive == ""} { puts $f "sensor type = Unknown" }
        if {$MapInfoActive == "Unknown"} { puts $f "sensor type = Unknown" }
        if {$MapInfoActive == "ALOS"} { puts $f "sensor type = ALOS" }
        if {$MapInfoActive == "ALOS2"} { puts $f "sensor type = ALOS2" }
        if {$MapInfoActive == "RS2"} { puts $f "sensor type = RADARSAT2" }
        if {$MapInfoActive == "RISAT"} { puts $f "sensor type = RISAT" }
        if {$MapInfoActive == "S1A"} { puts $f "sensor type = SENTINEL1" }
        if {$MapInfoActive == "CSK"} { puts $f "sensor type = COSMO-SKYMED" }
        if {$MapInfoActive == "TSX"} { puts $f "sensor type = TerraSAR-X" }
        if {$MapInfoActive == "UAVSAR"} { puts $f "sensor type = UAVSAR" }
        if {$MapInfoActive == "Other"} { puts $f "sensor type = Other" }
        puts $f "byte order = 0"
        if {$MapInfoActive != ""} {
            if {$MapInfoMapInfo != "" } { puts $f $MapInfoMapInfo }
            if {$MapInfoProjInfo != "" } { puts $f $MapInfoProjInfo }
            if {$MapInfoUnit != "" } { puts $f $MapInfoUnit }
            }
        puts $f "band names = {"
        puts $f "$EnviName }"
        close $f
        
        set EnviDir [file dirname $EnviFile]
        set MaskFile "$EnviDir/mask_valid_pixels.bin"
        if [file exists $MaskFile] {
            WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
            set ProgressLine "0"
            update
            TextEditorRunTrace "Process The Function apply_mask_valid_pixels.exe" "k"
            TextEditorRunTrace "Arguments: -bf \x22$EnviFile\x22 -mf \x22$MaskFile\x22 -iodf $EnviType -fnr $EnviNlig -fnc $EnviNcol" "k"
            set f [ open "| Soft/tools/apply_mask_valid_pixels.exe -bf \x22$EnviFile\x22 -mf \x22$MaskFile\x22 -iodf $EnviType -fnr $EnviNlig -fnc $EnviNcol" r]
            PsPprogressBar $f
            TextEditorRunTrace "Check RunTime Errors" "r"
            CheckRunTimeError
            WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
            }     
        }
    }
}
#############################################################################
## Procedure:  EnviWriteConfigS

proc ::EnviWriteConfigS {EnviDir EnviNlig EnviNcol} {
global ENVIConfigFile
global WarningMessage WarningMessage2

if {$ENVIConfigFile ==1} { 
    set MaskFile "$EnviDir/mask_valid_pixels.bin"
    if [file exists $MaskFile] {
        EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4
        } else {
        set MaskPolFormat ""; set MaskPol "0"
        set EnviFile "$EnviDir/s11.bin"
        if [file exists $EnviFile] { append MaskPol "1" }
        set EnviFile "$EnviDir/s12.bin"
        if [file exists $EnviFile] { append MaskPol "2" }
        set EnviFile "$EnviDir/s21.bin"
        if [file exists $EnviFile] { append MaskPol "3" }
        set EnviFile "$EnviDir/s22.bin"
        if [file exists $EnviFile] { append MaskPol "4" }
        
        if {$MaskPol == "01234"} { 
          set MaskPolFormat "S2" 
          } else {
          set MaskPolFormat "SPP"
          }
        
        set WarningMessage "PolSARpro IS CREATING"
        set WarningMessage2 "THE VALID PIXEL MASK"
        Window show .top448
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        set ProgressLine "0"
        update
        TextEditorRunTrace "Process The Function create_mask_valid_pixels.exe" "k"
        TextEditorRunTrace "Arguments: -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" "k"
        set f [ open "| Soft/tools/create_mask_valid_pixels.exe -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        if [file exists $MaskFile] { 
            EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4 
            PSPcreate_bmp_file black "$EnviDir/mask_valid_pixels.bin" "$EnviDir/mask_valid_pixels.bmp" float real jet $EnviNcol 0 0 $EnviNlig $EnviNcol 0 0 1
            } 
        Window hide .top448
        }
    
    set EnviFile "$EnviDir/s11.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 6 }
    set EnviFile "$EnviDir/s12.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 6 }
    set EnviFile "$EnviDir/s21.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 6 }
    set EnviFile "$EnviDir/s22.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 6 }
    }
}
#############################################################################
## Procedure:  EnviWriteConfigC

proc ::EnviWriteConfigC {EnviDir EnviNlig EnviNcol} {
global ENVIConfigFile
global WarningMessage WarningMessage2

if {$ENVIConfigFile ==1} {
    set MaskFile "$EnviDir/mask_valid_pixels.bin"
    if [file exists $MaskFile] {
        EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4
        } else {
        set MaskPolFormat "C2"
        set EnviFile "$EnviDir/C33.bin"
        if [file exists $EnviFile] { set MaskPolFormat "C3" }
        set EnviFile "$EnviDir/C44.bin"
        if [file exists $EnviFile] { set MaskPolFormat "C4" }
        
        set WarningMessage "PolSARpro IS CREATING"
        set WarningMessage2 "THE VALID PIXEL MASK"
        Window show .top448
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        set ProgressLine "0"
        update
        TextEditorRunTrace "Process The Function create_mask_valid_pixels.exe" "k"
        TextEditorRunTrace "Arguments: -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" "k"
        set f [ open "| Soft/tools/create_mask_valid_pixels.exe -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        if [file exists $MaskFile] { 
            EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4 
            PSPcreate_bmp_file black "$EnviDir/mask_valid_pixels.bin" "$EnviDir/mask_valid_pixels.bmp" float real jet $EnviNcol 0 0 $EnviNlig $EnviNcol 0 0 1
            } 
        Window hide .top448
        }
    
    set EnviFile "$EnviDir/C11.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C12_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C12_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C13_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C13_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C14_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C14_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C22.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C23_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C23_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C24_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C24_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C33.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C34_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C34_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/C44.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 } 
    }
}
#############################################################################
## Procedure:  EnviWriteConfigT

proc ::EnviWriteConfigT {EnviDir EnviNlig EnviNcol} {
global ENVIConfigFile
global WarningMessage WarningMessage2

if {$ENVIConfigFile ==1} {
    set MaskFile "$EnviDir/mask_valid_pixels.bin"
    if [file exists $MaskFile] {
        EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4
        } else {
        set MaskPolFormat "T2"
        set EnviFile "$EnviDir/T33.bin"
        if [file exists $EnviFile] { set MaskPolFormat "T3" }
        set EnviFile "$EnviDir/T44.bin"
        if [file exists $EnviFile] { set MaskPolFormat "T4" }
        set EnviFile "$EnviDir/T66.bin"
        if [file exists $EnviFile] { set MaskPolFormat "T6" }
        
        set WarningMessage "PolSARpro IS CREATING"
        set WarningMessage2 "THE VALID PIXEL MASK"
        Window show .top448
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        set ProgressLine "0"
        update
        TextEditorRunTrace "Process The Function create_mask_valid_pixels.exe" "k"
        TextEditorRunTrace "Arguments: -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" "k"
        set f [ open "| Soft/tools/create_mask_valid_pixels.exe -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        if [file exists $MaskFile] { 
            EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4 
            PSPcreate_bmp_file black "$EnviDir/mask_valid_pixels.bin" "$EnviDir/mask_valid_pixels.bmp" float real jet $EnviNcol 0 0 $EnviNlig $EnviNcol 0 0 1
            } 
        Window hide .top448
        }
    
    set EnviFile "$EnviDir/T11.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T12_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T12_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T13_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T13_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T14_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T14_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T15_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T15_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T16_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T16_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T22.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T23_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T23_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T24_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T24_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T25_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T25_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T26_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T26_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T33.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T34_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T34_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T35_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T35_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T36_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T36_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T44.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T45_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T45_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T46_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T46_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T55.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T56_real.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T56_imag.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/T66.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    }
}
#############################################################################
## Procedure:  EnviWriteConfigI

proc ::EnviWriteConfigI {EnviDir EnviNlig EnviNcol} {
global ENVIConfigFile
global WarningMessage WarningMessage2

if {$ENVIConfigFile ==1} {
    set MaskFile "$EnviDir/mask_valid_pixels.bin"
    if [file exists $MaskFile] {
        EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4
        } else {
        set MaskPolFormat ""; set MaskPol "0"
        set EnviFile "$EnviDir/I11.bin"
        if [file exists $EnviFile] { append MaskPol "1" }
        set EnviFile "$EnviDir/I12.bin"
        if [file exists $EnviFile] { append MaskPol "2" }
        set EnviFile "$EnviDir/I21.bin"
        if [file exists $EnviFile] { append MaskPol "3" }
        set EnviFile "$EnviDir/I22.bin"
        if [file exists $EnviFile] { append MaskPol "4" }
        
        if {$MaskPol == "01234"} { set MaskPolFormat "IPPfull" }
        if {$MaskPol == "0124"} { set MaskPolFormat "IPP4" }
        if {$MaskPol == "0134"} { set MaskPolFormat "IPP4" }
        if {$MaskPol == "013"} { set MaskPolFormat "IPP5" }
        if {$MaskPol == "024"} { set MaskPolFormat "IPP6" }
        if {$MaskPol == "014"} { set MaskPolFormat "IPP7" }
        
        set MaskPolFormat "IPP"

        set WarningMessage "PolSARpro IS CREATING"
        set WarningMessage2 "THE VALID PIXEL MASK"
        Window show .top448
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        set ProgressLine "0"
        update
        TextEditorRunTrace "Process The Function create_mask_valid_pixels.exe" "k"
        TextEditorRunTrace "Arguments: -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" "k"
        set f [ open "| Soft/tools/create_mask_valid_pixels.exe -id \x22$EnviDir\x22 -od \x22$EnviDir\x22 -idf $MaskPolFormat -ofr 0 -ofc 0 -fnr $EnviNlig -fnc $EnviNcol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        if [file exists $MaskFile] { 
            EnviWriteConfig $MaskFile $EnviNlig $EnviNcol 4 
            PSPcreate_bmp_file black "$EnviDir/mask_valid_pixels.bin" "$EnviDir/mask_valid_pixels.bmp" float real jet $EnviNcol 0 0 $EnviNlig $EnviNcol 0 0 1
            } 
        Window hide .top448
        }

    set EnviFile "$EnviDir/I11.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/I12.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/I21.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    set EnviFile "$EnviDir/I22.bin"
    if [file exists $EnviFile] { EnviWriteConfig $EnviFile $EnviNlig $EnviNcol 4 }
    }
}
#############################################################################
## Procedure:  EnviWriteConfigCheck

proc ::EnviWriteConfigCheck {EnviDir EnviNlig EnviNcol EnviDataType} {
set MaskFile "$EnviDir/mask_valid_pixels.bin"
if [file exists $MaskFile] {
    } else {
    if { $EnviDataType == "S2" } { EnviWriteConfigS $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "SPP" } { EnviWriteConfigS $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "IPP" } { EnviWriteConfigI $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "C2" } { EnviWriteConfigC $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "C3" } { EnviWriteConfigC $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "C4" } { EnviWriteConfigC $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "T2" } { EnviWriteConfigT $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "T3" } { EnviWriteConfigT $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "T4" } { EnviWriteConfigT $EnviDir $EnviNlig $EnviNcol }
    if { $EnviDataType == "T6" } { EnviWriteConfigT $EnviDir $EnviNlig $EnviNcol }
    }
}
#############################################################################
## Procedure:  TextEditorRunTrace

proc ::TextEditorRunTrace {RunTraceText ColorText} {
global RunTrace RTBlack RTBlue RTRed SessionNameLogFid 

if {$RunTrace == 1} {
    if {$RunTraceText != ""} {
        if {$ColorText == "k"} {.top2.fra84.cpd67.f.cpd69 insert end $RunTraceText RTBlack }
        if {$ColorText == "b"} {.top2.fra84.cpd67.f.cpd69 insert end $RunTraceText RTBlue }
        if {$ColorText == "r"} {.top2.fra84.cpd67.f.cpd69 insert end $RunTraceText RTRed }
        .top2.fra84.cpd67.f.cpd69 insert end "\n"
        .top2.fra84.cpd67.f.cpd69 see end
        }
    }
    
#Log File Trace
if {$ColorText == "k"} {puts $SessionNameLogFid $RunTraceText}

#BEEP
set config "false"
if {$RunTraceText == "Open Window Advice"} { set config "true"}
if {$RunTraceText == "Open Window Error"} { set config "true"}
if {$RunTraceText == "Open Window Fatal Error"} { set config "true"}
if {$RunTraceText == "Open Window Question"} { set config "true"}
if {$RunTraceText == "Open Window Warning"} { set config "true"}
if {$config == "true"} { bell }
}
#############################################################################
## Procedure:  TextEditorRunTraceInit

proc ::TextEditorRunTraceInit {} {
global RTBlack RTBlue RTRed
###################
# SETTING GEOMETRY
###################
.top2.fra84.cpd67.f.cpd69 tag configure RTBlack -foreground black
.top2.fra84.cpd67.f.cpd69 tag configure RTBlue -foreground #0000ff
.top2.fra84.cpd67.f.cpd69 tag configure RTRed -foreground red
}
#############################################################################
## Procedure:  CheckRunTimeError

proc ::CheckRunTimeError {} {
global TMPMemoryAllocError
global WarningMessage WarningMessage2 WarningMessage3 WarningMessage4 VarAdvice

if [file exists $TMPMemoryAllocError] {
    bell; bell; bell
    set f [open $TMPMemoryAllocError r]
    gets $f WarningMessage
    set WarningMessage2 ""
    gets $f WarningMessage3
    gets $f WarningMessage4
    close $f
    DeleteFile $TMPMemoryAllocError
    TextEditorRunTrace "ERROR : PROCESSING MEMORY SPACE" "r"

    set VarAdvice ""
    Window show .top377; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
  
    } else {
    TextEditorRunTrace "OK" "r"
    }
}
#############################################################################
## Procedure:  MouseActiveFunction

proc ::MouseActiveFunction {ActiveFunction} {
global MouseActiveButton MouseActiveFunctionButton couleur_fond TrainingAreaTool BMPDropperFlag
#DATA PROCESS SNGL
global Load_OPCE_GraphicEditor Load_TrainingAreas_GraphicEditor Load_SubArea_GraphicEditor
global Load_Statistics Load_Histograms Load_DataValueProfile
global Load_ViewBMP1 Load_ViewBMPFile Load_ViewBMPQL Load_ViewBMPAll
global Load_MaskAreas_GraphicEditor Load_ROI_GraphicEditor

set MouseActiveFunctionButton $ActiveFunction

if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
if {$Load_ViewBMPAll == 1} {
    .top339.fra74.fra76.can78 configure -cursor arrow
    .top339.fra74.fra77.can79 configure -cursor arrow
    .top339.fra75.cpd77.can80 configure -cursor arrow
    }

#RAZ Background Color
#Zoom
set cc .top64.cpd81.f.cpd85.cpd88
$cc configure -background $couleur_fond
#Lens
set cc .top64.cpd81.f.cpd85.cpd89
$cc configure -background $couleur_fond
#Overview
set cc .top64.cpd81.f.cpd85.but109
$cc configure -background $couleur_fond
#ViewAll
set cc .top64.cpd81.f.cpd85.cpd73
$cc configure -background $couleur_fond

#Dropper
set cc .top64.cpd90.f.cpd91
$cc configure -background $couleur_fond
set cc .top64.cpd90.f.cpd92
$cc configure -background $couleur_fond
#Training
image create photo ImageButtonRect
ImageButtonRect blank
image create photo ImageButtonLine
ImageButtonLine blank
if {$Load_TrainingAreas_GraphicEditor == 1} {
    #Training Rect
    set cc .top47.fra41.but47
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    #Training Line
    set cc .top47.fra41.but45
    image delete ImageButtonLine
    image create photo ImageButtonLine -file "GUI/Images/lines.gif"
    $cc configure -image ImageButtonLine
    }
if {$Load_MaskAreas_GraphicEditor == 1} {
    #Training Rect
    set cc .top391.fra41.but47
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    #Training Line
    set cc .top391.fra41.but45
    image delete ImageButtonLine
    image create photo ImageButtonLine -file "GUI/Images/lines.gif"
    $cc configure -image ImageButtonLine
    }
if {$Load_ROI_GraphicEditor == 1} {
    #Training Rect
    set cc .top393.fra41.but47
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    #Training Line
    set cc .top393.fra41.but45
    image delete ImageButtonLine
    image create photo ImageButtonLine -file "GUI/Images/lines.gif"
    $cc configure -image ImageButtonLine
    }
if {$Load_OPCE_GraphicEditor == 1} {
    #Training Rect
    set cc .top96.fra104.but47
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    #Training Line
    set cc .top96.fra104.but45
    image delete ImageButtonLine
    image create photo ImageButtonLine -file "GUI/Images/lines.gif"
    $cc configure -image ImageButtonLine
    }
if {$Load_SubArea_GraphicEditor == 1} {
    #ZoomQL : Function SubArea QL
    set cc .top202.fra71.but72
    $cc configure -background $couleur_fond
    #Training Rect
    set cc .top202.fra71.but74
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    }
if {$Load_Statistics == 1} {
    #Training Rect
    set cc .top247.fra71.cpd78.cpd71.fra87.cpd114
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    #Training Line
    set cc .top247.fra71.cpd78.cpd71.fra87.cpd113
    image delete ImageButtonLine
    image create photo ImageButtonLine -file "GUI/Images/lines.gif"
    $cc configure -image ImageButtonLine
    }
if {$Load_Histograms == 1} {
    #Training Rect
    set cc .top260.fra73.fra74.but79
    image delete ImageButtonRect
    image create photo ImageButtonRect -file "GUI/Images/rectangle.gif"
    $cc configure -image ImageButtonRect
    #Training Line
    set cc .top260.fra73.fra74.but78
    image delete ImageButtonLine
    image create photo ImageButtonLine -file "GUI/Images/lines.gif"
    $cc configure -image ImageButtonLine
    }

set BMPDropperFlag 0

if {$ActiveFunction == ""} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton ""
    }
if {$ActiveFunction == "Zoom"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "Zoom"
    set cc .top64.cpd81.f.cpd85.cpd88
    set couleur [format #%02x%02x%02x 255 255 0]
    $cc configure -background $couleur
    }
if {$ActiveFunction == "ZoomQL"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "Zoom"
    set cc .top202.fra71.but72
    set couleur [format #%02x%02x%02x 255 255 0]
    $cc configure -background $couleur
    }
if {$ActiveFunction == "Lens"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "Lens"
    set cc .top64.cpd81.f.cpd85.cpd89
    set couleur [format #%02x%02x%02x 255 255 0]
    $cc configure -background $couleur
    }
if {$ActiveFunction == "LensPOLSIG"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensPOLSIG"
    }
if {$ActiveFunction == "LensPCT"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensPCT"
    }
if {$ActiveFunction == "LensPOLINSAR"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensPOLINSAR"
    }
if {$ActiveFunction == "LensCALIB"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensCALIB"
    }
if {$ActiveFunction == "LensCMPLXPLANE"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensCMPLXPLANE"
    }
if {$ActiveFunction == "LensCMPLXPLANEPP"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensCMPLXPLANEPP"
    }
if {$ActiveFunction == "LensLOCICMPLXPLANEon"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensLOCICMPLXPLANEon"
    }
if {$ActiveFunction == "LensLOCICMPLXPLANEoff"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensLOCICMPLXPLANEoff"
    }
if {$ActiveFunction == "LensLOCICMPLXPLANEPPon"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensLOCICMPLXPLANEPPon"
    }
if {$ActiveFunction == "LensLOCICMPLXPLANEPPoff"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensLOCICMPLXPLANEPPoff"
    }
if {$ActiveFunction == "LensPROFILE"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensPROFILE"
    }
if {$ActiveFunction == "LensPTOM"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "LensPTOM"
    }
if {$ActiveFunction == "Overview"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "Overview"
    set cc .top64.cpd81.f.cpd85.but109
    set couleur [format #%02x%02x%02x 255 255 0]
    $cc configure -background $couleur
    }
if {$ActiveFunction == "ViewAll"} {
    if {$Load_ViewBMPAll == 1} {
        .top339.fra74.fra76.can78 configure -cursor arrow
        .top339.fra74.fra77.can79 configure -cursor arrow
        .top339.fra75.cpd77.can80 configure -cursor arrow
        }
    set MouseActiveButton "ViewAll"
    set cc .top64.cpd81.f.cpd85.cpd73
    set couleur [format #%02x%02x%02x 255 255 0]
    $cc configure -background $couleur
    }
        
if {$ActiveFunction == "Dropper"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor arrow }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor arrow }
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor arrow }
    set MouseActiveButton "Dropper"
    set cc .top64.cpd90.f.cpd91
    set couleur [format #%02x%02x%02x 255 255 0]
    $cc configure -background $couleur
    }
if {$ActiveFunction == "Training"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor crosshair }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor crosshair }
    set MouseActiveButton "Training"
    if {$Load_TrainingAreas_GraphicEditor == 1} {
        if {$TrainingAreaTool == "rect"} {
            #Training Rect
            set cc .top47.fra41.but47
            image delete ImageButtonRect
            image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
            $cc configure -image ImageButtonRect
            }
        if {$TrainingAreaTool == "line"} {
            #Training Line
            set cc .top47.fra41.but45
            image delete ImageButtonLine
            image create photo ImageButtonLine -file "GUI/Images/lines_on.gif"
            $cc configure -image ImageButtonLine
            }
        }
    if {$Load_MaskAreas_GraphicEditor == 1} {
        if {$TrainingAreaTool == "rect"} {
            #Training Rect
            set cc .top391.fra41.but47
            image delete ImageButtonRect
            image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
            $cc configure -image ImageButtonRect
            }
        if {$TrainingAreaTool == "line"} {
            #Training Line
            set cc .top391.fra41.but45
            image delete ImageButtonLine
            image create photo ImageButtonLine -file "GUI/Images/lines_on.gif"
            $cc configure -image ImageButtonLine
            }
        }
    if {$Load_ROI_GraphicEditor == 1} {
        if {$TrainingAreaTool == "rect"} {
            #Training Rect
            set cc .top393.fra41.but47
            image delete ImageButtonRect
            image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
            $cc configure -image ImageButtonRect
            }
        if {$TrainingAreaTool == "line"} {
            #Training Line
            set cc .top393.fra41.but45
            image delete ImageButtonLine
            image create photo ImageButtonLine -file "GUI/Images/lines_on.gif"
            $cc configure -image ImageButtonLine
            }
        }
    if {$Load_OPCE_GraphicEditor == 1} {
        if {$TrainingAreaTool == "rect"} {
            #Training Rect
            set cc .top96.fra104.but47
            image delete ImageButtonRect
            image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
            $cc configure -image ImageButtonRect
            }
        if {$TrainingAreaTool == "line"} {
            #Training Line
            set cc .top96.fra104.but45
            image delete ImageButtonLine
            image create photo ImageButtonLine -file "GUI/Images/lines_on.gif"
            $cc configure -image ImageButtonLine
            }
        }
    }        
if {$ActiveFunction == "TrainingQL"} {
    if {$Load_ViewBMPQL == 1} { .top207.can81 configure -cursor crosshair }
    set MouseActiveButton "Training"
    if {$TrainingAreaTool == "rect"} {
        #Training Rect
        set cc .top202.fra71.but74
        image delete ImageButtonRect
        image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
        $cc configure -image ImageButtonRect
        }
    }
if {$ActiveFunction == "TrainingStat"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor crosshair }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor crosshair }
    set MouseActiveButton "Training"
    if {$Load_Statistics == 1} {
        if {$TrainingAreaTool == "rect"} {
            #Training Rect
            set cc .top247.fra71.cpd78.cpd71.fra87.cpd114
            image delete ImageButtonRect
            image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
            $cc configure -image ImageButtonRect
            }
        if {$TrainingAreaTool == "line"} {
            #Training Line
            set cc .top247.fra71.cpd78.cpd71.fra87.cpd113
            image delete ImageButtonLine
            image create photo ImageButtonLine -file "GUI/Images/lines_on.gif"
            $cc configure -image ImageButtonLine
            }
        }
    }        
if {$ActiveFunction == "TrainingHisto"} {
    if {$Load_ViewBMP1 == 1} { .top51.cpd79.cpd80 configure -cursor crosshair }
    if {$Load_ViewBMPFile == 1} { .top27.scr70 configure -cursor crosshair }
    set MouseActiveButton "Training"
    if {$Load_Histograms == 1} {
        if {$TrainingAreaTool == "rect"} {
            #Training Rect
            set cc .top260.fra73.fra74.but79
            image delete ImageButtonRect
            image create photo ImageButtonRect -file "GUI/Images/rectangle_on.gif"
            $cc configure -image ImageButtonRect
            }
        if {$TrainingAreaTool == "line"} {
            #Training Line
            set cc .top260.fra73.fra74.but78
            image delete ImageButtonLine
            image create photo ImageButtonLine -file "GUI/Images/lines_on.gif"
            $cc configure -image ImageButtonLine
            }
        }
    }        
    
}
#############################################################################
## Procedure:  LoadPSPViewer

proc ::LoadPSPViewer {} {
global DataDir BMPChange BMPImageOpen BMPViewFileInput ViewerName
global SourceWidth SourceHeight WidthBMP HeightBMP BMPMouseX BMPMouseY ZoomBMP
global BMPDropperFlag BMPColorMapDisplay BMPColorMapGrayJetHsv BMPScreenDisplay
global BMPMax BMPMin BMPValue PVShortcut BMPSubAreaFlag
global Load_ViewBMPQL ImageSource BMPImage QLBMPImageOpen

MouseActiveFunction ""

#set PVShortcut 1
package require Img

if {$Load_ViewBMPQL == 1} {
    if {$QLBMPImageOpen == 1} {
        image delete ImageSource
        image delete BMPImage
        set QLBMPImageOpen 0
        # .top207 = VIEWBMPQL
        Window hide .top207
        }
    }

set BMPChange 0
set BMPImageOpen 0
set BMPDropperFlag 0
set SourceWidth ""
set SourceHeight ""
set BMPMouseX ""
set BMPMouseY ""
set ZoomBMP "0:0"
set BMPMax ""
set BMPMin ""
set BMPValue ""
set BMPSubAreaFlag 0
image create photo BMPColorBar
BMPColorBar blank
# .top64.cpd104.f.cpd105 = CANVASCOLORBAR of PV3.0
.top64.cpd104.f.cpd105 create image 0 0 -anchor nw -image BMPColorBar
image delete BMPColorBar
set BMPColorMapDisplay 0
set BMPColorMapGrayJetHsv 0
set BMPScreenDisplay 0
}
#############################################################################
## Procedure:  MouseBMPValue

proc ::MouseBMPValue {} {
global ColorNumber ColorNumberUtil
global ImageSource BMPMouseX BMPMouseY
global RedPalette GreenPalette BluePalette
global BMPMax BMPMin BMPValue

if {"$ColorNumber" != "BMP 24 Bits"} {
    set IndPal 0
    set pixcolor [ImageSource get $BMPMouseX $BMPMouseY]
    set couleur [format #%02x%02x%02x [lindex $pixcolor 0] [lindex $pixcolor 1] [lindex $pixcolor 2]]
    for {set i 1} {$i <= $ColorNumber} {incr i} {
        set color [format #%02x%02x%02x $RedPalette($i) $GreenPalette($i) $BluePalette($i)]
        if {$couleur == $color } {set IndPal $i}
        }
    if {$IndPal != 0} {
        if {$ColorNumberUtil != "256"} { set IndPal [expr $IndPal - 1] }
        set Value [expr $BMPMin + ($IndPal-1)*($BMPMax-$BMPMin) / ($ColorNumberUtil -1)]
        if {$ColorNumberUtil == "256"} {
            set color [format #%02x%02x%02x $RedPalette(256) $GreenPalette(256) $BluePalette(256)]
            set couleur [format #%02x%02x%02x 255 255 255]
            if {$couleur == $color } {
            set Value [expr $BMPMin + ($IndPal-1)*($BMPMax-$BMPMin) / ($ColorNumberUtil -2)]
            }
        }
        set BMPValue [format %5.2f $Value]
        } else {
        set BMPValue [format %5.2f $BMPMax]
        }
    if {$BMPValue > $BMPMax} { set BMPValue "-----" }
    if {$BMPValue < $BMPMin} { set BMPValue "-----" }
    }
}
#############################################################################
## Procedure:  MouseMotionLens

proc ::MouseMotionLens {nx ny} {
global ZoomLensBMP SourceWidth SourceHeight
global BMPMouseX BMPMouseY
global MouseActiveButton LensX1 LensY1
global ColorNumber SizeLens
global LineXLensInit LineYLensInit plot2

set config "false"
if {$MouseActiveButton == "Lens"} {set config "true"}
if {$MouseActiveButton == "LensPOLSIG"} {set config "true"}
if {$MouseActiveButton == "LensPCT"} {set config "true"}
if {$MouseActiveButton == "LensCALIB"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANE"} {set config "true"}
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {set config "true"}
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {set config "true"}
if {$MouseActiveButton == "LensPROFILE"} {set config "true"}
if {$MouseActiveButton == "LensPTOM"} {set config "true"}

if {$config == "true"} {
set Num1 ""
set Num2 ""
set Num1 [string index $ZoomLensBMP 0]
set Num2 [string index $ZoomLensBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomLensBMP 2]
    set Den2 [string index $ZoomLensBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomLensBMP 3]
    set Den2 [string index $ZoomLensBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set BMPMouseX [expr round($nx*$BMPSample)]
    set BMPMouseY [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set BMPMouseX [expr round($nx/$BMPZoom)]
    set BMPMouseY [expr round($ny/$BMPZoom)]
    }

if {$BMPMouseX < 0} {set BMPMouseX 0}
set BMPMouseX [expr abs($BMPMouseX + $LensX1)]
if {$BMPMouseX > [expr abs($SourceWidth -1)]} {set BMPMouseX [expr abs($SourceWidth -1)]}
if {$BMPMouseY < 0} {set BMPMouseY 0}
set BMPMouseY [expr abs($BMPMouseY + $LensY1)]
if {$BMPMouseY > [expr abs($SourceHeight -1)]} {set BMPMouseY [expr abs($SourceHeight -1)]}

if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }

if {$MouseActiveButton == "LensPOLSIG"} {
    .top240.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top240.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensPCT"} {
    .top343.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top343.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensCALIB"} {
    .top245.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top245.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensPROFILE"} {
    .top257.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top257.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensCMPLXPLANE"} {
    .top330.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top330.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {
    .top330PP.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top330PP.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {
    .top332.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top332.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {
    .top332.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top332.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {
    .top332PP.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top332PP.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {
    .top332PP.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top332PP.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
if {$MouseActiveButton == "LensPTOM"} {
    .top523.fra71.cpd78.can73 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top523.fra71.cpd78.can73 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
}
}
#############################################################################
## Procedure:  MouseMotionOverview

proc ::MouseMotionOverview {nx ny} {
global ZoomOverviewBMP SourceWidth SourceHeight BMPSampleOverview
global BMPMouseX BMPMouseY
global RectLensCenter RectLensCenterX RectLensCenterY SizeRect
global RectOverviewAllCenter RectOverviewAllCenterX RectOverviewAllCenterY SizeRectOverviewAll
global MouseActiveButton MouseRectLens MouseRectOverviewAll SizeLensOverview
global ColorNumber

set config "false"
if {$MouseActiveButton == "Overview"} { set config "true" }
if {$MouseActiveButton == "ViewAll"} { set config "true" }
if {$config == "true" } {
set Num1 ""
set Num2 ""
set Num1 [string index $ZoomOverviewBMP 0]
set Num2 [string index $ZoomOverviewBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomOverviewBMP 2]
    set Den2 [string index $ZoomOverviewBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomOverviewBMP 3]
    set Den2 [string index $ZoomOverviewBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set BMPMouseX [expr round($nx*$BMPSample)]
    set BMPMouseY [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set BMPMouseX [expr round($nx/$BMPZoom)]
    set BMPMouseY [expr round($ny/$BMPZoom)]
    }

if {$BMPMouseX < 0} {set BMPMouseX 0}
if {$BMPMouseX > [expr abs($SourceWidth -1)]} {set BMPMouseX [expr abs($SourceWidth -1)]}
if {$BMPMouseY < 0} {set BMPMouseY 0}
if {$BMPMouseY > [expr abs($SourceHeight -1)]} {set BMPMouseY [expr abs($SourceHeight -1)]}

if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }

if {$MouseActiveButton == "Overview"} { 
    set RectLensX1 [expr [lindex $RectLensCenter 0] - round($SizeRect / 2 / $BMPSampleOverview)]
    set RectLensY1 [expr [lindex $RectLensCenter 1] - round($SizeRect / 2 / $BMPSampleOverview)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRect / $BMPSampleOverview)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRect / $BMPSampleOverview)]
    set MouseRectLens ""
    set RectLensMouse "OK"
    if {[expr ($nx-$RectLensX1)] > 0} {append RectLensMouse "1"}
    if {[expr ($nx-$RectLensX2)] < 0} {append RectLensMouse "2"}
    if {[expr ($ny-$RectLensY1)] > 0} {append RectLensMouse "3"}
    if {[expr ($ny-$RectLensY2)] < 0} {append RectLensMouse "4"}
    #Rem: .top216.can81 = CANVASOVERVIEW Widget
    if {$RectLensMouse == "OK1234"} {
        set MouseRectLens "Inside"
        .top216.can81 configure -cursor X_cursor
        } else {
        set MouseRectLens "Outside"
        .top216.can81 configure -cursor arrow
        }
    }        
if {$MouseActiveButton == "ViewAll"} { 
    set RectLensX1 [expr [lindex $RectOverviewAllCenter 0] - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
    set RectLensY1 [expr [lindex $RectOverviewAllCenter 1] - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRectOverviewAll / $BMPSampleOverview)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRectOverviewAll / $BMPSampleOverview)]
    set MouseRectOverviewAll ""
    set RectLensMouse "OK"
    if {[expr ($nx-$RectLensX1)] > 0} {append RectLensMouse "1"}
    if {[expr ($nx-$RectLensX2)] < 0} {append RectLensMouse "2"}
    if {[expr ($ny-$RectLensY1)] > 0} {append RectLensMouse "3"}
    if {[expr ($ny-$RectLensY2)] < 0} {append RectLensMouse "4"}
    #Rem: .top339.fra74.fra76.can78 = CANVASOVERVIEWALL Widget
    if {$RectLensMouse == "OK1234"} {
        set MouseRectOverviewAll "Inside"
        .top339.fra74.fra76.can78 configure -cursor X_cursor
        } else {
        set MouseRectOverviewAll "Outside"
        .top339.fra74.fra76.can78 configure -cursor arrow
        }
    }        
}
}
#############################################################################
## Procedure:  RectOverviewMove

proc ::RectOverviewMove {w x y wz} {
global BMPImageOpen SourceWidth SourceHeight BMPImageOverview ImageSource
global ZoomBMP BMPSampleOverview SizeOverviewWidth SizeOverviewHeight
global RectLensCenterX RectLensCenterY RectLensCenter RectLens SizeRect SizeLensOverview
global plot BMPMouseX BMPMouseY BMPOverview
global MouseActiveButton MouseRectLens
global LensX1 LensY1 LensX2 LensY2

if {$MouseActiveButton == "Overview"} {
if {$MouseRectLens == "Inside"} {
    set RectLensX1 [expr $x - round($SizeRect / 2 / $BMPSampleOverview)]
    set RectLensY1 [expr $y - round($SizeRect / 2 / $BMPSampleOverview)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRect / $BMPSampleOverview)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRect / $BMPSampleOverview)]

    set config "true"
    if { $RectLensX1 < 0 } {set config "false"}
    if { $RectLensX1 > $SizeOverviewWidth } {set config "false"}
    if { $RectLensX2 < 0 } {set config "false"}
    if { $RectLensX2 > $SizeOverviewWidth } {set config "false"}
    if { $RectLensY1 < 0 } {set config "false"}
    if { $RectLensY1 > $SizeOverviewHeight } {set config "false"}
    if { $RectLensY2 < 0 } {set config "false"}
    if { $RectLensY2 > $SizeOverviewHeight } {set config "false"}
    
    if { "$config" == "true" } {
        $w move RectLensCenter [expr $x-$plot(lastX)] [expr $y-$plot(lastY)]
        set plot(lastX) $x
        set plot(lastY) $y

        set BMPMouseX [expr round($x*$BMPSampleOverview)]
        set BMPMouseY [expr round($y*$BMPSampleOverview)]
    
        set RectLensCenterX [expr $RectLensX1 + round($SizeRect / 2 / $BMPSampleOverview)]
        set RectLensCenterY [expr $RectLensY1 + round($SizeRect / 2 / $BMPSampleOverview)]
        set RectLensCenter {$RectLensCenterX $RectLensCenterY}

        set LensX1 [expr round($RectLensX1*$BMPSampleOverview)]
        set LensY1 [expr round($RectLensY1*$BMPSampleOverview)]
        set LensX2 [expr $LensX1 + $SizeRect]
        set LensY2 [expr $LensY1 + $SizeRect]
        } else {
        $w dtag RectLensCenter
        $w  create image 0 0 -anchor nw -image BMPOverview
      
        set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
        if { $RectLensX1 < 0 } {set RectLensX1 0; set x1 "ko"}
        if { $RectLensX1 > $SizeOverviewWidth } {set RectLensX1 $SizeOverviewWidth; set x1 "ko"}
        if { $RectLensX2 < 0 } {set RectLensX2 0; set x2 "ko"}
        if { $RectLensX2 > $SizeOverviewWidth } {set RectLensX2 $SizeOverviewWidth; set x2 "ko"}
        if { $RectLensY1 < 0 } {set RectLensY1 0; set y1 "ko"}
        if { $RectLensY1 > $SizeOverviewHeight } {set RectLensY1 $SizeOverviewHeight; set y1 "ko"}
        if { $RectLensY2 < 0 } {set RectLensY2 0; y2 "ko"}
        if { $RectLensY2 > $SizeOverviewHeight } {set RectLensY2 $SizeOverviewHeight; set y2 "ko"}
        if {$x1 == "ok"} {
            if {$y1 == "ok"} {
                set RectLensCenterX [expr $RectLensX1 + round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenterY [expr $RectLensY1 + round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenter {$RectLensCenterX $RectLensCenterY}   
                }    
            if {$y2 == "ok"} {
                set RectLensCenterX [expr $RectLensX1 + round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenterY [expr $RectLensY2 - round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenter {$RectLensCenterX $RectLensCenterY}   
                }    
            }
        if {$x2 == "ok"} {
            if {$y1 == "ok"} {
                set RectLensCenterX [expr $RectLensX2 - round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenterY [expr $RectLensY1 + round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenter {$RectLensCenterX $RectLensCenterY}   
                }    
            if {$y2 == "ok"} {
                set RectLensCenterX [expr $RectLensX2 - round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenterY [expr $RectLensY2 - round($SizeRect / 2 / $BMPSampleOverview)]
                set RectLensCenter {$RectLensCenterX $RectLensCenterY}   
                }    
            }
        set RectLens [$w  create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $w  addtag RectLensCenter withtag $RectLens
        set plot(lastX) $x
        set plot(lastY) $y

        set BMPMouseX [expr round($x*$BMPSampleOverview)]
        set BMPMouseY [expr round($y*$BMPSampleOverview)]
                
        set LensX1 [expr round($RectLensX1*$BMPSampleOverview)]
        set LensY1 [expr round($RectLensY1*$BMPSampleOverview)]
        
        set LensX2 [expr round($RectLensX2*$BMPSampleOverview)]
        set LensY2 [expr round($RectLensY2*$BMPSampleOverview)]
        }
        
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }

    set BMPZoom $Num
    set config "true"
    if { $LensX1 < 0 } {set config "false"}
    if { $LensX1 > $SourceWidth } {set config "false"}
    if { $LensX2 < 0 } {set config "false"}
    if { $LensX2 > $SourceWidth } {set config "false"}
    if { $LensY1 < 0 } {set config "false"}
    if { $LensY1 > $SourceHeight } {set config "false"}
    if { $LensY2 < 0 } {set config "false"}
    if { $LensY2 > $SourceHeight } {set config "false"}
    if { "$config" == "true" } {
        BMPImageOverview blank
        BMPImageOverview copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -zoom $BMPZoom $BMPZoom
        }
    $wz configure -width $SizeLensOverview -height $SizeLensOverview
    $wz itemconfigure current -image BMPImageOverview
    }
}
}
#############################################################################
## Procedure:  CloseAllWidget

proc ::CloseAllWidget {} {
global RunTrace
#BASIS CHANGE
global Load_EllipticalBasisChange
#BATCH PROCEDURE
global Load_BatchProcess Load_BatchProcessS2
#CALIBRATION
global Load_CalibrationCalibrator Load_CalibrationProcedures Load_CalibrationSquintCheck Load_CalibrationQualityCheck
#BMP PROCESS
global Load_colormap Load_colormap16 Load_colormap256 Load_colormap32 Load_colormap8 Load_colormap2
global Load_CreateBMPFile Load_CreateHSLFile Load_CreateRGBFile Load_CreateRGBFile_PP Load_Display
global Load_PolSARpro_Viewer Load_Save Load_ViewBMP1 Load_ViewBMPFile Load_ViewBMPLens Load_ViewBMPQL
global Load_Zoom Load_ColorMapGrayJetHsv Load_DisplayMenu Load_ViewOverview Load_ViewBMPOverview
global Load_SavePolSig Load_SaveSpectrum Load_SaveCalib Load_SaveStat Load_SaveHisto Load_SaveCmplxPlane
global Load_SaveProfile Load_SaveLociCmplxPlane Load_ViewBMPAll Load_ViewBMPPCT
global Load_DisplayMenuDual Load_CreateRGBDualFile Load_CreateRGBDualFile_PP Load_BMPtoGeoTIFF Load_CreateKMLFile Load_CreateGrayColorBMPFile 
global Load_CreateBMPKMLFile Load_CreateRGBKMLFile Load_CreateAnimGIF Load_CreateScatterPlot
global Load_ViewGNUPLOT1 Load_ViewGNUPLOT2 Load_ViewGNUPLOT3 Load_ViewGNUPLOT4 
global Load_ViewGNUPLOT5 Load_ViewGNUPLOT6 Load_ViewGNUPLOT7 Load_ViewGNUPLOT8 
global Load_ViewGNUPLOT9 Load_SaveScatterPlot Load_RGB24toBMP8 Load_CreatePolTomoDisplay Load_ViewGNUPLOTtomo
global Load_SaveDisplay1 Load_SaveDisplay1num Load_SaveDisplay2 Load_SaveDisplay3a Load_SaveDisplay3b
#DATA CONVERT
global Load_DataFileConvertS2 Load_DataFileConvert_PP Load_DataFileConvert_Ipp
global Load_DataFileConvertC3 Load_DataFileConvertC4
global Load_DataFileConvertT3 Load_DataFileConvertT4
global Load_DataFileConvertSPPIPPC2 
#DATA CONVERT DUAL
global Load_DataFileConvertDual
#DATA CONVERT MULT
global Load_DataFileConvertMult
#DATA IMPORT
global Load_AIRSAR Load_ASAR Load_CONVAIR Load_EMISAR Load_ESAR Load_PISAR Load_SETHI Load_UAVSAR
global Load_ASAR_Input_File Load_ASAR_Extract_Data
global Load_ALOS_Input_File Load_ALOS2_Input_File Load_RADARSAT2_Input_File Load_TERRASARX_Input_File Load_SIRC_Input_File Load_CSK_Input_File
global Load_AIRSAR_Input_File Load_CONVAIR_Input_File Load_EMISAR_Input_File Load_ESAR_Input_File Load_FSAR_Input_File
global Load_PISAR_Input_File Load_SETHI_Input_File Load_UAVSAR_Input_File Load_TANDEMX_Input_File Load_SENTINEL1_Input_File 
global Load_EOSI_Extract_Data Load_SubArea_GraphicEditor Load_ReadGEARTH_POLY Load_CreateGEARTH_POLY Load_ExtractDEM
global Load_RawBinaryData Load_RawBinaryDataFiles Load_PSP_Extract_Data Load_TOPSAR_Extract_Data Load_ALOS_Vex_Input_File
global Load_MapReadyGeocode Load_MapReadyMatrix Load_MapReadyParameter Load_MapReadyTerrain Load_MapInfoUpdate
global Load_SNAPMatrix Load_SNAPParameter Load_EOSI_TDX_Extract_Data Load_RISAT_Input_File
#DATA PROCESS SNGL
global Load_CovarianceElementsT3 Load_CovarianceElementsT4 Load_CovarianceElementsC2 Load_CovarianceElementsC3 Load_CovarianceElementsC4
global Load_CorrelationCoefficients2 Load_CorrelationCoefficients3 Load_CorrelationCoefficients4 Load_CorrelationCoefficientsPP
global Load_HAAlphaClassification Load_HAAlphaDecomposition2 Load_OPCE Load_OPCE_GraphicEditor Load_CompactPolarimetricMode
global Load_PCAnalysis Load_PolarimetricDecomposition Load_PolarimetricDecompositionYam4 Load_PolarisationSynthesis Load_RCSmax Load_SinclairElements
global Load_TrainingAreas_GraphicEditor Load_WishartHAAlphaClassification Load_WishartSupervisedClassification Load_StokesParameters
global Load_IntensitiesElements Load_WishartSupervisedClassification_PP Load_CameronDecomposition Load_PolarSignature
global Load_SubApertureDecomposition Load_SubApertureApplications Load_Statistics Load_ClassificationIdentification
global Load_SurfaceInversion Load_Histograms Load_DataValueProfile Load_FCMHAlphaClassification Load_SoilRoughnessInversion
global Load_HAAlphaDecomposition3 Load_HAAlphaEigenvalue3 Load_HAAlphaEigenvector3 
global Load_HAAlphaDecomposition4 Load_HAAlphaEigenvalue4 Load_HAAlphaEigenvector4 
global Load_HierarchicalSupervisedClassification Load_HierarchicalInputParameters Load_HierarchicalTreeArchitecture
global Load_HistogramStatistics Load_TextureAnalysis Load_EdgeDetector Load_Parameters Load_ParametersPR Load_ParametersZDR Load_DEMestimation Load_TSVMDecomposition
global Load_ClusterProcess Load_ClusterParaAvg Load_ClusterDataSetsAvg Load_MaskAreas_GraphicEditor Load_ROI_GraphicEditor 
global Load_SVMSupervisedClassification Load_SVM_PolarIndic Load_SVM_RBFCrossVal Load_WishartHAAlphaClassification_PP Load_WishartScattModelBasedClassification
global Load_ChangeDetectorFile Load_ChangeDetectorMat Load_CompactDecomposition Load_CompactClassification Load_GPFSupervisedClassification Load_GPFSupervisedClassification_PP
global Load_DiversityIndex
#DATA PROCESS DUAL
global Load_FlatEarthRemoval Load_CovarianceElementsT6_T11 Load_CovarianceElementsT6_T22 Load_CovarianceElementsT6_O12
global Load_CovarianceElementsT4_T11 Load_CovarianceElementsT4_T22 Load_CovarianceElementsT4_O12
global Load_ComplexCoherenceEstimation Load_ComplexCoherenceEstimation_PP Load_ForestHeightEstimation Load_ForestHeightEstimation_PP Load_HeightEstimationInversionProcedures
global Load_POLSARClassification Load_POLinSARUnsupervisedClassification Load_POLinSARSupervisedClassification Load_InterferogramEstimation Load_InterferogramEstimation_PP
global Load_CoherenceCmplxPlane Load_CoherenceCmplxPlane_PP Load_CoherenceLociCmplxPlane Load_CoherenceLociCmplxPlane_PP Load_PCT Load_DisplayPCT
global Load_FlatEarthEstimation Load_FlatEarthEstimation_PP Load_CoarseCoRegistration
global Load_BaselineEstimation Load_CorrelationCoefficients6 Load_CorrelationCoefficients4
#DATA PROCESS MULT
global Load_CoarseCoRegistrationMult Load_HAAlphaDecompositionMult2
global Load_HAAlphaDecompositionMult3 Load_HAAlphaEigenvalueMult3 Load_HAAlphaEigenvectorMult3 
global Load_SinclairElementsMult Load_CovarianceElementsMultT3 Load_CovarianceElementsMultC2 
global Load_DataAnalysisMult Load_DataAnimationMult Load_DataAveragingMult Load_HAAlphaClassificationMult
global Load_WishartSupervisedClassificationMult Load_WishartSupervisedClassificationMult_PP Load_WishartHAAlphaClassificationMult Load_WishartHAAlphaClassificationMult_PP
global Load_ParametersMult Load_ParametersMultPR Load_ParametersMultZDR Load_ChangeDetectorFileMult Load_ChangeDetectorMatMult Load_PolarTomography
#SPECKLE FILTER
global Load_SpeckleFilter Load_SpeckleFilter_S2 Load_SpeckleFilterSigma Load_SpeckleFilterSigma_S2
global Load_SpeckleFilterEdge Load_SpeckleFilterEdge_S2 Load_SpeckleFilterLopez Load_SpeckleFilterLopez_S2
global Load_SpeckleFilterAnYang Load_SIRVEstimationRestoration Load_SpeckleFilterScattModelBased Load_SpeckleFilterNLmean Load_SpeckleFilterMeanShift
#SPECKLE FILTER DUAL
global Load_SpeckleFilterDual Load_SpeckleFilterDualEdge Load_SpeckleFilterDualSigma
#SPECKLE FILTER MULT
global Load_SpeckleFilterMult Load_SpeckleFilterMultSigma Load_SpeckleFilterMultLopez
#TOOLS
global Load_CopyDirectory Load_CopyFile Load_CreateDirectory Load_CreateMyFunction Load_DeleteDirectory Load_DeleteFile Load_DeleteMyFunction
global Load_ExecuteMyFunction Load_RenameDirectory Load_RenameFile Load_Tools Load_ToolsMask Load_ToolsFFT Load_VisuVariable Load_ToolsMenu Load_ExportENVI
global Load_ToolsMenuDual Load_CheckBinaryData Load_PolSARproSIM Load_PolSARproSIMgr Load_PolSARproSIMsv Load_DataFileManagement Load_CreateHDRFile
global Load_CreateMask Load_CreateROI Load_DataFormat Load_DataFormatDual Load_DataFormatMult Load_CompareFile Load_CompareDir Load_ComplexFile
global Load_ReadBinaryDataFileValue Load_CheckSizeBinaryDataFile
#UTIL
global Load_AboutPSP Load_Error Load_HelpPSP Load_Environment Load_MainInputDirectory2 Load_MainInputDirectoryASAR Load_Message
global Load_Question Load_TextEdit Load_UnderConstruction Load_Warning Load_Warranty Load_WarrantyPSP Load_TrackVar Load_PSPMemory Load_PSPConfiguration
global Load_FatalError Load_PSPTeam Load_PSPContributors Load_Advice Load_Advice1 Load_EnvironmentDual Load_SetUpError Load_LoadingBMP Load_Processing
global Load_SearchingGoogle Load_Configuration Load_OpenClosePSP Load_EnvironmentMult Load_Advice2 Load_AdviceFunctionality Load_AdviceWarning
global Load_PolSARproCalc Load_PolSARproCalcOutputFile Load_PolSARproCalcOutputMat Load_PolSARproCalcFilter
#POLSARAP
global Load_PolSARapMenu Load_PolSARapAgriculture Load_PolSARapCryosphere Load_PolSARapForestEnvironment Load_PolSARapForestHeightEstimation Load_PolSARapOcean Load_PolSARapUrban

#BASIS CHANGE
if {$Load_EllipticalBasisChange == 1} { Window hide .top49 }
#BATCH PROCEDURE
if {$Load_BatchProcess == 1} { Window hide .top230 }
if {$Load_BatchProcessS2 == 1} { Window hide .top234 }
#BMP PROCESS
if {$Load_colormap == 1} { Window hide .top38 }
if {$Load_colormap16 == 1} { Window hide .top77 }
if {$Load_colormap256 == 1} { Window hide .top62 }
if {$Load_colormap32 == 1} { Window hide .top76 }
if {$Load_colormap8 == 1} { Window hide .top81 }
if {$Load_colormap2 == 1} { Window hide .top254 }
if {$Load_CreateBMPFile == 1} { Window hide .top43 }
if {$Load_CreateHSLFile == 1} { Window hide .top69 }
if {$Load_CreateRGBFile == 1} { Window hide .top39 }
if {$Load_CreateRGBFile_PP == 1} { Window hide .top201 }
if {$Load_Display == 1} { Window hide .top71 }
if {$Load_PolSARpro_Viewer == 1} { Window hide .top64 }
if {$Load_Save == 1} { Window hide .top82 }
if {$Load_ViewBMP1 == 1} { Window hide .top51 }
if {$Load_ViewBMPFile == 1} { Window hide .top27 }
if {$Load_ViewBMPLens == 1} { Window hide .top73 }
if {$Load_ViewBMPQL == 1} { Window hide .top207 }
if {$Load_ViewBMPAll == 1} { Window hide .top339 }
if {$Load_ViewBMPPCT == 1} { Window hide .top344 }
if {$Load_Zoom == 1} { Window hide .top78 }
if {$Load_ColorMapGrayJetHsv == 1} { Window hide .top208 }
if {$Load_DisplayMenu == 1} { Window hide .top214 }
if {$Load_ViewOverview == 1} { Window hide .top216 }
if {$Load_ViewBMPOverview == 1} { Window hide .top215 }
if {$Load_SavePolSig == 1} { Window hide .top241 }
if {$Load_SaveSpectrum == 1} { Window hide .top244 }
if {$Load_SaveCalib == 1} { Window hide .top246 }
if {$Load_SaveStat == 1} { Window hide .top250 }
if {$Load_SaveProfile == 1} { Window hide .top258 }
if {$Load_SaveHisto == 1} { Window hide .top261 }
if {$Load_SaveCmplxPlane == 1} { Window hide .top331 }
if {$Load_SaveLociCmplxPlane == 1} { Window hide .top333 }
if {$Load_DisplayMenuDual == 1} { Window hide .top308 }
if {$Load_CreateRGBDualFile == 1} { Window hide .top309 }
if {$Load_CreateRGBDualFile_PP == 1} { Window hide .top439 }
if {$Load_BMPtoGeoTIFF == 1} { Window hide .top357 }
if {$Load_CreateKMLFile == 1} { Window hide .top358 }
if {$Load_CreateGrayColorBMPFile == 1} { Window hide .top384 }
if {$Load_CreateBMPKMLFile == 1} { Window hide .top397 }
if {$Load_CreateRGBKMLFile == 1} { Window hide .top398 }
if {$Load_CreateAnimGIF == 1} { Window hide .top405 }
if {$Load_CreateScatterPlot == 1} { Window hide .top407 }
if {$Load_ViewGNUPLOT1 == 1} { Window hide .top401 }
if {$Load_ViewGNUPLOT2 == 1} { Window hide .top402 }
if {$Load_ViewGNUPLOT3 == 1} { Window hide .top419 }
if {$Load_ViewGNUPLOT4 == 1} { Window hide .top420 }
if {$Load_ViewGNUPLOT5 == 1} { Window hide .top421 }
if {$Load_ViewGNUPLOT6 == 1} { Window hide .top422 }
if {$Load_ViewGNUPLOT7 == 1} { Window hide .top423 }
if {$Load_ViewGNUPLOT8 == 1} { Window hide .top424 }
if {$Load_ViewGNUPLOT9 == 1} { Window hide .top425 }
if {$Load_ViewGNUPLOTtomo == 1} { Window hide .top401tomo }
if {$Load_SaveScatterPlot == 1} { Window hide .top408 }
if {$Load_RGB24toBMP8 == 1} { Window hide .top450 }
if {$Load_SaveDisplay1 == 1} { Window hide .top456 }
if {$Load_SaveDisplay2 == 1} { Window hide .top457 }
if {$Load_SaveDisplay3a == 1} { Window hide .top458 }
if {$Load_SaveDisplay3b == 1} { Window hide .top459 }
if {$Load_SaveDisplay1num == 1} { Window hide .top460 }
if {$Load_CreatePolTomoDisplay == 1} { Window hide .top524 }
#CALIBRATION
if {$Load_CalibrationCalibrator == 1} { Window hide .top245 }
if {$Load_CalibrationProcedures == 1} { Window hide .top249 }
if {$Load_CalibrationSquintCheck == 1} { Window hide .top389 }
if {$Load_CalibrationQualityCheck == 1} { Window hide .top455 }
#DATA CONVERT
if {$Load_DataFileConvertS2 == 1} { Window hide .top410 }
if {$Load_DataFileConvertT3 == 1} { Window hide .top411 }
if {$Load_DataFileConvertT4 == 1} { Window hide .top412 }
if {$Load_DataFileConvertC3 == 1} { Window hide .top413 }
if {$Load_DataFileConvertC4 == 1} { Window hide .top414 }
if {$Load_DataFileConvertSPPIPPC2 == 1} { Window hide .top415 }
if {$Load_DataFileConvert_PP == 1} { Window hide .top60 }
if {$Load_DataFileConvert_Ipp == 1} { Window hide .top24 }
#DATA CONVERT DUAL
if {$Load_DataFileConvertDual == 1} { Window hide .top302 }
#DATA CONVERT MULT
if {$Load_DataFileConvertMult == 1} { Window hide .top504 }
#DATA IMPORT
if {$Load_AIRSAR == 1} { Window hide .top48 }
if {$Load_ASAR == 1} { Window hide .top87 }
if {$Load_CONVAIR == 1} { Window hide .top65 }
if {$Load_EMISAR == 1} { Window hide .top41 }
if {$Load_ESAR == 1} { Window hide .top30 }
if {$Load_PISAR == 1} { Window hide .top46 }
if {$Load_SETHI == 1} { Window hide .top206 }
if {$Load_ASAR_Input_File == 1} { Window hide .top200 }
if {$Load_ASAR_Extract_Data == 1} { Window hide .top203 }
if {$Load_ALOS_Input_File == 1} { Window hide .top218 }
if {$Load_ALOS2_Input_File == 1} { Window hide .top454 }
if {$Load_ALOS_Vex_Input_File == 1} { Window hide .top350 }
if {$Load_RADARSAT2_Input_File == 1} { Window hide .top219 }
if {$Load_RISAT_Input_File == 1} { Window hide .top449 }
if {$Load_SENTINEL1_Input_File == 1} { Window hide .top453 }
if {$Load_TERRASARX_Input_File == 1} { Window hide .top221 }
if {$Load_SIRC_Input_File == 1} { Window hide .top222 }
if {$Load_CSK_Input_File == 1} { Window hide .top430 }
if {$Load_AIRSAR_Input_File == 1} { Window hide .top223 }
if {$Load_CONVAIR_Input_File == 1} { Window hide .top224 }
if {$Load_EMISAR_Input_File == 1} { Window hide .top225 }
if {$Load_ESAR_Input_File == 1} { Window hide .top226 }
if {$Load_FSAR_Input_File == 1} { Window hide .top431 }
if {$Load_PISAR_Input_File == 1} { Window hide .top227 }
if {$Load_SETHI_Input_File == 1} { Window hide .top228 }
if {$Load_UAVSAR_Input_File == 1} { Window hide .top386 }
if {$Load_TANDEMX_Input_File == 1} { Window hide .top436 }
if {$Load_EOSI_Extract_Data == 1} { Window hide .top229 }
if {$Load_SubArea_GraphicEditor == 1} { Window hide .top202 }
if {$Load_RawBinaryData == 1} { Window hide .top231 }
if {$Load_RawBinaryDataFiles == 1} { Window hide .top232 }
if {$Load_PSP_Extract_Data == 1} { Window hide .top233 }
if {$Load_TOPSAR_Extract_Data == 1} { Window hide .top251 }
if {$Load_ReadGEARTH_POLY == 1} { Window hide .top359 }
if {$Load_CreateGEARTH_POLY == 1} { Window hide .top360 }
if {$Load_ExtractDEM == 1} { Window hide .top361 }
if {$Load_MapReadyGeocode == 1} { Window hide .top380 }
if {$Load_MapReadyMatrix == 1} { Window hide .top381 }
if {$Load_MapReadyParameter == 1} { Window hide .top382 }
if {$Load_MapReadyTerrain == 1} { Window hide .top385 }
if {$Load_MapInfoUpdate == 1} { Window hide .top409 }
if {$Load_SNAPMatrix == 1} { Window hide .top427 }
if {$Load_SNAPParameter == 1} { Window hide .top428 }
if {$Load_EOSI_TDX_Extract_Data == 1} { Window hide .top437 }
#DATA PROCESS SNGL
if {$Load_CovarianceElementsT3 == 1} { Window hide .top42 }
if {$Load_CovarianceElementsT4 == 1} { Window hide .top40 }
if {$Load_CovarianceElementsC2 == 1} { Window hide .top23 }
if {$Load_CovarianceElementsC3 == 1} { Window hide .top61 }
if {$Load_CovarianceElementsC4 == 1} { Window hide .top57 }
if {$Load_CorrelationCoefficients2 == 1} { Window hide .top80 }
if {$Load_CorrelationCoefficients3 == 1} { Window hide .top79 }
if {$Load_CorrelationCoefficients4 == 1} { Window hide .top66 }
if {$Load_CorrelationCoefficientsPP == 1} { Window hide .top237 }
if {$Load_HAAlphaClassification == 1} { Window hide .top74 }
if {$Load_HAAlphaDecomposition2 == 1} { Window hide .top93 }
if {$Load_HAAlphaDecomposition3 == 1} { Window hide .top320 }
if {$Load_HAAlphaEigenvector3 == 1} { Window hide .top321 }
if {$Load_HAAlphaEigenvalue3 == 1} { Window hide .top322 }
if {$Load_HAAlphaDecomposition4 == 1} { Window hide .top323 }
if {$Load_HAAlphaEigenvector4 == 1} { Window hide .top324 }
if {$Load_HAAlphaEigenvalue4 == 1} { Window hide .top325 }
if {$Load_OPCE == 1} { Window hide .top98 }
if {$Load_OPCE_GraphicEditor == 1} { Window hide .top96 }
if {$Load_CompactPolarimetricMode == 1} { Window hide .top334 }
#if {$Load_PCAnalysis == 1} { Window hide .topXX }
if {$Load_PolarimetricDecomposition == 1} { Window hide .top70 }
if {$Load_PolarimetricDecompositionYam4 == 1} { Window hide .top426 }
if {$Load_PolarisationSynthesis == 1} { Window hide .top100 }
if {$Load_RCSmax == 1} { Window hide .top99 }
if {$Load_SinclairElements == 1} { Window hide .top86 }
if {$Load_TrainingAreas_GraphicEditor == 1} { Window hide .top47 }
if {$Load_MaskAreas_GraphicEditor == 1} { Window hide .top391 }
if {$Load_ROI_GraphicEditor == 1} { Window hide .top393 }
if {$Load_WishartHAAlphaClassification == 1} { Window hide .top26 }
if {$Load_WishartHAAlphaClassification_PP == 1} { Window hide .top432 }
if {$Load_WishartSupervisedClassification == 1} { Window hide .top53 }
if {$Load_StokesParameters == 1} { Window hide .top209 }
if {$Load_IntensitiesElements == 1} { Window hide .top210 }
if {$Load_WishartSupervisedClassification_PP == 1} { Window hide .top212 }
if {$Load_CameronDecomposition == 1} { Window hide .top235 }
if {$Load_PolarSignature == 1} { Window hide .top240 }
if {$Load_SubApertureDecomposition == 1} { Window hide .top243 }
if {$Load_SubApertureApplications == 1} { Window hide .top248 }
if {$Load_Statistics == 1} { Window hide .top247 }
if {$Load_DataValueProfile == 1} { Window hide .top257 }
if {$Load_Histograms == 1} { Window hide .top260 }
if {$Load_ClassificationIdentification == 1} {Window hide .top252 }
if {$Load_SurfaceInversion == 1} {Window hide .top253 }
if {$Load_HierarchicalSupervisedClassification == 1} {Window hide .top262 }
if {$Load_HierarchicalTreeArchitecture == 1} {Window hide .top263 }
if {$Load_HierarchicalInputParameters == 1} {Window hide .top264 }
if {$Load_HistogramStatistics == 1} {Window hide .top335 }
if {$Load_TextureAnalysis == 1} {Window hide .top390 }
if {$Load_EdgeDetector == 1} { Window hide .top337 }
if {$Load_Parameters == 1} { Window hide .top351 }
if {$Load_ParametersPR == 1} { Window hide .top351a }
if {$Load_ParametersZDR == 1} { Window hide .top351b }
if {$Load_DEMestimation == 1} { Window hide .top356 }
if {$Load_TSVMDecomposition == 1} { Window hide .top367 }
if {$Load_FCMHAlphaClassification == 1} { Window hide .top368 }
if {$Load_ClusterProcess == 1} { Window hide .top373 }
if {$Load_ClusterParaAvg == 1} { Window hide .top374 }
if {$Load_ClusterDataSetsAvg == 1} { Window hide .top375 }
if {$Load_SVMSupervisedClassification == 1} { Window hide .top394 }
if {$Load_SVM_PolarIndic == 1} { Window hide .top395 }
if {$Load_SVM_RBFCrossVal == 1} { Window hide .top396 }
if {$Load_WishartScattModelBasedClassification == 1} { Window hide .top434 }
if {$Load_ChangeDetectorFile == 1} { Window hide .top440 }
if {$Load_ChangeDetectorMat == 1} { Window hide .top441 }
if {$Load_CompactDecomposition == 1} { Window hide .top442 }
if {$Load_CompactClassification == 1} { Window hide .top443 }
if {$Load_DiversityIndex == 1} { Window hide .top444 }
if {$Load_GPFSupervisedClassification == 1} { Window hide .top445 }
if {$Load_GPFSupervisedClassification_PP == 1} { Window hide .top446 }
if {$Load_SoilRoughnessInversion == 1} {Window hide .top447 }
#DATA PROCESS DUAL
if {$Load_FlatEarthRemoval == 1} { Window hide .top301 }
if {$Load_CovarianceElementsT6_T11 == 1} { Window hide .top304 }
if {$Load_CovarianceElementsT6_T22 == 1} { Window hide .top305 }
if {$Load_CovarianceElementsT6_O12 == 1} { Window hide .top306 }
if {$Load_CovarianceElementsT4_T11 == 1} { Window hide .top304PP }
if {$Load_CovarianceElementsT4_T22 == 1} { Window hide .top305PP }
if {$Load_CovarianceElementsT4_O12 == 1} { Window hide .top306PP }
if {$Load_ComplexCoherenceEstimation == 1} { Window hide .top307 }
if {$Load_ComplexCoherenceEstimation_PP == 1} { Window hide .top307PP }
if {$Load_InterferogramEstimation == 1} { Window hide .top315 }
if {$Load_InterferogramEstimation_PP == 1} { Window hide .top315PP }
if {$Load_POLSARClassification == 1} { Window hide .top311 } 
if {$Load_POLinSARUnsupervisedClassification == 1} { Window hide .top312 }
if {$Load_POLinSARSupervisedClassification == 1} { Window hide .top314 }
if {$Load_ForestHeightEstimation == 1} { Window hide .top313 } 
if {$Load_ForestHeightEstimation_PP == 1} { Window hide .top313PP } 
if {$Load_HeightEstimationInversionProcedures == 1} { Window hide .top319 } 
if {$Load_CoherenceCmplxPlane == 1} { Window hide .top330 } 
if {$Load_CoherenceCmplxPlane_PP == 1} { Window hide .top330PP } 
if {$Load_CoherenceLociCmplxPlane == 1} { Window hide .top332 } 
if {$Load_CoherenceLociCmplxPlane_PP == 1} { Window hide .top332PP } 
if {$Load_PCT == 1} { Window hide .top342 }
if {$Load_DisplayPCT == 1} { Window hide .top343 }
if {$Load_FlatEarthEstimation == 1} { Window hide .top355 }
if {$Load_FlatEarthEstimation_PP == 1} { Window hide .top355PP }
if {$Load_CoarseCoRegistration == 1} { Window hide .top369 }
if {$Load_BaselineEstimation == 1} { Window hide .top370 }
if {$Load_CorrelationCoefficients6 == 1} { Window hide .top378 }
if {$Load_CorrelationCoefficients4 == 1} { Window hide .top378PP }
#DATA PROCESS MULT
if {$Load_CoarseCoRegistrationMult == 1} { Window hide .top500 }
if {$Load_HAAlphaDecompositionMult2 == 1} { Window hide .top508 }
if {$Load_HAAlphaDecompositionMult3 == 1} { Window hide .top505 }
if {$Load_HAAlphaEigenvectorMult3 == 1} { Window hide .top506 }
if {$Load_HAAlphaEigenvalueMult3 == 1} { Window hide .top507 }
if {$Load_SinclairElementsMult == 1} { Window hide .top509 }
if {$Load_CovarianceElementsMultT3 == 1} { Window hide .top510 }
if {$Load_CovarianceElementsMultC2 == 1} { Window hide .top511 }
if {$Load_DataAnalysisMult == 1} { Window hide .top512 }
if {$Load_DataAnimationMult == 1} { Window hide .top513 }
if {$Load_DataAveragingMult == 1} { Window hide .top515 }
if {$Load_HAAlphaClassificationMult == 1} { Window hide .top514 }
if {$Load_WishartSupervisedClassificationMult == 1} { Window hide .top516 }
if {$Load_WishartSupervisedClassificationMult_PP == 1} { Window hide .top517 }
if {$Load_WishartHAAlphaClassificationMult == 1} { Window hide .top518 }
if {$Load_WishartHAAlphaClassificationMult_PP == 1} { Window hide .top520 }
if {$Load_ParametersMult == 1} { Window hide .top519 }
if {$Load_ParametersMultPR == 1} { Window hide .top519a }
if {$Load_ParametersMultZDR == 1} { Window hide .top519b }
if {$Load_ChangeDetectorFileMult == 1} { Window hide .top521 }
if {$Load_ChangeDetectorMatMult == 1} { Window hide .top522 }
if {$Load_PolarTomography == 1} { Window hide .top523 }
#SPECKLE FILTER
if {$Load_SpeckleFilter == 1} { Window hide .top25 }
if {$Load_SpeckleFilter_S2 == 1} { Window hide .top204 }
if {$Load_SpeckleFilterSigma == 1} { Window hide .top352 }
if {$Load_SpeckleFilterSigma_S2 == 1} { Window hide .top353 }
if {$Load_SpeckleFilterEdge == 1} { Window hide .top362 }
if {$Load_SpeckleFilterEdge_S2 == 1} { Window hide .top363 }
if {$Load_SpeckleFilterLopez == 1} { Window hide .top365 }
if {$Load_SpeckleFilterLopez_S2 == 1} { Window hide .top366 }
if {$Load_SpeckleFilterAnYang == 1} { Window hide .top429 }
if {$Load_SIRVEstimationRestoration == 1} { Window hide .top433 }
if {$Load_SpeckleFilterScattModelBased == 1 } { Window hide .top435 }
if {$Load_SpeckleFilterNLmean == 1 } { Window hide .top451 }
if {$Load_SpeckleFilterMeanShift == 1 } { Window hide .top452 }
#SPECKLE FILTER DUAL
if {$Load_SpeckleFilterDual == 1} { Window hide .top303 }
if {$Load_SpeckleFilterDualEdge == 1} { Window hide .top364 }
if {$Load_SpeckleFilterDualSigma == 1} { Window hide .top354 }
#SPECKLE FILTER MULT
if {$Load_SpeckleFilterMult == 1} { Window hide .top501 }
if {$Load_SpeckleFilterMultLopez == 1} { Window hide .top502 }
if {$Load_SpeckleFilterMultSigma == 1} { Window hide .top503 }
#TOOLS
if {$Load_CopyDirectory == 1} { Window hide .top37 }
if {$Load_CopyFile == 1} { Window hide .top54 }
if {$Load_CreateDirectory == 1} { Window hide .top33 }
if {$Load_CreateMyFunction == 1} { Window hide .top101 }
if {$Load_DeleteDirectory == 1} { Window hide .top36 }
if {$Load_DeleteFile == 1} { Window hide .top63 }
if {$Load_DeleteMyFunction == 1} { Window hide .top121 }
if {$Load_ExecuteMyFunction == 1} { Window hide .top130 }
if {$Load_RenameDirectory == 1} { Window hide .top50 }
if {$Load_RenameFile == 1} { Window hide .top59 }
if {$Load_Tools == 1} { Window hide .top29 }
if {$Load_ToolsMask == 1} { Window hide .top383 }
if {$Load_ToolsFFT == 1} { Window hide .top58 }
#if {$Load_VisuVariable == 1} { Window hide .topXX }
if {$Load_ToolsMenu == 1} { Window hide .top213 }
if {$Load_ExportENVI == 1} { Window hide .top217 }
if {$Load_ToolsMenuDual == 1} { Window hide .top310 }
if {$Load_CheckBinaryData == 1} { Window hide .top316 }
if {$Load_PolSARproSIM == 1} { Window hide .top400 }
if {$Load_PolSARproSIMgr == 1} { Window hide .top403 }
if {$Load_PolSARproSIMsv == 1} { Window hide .top404 }
if {$Load_DataFileManagement == 1} { Window hide .top371 } 
if {$Load_CreateHDRFile == 1} { Window hide .top372 }
if {$Load_CreateMask == 1} { Window hide .top379 }
if {$Load_CreateROI == 1} { Window hide .top392 }
if {$Load_DataFormat == 1} { Window hide .top001 }
if {$Load_DataFormatDual == 1} { Window hide .top002 }
if {$Load_DataFormatMult == 1} { Window hide .top003 }
if {$Load_CompareFile == 1} { Window hide .top406 }
if {$Load_CompareDir == 1} { Window hide .top416 }
if {$Load_ComplexFile == 1} { Window hide .top417 }
if {$Load_ReadBinaryDataFileValue == 1} { Window hide .top418 }
if {$Load_CheckSizeBinaryDataFile == 1} { Window hide .top438 }
#UTIL
if {$Load_AboutPSP == 1} { Window hide .top85 }
if {$Load_Error == 1} { Window hide .top44 }
if {$Load_HelpPSP == 1} { Window hide .top89 }
if {$Load_Environment == 1} { Window hide .top31 }
#if {$Load_MainInputDirectory2 == 1} { Window hide .topXX }
#if {$Load_MainInputDirectoryASAR == 1} { Window hide .topXX }
if {$Load_Message == 1} { Window hide .top28 }
if {$Load_Question == 1} { Window hide .top45 }
if {$Load_TextEdit == 1} { Window hide .top95 }
if {$Load_UnderConstruction == 1} { Window hide .top35 }
if {$Load_Warning == 1} { Window hide .top32 }
if {$Load_Warranty == 1} { Window hide .top88 }
if {$Load_WarrantyPSP == 1} { Window hide .top199 }
if {$Load_TrackVar == 1} { Window hide .top999 }
if {$Load_FatalError == 1} { Window hide .top236 }
if {$Load_PSPTeam == 1} { Window hide .top239 }
if {$Load_PSPContributors == 1} { Window hide .top256 }
if {$Load_Advice == 1} { Window hide .top242 }
if {$Load_Advice1 == 1} { Window hide .top448 }
if {$Load_EnvironmentDual == 1} { Window hide .top300 }
if {$Load_SetUpError == 1} { Window hide .top255 }
if {$Load_LoadingBMP == 1} { Window hide .top336 }
if {$Load_SearchingGoogle == 1} { Window hide .top338 }
if {$Load_Configuration == 1} { Window hide .top341 }
if {$Load_OpenClosePSP == 1} { Window hide .top345 }
if {$Load_EnvironmentMult == 1} { Window hide .top376 }
if {$Load_Advice2 == 1} { Window hide .top377 }
if {$Load_AdviceFunctionality == 1} { Window hide .top387 }
if {$Load_AdviceWarning == 1} { Window hide .top388 }
if {$Load_Processing == 1} { Window hide .top399 }
if {$Load_PSPMemory == 1} { Window hide .top10 }
if {$Load_PSPConfiguration == 1} { Window hide .top11 }
#POLSARAP
if {$Load_PolSARapMenu == 1} { Window hide .top530 }
if {$Load_PolSARapAgriculture == 1} { Window hide .top531 }
if {$Load_PolSARapCryosphere == 1} { Window hide .top532 }
if {$Load_PolSARapForestHeightEstimation == 1} { Window hide .top533 }
if {$Load_PolSARapForestEnvironment == 1} { Window hide .top536 }
if {$Load_PolSARapOcean == 1} { Window hide .top534 }
if {$Load_PolSARapUrban == 1} { Window hide .top535 }

if {$Load_PolSARproCalc == 1} { Window hide .top600 }
if {$Load_PolSARproCalcOutputFile == 1} { Window hide .top601 }
if {$Load_PolSARproCalcOutputMat == 1} { Window hide .top602 }
if {$Load_PolSARproCalcFilter == 1} { Window hide .top603 }

CloseAllPipe
}
#############################################################################
## Procedure:  ClosePSPViewer

proc ::ClosePSPViewer {} {
global BMPChange BMPImageOpen BMPColorMapDisplay BMPColorMapGrayJetHsv BMPScreenDisplay BMPDropperFlag
global SourceWidth SourceHeight BMPMouseX BMPMouseY BMPMax BMPMin BMPValue ZoomBMP
global BMPColorBar ImageSource BMPImage BMPImageLens BMPLens BMPOverview BMPImageOverview
global BMPViewAll BMPOverviewAll BMPLensAll
global RectLensCenter PVShortcut WarningMessage WarningMessage2 VarWarning couleur_fond ColorNumber
global RectOverviewAllCenter RectLensAllCenter
#BMP PROCESS
global Load_colormap Load_colormap16 Load_colormap256 Load_colormap32 Load_colormap8
global Load_CreateBMPFile Load_CreateHSLFile Load_CreateRGBFile Load_CreateRGBFile_PP Load_Display
global Load_Save Load_ViewBMP1 Load_ViewBMPFile Load_ViewBMPLens Load_ViewBMPQL Load_ViewBMPAll
global Load_Zoom Load_ColorMapGrayJetHsv Load_DisplayMenu Load_ViewOverview Load_ViewBMPOverview
global Load_CreateBMPKMLFile Load_CreateRGBKMLFile
global PSPTopLevel

if { $BMPImageOpen == 1 } {
    if {$BMPChange == 1 } {
        if {$Load_Save == 0} {
            source "GUI/bmp_process/Save.tcl"
            set Load_Save 1
            WmTransient .top82 $PSPTopLevel
            }
    #####################################################################
        set WarningMessage "BMP IMAGE HAS CHANGED"
        set WarningMessage2 "DO YOU WISH TO SAVE ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            WidgetShow .top82; TextEditorRunTrace "Open Window Save" "b"
            tkwait variable BMPChange
            if {$BMPChange == "0"} {Window hide .top82; TextEditorRunTrace "Close Window Save" "b"}
            }
        if {"$VarWarning"=="no"} {set BMPChange "0"}
        if {"$VarWarning"=="cancel"} {set BMPChange "1"}
    ##################################################################### 
        }    
    if {$BMPChange == 0} {
        set SourceWidth ""
        set SourceHeight ""
        set BMPMouseX ""
        set BMPMouseY ""
        set BMPMax ""
        set BMPMin ""
        set BMPValue ""
        set ZoomBMP "0:0"
        set BMPImageOpen "0"
        set BMPColorMapDisplay "0"
        set BMPScreenDisplay "0"
        set BMPDropperFlag "0"
        set c0 .top64.cpd90.f.cpd92
        $c0 configure -background $couleur_fond
        if {$ColorNumber != "BMP 24 Bits"} {
            BMPColorBar blank
            # .top64.cpd104.f.cpd105 = CANVASCOLORBAR of PV3.0
            .top64.cpd104.f.cpd105 create image 0 0 -anchor nw -image BMPColorBar
            }
        image delete BMPColorBar
        image delete ImageSource
        image delete BMPImage
        image delete BMPImageLens
        image delete BMPLens
        image delete BMPOverview
        image delete BMPImageOverview
        image delete BMPViewAll
        image delete BMPOverviewAll
        image delete BMPLensAll
        set BMPImageOpen 0
        }
    }
if { $BMPImageOpen == 0 } {
    #Display Window
    TextEditorRunTrace "Close All Image Windows" "b"
    if {$Load_ViewBMPFile == 1} {Window hide .top27 }
    if {$Load_ViewBMP1 == 1} {Window hide .top51 }
    if {$Load_ViewBMPLens == 1} {Window hide .top73 }
    if {$Load_Zoom == 1} {Window hide .top78 }
    if {$Load_ViewBMPOverview == 1} {Window hide .top215 }
    if {$Load_ViewOverview == 1} {Window hide .top216 }
    if {$Load_ViewBMPAll == 1} {Window hide .top339 }
    #Colormap Window
    if {$Load_colormap256 == 1} {Window hide .top62 }
    if {$Load_colormap32 == 1} {Window hide .top76 }
    if {$Load_colormap16 == 1} {Window hide .top77 }
    if {$Load_colormap8 == 1} {Window hide .top81 }
    if {$Load_ColorMapGrayJetHsv == 1} {Window hide .top208 }
    MouseActiveFunction ""
    # .top73.can81 = CANVASBMPLENS
    if { $Load_ViewBMPLens == 1 } {.top73.can81 dtag RectLensCenter}
    # .top216.can81 = CANVASOVERVIEW
    if { $Load_ViewOverview == 1 } {.top216.can81 dtag RectLensCenter}
    # .top339.fra74.fra76.can78 = CANVASOVERVIEWALL
    if { $Load_ViewBMPAll == 1 } {
        .top339.fra74.fra76.can78 dtag RectOverviewAllCenter
        .top339.fra75.cpd77.can80 dtag RectLensAllCenter  
        }

    if {$Load_Save == 1} {Window hide .top82; TextEditorRunTrace "Close Window Save" "b"}
    if {$Load_Display == 1} {Window hide .top71; TextEditorRunTrace "Close Window Screen Display" "b"}

    set PVShortcut 0
    set BMPColorMapDisplay "0"
    set BMPColorMapGrayJetHsv "0"
    }
}
#############################################################################
## Procedure:  UpdateColorMap

proc ::UpdateColorMap {w b NumCol} {
global updatecolormap ColorNumber BMPChange BMPColorBar
global RedPalette GreenPalette BluePalette
global ImageSource BMPImage BMPWidth BMPHeight ZoomBMP
global Fonction Fonction2
global TMPBmpTmpHeader TMPBmpTmpData TMPBmpTmp TMPBmpTmpColormap TMPBmpColorBar

set initialColor [$b cget -background]
set color [tk_chooseColor -title "Choose a color" -initialcolor $initialColor]
set updatecolormap "false"
if {$color != ""} {
    set updatecolormap "true"
    $b configure -background $color
    set RedPalette($NumCol) [expr round([lindex [winfo rgb $b $color] 0] / 256)] 
    set GreenPalette($NumCol) [expr round([lindex [winfo rgb $b $color] 1] / 256)] 
    set BluePalette($NumCol) [expr round([lindex [winfo rgb $b $color] 2] / 256)]
    set BMPChange "1"
    set f [ open $TMPBmpTmpColormap w]
    puts $f "JASC-PAL"
    puts $f "0100"
    puts $f "256"
    set RedPalette(0) "125"
    set GreenPalette(0) "125"
    set BluePalette(0) "125"
    for {set i 1} {$i <= $ColorNumber} {incr i} {
        set couleur "$RedPalette($i) $GreenPalette($i) $BluePalette($i)"
        puts $f $couleur
        }
    close $f
    Window show .top336; TextEditorRunTrace "Open Window Loading BMP" "b"
    set Fonction "Update the ColorMap"; set Fonction2 ""
    WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
    set ProgressLine "0"
    update
    TextEditorRunTrace "Process The Function Soft/bmp_process/recreate_bmp.exe" "k"
    TextEditorRunTrace "Arguments: -ifh \x22$TMPBmpTmpHeader\x22 -ifd \x22$TMPBmpTmpData\x22 -oft \x22$TMPBmpTmp\x22 -ifcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22" "k"
    set f [ open "| Soft/bmp_process/recreate_bmp.exe -ifh \x22$TMPBmpTmpHeader\x22 -ifd \x22$TMPBmpTmpData\x22 -oft \x22$TMPBmpTmp\x22 -ifcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22" r]
    PsPprogressBar $f
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"

    image delete ImageSource
    image create photo ImageSource -file $TMPBmpTmp
    image delete BMPColorBar
    image create photo BMPColorBar -file $TMPBmpColorBar
    #widget(CANVASCOLORBAR) = .top64.cpd104.f.cpd105
    .top64.cpd104.f.cpd105  create image 0 0 -anchor nw -image BMPColorBar
        
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomBMP 0]
    set Num2 [string index $ZoomBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 2]
        set Den2 [string index $ZoomBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomBMP 3]
        set Den2 [string index $ZoomBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }

    if {$Den >= $Num} {
        set BMPSample $Den
        set Xmax [expr round($BMPWidth * $BMPSample)]
        set Ymax [expr round($BMPHeight * $BMPSample)]
        BMPImage copy ImageSource -from 0 0 $Xmax $Ymax -subsample $BMPSample $BMPSample
        }
    if {$Den < $Num} {
        set BMPZoom $Num
        set Xmax [expr round($BMPWidth / $BMPZoom)]
        set Ymax [expr round($BMPHeight / $BMPZoom)]
        BMPImage copy ImageSource -from 0 0 $Xmax $Ymax -zoom $BMPZoom $BMPZoom
        }        
    $w itemconfigure current -image BMPImage 

    Window hide .top336; TextEditorRunTrace "Close Window Loading BMP" "b"
    }
}
#############################################################################
## Procedure:  UpdateColorMap8

proc ::UpdateColorMap8 {} {
global Load_colormap8 RedPalette GreenPalette BluePalette

if {$Load_colormap8 == 1} {
    set c2 .top81.fra35.but37
    set couleur [format #%02x%02x%02x $RedPalette(2) $GreenPalette(2) $BluePalette(2)]
    $c2 configure -background $couleur
    set c3 .top81.fra35.but38
    set couleur [format #%02x%02x%02x $RedPalette(3) $GreenPalette(3) $BluePalette(3)]
    $c3 configure -background $couleur
    set c4 .top81.fra35.but39
    set couleur [format #%02x%02x%02x $RedPalette(4) $GreenPalette(4) $BluePalette(4)]
    $c4 configure -background $couleur
    set c5 .top81.fra35.but40
    set couleur [format #%02x%02x%02x $RedPalette(5) $GreenPalette(5) $BluePalette(5)]
    $c5 configure -background $couleur
    set c6 .top81.fra35.but41
    set couleur [format #%02x%02x%02x $RedPalette(6) $GreenPalette(6) $BluePalette(6)]
    $c6 configure -background $couleur
    set c7 .top81.fra35.but42
    set couleur [format #%02x%02x%02x $RedPalette(7) $GreenPalette(7) $BluePalette(7)]
    $c7 configure -background $couleur
    set c8 .top81.fra35.but43
    set couleur [format #%02x%02x%02x $RedPalette(8) $GreenPalette(8) $BluePalette(8)]
    $c8 configure -background $couleur
    set c9 .top81.fra35.but36
    set couleur [format #%02x%02x%02x $RedPalette(9) $GreenPalette(9) $BluePalette(9)]
    $c9 configure -background $couleur
    }
}
#############################################################################
## Procedure:  UpdateColorMap16

proc ::UpdateColorMap16 {} {
global Load_colormap16 RedPalette GreenPalette BluePalette

if {$Load_colormap16 == 1} {
    set c2 .top77.fra35.but37
    set couleur [format #%02x%02x%02x $RedPalette(2) $GreenPalette(2) $BluePalette(2)]
    $c2 configure -background $couleur
    set c3 .top77.fra35.but38
    set couleur [format #%02x%02x%02x $RedPalette(3) $GreenPalette(3) $BluePalette(3)]
    $c3 configure -background $couleur
    set c4 .top77.fra35.but39
    set couleur [format #%02x%02x%02x $RedPalette(4) $GreenPalette(4) $BluePalette(4)]
    $c4 configure -background $couleur
    set c5 .top77.fra35.but40
    set couleur [format #%02x%02x%02x $RedPalette(5) $GreenPalette(5) $BluePalette(5)]
    $c5 configure -background $couleur
    set c6 .top77.fra35.but41
    set couleur [format #%02x%02x%02x $RedPalette(6) $GreenPalette(6) $BluePalette(6)]
    $c6 configure -background $couleur
    set c7 .top77.fra35.but42
    set couleur [format #%02x%02x%02x $RedPalette(7) $GreenPalette(7) $BluePalette(7)]
    $c7 configure -background $couleur
    set c8 .top77.fra35.but43
    set couleur [format #%02x%02x%02x $RedPalette(8) $GreenPalette(8) $BluePalette(8)]
    $c8 configure -background $couleur
    set c9 .top77.fra35.but44
    set couleur [format #%02x%02x%02x $RedPalette(9) $GreenPalette(9) $BluePalette(9)]
    $c9 configure -background $couleur
    set c10 .top77.fra35.but45
    set couleur [format #%02x%02x%02x $RedPalette(10) $GreenPalette(10) $BluePalette(10)]
    $c10 configure -background $couleur
    set c11 .top77.fra35.but46
    set couleur [format #%02x%02x%02x $RedPalette(11) $GreenPalette(11) $BluePalette(11)]
    $c11 configure -background $couleur
    set c12 .top77.fra35.but47
    set couleur [format #%02x%02x%02x $RedPalette(12) $GreenPalette(12) $BluePalette(12)]
    $c12 configure -background $couleur
    set c13 .top77.fra35.but48
    set couleur [format #%02x%02x%02x $RedPalette(13) $GreenPalette(13) $BluePalette(13)]
    $c13 configure -background $couleur
    set c14 .top77.fra35.but49
    set couleur [format #%02x%02x%02x $RedPalette(14) $GreenPalette(14) $BluePalette(14)]
    $c14 configure -background $couleur
    set c15 .top77.fra35.but50
    set couleur [format #%02x%02x%02x $RedPalette(15) $GreenPalette(15) $BluePalette(15)]
    $c15 configure -background $couleur
    set c16 .top77.fra35.but51
    set couleur [format #%02x%02x%02x $RedPalette(16) $GreenPalette(16) $BluePalette(16)]
    $c16 configure -background $couleur
    set c17 .top77.fra35.but36
    set couleur [format #%02x%02x%02x $RedPalette(17) $GreenPalette(17) $BluePalette(17)]
    $c17 configure -background $couleur
    }
}
#############################################################################
## Procedure:  UpdateColorMap32

proc ::UpdateColorMap32 {} {
global Load_colormap32 RedPalette GreenPalette BluePalette

if {$Load_colormap32 == 1} {
    set c2 .top76.fra35.but37
    set couleur [format #%02x%02x%02x $RedPalette(2) $GreenPalette(2) $BluePalette(2)]
    $c2 configure -background $couleur
    set c3 .top76.fra35.but38
    set couleur [format #%02x%02x%02x $RedPalette(3) $GreenPalette(3) $BluePalette(3)]
    $c3 configure -background $couleur
    set c4 .top76.fra35.but39
    set couleur [format #%02x%02x%02x $RedPalette(4) $GreenPalette(4) $BluePalette(4)]
    $c4 configure -background $couleur
    set c5 .top76.fra35.but40
    set couleur [format #%02x%02x%02x $RedPalette(5) $GreenPalette(5) $BluePalette(5)]
    $c5 configure -background $couleur
    set c6 .top76.fra35.but41
    set couleur [format #%02x%02x%02x $RedPalette(6) $GreenPalette(6) $BluePalette(6)]
    $c6 configure -background $couleur
    set c7 .top76.fra35.but42
    set couleur [format #%02x%02x%02x $RedPalette(7) $GreenPalette(7) $BluePalette(7)]
    $c7 configure -background $couleur
    set c8 .top76.fra35.but43
    set couleur [format #%02x%02x%02x $RedPalette(8) $GreenPalette(8) $BluePalette(8)]
    $c8 configure -background $couleur
    set c9 .top76.fra35.but44
    set couleur [format #%02x%02x%02x $RedPalette(9) $GreenPalette(9) $BluePalette(9)]
    $c9 configure -background $couleur
    set c10 .top76.fra35.but45
    set couleur [format #%02x%02x%02x $RedPalette(10) $GreenPalette(10) $BluePalette(10)]
    $c10 configure -background $couleur
    set c11 .top76.fra35.but46
    set couleur [format #%02x%02x%02x $RedPalette(11) $GreenPalette(11) $BluePalette(11)]
    $c11 configure -background $couleur
    set c12 .top76.fra35.but47
    set couleur [format #%02x%02x%02x $RedPalette(12) $GreenPalette(12) $BluePalette(12)]
    $c12 configure -background $couleur
    set c13 .top76.fra35.but48
    set couleur [format #%02x%02x%02x $RedPalette(13) $GreenPalette(13) $BluePalette(13)]
    $c13 configure -background $couleur
    set c14 .top76.fra35.but49
    set couleur [format #%02x%02x%02x $RedPalette(14) $GreenPalette(14) $BluePalette(14)]
    $c14 configure -background $couleur
    set c15 .top76.fra35.but50
    set couleur [format #%02x%02x%02x $RedPalette(15) $GreenPalette(15) $BluePalette(15)]
    $c15 configure -background $couleur
    set c16 .top76.fra35.but51
    set couleur [format #%02x%02x%02x $RedPalette(16) $GreenPalette(16) $BluePalette(16)]
    $c16 configure -background $couleur
    set c17 .top76.fra35.but70
    set couleur [format #%02x%02x%02x $RedPalette(17) $GreenPalette(17) $BluePalette(17)]
    $c17 configure -background $couleur
    set c18 .top76.fra35.but71
    set couleur [format #%02x%02x%02x $RedPalette(18) $GreenPalette(18) $BluePalette(18)]
    $c18 configure -background $couleur
    set c19 .top76.fra35.but72
    set couleur [format #%02x%02x%02x $RedPalette(19) $GreenPalette(19) $BluePalette(19)]
    $c19 configure -background $couleur
    set c20 .top76.fra35.but73
    set couleur [format #%02x%02x%02x $RedPalette(20) $GreenPalette(20) $BluePalette(20)]
    $c20 configure -background $couleur
    set c21 .top76.fra35.but74
    set couleur [format #%02x%02x%02x $RedPalette(21) $GreenPalette(21) $BluePalette(21)]
    $c21 configure -background $couleur
    set c22 .top76.fra35.but75
    set couleur [format #%02x%02x%02x $RedPalette(22) $GreenPalette(22) $BluePalette(22)]
    $c22 configure -background $couleur
    set c23 .top76.fra35.but76
    set couleur [format #%02x%02x%02x $RedPalette(23) $GreenPalette(23) $BluePalette(23)]
    $c23 configure -background $couleur
    set c24 .top76.fra35.but77
    set couleur [format #%02x%02x%02x $RedPalette(24) $GreenPalette(24) $BluePalette(24)]
    $c24 configure -background $couleur
    set c25 .top76.fra35.but78
    set couleur [format #%02x%02x%02x $RedPalette(25) $GreenPalette(25) $BluePalette(25)]
    $c25 configure -background $couleur
    set c26 .top76.fra35.but79
    set couleur [format #%02x%02x%02x $RedPalette(26) $GreenPalette(26) $BluePalette(26)]
    $c26 configure -background $couleur
    set c27 .top76.fra35.but80
    set couleur [format #%02x%02x%02x $RedPalette(27) $GreenPalette(27) $BluePalette(27)]
    $c27 configure -background $couleur
    set c28 .top76.fra35.but83
    set couleur [format #%02x%02x%02x $RedPalette(28) $GreenPalette(28) $BluePalette(28)]
    $c28 configure -background $couleur
    set c29 .top76.fra35.but84
    set couleur [format #%02x%02x%02x $RedPalette(29) $GreenPalette(29) $BluePalette(29)]
    $c29 configure -background $couleur
    set c30 .top76.fra35.but85
    set couleur [format #%02x%02x%02x $RedPalette(30) $GreenPalette(30) $BluePalette(30)]
    $c30 configure -background $couleur
    set c31 .top76.fra35.but86
    set couleur [format #%02x%02x%02x $RedPalette(31) $GreenPalette(31) $BluePalette(31)]
    $c31 configure -background $couleur
    set c32 .top76.fra35.but87
    set couleur [format #%02x%02x%02x $RedPalette(32) $GreenPalette(32) $BluePalette(32)]
    $c32 configure -background $couleur
    set c33 .top76.fra35.but36
    set couleur [format #%02x%02x%02x $RedPalette(33) $GreenPalette(33) $BluePalette(33)]
    $c33 configure -background $couleur
    }
}
#############################################################################
## Procedure:  UpdateColorMap256

proc ::UpdateColorMap256 {} {
global Load_colormap256 RedPalette GreenPalette BluePalette

if {$Load_colormap256 == 1} {
    set c1 .top62.fra35.but36
    set couleur [format #%02x%02x%02x $RedPalette(1) $GreenPalette(1) $BluePalette(1)]
    $c1 configure -background $couleur
    set c2 .top62.fra35.but37
    set couleur [format #%02x%02x%02x $RedPalette(2) $GreenPalette(2) $BluePalette(2)]
    $c2 configure -background $couleur
    set c3 .top62.fra35.but38
    set couleur [format #%02x%02x%02x $RedPalette(3) $GreenPalette(3) $BluePalette(3)]
    $c3 configure -background $couleur
    set c4 .top62.fra35.but39
    set couleur [format #%02x%02x%02x $RedPalette(4) $GreenPalette(4) $BluePalette(4)]
    $c4 configure -background $couleur
    set c5 .top62.fra35.but40
    set couleur [format #%02x%02x%02x $RedPalette(5) $GreenPalette(5) $BluePalette(5)]
    $c5 configure -background $couleur
    set c6 .top62.fra35.but41
    set couleur [format #%02x%02x%02x $RedPalette(6) $GreenPalette(6) $BluePalette(6)]
    $c6 configure -background $couleur
    set c7 .top62.fra35.but42
    set couleur [format #%02x%02x%02x $RedPalette(7) $GreenPalette(7) $BluePalette(7)]
    $c7 configure -background $couleur
    set c8 .top62.fra35.but43
    set couleur [format #%02x%02x%02x $RedPalette(8) $GreenPalette(8) $BluePalette(8)]
    $c8 configure -background $couleur
    set c9 .top62.fra35.but44
    set couleur [format #%02x%02x%02x $RedPalette(9) $GreenPalette(9) $BluePalette(9)]
    $c9 configure -background $couleur
    set c10 .top62.fra35.but45
    set couleur [format #%02x%02x%02x $RedPalette(10) $GreenPalette(10) $BluePalette(10)]
    $c10 configure -background $couleur
    set c11 .top62.fra35.but46
    set couleur [format #%02x%02x%02x $RedPalette(11) $GreenPalette(11) $BluePalette(11)]
    $c11 configure -background $couleur
    set c12 .top62.fra35.but47
    set couleur [format #%02x%02x%02x $RedPalette(12) $GreenPalette(12) $BluePalette(12)]
    $c12 configure -background $couleur
    set c13 .top62.fra35.but48
    set couleur [format #%02x%02x%02x $RedPalette(13) $GreenPalette(13) $BluePalette(13)]
    $c13 configure -background $couleur
    set c14 .top62.fra35.but49
    set couleur [format #%02x%02x%02x $RedPalette(14) $GreenPalette(14) $BluePalette(14)]
    $c14 configure -background $couleur
    set c15 .top62.fra35.but50
    set couleur [format #%02x%02x%02x $RedPalette(15) $GreenPalette(15) $BluePalette(15)]
    $c15 configure -background $couleur
    set c16 .top62.fra35.but51
    set couleur [format #%02x%02x%02x $RedPalette(16) $GreenPalette(16) $BluePalette(16)]
    $c16 configure -background $couleur
    set c17 .top62.fra35.but70
    set couleur [format #%02x%02x%02x $RedPalette(17) $GreenPalette(17) $BluePalette(17)]
    $c17 configure -background $couleur
    set c18 .top62.fra35.but71
    set couleur [format #%02x%02x%02x $RedPalette(18) $GreenPalette(18) $BluePalette(18)]
    $c18 configure -background $couleur
    set c19 .top62.fra35.but72
    set couleur [format #%02x%02x%02x $RedPalette(19) $GreenPalette(19) $BluePalette(19)]
    $c19 configure -background $couleur
    set c20 .top62.fra35.but73
    set couleur [format #%02x%02x%02x $RedPalette(20) $GreenPalette(20) $BluePalette(20)]
    $c20 configure -background $couleur
    set c21 .top62.fra35.but74
    set couleur [format #%02x%02x%02x $RedPalette(21) $GreenPalette(21) $BluePalette(21)]
    $c21 configure -background $couleur
    set c22 .top62.fra35.but75
    set couleur [format #%02x%02x%02x $RedPalette(22) $GreenPalette(22) $BluePalette(22)]
    $c22 configure -background $couleur
    set c23 .top62.fra35.but76
    set couleur [format #%02x%02x%02x $RedPalette(23) $GreenPalette(23) $BluePalette(23)]
    $c23 configure -background $couleur
    set c24 .top62.fra35.but77
    set couleur [format #%02x%02x%02x $RedPalette(24) $GreenPalette(24) $BluePalette(24)]
    $c24 configure -background $couleur
    set c25 .top62.fra35.but78
    set couleur [format #%02x%02x%02x $RedPalette(25) $GreenPalette(25) $BluePalette(25)]
    $c25 configure -background $couleur
    set c26 .top62.fra35.but79
    set couleur [format #%02x%02x%02x $RedPalette(26) $GreenPalette(26) $BluePalette(26)]
    $c26 configure -background $couleur
    set c27 .top62.fra35.but80
    set couleur [format #%02x%02x%02x $RedPalette(27) $GreenPalette(27) $BluePalette(27)]
    $c27 configure -background $couleur
    set c28 .top62.fra35.but83
    set couleur [format #%02x%02x%02x $RedPalette(28) $GreenPalette(28) $BluePalette(28)]
    $c28 configure -background $couleur
    set c29 .top62.fra35.but84
    set couleur [format #%02x%02x%02x $RedPalette(29) $GreenPalette(29) $BluePalette(29)]
    $c29 configure -background $couleur
    set c30 .top62.fra35.but85
    set couleur [format #%02x%02x%02x $RedPalette(30) $GreenPalette(30) $BluePalette(30)]
    $c30 configure -background $couleur
    set c31 .top62.fra35.but86
    set couleur [format #%02x%02x%02x $RedPalette(31) $GreenPalette(31) $BluePalette(31)]
    $c31 configure -background $couleur
    set c32 .top62.fra35.but87
    set couleur [format #%02x%02x%02x $RedPalette(32) $GreenPalette(32) $BluePalette(32)]
    $c32 configure -background $couleur
    set c33 .top62.fra89.but36
    set couleur [format #%02x%02x%02x $RedPalette(33) $GreenPalette(33) $BluePalette(33)]
    $c33 configure -background $couleur
    set c34 .top62.fra89.but37
    set couleur [format #%02x%02x%02x $RedPalette(34) $GreenPalette(34) $BluePalette(34)]
    $c34 configure -background $couleur
    set c35 .top62.fra89.but38
    set couleur [format #%02x%02x%02x $RedPalette(35) $GreenPalette(35) $BluePalette(35)]
    $c35 configure -background $couleur
    set c36 .top62.fra89.but39
    set couleur [format #%02x%02x%02x $RedPalette(36) $GreenPalette(36) $BluePalette(36)]
    $c36 configure -background $couleur
    set c37 .top62.fra89.but40
    set couleur [format #%02x%02x%02x $RedPalette(37) $GreenPalette(37) $BluePalette(37)]
    $c37 configure -background $couleur
    set c38 .top62.fra89.but41
    set couleur [format #%02x%02x%02x $RedPalette(38) $GreenPalette(38) $BluePalette(38)]
    $c38 configure -background $couleur
    set c39 .top62.fra89.but42
    set couleur [format #%02x%02x%02x $RedPalette(39) $GreenPalette(39) $BluePalette(39)]
    $c39 configure -background $couleur
    set c40 .top62.fra89.but43
    set couleur [format #%02x%02x%02x $RedPalette(40) $GreenPalette(40) $BluePalette(40)]
    $c40 configure -background $couleur
    set c41 .top62.fra89.but44
    set couleur [format #%02x%02x%02x $RedPalette(41) $GreenPalette(41) $BluePalette(41)]
    $c41 configure -background $couleur
    set c42 .top62.fra89.but45
    set couleur [format #%02x%02x%02x $RedPalette(42) $GreenPalette(42) $BluePalette(42)]
    $c42 configure -background $couleur
    set c43 .top62.fra89.but46
    set couleur [format #%02x%02x%02x $RedPalette(43) $GreenPalette(43) $BluePalette(43)]
    $c43 configure -background $couleur
    set c44 .top62.fra89.but47
    set couleur [format #%02x%02x%02x $RedPalette(44) $GreenPalette(44) $BluePalette(44)]
    $c44 configure -background $couleur
    set c45 .top62.fra89.but48
    set couleur [format #%02x%02x%02x $RedPalette(45) $GreenPalette(45) $BluePalette(45)]
    $c45 configure -background $couleur
    set c46 .top62.fra89.but49
    set couleur [format #%02x%02x%02x $RedPalette(46) $GreenPalette(46) $BluePalette(46)]
    $c46 configure -background $couleur
    set c47 .top62.fra89.but50
    set couleur [format #%02x%02x%02x $RedPalette(47) $GreenPalette(47) $BluePalette(47)]
    $c47 configure -background $couleur
    set c48 .top62.fra89.but51
    set couleur [format #%02x%02x%02x $RedPalette(48) $GreenPalette(48) $BluePalette(48)]
    $c48 configure -background $couleur
    set c49 .top62.fra89.but70
    set couleur [format #%02x%02x%02x $RedPalette(49) $GreenPalette(49) $BluePalette(49)]
    $c49 configure -background $couleur
    set c50 .top62.fra89.but71
    set couleur [format #%02x%02x%02x $RedPalette(50) $GreenPalette(50) $BluePalette(50)]
    $c50 configure -background $couleur
set c51 .top62.fra89.but72
set couleur [format #%02x%02x%02x $RedPalette(51) $GreenPalette(51) $BluePalette(51)]
$c51 configure -background $couleur
set c52 .top62.fra89.but73
set couleur [format #%02x%02x%02x $RedPalette(52) $GreenPalette(52) $BluePalette(52)]
$c52 configure -background $couleur
set c53 .top62.fra89.but74
set couleur [format #%02x%02x%02x $RedPalette(53) $GreenPalette(53) $BluePalette(53)]
$c53 configure -background $couleur
set c54 .top62.fra89.but75
set couleur [format #%02x%02x%02x $RedPalette(54) $GreenPalette(54) $BluePalette(54)]
$c54 configure -background $couleur
set c55 .top62.fra89.but76
set couleur [format #%02x%02x%02x $RedPalette(55) $GreenPalette(55) $BluePalette(55)]
$c55 configure -background $couleur
set c56 .top62.fra89.but77
set couleur [format #%02x%02x%02x $RedPalette(56) $GreenPalette(56) $BluePalette(56)]
$c56 configure -background $couleur
set c57 .top62.fra89.but78
set couleur [format #%02x%02x%02x $RedPalette(57) $GreenPalette(57) $BluePalette(57)]
$c57 configure -background $couleur
set c58 .top62.fra89.but79
set couleur [format #%02x%02x%02x $RedPalette(58) $GreenPalette(58) $BluePalette(58)]
$c58 configure -background $couleur
set c59 .top62.fra89.but80
set couleur [format #%02x%02x%02x $RedPalette(59) $GreenPalette(59) $BluePalette(59)]
$c59 configure -background $couleur
set c60 .top62.fra89.but83
set couleur [format #%02x%02x%02x $RedPalette(60) $GreenPalette(60) $BluePalette(60)]
$c60 configure -background $couleur
set c61 .top62.fra89.but84
set couleur [format #%02x%02x%02x $RedPalette(61) $GreenPalette(61) $BluePalette(61)]
$c61 configure -background $couleur
set c62 .top62.fra89.but85
set couleur [format #%02x%02x%02x $RedPalette(62) $GreenPalette(62) $BluePalette(62)]
$c62 configure -background $couleur
set c63 .top62.fra89.but86
set couleur [format #%02x%02x%02x $RedPalette(63) $GreenPalette(63) $BluePalette(63)]
$c63 configure -background $couleur
set c64 .top62.fra89.but87
set couleur [format #%02x%02x%02x $RedPalette(64) $GreenPalette(64) $BluePalette(64)]
$c64 configure -background $couleur
set c65 .top62.fra90.but36
set couleur [format #%02x%02x%02x $RedPalette(65) $GreenPalette(65) $BluePalette(65)]
$c65 configure -background $couleur
set c66 .top62.fra90.but37
set couleur [format #%02x%02x%02x $RedPalette(66) $GreenPalette(66) $BluePalette(66)]
$c66 configure -background $couleur
set c67 .top62.fra90.but38
set couleur [format #%02x%02x%02x $RedPalette(67) $GreenPalette(67) $BluePalette(67)]
$c67 configure -background $couleur
set c68 .top62.fra90.but39
set couleur [format #%02x%02x%02x $RedPalette(68) $GreenPalette(68) $BluePalette(68)]
$c68 configure -background $couleur
set c69 .top62.fra90.but40
set couleur [format #%02x%02x%02x $RedPalette(69) $GreenPalette(69) $BluePalette(69)]
$c69 configure -background $couleur
set c70 .top62.fra90.but41
set couleur [format #%02x%02x%02x $RedPalette(70) $GreenPalette(70) $BluePalette(70)]
$c70 configure -background $couleur
set c71 .top62.fra90.but42
set couleur [format #%02x%02x%02x $RedPalette(71) $GreenPalette(71) $BluePalette(71)]
$c71 configure -background $couleur
set c72 .top62.fra90.but43
set couleur [format #%02x%02x%02x $RedPalette(72) $GreenPalette(72) $BluePalette(72)]
$c72 configure -background $couleur
set c73 .top62.fra90.but44
set couleur [format #%02x%02x%02x $RedPalette(73) $GreenPalette(73) $BluePalette(73)]
$c73 configure -background $couleur
set c74 .top62.fra90.but45
set couleur [format #%02x%02x%02x $RedPalette(74) $GreenPalette(74) $BluePalette(74)]
$c74 configure -background $couleur
set c75 .top62.fra90.but46
set couleur [format #%02x%02x%02x $RedPalette(75) $GreenPalette(75) $BluePalette(75)]
$c75 configure -background $couleur
set c76 .top62.fra90.but47
set couleur [format #%02x%02x%02x $RedPalette(76) $GreenPalette(76) $BluePalette(76)]
$c76 configure -background $couleur
set c77 .top62.fra90.but48
set couleur [format #%02x%02x%02x $RedPalette(77) $GreenPalette(77) $BluePalette(77)]
$c77 configure -background $couleur
set c78 .top62.fra90.but49
set couleur [format #%02x%02x%02x $RedPalette(78) $GreenPalette(78) $BluePalette(78)]
$c78 configure -background $couleur
set c79 .top62.fra90.but50
set couleur [format #%02x%02x%02x $RedPalette(79) $GreenPalette(79) $BluePalette(79)]
$c79 configure -background $couleur
set c80 .top62.fra90.but51
set couleur [format #%02x%02x%02x $RedPalette(80) $GreenPalette(80) $BluePalette(80)]
$c80 configure -background $couleur
set c81 .top62.fra90.but70
set couleur [format #%02x%02x%02x $RedPalette(81) $GreenPalette(81) $BluePalette(81)]
$c81 configure -background $couleur
set c82 .top62.fra90.but71
set couleur [format #%02x%02x%02x $RedPalette(82) $GreenPalette(82) $BluePalette(82)]
$c82 configure -background $couleur
set c83 .top62.fra90.but72
set couleur [format #%02x%02x%02x $RedPalette(83) $GreenPalette(83) $BluePalette(83)]
$c83 configure -background $couleur
set c84 .top62.fra90.but73
set couleur [format #%02x%02x%02x $RedPalette(84) $GreenPalette(84) $BluePalette(84)]
$c84 configure -background $couleur
set c85 .top62.fra90.but74
set couleur [format #%02x%02x%02x $RedPalette(85) $GreenPalette(85) $BluePalette(85)]
$c85 configure -background $couleur
set c86 .top62.fra90.but75
set couleur [format #%02x%02x%02x $RedPalette(86) $GreenPalette(86) $BluePalette(86)]
$c86 configure -background $couleur
set c87 .top62.fra90.but76
set couleur [format #%02x%02x%02x $RedPalette(87) $GreenPalette(87) $BluePalette(87)]
$c87 configure -background $couleur
set c88 .top62.fra90.but77
set couleur [format #%02x%02x%02x $RedPalette(88) $GreenPalette(88) $BluePalette(88)]
$c88 configure -background $couleur
set c89 .top62.fra90.but78
set couleur [format #%02x%02x%02x $RedPalette(89) $GreenPalette(89) $BluePalette(89)]
$c89 configure -background $couleur
set c90 .top62.fra90.but79
set couleur [format #%02x%02x%02x $RedPalette(90) $GreenPalette(90) $BluePalette(90)]
$c90 configure -background $couleur
set c91 .top62.fra90.but80
set couleur [format #%02x%02x%02x $RedPalette(91) $GreenPalette(91) $BluePalette(91)]
$c91 configure -background $couleur
set c92 .top62.fra90.but83
set couleur [format #%02x%02x%02x $RedPalette(92) $GreenPalette(92) $BluePalette(92)]
$c92 configure -background $couleur
set c93 .top62.fra90.but84
set couleur [format #%02x%02x%02x $RedPalette(93) $GreenPalette(93) $BluePalette(93)]
$c93 configure -background $couleur
set c94 .top62.fra90.but85
set couleur [format #%02x%02x%02x $RedPalette(94) $GreenPalette(94) $BluePalette(94)]
$c94 configure -background $couleur
set c95 .top62.fra90.but86
set couleur [format #%02x%02x%02x $RedPalette(95) $GreenPalette(95) $BluePalette(95)]
$c95 configure -background $couleur
set c96 .top62.fra90.but87
set couleur [format #%02x%02x%02x $RedPalette(96) $GreenPalette(96) $BluePalette(96)]
$c96 configure -background $couleur
set c97 .top62.fra91.but36
set couleur [format #%02x%02x%02x $RedPalette(97) $GreenPalette(97) $BluePalette(97)]
$c97 configure -background $couleur
set c98 .top62.fra91.but37
set couleur [format #%02x%02x%02x $RedPalette(98) $GreenPalette(98) $BluePalette(98)]
$c98 configure -background $couleur
set c99 .top62.fra91.but38
set couleur [format #%02x%02x%02x $RedPalette(99) $GreenPalette(99) $BluePalette(99)]
$c99 configure -background $couleur
set c100 .top62.fra91.but39
set couleur [format #%02x%02x%02x $RedPalette(100) $GreenPalette(100) $BluePalette(100)]
$c100 configure -background $couleur
set c101 .top62.fra91.but40
set couleur [format #%02x%02x%02x $RedPalette(101) $GreenPalette(101) $BluePalette(101)]
$c101 configure -background $couleur
set c102 .top62.fra91.but41
set couleur [format #%02x%02x%02x $RedPalette(102) $GreenPalette(102) $BluePalette(102)]
$c102 configure -background $couleur
set c103 .top62.fra91.but42
set couleur [format #%02x%02x%02x $RedPalette(103) $GreenPalette(103) $BluePalette(103)]
$c103 configure -background $couleur
set c104 .top62.fra91.but43
set couleur [format #%02x%02x%02x $RedPalette(104) $GreenPalette(104) $BluePalette(104)]
$c104 configure -background $couleur
set c105 .top62.fra91.but44
set couleur [format #%02x%02x%02x $RedPalette(105) $GreenPalette(105) $BluePalette(105)]
$c105 configure -background $couleur
set c106 .top62.fra91.but45
set couleur [format #%02x%02x%02x $RedPalette(106) $GreenPalette(106) $BluePalette(106)]
$c106 configure -background $couleur
set c107 .top62.fra91.but46
set couleur [format #%02x%02x%02x $RedPalette(107) $GreenPalette(107) $BluePalette(107)]
$c107 configure -background $couleur
set c108 .top62.fra91.but47
set couleur [format #%02x%02x%02x $RedPalette(108) $GreenPalette(108) $BluePalette(108)]
$c108 configure -background $couleur
set c109 .top62.fra91.but48
set couleur [format #%02x%02x%02x $RedPalette(109) $GreenPalette(109) $BluePalette(109)]
$c109 configure -background $couleur
set c110 .top62.fra91.but49
set couleur [format #%02x%02x%02x $RedPalette(110) $GreenPalette(110) $BluePalette(110)]
$c110 configure -background $couleur
set c111 .top62.fra91.but50
set couleur [format #%02x%02x%02x $RedPalette(111) $GreenPalette(111) $BluePalette(111)]
$c111 configure -background $couleur
set c112 .top62.fra91.but51
set couleur [format #%02x%02x%02x $RedPalette(112) $GreenPalette(112) $BluePalette(112)]
$c112 configure -background $couleur
set c113 .top62.fra91.but70
set couleur [format #%02x%02x%02x $RedPalette(113) $GreenPalette(113) $BluePalette(113)]
$c113 configure -background $couleur
set c114 .top62.fra91.but71
set couleur [format #%02x%02x%02x $RedPalette(114) $GreenPalette(114) $BluePalette(114)]
$c114 configure -background $couleur
set c115 .top62.fra91.but72
set couleur [format #%02x%02x%02x $RedPalette(115) $GreenPalette(115) $BluePalette(115)]
$c115 configure -background $couleur
set c116 .top62.fra91.but73
set couleur [format #%02x%02x%02x $RedPalette(116) $GreenPalette(116) $BluePalette(116)]
$c116 configure -background $couleur
set c117 .top62.fra91.but74
set couleur [format #%02x%02x%02x $RedPalette(117) $GreenPalette(117) $BluePalette(117)]
$c117 configure -background $couleur
set c118 .top62.fra91.but75
set couleur [format #%02x%02x%02x $RedPalette(118) $GreenPalette(118) $BluePalette(118)]
$c118 configure -background $couleur
set c119 .top62.fra91.but76
set couleur [format #%02x%02x%02x $RedPalette(119) $GreenPalette(119) $BluePalette(119)]
$c119 configure -background $couleur
set c120 .top62.fra91.but77
set couleur [format #%02x%02x%02x $RedPalette(120) $GreenPalette(120) $BluePalette(120)]
$c120 configure -background $couleur
set c121 .top62.fra91.but78
set couleur [format #%02x%02x%02x $RedPalette(121) $GreenPalette(121) $BluePalette(121)]
$c121 configure -background $couleur
set c122 .top62.fra91.but79
set couleur [format #%02x%02x%02x $RedPalette(122) $GreenPalette(122) $BluePalette(122)]
$c122 configure -background $couleur
set c123 .top62.fra91.but80
set couleur [format #%02x%02x%02x $RedPalette(123) $GreenPalette(123) $BluePalette(123)]
$c123 configure -background $couleur
set c124 .top62.fra91.but83
set couleur [format #%02x%02x%02x $RedPalette(124) $GreenPalette(124) $BluePalette(124)]
$c124 configure -background $couleur
set c125 .top62.fra91.but84
set couleur [format #%02x%02x%02x $RedPalette(125) $GreenPalette(125) $BluePalette(125)]
$c125 configure -background $couleur
set c126 .top62.fra91.but85
set couleur [format #%02x%02x%02x $RedPalette(126) $GreenPalette(126) $BluePalette(126)]
$c126 configure -background $couleur
set c127 .top62.fra91.but86
set couleur [format #%02x%02x%02x $RedPalette(127) $GreenPalette(127) $BluePalette(127)]
$c127 configure -background $couleur
set c128 .top62.fra91.but87
set couleur [format #%02x%02x%02x $RedPalette(128) $GreenPalette(128) $BluePalette(128)]
$c128 configure -background $couleur
set c129 .top62.fra92.but36
set couleur [format #%02x%02x%02x $RedPalette(129) $GreenPalette(129) $BluePalette(129)]
$c129 configure -background $couleur
set c130 .top62.fra92.but37
set couleur [format #%02x%02x%02x $RedPalette(130) $GreenPalette(130) $BluePalette(130)]
$c130 configure -background $couleur
set c131 .top62.fra92.but38
set couleur [format #%02x%02x%02x $RedPalette(131) $GreenPalette(131) $BluePalette(131)]
$c131 configure -background $couleur
set c132 .top62.fra92.but39
set couleur [format #%02x%02x%02x $RedPalette(132) $GreenPalette(132) $BluePalette(132)]
$c132 configure -background $couleur
set c133 .top62.fra92.but40
set couleur [format #%02x%02x%02x $RedPalette(133) $GreenPalette(133) $BluePalette(133)]
$c133 configure -background $couleur
set c134 .top62.fra92.but41
set couleur [format #%02x%02x%02x $RedPalette(134) $GreenPalette(134) $BluePalette(134)]
$c134 configure -background $couleur
set c135 .top62.fra92.but42
set couleur [format #%02x%02x%02x $RedPalette(135) $GreenPalette(135) $BluePalette(135)]
$c135 configure -background $couleur
set c136 .top62.fra92.but43
set couleur [format #%02x%02x%02x $RedPalette(136) $GreenPalette(136) $BluePalette(136)]
$c136 configure -background $couleur
set c137 .top62.fra92.but44
set couleur [format #%02x%02x%02x $RedPalette(137) $GreenPalette(137) $BluePalette(137)]
$c137 configure -background $couleur
set c138 .top62.fra92.but45
set couleur [format #%02x%02x%02x $RedPalette(138) $GreenPalette(138) $BluePalette(138)]
$c138 configure -background $couleur
set c139 .top62.fra92.but46
set couleur [format #%02x%02x%02x $RedPalette(139) $GreenPalette(139) $BluePalette(139)]
$c139 configure -background $couleur
set c140 .top62.fra92.but47
set couleur [format #%02x%02x%02x $RedPalette(140) $GreenPalette(140) $BluePalette(140)]
$c140 configure -background $couleur
set c141 .top62.fra92.but48
set couleur [format #%02x%02x%02x $RedPalette(141) $GreenPalette(141) $BluePalette(141)]
$c141 configure -background $couleur
set c142 .top62.fra92.but49
set couleur [format #%02x%02x%02x $RedPalette(142) $GreenPalette(142) $BluePalette(142)]
$c142 configure -background $couleur
set c143 .top62.fra92.but50
set couleur [format #%02x%02x%02x $RedPalette(143) $GreenPalette(143) $BluePalette(143)]
$c143 configure -background $couleur
set c144 .top62.fra92.but51
set couleur [format #%02x%02x%02x $RedPalette(144) $GreenPalette(144) $BluePalette(144)]
$c144 configure -background $couleur
set c145 .top62.fra92.but70
set couleur [format #%02x%02x%02x $RedPalette(145) $GreenPalette(145) $BluePalette(145)]
$c145 configure -background $couleur
set c146 .top62.fra92.but71
set couleur [format #%02x%02x%02x $RedPalette(146) $GreenPalette(146) $BluePalette(146)]
$c146 configure -background $couleur
set c147 .top62.fra92.but72
set couleur [format #%02x%02x%02x $RedPalette(147) $GreenPalette(147) $BluePalette(147)]
$c147 configure -background $couleur
set c148 .top62.fra92.but73
set couleur [format #%02x%02x%02x $RedPalette(148) $GreenPalette(148) $BluePalette(148)]
$c148 configure -background $couleur
set c149 .top62.fra92.but74
set couleur [format #%02x%02x%02x $RedPalette(149) $GreenPalette(149) $BluePalette(149)]
$c149 configure -background $couleur
set c150 .top62.fra92.but75
set couleur [format #%02x%02x%02x $RedPalette(150) $GreenPalette(150) $BluePalette(150)]
$c150 configure -background $couleur
set c151 .top62.fra92.but76
set couleur [format #%02x%02x%02x $RedPalette(151) $GreenPalette(151) $BluePalette(151)]
$c151 configure -background $couleur
set c152 .top62.fra92.but77
set couleur [format #%02x%02x%02x $RedPalette(152) $GreenPalette(152) $BluePalette(152)]
$c152 configure -background $couleur
set c153 .top62.fra92.but78
set couleur [format #%02x%02x%02x $RedPalette(153) $GreenPalette(153) $BluePalette(153)]
$c153 configure -background $couleur
set c154 .top62.fra92.but79
set couleur [format #%02x%02x%02x $RedPalette(154) $GreenPalette(154) $BluePalette(154)]
$c154 configure -background $couleur
set c155 .top62.fra92.but80
set couleur [format #%02x%02x%02x $RedPalette(155) $GreenPalette(155) $BluePalette(155)]
$c155 configure -background $couleur
set c156 .top62.fra92.but83
set couleur [format #%02x%02x%02x $RedPalette(156) $GreenPalette(156) $BluePalette(156)]
$c156 configure -background $couleur
set c157 .top62.fra92.but84
set couleur [format #%02x%02x%02x $RedPalette(157) $GreenPalette(157) $BluePalette(157)]
$c157 configure -background $couleur
set c158 .top62.fra92.but85
set couleur [format #%02x%02x%02x $RedPalette(158) $GreenPalette(158) $BluePalette(158)]
$c158 configure -background $couleur
set c159 .top62.fra92.but86
set couleur [format #%02x%02x%02x $RedPalette(159) $GreenPalette(159) $BluePalette(159)]
$c159 configure -background $couleur
set c160 .top62.fra92.but87
set couleur [format #%02x%02x%02x $RedPalette(160) $GreenPalette(160) $BluePalette(160)]
$c160 configure -background $couleur
set c161 .top62.fra93.but36
set couleur [format #%02x%02x%02x $RedPalette(161) $GreenPalette(161) $BluePalette(161)]
$c161 configure -background $couleur
set c162 .top62.fra93.but37
set couleur [format #%02x%02x%02x $RedPalette(162) $GreenPalette(162) $BluePalette(162)]
$c162 configure -background $couleur
set c163 .top62.fra93.but38
set couleur [format #%02x%02x%02x $RedPalette(163) $GreenPalette(163) $BluePalette(163)]
$c163 configure -background $couleur
set c164 .top62.fra93.but39
set couleur [format #%02x%02x%02x $RedPalette(164) $GreenPalette(164) $BluePalette(164)]
$c164 configure -background $couleur
set c165 .top62.fra93.but40
set couleur [format #%02x%02x%02x $RedPalette(165) $GreenPalette(165) $BluePalette(165)]
$c165 configure -background $couleur
set c166 .top62.fra93.but41
set couleur [format #%02x%02x%02x $RedPalette(166) $GreenPalette(166) $BluePalette(166)]
$c166 configure -background $couleur
set c167 .top62.fra93.but42
set couleur [format #%02x%02x%02x $RedPalette(167) $GreenPalette(167) $BluePalette(167)]
$c167 configure -background $couleur
set c168 .top62.fra93.but43
set couleur [format #%02x%02x%02x $RedPalette(168) $GreenPalette(168) $BluePalette(168)]
$c168 configure -background $couleur
set c169 .top62.fra93.but44
set couleur [format #%02x%02x%02x $RedPalette(169) $GreenPalette(169) $BluePalette(169)]
$c169 configure -background $couleur
set c170 .top62.fra93.but45
set couleur [format #%02x%02x%02x $RedPalette(170) $GreenPalette(170) $BluePalette(170)]
$c170 configure -background $couleur
set c171 .top62.fra93.but46
set couleur [format #%02x%02x%02x $RedPalette(171) $GreenPalette(171) $BluePalette(171)]
$c171 configure -background $couleur
set c172 .top62.fra93.but47
set couleur [format #%02x%02x%02x $RedPalette(172) $GreenPalette(172) $BluePalette(172)]
$c172 configure -background $couleur
set c173 .top62.fra93.but48
set couleur [format #%02x%02x%02x $RedPalette(173) $GreenPalette(173) $BluePalette(173)]
$c173 configure -background $couleur
set c174 .top62.fra93.but49
set couleur [format #%02x%02x%02x $RedPalette(174) $GreenPalette(174) $BluePalette(174)]
$c174 configure -background $couleur
set c175 .top62.fra93.but50
set couleur [format #%02x%02x%02x $RedPalette(175) $GreenPalette(175) $BluePalette(175)]
$c175 configure -background $couleur
set c176 .top62.fra93.but51
set couleur [format #%02x%02x%02x $RedPalette(176) $GreenPalette(176) $BluePalette(176)]
$c176 configure -background $couleur
set c177 .top62.fra93.but70
set couleur [format #%02x%02x%02x $RedPalette(177) $GreenPalette(177) $BluePalette(177)]
$c177 configure -background $couleur
set c178 .top62.fra93.but71
set couleur [format #%02x%02x%02x $RedPalette(178) $GreenPalette(178) $BluePalette(178)]
$c178 configure -background $couleur
set c179 .top62.fra93.but72
set couleur [format #%02x%02x%02x $RedPalette(179) $GreenPalette(179) $BluePalette(179)]
$c179 configure -background $couleur
set c180 .top62.fra93.but73
set couleur [format #%02x%02x%02x $RedPalette(180) $GreenPalette(180) $BluePalette(180)]
$c180 configure -background $couleur
set c181 .top62.fra93.but74
set couleur [format #%02x%02x%02x $RedPalette(181) $GreenPalette(181) $BluePalette(181)]
$c181 configure -background $couleur
set c182 .top62.fra93.but75
set couleur [format #%02x%02x%02x $RedPalette(182) $GreenPalette(182) $BluePalette(182)]
$c182 configure -background $couleur
set c183 .top62.fra93.but76
set couleur [format #%02x%02x%02x $RedPalette(183) $GreenPalette(183) $BluePalette(183)]
$c183 configure -background $couleur
set c184 .top62.fra93.but77
set couleur [format #%02x%02x%02x $RedPalette(184) $GreenPalette(184) $BluePalette(184)]
$c184 configure -background $couleur
set c185 .top62.fra93.but78
set couleur [format #%02x%02x%02x $RedPalette(185) $GreenPalette(185) $BluePalette(185)]
$c185 configure -background $couleur
set c186 .top62.fra93.but79
set couleur [format #%02x%02x%02x $RedPalette(186) $GreenPalette(186) $BluePalette(186)]
$c186 configure -background $couleur
set c187 .top62.fra93.but80
set couleur [format #%02x%02x%02x $RedPalette(187) $GreenPalette(187) $BluePalette(187)]
$c187 configure -background $couleur
set c188 .top62.fra93.but83
set couleur [format #%02x%02x%02x $RedPalette(188) $GreenPalette(188) $BluePalette(188)]
$c188 configure -background $couleur
set c189 .top62.fra93.but84
set couleur [format #%02x%02x%02x $RedPalette(189) $GreenPalette(189) $BluePalette(189)]
$c189 configure -background $couleur
set c190 .top62.fra93.but85
set couleur [format #%02x%02x%02x $RedPalette(190) $GreenPalette(190) $BluePalette(190)]
$c190 configure -background $couleur
set c191 .top62.fra93.but86
set couleur [format #%02x%02x%02x $RedPalette(191) $GreenPalette(191) $BluePalette(191)]
$c191 configure -background $couleur
set c192 .top62.fra93.but87
set couleur [format #%02x%02x%02x $RedPalette(192) $GreenPalette(192) $BluePalette(192)]
$c192 configure -background $couleur
set c193 .top62.fra94.but36
set couleur [format #%02x%02x%02x $RedPalette(193) $GreenPalette(193) $BluePalette(193)]
$c193 configure -background $couleur
set c194 .top62.fra94.but37
set couleur [format #%02x%02x%02x $RedPalette(194) $GreenPalette(194) $BluePalette(194)]
$c194 configure -background $couleur
set c195 .top62.fra94.but38
set couleur [format #%02x%02x%02x $RedPalette(195) $GreenPalette(195) $BluePalette(195)]
$c195 configure -background $couleur
set c196 .top62.fra94.but39
set couleur [format #%02x%02x%02x $RedPalette(196) $GreenPalette(196) $BluePalette(196)]
$c196 configure -background $couleur
set c197 .top62.fra94.but40
set couleur [format #%02x%02x%02x $RedPalette(197) $GreenPalette(197) $BluePalette(197)]
$c197 configure -background $couleur
set c198 .top62.fra94.but41
set couleur [format #%02x%02x%02x $RedPalette(198) $GreenPalette(198) $BluePalette(198)]
$c198 configure -background $couleur
set c199 .top62.fra94.but42
set couleur [format #%02x%02x%02x $RedPalette(199) $GreenPalette(199) $BluePalette(199)]
$c199 configure -background $couleur
set c200 .top62.fra94.but43
set couleur [format #%02x%02x%02x $RedPalette(200) $GreenPalette(200) $BluePalette(200)]
$c200 configure -background $couleur
set c201 .top62.fra94.but44
set couleur [format #%02x%02x%02x $RedPalette(201) $GreenPalette(201) $BluePalette(201)]
$c201 configure -background $couleur
set c202 .top62.fra94.but45
set couleur [format #%02x%02x%02x $RedPalette(202) $GreenPalette(202) $BluePalette(202)]
$c202 configure -background $couleur
set c203 .top62.fra94.but46
set couleur [format #%02x%02x%02x $RedPalette(203) $GreenPalette(203) $BluePalette(203)]
$c203 configure -background $couleur
set c204 .top62.fra94.but47
set couleur [format #%02x%02x%02x $RedPalette(204) $GreenPalette(204) $BluePalette(204)]
$c204 configure -background $couleur
set c205 .top62.fra94.but48
set couleur [format #%02x%02x%02x $RedPalette(205) $GreenPalette(205) $BluePalette(205)]
$c205 configure -background $couleur
set c206 .top62.fra94.but49
set couleur [format #%02x%02x%02x $RedPalette(206) $GreenPalette(206) $BluePalette(206)]
$c206 configure -background $couleur
set c207 .top62.fra94.but50
set couleur [format #%02x%02x%02x $RedPalette(207) $GreenPalette(207) $BluePalette(207)]
$c207 configure -background $couleur
set c208 .top62.fra94.but51
set couleur [format #%02x%02x%02x $RedPalette(208) $GreenPalette(208) $BluePalette(208)]
$c208 configure -background $couleur
set c209 .top62.fra94.but70
set couleur [format #%02x%02x%02x $RedPalette(209) $GreenPalette(209) $BluePalette(209)]
$c209 configure -background $couleur
set c210 .top62.fra94.but71
set couleur [format #%02x%02x%02x $RedPalette(210) $GreenPalette(210) $BluePalette(210)]
$c210 configure -background $couleur
set c211 .top62.fra94.but72
set couleur [format #%02x%02x%02x $RedPalette(211) $GreenPalette(211) $BluePalette(211)]
$c211 configure -background $couleur
set c212 .top62.fra94.but73
set couleur [format #%02x%02x%02x $RedPalette(212) $GreenPalette(212) $BluePalette(212)]
$c212 configure -background $couleur
set c213 .top62.fra94.but74
set couleur [format #%02x%02x%02x $RedPalette(213) $GreenPalette(213) $BluePalette(213)]
$c213 configure -background $couleur
set c214 .top62.fra94.but75
set couleur [format #%02x%02x%02x $RedPalette(214) $GreenPalette(214) $BluePalette(214)]
$c214 configure -background $couleur
set c215 .top62.fra94.but76
set couleur [format #%02x%02x%02x $RedPalette(215) $GreenPalette(215) $BluePalette(215)]
$c215 configure -background $couleur
set c216 .top62.fra94.but77
set couleur [format #%02x%02x%02x $RedPalette(216) $GreenPalette(216) $BluePalette(216)]
$c216 configure -background $couleur
set c217 .top62.fra94.but78
set couleur [format #%02x%02x%02x $RedPalette(217) $GreenPalette(217) $BluePalette(217)]
$c217 configure -background $couleur
set c218 .top62.fra94.but79
set couleur [format #%02x%02x%02x $RedPalette(218) $GreenPalette(218) $BluePalette(218)]
$c218 configure -background $couleur
set c219 .top62.fra94.but80
set couleur [format #%02x%02x%02x $RedPalette(219) $GreenPalette(219) $BluePalette(219)]
$c219 configure -background $couleur
set c220 .top62.fra94.but83
set couleur [format #%02x%02x%02x $RedPalette(220) $GreenPalette(220) $BluePalette(220)]
$c220 configure -background $couleur
set c221 .top62.fra94.but84
set couleur [format #%02x%02x%02x $RedPalette(221) $GreenPalette(221) $BluePalette(221)]
$c221 configure -background $couleur
set c222 .top62.fra94.but85
set couleur [format #%02x%02x%02x $RedPalette(222) $GreenPalette(222) $BluePalette(222)]
$c222 configure -background $couleur
set c223 .top62.fra94.but86
set couleur [format #%02x%02x%02x $RedPalette(223) $GreenPalette(223) $BluePalette(223)]
$c223 configure -background $couleur
set c224 .top62.fra94.but87
set couleur [format #%02x%02x%02x $RedPalette(224) $GreenPalette(224) $BluePalette(224)]
$c224 configure -background $couleur
set c225 .top62.fra95.but36
set couleur [format #%02x%02x%02x $RedPalette(225) $GreenPalette(225) $BluePalette(225)]
$c225 configure -background $couleur
set c226 .top62.fra95.but37
set couleur [format #%02x%02x%02x $RedPalette(226) $GreenPalette(226) $BluePalette(226)]
$c226 configure -background $couleur
set c227 .top62.fra95.but38
set couleur [format #%02x%02x%02x $RedPalette(227) $GreenPalette(227) $BluePalette(227)]
$c227 configure -background $couleur
set c228 .top62.fra95.but39
set couleur [format #%02x%02x%02x $RedPalette(228) $GreenPalette(228) $BluePalette(228)]
$c228 configure -background $couleur
set c229 .top62.fra95.but40
set couleur [format #%02x%02x%02x $RedPalette(229) $GreenPalette(229) $BluePalette(229)]
$c229 configure -background $couleur
set c230 .top62.fra95.but41
set couleur [format #%02x%02x%02x $RedPalette(230) $GreenPalette(230) $BluePalette(230)]
    $c230 configure -background $couleur
    set c231 .top62.fra95.but42
    set couleur [format #%02x%02x%02x $RedPalette(231) $GreenPalette(231) $BluePalette(231)]
    $c231 configure -background $couleur
    set c232 .top62.fra95.but43
    set couleur [format #%02x%02x%02x $RedPalette(232) $GreenPalette(232) $BluePalette(232)]
    $c232 configure -background $couleur
    set c233 .top62.fra95.but44
    set couleur [format #%02x%02x%02x $RedPalette(233) $GreenPalette(233) $BluePalette(233)]
    $c233 configure -background $couleur
    set c234 .top62.fra95.but45
    set couleur [format #%02x%02x%02x $RedPalette(234) $GreenPalette(234) $BluePalette(234)]
    $c234 configure -background $couleur
    set c235 .top62.fra95.but46
    set couleur [format #%02x%02x%02x $RedPalette(235) $GreenPalette(235) $BluePalette(235)]
    $c235 configure -background $couleur
    set c236 .top62.fra95.but47
    set couleur [format #%02x%02x%02x $RedPalette(236) $GreenPalette(236) $BluePalette(236)]
    $c236 configure -background $couleur
    set c237 .top62.fra95.but48
    set couleur [format #%02x%02x%02x $RedPalette(237) $GreenPalette(237) $BluePalette(237)]
    $c237 configure -background $couleur
    set c238 .top62.fra95.but49
    set couleur [format #%02x%02x%02x $RedPalette(238) $GreenPalette(238) $BluePalette(238)]
    $c238 configure -background $couleur
    set c239 .top62.fra95.but50
    set couleur [format #%02x%02x%02x $RedPalette(239) $GreenPalette(239) $BluePalette(239)]
    $c239 configure -background $couleur
    set c240 .top62.fra95.but51
    set couleur [format #%02x%02x%02x $RedPalette(240) $GreenPalette(240) $BluePalette(240)]
    $c240 configure -background $couleur
    set c241 .top62.fra95.but70
    set couleur [format #%02x%02x%02x $RedPalette(241) $GreenPalette(241) $BluePalette(241)]
    $c241 configure -background $couleur
    set c242 .top62.fra95.but71
    set couleur [format #%02x%02x%02x $RedPalette(242) $GreenPalette(242) $BluePalette(242)]
    $c242 configure -background $couleur
    set c243 .top62.fra95.but72
    set couleur [format #%02x%02x%02x $RedPalette(243) $GreenPalette(243) $BluePalette(243)]
    $c243 configure -background $couleur
    set c244 .top62.fra95.but73
    set couleur [format #%02x%02x%02x $RedPalette(244) $GreenPalette(244) $BluePalette(244)]
    $c244 configure -background $couleur
    set c245 .top62.fra95.but74
    set couleur [format #%02x%02x%02x $RedPalette(245) $GreenPalette(245) $BluePalette(245)]
    $c245 configure -background $couleur
    set c246 .top62.fra95.but75
    set couleur [format #%02x%02x%02x $RedPalette(246) $GreenPalette(246) $BluePalette(246)]
    $c246 configure -background $couleur
    set c247 .top62.fra95.but76
    set couleur [format #%02x%02x%02x $RedPalette(247) $GreenPalette(247) $BluePalette(247)]
    $c247 configure -background $couleur
    set c248 .top62.fra95.but77
    set couleur [format #%02x%02x%02x $RedPalette(248) $GreenPalette(248) $BluePalette(248)]
    $c248 configure -background $couleur
    set c249 .top62.fra95.but78
    set couleur [format #%02x%02x%02x $RedPalette(249) $GreenPalette(249) $BluePalette(249)]
    $c249 configure -background $couleur
    set c250 .top62.fra95.but79
    set couleur [format #%02x%02x%02x $RedPalette(250) $GreenPalette(250) $BluePalette(250)]
    $c250 configure -background $couleur
    set c251 .top62.fra95.but80
    set couleur [format #%02x%02x%02x $RedPalette(251) $GreenPalette(251) $BluePalette(251)]
    $c251 configure -background $couleur
    set c252 .top62.fra95.but83
    set couleur [format #%02x%02x%02x $RedPalette(252) $GreenPalette(252) $BluePalette(252)]
    $c252 configure -background $couleur
    set c253 .top62.fra95.but84
    set couleur [format #%02x%02x%02x $RedPalette(253) $GreenPalette(253) $BluePalette(253)]
    $c253 configure -background $couleur
    set c254 .top62.fra95.but85
    set couleur [format #%02x%02x%02x $RedPalette(254) $GreenPalette(254) $BluePalette(254)]
    $c254 configure -background $couleur
    set c255 .top62.fra95.but86
    set couleur [format #%02x%02x%02x $RedPalette(255) $GreenPalette(255) $BluePalette(255)]
    $c255 configure -background $couleur
    set c256 .top62.fra95.but87
    set couleur [format #%02x%02x%02x $RedPalette(256) $GreenPalette(256) $BluePalette(256)]
    $c256 configure -background $couleur
    }
}
#############################################################################
## Procedure:  HelpPdfEdit

proc ::HelpPdfEdit {Title} {
global wshHelp PDFReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

if [file exists $Title] {
    if [file exists $PDFReader] {
        if {$PlatForm == "windows"} {
            package require tcom
            set wshHelp [::tcom::ref createobject "WScript.Shell"]
            set taskIdHelp [$wshHelp Run "\x22$PDFReader\x22 \x22$Title\x22"]
            }
        if {$PlatForm == "unix"} {set taskIdHelp [ open "| \x22$PDFReader\x22 \x22$Title\x22" r]}
        } else {
        #error message
        set VarError ""
        set ErrorMessage "PDF READER APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "PDF READER APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "PDF"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "acroread acrord32 acrobat xpdf kghostview ghostview gv"
            set ConfigFileNameList "acroread acrord32 acrobat xpdf kghostview ghostview gv"
            .top341.fra74.lab76 configure -text "PDF READER"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/adobe_pdf.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration PDF READER Software" "b"
            tkwait variable VarConfigFileName 
            }        
        }
    } else {
    Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"
    }
}
#############################################################################
## Procedure:  CheckEnvironnement

proc ::CheckEnvironnement {} {
global ActiveProgram ConfigFile PolarType DataFormatActive
global DataDir DataDirChannel1 DataDirChannel2
global DataDirMult NDataDirMult DataDirMultActive FormatDataDirMult
global AsarDirInput AsarDirOutput AsarDataFormat FileInputAsar
global ConfigFile NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize
global PolarCase PolarType ErrorMessage FatalErrorMessage VarError
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2 NligFullSize NcolFullSize

set CheckMenuOn "ko"

if {$ActiveProgram == "POLINSAR"} {
    set conf "0"
    if {$DataDirChannel1 != ""} { set conf "1" }
    if {$DataDirChannel2 != ""} { append conf "2" }
    if {$conf == "12"} {
        if {$DataDirChannel1 == $DataDirChannel2} {
            if [file isdirectory "$DataDirChannel1/T4"] {
                if [file exists "$DataDirChannel1/T4/config.txt"] {
                    if [file exists "$DataDir/T4/config_mapready.txt"] {
                        if [file exists "$DataDir/T4/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDir; append ConfigMapSource "/T4/config_mapready.txt"
                            set ConfigMapTarget $DataDir; append ConfigMapTarget "/T4/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel1/T4/config.txt"; LoadConfig
                    if [file exists "$DataDirChannel1/T4/T11.bin"] { set DataFormatActive "T4"; set CheckMenuOn "ok" }
                    }
                }            
            if [file isdirectory "$DataDirChannel1/T6"] {
                if [file exists "$DataDirChannel1/T6/config.txt"] {
                    if [file exists "$DataDir/T6/config_mapready.txt"] {
                        if [file exists "$DataDir/T6/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDir; append ConfigMapSource "/T6/config_mapready.txt"
                            set ConfigMapTarget $DataDir; append ConfigMapTarget "/T6/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel1/T6/config.txt"; LoadConfig
                    if [file exists "$DataDirChannel1/T6/T11.bin"] { set DataFormatActive "T6"; set CheckMenuOn "ok" }
                    }
                }            
            } else {
            set configmaster "Q"
            if {$DataDirChannel1 != ""} {
                if [file exists "$DataDirChannel1/config.txt"] {
                    if [file exists "$DataDirChannel1/config_mapready.txt"] {
                        if [file exists "$DataDirChannel1/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultChannel1; append ConfigMapSource "/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultChannel1; append ConfigMapTarget "/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel1/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configmaster "Q"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s12.bin"] {append configmaster "2"}
                        if [file exists "$DataDirChannel1/s21.bin"] {append configmaster "3"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "4"}
                        }
                    if {$PolarType == "pp1"} {
                        set configmaster "D"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s21.bin"] {append configmaster "2"}
                        }
                    if {$PolarType == "pp2"} {
                        set configmaster "D"
                        if [file exists "$DataDirChannel1/s12.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "2"}
                        }
                    if {$PolarType == "pp3"} {
                        set configmaster "D"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "2"}
                        }
                    set NligFullSizeMaster $NligFullSize
                    set NcolFullSizeMaster $NcolFullSize
                    set PolarCaseMaster $PolarCase
                    set PolarTypeMaster $PolarType
                    }
                }            
            set configslave "Q"
            if {$DataDirChannel2 != ""} {
                if [file exists "$DataDirChannel2/config.txt"] {
                    if [file exists "$DataDirChannel2/config_mapready.txt"] {
                        if [file exists "$DataDirChannel2/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultChannel2; append ConfigMapSource "/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultChannel2; append ConfigMapTarget "/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel2/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configslave "Q"
                        if [file exists "$DataDirChannel2/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s12.bin"] {append configslave "2"}
                        if [file exists "$DataDirChannel2/s21.bin"] {append configslave "3"}
                        if [file exists "$DataDirChannel2/s22.bin"] {append configslave "4"}
                        }
                    if {$PolarType == "pp1"} {
                        set configslave "D"
                        if [file exists "$DataDirChannel2/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s21.bin"] {append configslave "2"}
                        }
                    if {$PolarType == "pp2"} {
                        set configslave "D"
                        if [file exists "$DataDirChannel2/s12.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s22.bin"] {append configslave "2"}
                        }
                    if {$PolarType == "pp3"} {
                        set configslave "D"
                        if [file exists "$DataDirChannel2/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s22.bin"] {append configslave "2"}
                        }
                    set NligFullSizeSlave $NligFullSize
                    set NcolFullSizeSlave $NcolFullSize
                    set PolarCaseSlave $PolarCase
                    set PolarTypeSlave $PolarType
                    }
                }        
            set config "0"
            if {$configmaster == "D12"} {append config "1"}
            if {$configslave == "D12"} {append config "2"}
            if {$configmaster == "Q1234"} {append config "1"}
            if {$configslave == "Q1234"} {append config "2"}
            if {$config == "012"} {
                set configmasterslave "0"
                if {$NligFullSizeMaster == $NligFullSizeSlave} {append configmasterslave "1"}
                if {$NcolFullSizeMaster == $NcolFullSizeSlave} {append configmasterslave "2"}
                if {$PolarCaseMaster == $PolarCaseSlave} {append configmasterslave "3"}
                if {$PolarTypeMaster == $PolarTypeSlave} {append configmasterslave "4"}
                if {$configmasterslave == "01234"} {
                    if {$configmaster == "D12"} {set DataFormatActive "SPP"}
                    if {$configmaster == "Q1234"} {set DataFormatActive "S2"}
                    set CheckMenuOn "ok"
                    } else {
                    set ErrorMessage "INPUT DATA MUST HAVE THE SAME SIZE AND TYPE"
                    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
                    tkwait variable VarError
                    set ErrorMessage ""
                    } 
                }
            }
        }
    }
    
if {$ActiveProgram == "ASAR"} {
    set AsarDirInput $DataDir
    set AsarDirOutput $DataDir
    set FileInputAsar ""
    set ConfigFile "$AsarDirInput/config.txt"
    if [file exists $ConfigFile] {
        set ErrorMessage ""
        LoadConfig
        if {$PolarType == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            } else {    
            if {$PolarType == "pp1"} {set AsarDataFormat "APS"; set DataFormatActive "SPP"}
            if {$PolarType == "pp2"} {set AsarDataFormat "APS"; set DataFormatActive "SPP"}
            if {$PolarType == "pp3"} {set AsarDataFormat "APS"; set DataFormatActive "SPP"}
            if {$PolarType == "pp4"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
            if {$PolarType == "pp5"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
            if {$PolarType == "pp6"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
            if {$PolarType == "pp7"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
            set CheckMenuOn "ok"
            }
        } else {
        set ConfigFile "$AsarDirInput/C2/config.txt"
        if [file exists $ConfigFile] {
            set ErrorMessage ""
            LoadConfig
            if {$PolarType == "full"} {
                set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
                Window show .top44; TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                set ErrorMessage ""
                } else {    
                if {$PolarType == "pp1"} {set AsarDataFormat "APS"; set DataFormatActive "C2"}
                if {$PolarType == "pp2"} {set AsarDataFormat "APS"; set DataFormatActive "C2"}
                if {$PolarType == "pp3"} {set AsarDataFormat "APS"; set DataFormatActive "C2"}
                if {$PolarType == "pp4"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
                if {$PolarType == "pp5"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
                if {$PolarType == "pp6"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
                if {$PolarType == "pp7"} {set AsarDataFormat "APP"; set DataFormatActive "IPP"}
                set CheckMenuOn "ok"
                }
            }
        }
    }
    
set config "false"
if {$ActiveProgram == "POLSARPRO"} { set config "true"}
if {$ActiveProgram == "ALOS"} { set config "true"}
if {$ActiveProgram == "ALOS2"} { set config "true"}
if {$ActiveProgram == "CSK"} { set config "true"}
if {$ActiveProgram == "RADARSAT2"} { set config "true"}
if {$ActiveProgram == "RISAT"} { set config "true"}
if {$ActiveProgram == "SENTINEL1"} { set config "true"}
if {$ActiveProgram == "TERRASARX"} { set config "true"}
if {$ActiveProgram == "TANDEMX"} { set config "true"}
if {$ActiveProgram == "SIRC"} { set config "true"}
if {$ActiveProgram == "AIRSAR"} { set config "true"}
if {$ActiveProgram == "CONVAIR"} { set config "true"}
if {$ActiveProgram == "EMISAR"} { set config "true"}
if {$ActiveProgram == "ESAR"} { set config "true"}
if {$ActiveProgram == "FSAR"} { set config "true"}
if {$ActiveProgram == "PISAR"} { set config "true"}
if {$ActiveProgram == "SETHI"} { set config "true"}
if {$ActiveProgram == "UAVSAR"} { set config "true"}
if {$config == "true"} {
    set config "false"
    if [file exists "$DataDir/config.txt"] {
        if [file exists "$DataDir/config_mapready.txt"] {
            if [file exists "$DataDir/config_mapinfo.txt"] {
                } else {
                set ConfigMapSource $DataDir; append ConfigMapSource "/config_mapready.txt"
                set ConfigMapTarget $DataDir; append ConfigMapTarget "/config_mapinfo.txt"
                CopyFile $ConfigMapSource $ConfigMapTarget
                }
            }
        set ConfigFile "$DataDir/config.txt"; LoadConfig
        if [file exists "$DataDir/s11.bin"] {set config "true"}
        if [file exists "$DataDir/s22.bin"] {set config "true"}
        if [file exists "$DataDir/I11.bin"] {set config "true"}
        if [file exists "$DataDir/I22.bin"] {set config "true"}
        if {$PolarType == "full"} { set DataFormatActive "S2" }
        if {$PolarType == "pp1"} { set DataFormatActive "SPP" }
        if {$PolarType == "pp2"} { set DataFormatActive "SPP" }
        if {$PolarType == "pp3"} { set DataFormatActive "SPP" }
        if {$PolarType == "pp4"} { set DataFormatActive "IPP" }
        if {$PolarType == "pp5"} { set DataFormatActive "IPP" }
        if {$PolarType == "pp6"} { set DataFormatActive "IPP" }
        if {$PolarType == "pp7"} { set DataFormatActive "IPP" }
        if {$PolarCase == "intensities"} { set DataFormatActive "IPP" }
        }        
    if [file isdirectory "$DataDir/T2"] {
        if [file exists "$DataDir/T2/config.txt"] {
            if [file exists "$DataDir/T2/config_mapready.txt"] {
                if [file exists "$DataDir/T2/config_mapinfo.txt"] {
                    } else {
                    set ConfigMapSource $DataDir; append ConfigMapSource "/T2/config_mapready.txt"
                    set ConfigMapTarget $DataDir; append ConfigMapTarget "/T2/config_mapinfo.txt"
                    CopyFile $ConfigMapSource $ConfigMapTarget
                    }
                }
            set ConfigFile "$DataDir/T2/config.txt"; LoadConfig
            if [file exists "$DataDir/T2/T11.bin"] {set DataFormatActive "T2"; set config "true"}
            }
        }            
    if [file isdirectory "$DataDir/T3"] {
        if [file exists "$DataDir/T3/config.txt"] {
            if [file exists "$DataDir/T3/config_mapready.txt"] {
                if [file exists "$DataDir/T3/config_mapinfo.txt"] {
                    } else {
                    set ConfigMapSource $DataDir; append ConfigMapSource "/T3/config_mapready.txt"
                    set ConfigMapTarget $DataDir; append ConfigMapTarget "/T3/config_mapinfo.txt"
                    CopyFile $ConfigMapSource $ConfigMapTarget
                    }
                }
            set ConfigFile "$DataDir/T3/config.txt"; LoadConfig
            if [file exists "$DataDir/T3/T11.bin"] {set DataFormatActive "T3"; set config "true"}
            }
        }
    if [file isdirectory "$DataDir/T4"] {
        if [file exists "$DataDir/T4/config.txt"] {
            if [file exists "$DataDir/T4/config_mapready.txt"] {
                if [file exists "$DataDir/T4/config_mapinfo.txt"] {
                    } else {
                    set ConfigMapSource $DataDir; append ConfigMapSource "/T4/config_mapready.txt"
                    set ConfigMapTarget $DataDir; append ConfigMapTarget "/T4/config_mapinfo.txt"
                    CopyFile $ConfigMapSource $ConfigMapTarget
                    }
                }
            set ConfigFile "$DataDir/T4/config.txt"; LoadConfig
            if [file exists "$DataDir/T4/T11.bin"] {set DataFormatActive "T4"; set config "true"}
            }
        }
    if [file isdirectory "$DataDir/C2"] {
            if [file exists "$DataDir/C2/config_mapready.txt"] {
                if [file exists "$DataDir/C2/config_mapinfo.txt"] {
                    } else {
                    set ConfigMapSource $DataDir; append ConfigMapSource "/C2/config_mapready.txt"
                    set ConfigMapTarget $DataDir; append ConfigMapTarget "/C2/config_mapinfo.txt"
                    CopyFile $ConfigMapSource $ConfigMapTarget
                    }
                }
        if [file exists "$DataDir/C2/config.txt"] {
            set ConfigFile "$DataDir/C2/config.txt"; LoadConfig
            if [file exists "$DataDir/C2/C11.bin"] {set DataFormatActive "C2"; set config "true"}
            }
        }            
    if [file isdirectory "$DataDir/C3"] {
            if [file exists "$DataDir/C3/config_mapready.txt"] {
                if [file exists "$DataDir/C3/config_mapinfo.txt"] {
                    } else {
                    set ConfigMapSource $DataDir; append ConfigMapSource "/C3/config_mapready.txt"
                    set ConfigMapTarget $DataDir; append ConfigMapTarget "/C3/config_mapinfo.txt"
                    CopyFile $ConfigMapSource $ConfigMapTarget
                    }
                }
        if [file exists "$DataDir/C3/config.txt"] {
            set ConfigFile "$DataDir/C3/config.txt"; LoadConfig
            if [file exists "$DataDir/C3/C11.bin"] {set DataFormatActive "C3"; set config "true"}
            }
        }            
    if [file isdirectory "$DataDir/C4"] {
            if [file exists "$DataDir/C4/config_mapready.txt"] {
                if [file exists "$DataDir/C4/config_mapinfo.txt"] {
                    } else {
                    set ConfigMapSource $DataDir; append ConfigMapSource "/C4/config_mapready.txt"
                    set ConfigMapTarget $DataDir; append ConfigMapTarget "/C4/config_mapinfo.txt"
                    CopyFile $ConfigMapSource $ConfigMapTarget
                    }
                }
        if [file exists "$DataDir/C4/config.txt"] {
            set ConfigFile "$DataDir/C4/config.txt"; LoadConfig
            if [file exists "$DataDir/C4/C11.bin"] {set DataFormatActive "C4"; set config "true"}
            }
        }            
    if {$config == "true"} { 
        #$widget(MenubuttonMapReady) configure -state normal
        .top2.fra71.fra67.men68 configure -state normal
        #$widget(MenubuttonSnap) configure -state normal
        .top2.fra71.fra67.men69 configure -state normal
        set CheckMenuOn "ok" 
        }
    }

if {$ActiveProgram == "POLMULT"} {
    for {set ii 0} {$ii <= 32} {incr ii} { set configmult($ii) "false" }
    for {set ii 1} {$ii <= $NDataDirMult} {incr ii} {
        set config "true"
        set configligcol "true"
        set DataDirMultActive $DataDirMult($ii)

        if {$FormatDataDirMult == "S2"} {
            if [file exists "$DataDirMultActive/config.txt"] {
                if [file exists "$DataDirMultActive/config_mapready.txt"] {
                    if [file exists "$DataDirMultActive/config_mapinfo.txt"] {
                        } else {
                        set ConfigMapSource $DataDirMultActive; append ConfigMapSource "/config_mapready.txt"
                        set ConfigMapTarget $DataDirMultActive; append ConfigMapTarget "/config_mapinfo.txt"
                        CopyFile $ConfigMapSource $ConfigMapTarget
                        }
                    }
                set ConfigFile "$DataDirMultActive/config.txt"; LoadConfig
                if {$ii == 1} {
                    set NligRef $NligFullSize; set NcolRef $NcolFullSize
                    } else {
                    if {$NligRef != $NligFullSize} { set configligcol "false" }
                    if {$NcolRef != $NcolFullSize} { set configligcol "false" }
                    }
                if [file exists "$DataDirMultActive/s11.bin"] { } else {set config "false"}
                if [file exists "$DataDirMultActive/s22.bin"] { } else {set config "false"}
                } else {
                set config "false"
                }
            }        
        if {$FormatDataDirMult == "T3"} {
            if [file isdirectory "$DataDirMultActive/T3"] {
                if [file exists "$DataDirMultActive/T3/config.txt"] {
                    if [file exists "$DataDirMultActive/T3/config_mapready.txt"] {
                        if [file exists "$DataDirMultActive/T3/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultActive; append ConfigMapSource "/T3/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultActive; append ConfigMapTarget "/T3/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirMultActive/T3/config.txt"; LoadConfig
                    if {$ii == 1} {
                        set NligRef $NligFullSize; set NcolRef $NcolFullSize
                        } else {
                        if {$NligRef != $NligFullSize} { set configligcol "false" }
                        if {$NcolRef != $NcolFullSize} { set configligcol "false" }
                        }
                    if [file exists "$DataDirMultActive/T3/T11.bin"] { } else {set config "false"}
                    } else {
                    set config "false"
                    }
                } else {
                set config "false"
                }
            }
        if {$FormatDataDirMult == "SPP"} {
            if [file exists "$DataDirMultActive/config.txt"] {
                if [file exists "$DataDirMultActive/config_mapready.txt"] {
                    if [file exists "$DataDirMultActive/config_mapinfo.txt"] {
                        } else {
                        set ConfigMapSource $DataDirMultActive; append ConfigMapSource "/config_mapready.txt"
                        set ConfigMapTarget $DataDirMultActive; append ConfigMapTarget "/config_mapinfo.txt"
                        CopyFile $ConfigMapSource $ConfigMapTarget
                        }
                    }
                set ConfigFile "$DataDirMultActive/config.txt"; LoadConfig
                if {$ii == 1} {
                    set NligRef $NligFullSize; set NcolRef $NcolFullSize
                    } else {
                    if {$NligRef != $NligFullSize} { set configligcol "false" }
                    if {$NcolRef != $NcolFullSize} { set configligcol "false" }
                    }
                if [file exists "$DataDirMultActive/s11.bin"] { } else {set config "false"}
                if [file exists "$DataDirMultActive/s22.bin"] { } else {set config "false"}
                } else {
                set config "false"
                }
            }        
        if {$FormatDataDirMult == "C2"} {
            if [file isdirectory "$DataDirMultActive/C2"] {
                if [file exists "$DataDirMultActive/C2/config.txt"] {
                    if [file exists "$DataDirMultActive/C2/config_mapready.txt"] {
                        if [file exists "$DataDirMultActive/C2/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultActive; append ConfigMapSource "/C2/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultActive; append ConfigMapTarget "/C2/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirMultActive/C2/config.txt"; LoadConfig
                    if {$ii == 1} {
                        set NligRef $NligFullSize; set NcolRef $NcolFullSize
                        } else {
                        if {$NligRef != $NligFullSize} { set configligcol "false" }
                        if {$NcolRef != $NcolFullSize} { set configligcol "false" }
                        }
                    if [file exists "$DataDirMultActive/C2/C11.bin"] { } else {set config "false"}
                    } else {
                    set config "false"
                    }
                } else {
                set config "false"
                }
            }
        if {$FormatDataDirMult == "T2"} {
            if [file isdirectory "$DataDirMultActive/T2"] {
                if [file exists "$DataDirMultActive/T2/config.txt"] {
                    if [file exists "$DataDirMultActive/T2/config_mapready.txt"] {
                        if [file exists "$DataDirMultActive/T2/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultActive; append ConfigMapSource "/T2/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultActive; append ConfigMapTarget "/T2/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirMultActive/T2/config.txt"; LoadConfig
                    if {$ii == 1} {
                        set NligRef $NligFullSize; set NcolRef $NcolFullSize
                        } else {
                        if {$NligRef != $NligFullSize} { set configligcol "false" }
                        if {$NcolRef != $NcolFullSize} { set configligcol "false" }
                        }
                    if [file exists "$DataDirMultActive/T2/T11.bin"] { } else {set config "false"}
                    } else {
                    set config "false"
                    }
                } else {
                set config "false"
                }
            }
        set configmult($ii) $config
        }
    set config "true"
    for {set ii 1} {$ii <= $NDataDirMult} {incr ii} {
        if {$configmult($ii) != "true"} { set config "false" }
        }
    if {$config == "true"} { 
        set CheckMenuOn "ok"
        if {$FormatDataDirMult == "S2"} { set DataFormatActive "S2" }
        if {$FormatDataDirMult == "T3"} { set DataFormatActive "T3" }
        if {$FormatDataDirMult == "SPP"} { set DataFormatActive "SPP" }
        if {$FormatDataDirMult == "C2"} { set DataFormatActive "C2" }
        if {$FormatDataDirMult == "T2"} { set DataFormatActive "T2" }
        }
    if {$configligcol == "false"} { set CheckMenuOn "koligcol" }
    }
    
if {$CheckMenuOn == "ok" } {
    MenuOn
    if {$ActiveProgram == "POLINSAR"} {
        if { $DataFormatActive == "S2" } { 
            EnviWriteConfigCheck "$DataDirChannel1" $NligFullSize $NcolFullSize $DataFormatActive
            EnviWriteConfigCheck "$DataDirChannel2" $NligFullSize $NcolFullSize $DataFormatActive
            }
        if { $DataFormatActive == "T6" } { EnviWriteConfigCheck "$DataDirChannel1/T6" $NligFullSize $NcolFullSize $DataFormatActive}
        if { $DataFormatActive == "SPP" } { 
            EnviWriteConfigCheck "$DataDirChannel1" $NligFullSize $NcolFullSize $DataFormatActive
            EnviWriteConfigCheck "$DataDirChannel2" $NligFullSize $NcolFullSize $DataFormatActive
            }
        if { $DataFormatActive == "T4" } { EnviWriteConfigCheck "$DataDirChannel1/T4" $NligFullSize $NcolFullSize $DataFormatActive}
        } else {
        if {$ActiveProgram == "ASAR"} {
            } else {
            if {$ActiveProgram == "POLMULT"} {
                for {set ii 1} {$ii <= $NDataDirMult} {incr ii} {
                    if { $DataFormatActive == "S2" } { set DataDirMultActiveCheck $DataDirMult($ii) }
                    if { $DataFormatActive == "SPP" } { set DataDirMultActiveCheck $DataDirMult($ii) }
                    if { $DataFormatActive == "C2" } { set DataDirMultActiveCheck "$DataDirMult($ii)/C2" }
                    if { $DataFormatActive == "T2" } { set DataDirMultActiveCheck "$DataDirMult($ii)/T2" }
                    if { $DataFormatActive == "T3" } { set DataDirMultActiveCheck "$DataDirMult($ii)/T3" }
                    EnviWriteConfigCheck $DataDirMultActiveCheck $NligFullSize $NcolFullSize $DataFormatActive
                    }
                } else {
                if { $DataFormatActive == "S2" } { set DataDirActiveCheck $DataDir }
                if { $DataFormatActive == "SPP" } { set DataDirActiveCheck $DataDir }
                if { $DataFormatActive == "IPP" } { set DataDirActiveCheck $DataDir }
                if { $DataFormatActive == "C2" } { set DataDirActiveCheck "$DataDir/C2" }
                if { $DataFormatActive == "C3" } { set DataDirActiveCheck "$DataDir/C3" }
                if { $DataFormatActive == "C4" } { set DataDirActiveCheck "$DataDir/C4" }
                if { $DataFormatActive == "T2" } { set DataDirActiveCheck "$DataDir/T2" }
                if { $DataFormatActive == "T3" } { set DataDirActiveCheck "$DataDir/T3" }
                if { $DataFormatActive == "T4" } { set DataDirActiveCheck "$DataDir/T4" }
                EnviWriteConfigCheck $DataDirActiveCheck $NligFullSize $NcolFullSize $DataFormatActive
                }
            }
        }
    } else {
    if {$CheckMenuOn == "ko" } {
        #warning message
        set VarWarning ""
        set WarningMessage "NO DATA FILES FOUND"
        set WarningMessage2 "CHANGE THE DATA DIR OR IMPORT DATA"
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        MenuEnvImp
        }
    if {$CheckMenuOn == "koligcol" } {
        #error message
        set VarError ""
        set ErrorMessage "THE DATA FILES HAVE NOT THE SAME ROW / COL SIZE"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }
}
#############################################################################
## Procedure:  MenuOn

proc ::MenuOn {} {
global ActiveProgram
global ALOSDataFormat RADARSAT2DataFormat
global TERRASARXDataFormat TERRASARXDataLevel
global TANDEMXDataFormat TANDEMXDataLevel
global SIRCDataFormatPol CSKDataFormat RISATDataFormat SENTINEL1DataFormat
global Load_Environment Load_EnvironmentDual Load_EnvironmentMult

#Label Vide
#CONSNGL
.top2.fra71.fra77.cpd67 configure -text ""
.top2.fra71.fra77.cpd67 configure -state disable
#CONDUAL
.top2.fra71.fra77.cpd68 configure -text ""
.top2.fra71.fra77.cpd68 configure -state disable
#CONMULT
.top2.fra71.fra77.cpd69 configure -text ""
.top2.fra71.fra77.cpd69 configure -state disable
#PROPSP
.top2.fra71.fra78.men58 configure -text ""
.top2.fra71.fra78.men58 configure -state disable
#PROEOSI
.top2.fra71.fra78.men71 configure -text ""
.top2.fra71.fra78.men71 configure -state disable
#PRODPG
.top2.fra71.fra78.men75 configure -text ""
.top2.fra71.fra78.men75 configure -state disable
#PRODPS
.top2.fra71.fra78.men77 configure -text ""
.top2.fra71.fra78.men77 configure -state disable
#PROASAR
.top2.fra71.fra78.men101 configure -text ""
.top2.fra71.fra78.men101 configure -state disable
#PRODUAL
.top2.fra71.fra78.men74 configure -text ""
.top2.fra71.fra78.men74 configure -state disable
#PROMULT
.top2.fra71.fra78.men68 configure -text ""
.top2.fra71.fra78.men68 configure -state disable
#DISP
.top2.fra71.fra79.cpd75 configure -text ""
.top2.fra71.fra79.cpd75 configure -state disable
#CALIB
.top2.fra71.fra81.men78 configure -text ""
.top2.fra71.fra81.men78 configure -state disable


#Display
.top2.fra71.fra79.cpd75 configure -text "Display"
.top2.fra71.fra79.cpd75 configure -state normal

if {$ActiveProgram == "POLINSAR"} {
    #Convert
    .top2.fra71.fra77.cpd68 configure -text "Convert"
    .top2.fra71.fra77.cpd68 configure -state normal
    #Process
    .top2.fra71.fra78.men74 configure -text "Process"
    .top2.fra71.fra78.men74 configure -state normal
    }

if {$ActiveProgram == "POLMULT"} {
    #Convert
    .top2.fra71.fra77.cpd69 configure -text "Convert"
    .top2.fra71.fra77.cpd69 configure -state normal
    #Process
    .top2.fra71.fra78.men68 configure -text "Process"
    .top2.fra71.fra78.men68 configure -state normal
    }

if {$ActiveProgram == "POLSARPRO"} {
    #Convert
    .top2.fra71.fra77.cpd67 configure -text "Convert"
    .top2.fra71.fra77.cpd67 configure -state normal
    #Process
    .top2.fra71.fra78.men58 configure -text "Process"
    .top2.fra71.fra78.men58 configure -state normal
    #Calibration
    .top2.fra71.fra81.men78 configure -text "Calibration"
    .top2.fra71.fra81.men78 configure -state normal
    }

if {$ActiveProgram == "ASAR"} {
    #Process
    .top2.fra71.fra78.men101 configure -text "Process"
    .top2.fra71.fra78.men101 configure -state normal
    }
    
#EOSI - DUAL-GROUND TopLevel(7)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "dual1.5"} { set config "true"}
    if {$ALOSDataFormat == "quad1.5"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "dual1.5"} { set config "true"}
    if {$ALOSDataFormat == "quad1.5"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "dual"} {
        if {$TERRASARXDataLevel != "SSC"} { set config "true"}
        }
    }
if {$config == "true"} {
    #Process
    .top2.fra71.fra78.men75 configure -text "Process"
    .top2.fra71.fra78.men75 configure -state normal
    }

#EOSI - DUAL-SLANT TopLevel(8)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "dual1.1"} { set config "true"}
    if {$ALOSDataFormat == "dual1.1vex"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "dual1.1"} { set config "true"}
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKDataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2DataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "dual1.1"} { set config "true"}
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1DataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "dual"} {
        if {$TERRASARXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXDataFormat == "dual"} {
        if {$TANDEMXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCDataFormatPol == "dual"} { set config "true"}
    }
if {$config == "true"} {
    #Process
    .top2.fra71.fra78.men77 configure -text "Process"
    .top2.fra71.fra78.men77 configure -state normal
    }

#EOSI - QUAD TopLevel(5)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "quad1.1"} { set config "true"}
    if {$ALOSDataFormat == "quad1.1vex"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "quad1.1"} { set config "true"}
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2DataFormat == "quad"} { set config "true"}
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "quad1.1"} { set config "true"}
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCDataFormatPol == "quad"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "quad"} {
        if {$TERRASARXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "AIRSAR"} { set config "true"}
if {$ActiveProgram == "CONVAIR"} { set config "true"}
if {$ActiveProgram == "EMISAR"} { set config "true"}
if {$ActiveProgram == "ESAR"} { set config "true"}
if {$ActiveProgram == "FSAR"} { set config "true"}
if {$ActiveProgram == "PISAR"} { set config "true"}
if {$ActiveProgram == "SETHI"} { set config "true"}
if {$ActiveProgram == "UAVSAR"} { set config "true"}
if {$config == "true"} {
    #Process
    .top2.fra71.fra78.men71 configure -text "Process"
    .top2.fra71.fra78.men71 configure -state normal
    }                
}
#############################################################################
## Procedure:  MenuOff

proc ::MenuOff {} {
global DataFormatActive GoogleLatLong
global GoogleLatCenter GoogleLongCenter GoogleLat00 GoogleLong00 GoogleLat0N GoogleLong0N
global GoogleLatN0 GoogleLongN0 GoogleLatNN GoogleLongNN GoogleInputFile

set DataFormatActive "---"
set GoogleLatLong ""
set GoogleLatCenter "?"
set GoogleLongCenter "?"
set GoogleLat00 "?"
set GoogleLong00 "?"
set GoogleLat0N "?"
set GoogleLong0N "?"
set GoogleLatN0 "?"
set GoogleLongN0 "?"
set GoogleLatNN "?"
set GoogleLongNN "?"
set GoogleInputFile ""

#Label Vide
#ENVSNGL
.top2.fra71.fra75.cpd74 configure -text ""
.top2.fra71.fra75.cpd74 configure -state disable
#ENVDUAL
.top2.fra71.fra75.cpd73 configure -text ""
.top2.fra71.fra75.cpd73 configure -state disable
#ENVMULT
.top2.fra71.fra75.cpd67 configure -text ""
.top2.fra71.fra75.cpd67 configure -state disable
#IMPPSP
.top2.fra71.fra76.men69 configure -text ""
.top2.fra71.fra76.men69 configure -state disable
#IMPEOSI
.top2.fra71.fra76.men98 configure -text ""
.top2.fra71.fra76.men98 configure -state disable
#IMPDPG
.top2.fra71.fra76.men74 configure -text ""
.top2.fra71.fra76.men74 configure -state disable
#IMPDPS
.top2.fra71.fra76.men76 configure -text ""
.top2.fra71.fra76.men76 configure -state disable
#IMPASAR
.top2.fra71.fra76.men70 configure -text ""
.top2.fra71.fra76.men70 configure -state disable
#CONSNGL
.top2.fra71.fra77.cpd67 configure -text ""
.top2.fra71.fra77.cpd67 configure -state disable
#CONDUAL
.top2.fra71.fra77.cpd68 configure -text ""
.top2.fra71.fra77.cpd68 configure -state disable
#CONMULT
.top2.fra71.fra77.cpd69 configure -text ""
.top2.fra71.fra77.cpd69 configure -state disable
#PROPSP
.top2.fra71.fra78.men58 configure -text ""
.top2.fra71.fra78.men58 configure -state disable
#PROEOSI
.top2.fra71.fra78.men71 configure -text ""
.top2.fra71.fra78.men71 configure -state disable
#PRODPG
.top2.fra71.fra78.men75 configure -text ""
.top2.fra71.fra78.men75 configure -state disable
#PRODPS
.top2.fra71.fra78.men77 configure -text ""
.top2.fra71.fra78.men77 configure -state disable
#PROASAR
.top2.fra71.fra78.men101 configure -text ""
.top2.fra71.fra78.men101 configure -state disable
#PRODUAL
.top2.fra71.fra78.men74 configure -text ""
.top2.fra71.fra78.men74 configure -state disable
#PROMULT
.top2.fra71.fra78.men68 configure -text ""
.top2.fra71.fra78.men68 configure -state disable
#DISP
.top2.fra71.fra79.cpd75 configure -text ""
.top2.fra71.fra79.cpd75 configure -state disable
#CALIB
.top2.fra71.fra81.men78 configure -text ""
.top2.fra71.fra81.men78 configure -state disable

#Label PSP
#ENVSNGL
.top2.fra71.fra75.cpd74 configure -text "Environment"
.top2.fra71.fra75.cpd74 configure -state disable
#IMPPSP
.top2.fra71.fra76.men69 configure -text "Import"
.top2.fra71.fra76.men69 configure -state disable
#CONSNGL
.top2.fra71.fra77.cpd67 configure -text "Convert"
.top2.fra71.fra77.cpd67 configure -state disable
#PROPSP
.top2.fra71.fra78.men58 configure -text "Process"
.top2.fra71.fra78.men58 configure -state disable
#DISP
.top2.fra71.fra79.cpd75 configure -text "Display"
.top2.fra71.fra79.cpd75 configure -state disable
#CALIB
.top2.fra71.fra81.men78 configure -text "Calibration"
.top2.fra71.fra81.men78 configure -state disable

MenuEnv
}
#############################################################################
## Procedure:  load_bmp_lens_line

proc ::load_bmp_lens_line {w wc} {
global SourceWidth SourceHeight SizeRect SizeLens Lens
global BMPImage BMPImageLens BMPLens ImageSource BMPViewFileInput
global RectLensCenter RectLensCenterX RectLensCenterY RectLens  LensX1 LensY1 plot
global LineXLensInit LineYLensInit LineXLens LineYLens plot2 line_color
global BMPSampleLens BMPWidthSource BMPHeightSource BMPSampleSource BMPLensDeltaX BMPLensDeltaY
global ZoomBMP ZoomBMPSource ZoomLensBMP
global MouseActiveButton MouseRectLens

    set MouseRectLens "Outside"
    set Lens "1"
    set BMPSampleLens "1"
    set ZoomLensBMP "1:1"

    set BMPLensDeltaX "0"
    set BMPLensDeltaY "0"
        
    set SizeRect 200
    set SizeLens 200
    
    #show lens
    package require Img
    set LensX1 [expr round(($SourceWidth - $SizeLens) / 2 )]
    if {$LensX1 < 0} { set LensX1 0}
    set LensY1 [expr round(($SourceHeight - $SizeLens) / 2 )]
    if {$LensY1 < 0} { set LensY1 0}
    set LensX2 [expr $LensX1 + $SizeLens]
    if {$LensX2 > $SourceWidth} { set LensX2 $SourceWidth}
    set LensY2 [expr $LensY1 + $SizeLens]
    if {$LensY2 > $SourceHeight} { set LensY2 $SourceHeight}
    BMPLens blank
    BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -subsample $BMPSampleLens $BMPSampleLens
    $wc configure -width $SizeLens -height $SizeLens
    $wc create image 0 0 -anchor nw -image BMPLens
    #catch {wm geometry $w {}}

    #show line_lens
    set LineXLensInit {0 0}
    set LineYLensInit {0 0}
    set LineXLens [$wc create line 0 0 0 $SizeLens -fill $line_color -width 2]
    set LineYLens [$wc create line 0 0 $SizeLens 0 -fill $line_color -width 2]
    $wc addtag LineXLensInit withtag $LineXLens
    $wc addtag LineYLensInit withtag $LineYLens
    bind $wc <Motion> "MouseMotionLens %x %y"
    set plot2(lastX) 0
    set plot2(lastY) 0

    #show image_lens
    set ZoomBMP $ZoomBMPSource 
    BMPImageLens blank
    BMPImageLens copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSampleSource $BMPSampleSource
    # .top73 = $widget(VIEWBMPLENS)
    # .top73.can81 = $widget(CANVASBMPLENS)
    .top73.can81 configure -width $BMPWidthSource -height $BMPHeightSource
    .top73.can81 create image 0 0 -anchor nw -image BMPImageLens
    catch {wm geometry .top73 {}} 
    wm title .top73 [file tail $BMPViewFileInput]
    Window show .top73; TextEditorRunTrace "Open Window View BMP Lens" "b"

    #show rect_zoom
    set RectLensCenterX [expr round($BMPWidthSource/2)]
    set RectLensCenterY [expr round($BMPHeightSource/2)]
    set RectLensCenter {$RectLensCenterX $RectLensCenterY}
   
    set RectLensX1 [expr [lindex $RectLensCenter 0] - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensY1 [expr [lindex $RectLensCenter 1] - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRect / $BMPSampleSource)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRect / $BMPSampleSource)]
    set RectLens [.top73.can81 create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
    .top73.can81 addtag RectLensCenter withtag $RectLens
    bind .top73.can81 <B1-Motion> "RectLensMove .top73.can81 %x %y $wc"
    set plot(lastX) 0
    set plot(lastY) 0
    
}
#############################################################################
## Procedure:  MouseButtonDownLens

proc ::MouseButtonDownLens {nx ny} {
global MouseActiveButton
global BMPMouseX BMPMouseY BMPValue BMPValue_2
global BMPPolSigX BMPPolSigY BMPPolSigValue
global BMPPCTX BMPPCTY BMPPCTValue BMPPTOMX BMPPTOMY BMPPTOMValue
global PTOMDirInput PTOMOutputDir PTOMSlice PTOMDEM
global PCTSlice BMPPCTind BMPPCTval PCTPixAz PCTPixRg
global BMPPolInSAROut BMPPolInSAROutX BMPPolInSAROutY BMPPolInSAROutValue
global BMPCalibX BMPCalibY BMPCalibValue
global BMPCmplxPlaneX BMPCmplxPlaneY BMPCmplxPlaneValue
global BMPLociCmplxPlaneX BMPLociCmplxPlaneY BMPLociCmplxPlaneValue
global BMPProfileX BMPProfileY

if {$MouseActiveButton == "LensPOLSIG"} {
    set BMPPolSigX $BMPMouseX
    set BMPPolSigY $BMPMouseY
    set BMPPolSigValue $BMPValue
    }
if {$MouseActiveButton == "LensPCT"} {
    set BMPPCTX $BMPMouseX
    set BMPPCTY $BMPMouseY
    set BMPPCTValue $BMPValue
    if {$PCTSlice == "azimut"} { 
        set BMPPCTind $BMPPCTX
        set BMPPCTval [expr $BMPPCTind * $PCTPixRg] 
        }
    if {$PCTSlice == "range"} { 
        set BMPPCTind $BMPPCTY
        set BMPPCTval [expr $BMPPCTind * $PCTPixAz] 
        }
    PCTcreateBMP
    }
if {$MouseActiveButton == "LensPTOM"} {
    set BMPPTOMX $BMPMouseX
    set BMPPTOMY $BMPMouseY
    set BMPPTOMValue $BMPValue
    if {$PTOMSlice == "col"} { 
        set PTOMOutputDir $PTOMDirInput
        append PTOMOutputDir "/profile_beamformer_"
        if {$PTOMDEM == "1"} { 
            append PTOMOutputDir "DEMcomp_"
            } else {
            append PTOMOutputDir ""
            }
        append PTOMOutputDir "col_"
        append PTOMOutputDir $BMPPTOMX
        }
    if {$PTOMSlice == "lig"} { 
        set PTOMOutputDir $PTOMDirInput
        append PTOMOutputDir "/profile_beamformer_"
        if {$PTOMDEM == "1"} { 
            append PTOMOutputDir "DEMcomp_"
            } else {
            append PTOMOutputDir ""
            }
        append PTOMOutputDir "row_"
        append PTOMOutputDir $BMPPTOMY
        }
    }
if {$MouseActiveButton == "LensPOLINSAR"} {
    if {$BMPPolInSAROut == "true" } {
        set BMPPolInSAROutX $BMPMouseX
        set BMPPolInSAROutY $BMPMouseY
        set BMPPolInSAROutValue $BMPValue_2
        }
    if {$BMPPolInSAROut == "false" } {
        set BMPPolInSAROutX ""
        set BMPPolInSAROutY ""
        set BMPPolInSAROutValue ""
        }
    }
if {$MouseActiveButton == "LensCALIB"} {
    set BMPCalibX $BMPMouseX
    set BMPCalibY $BMPMouseY
    set BMPCalibValue $BMPValue
    }    
if {$MouseActiveButton == "LensCMPLXPLANE"} {
    set BMPCmplxPlaneX $BMPMouseX
    set BMPCmplxPlaneY $BMPMouseY
    set BMPCmplxPlaneValue $BMPValue
    set config ""
    if {$BMPCmplxPlaneX != ""} {append config "okx"}
    if {$BMPCmplxPlaneY != ""} {append config "oky"}
    if {$config == "okxoky"} { CmplxPlaneExtractPlot }
    }
if {$MouseActiveButton == "LensCMPLXPLANEPP"} {
    set BMPCmplxPlaneX $BMPMouseX
    set BMPCmplxPlaneY $BMPMouseY
    set BMPCmplxPlaneValue $BMPValue
    set config ""
    if {$BMPCmplxPlaneX != ""} {append config "okx"}
    if {$BMPCmplxPlaneY != ""} {append config "oky"}
    if {$config == "okxoky"} { CmplxPlaneExtractPPPlot }
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEoff"} {
    set BMPLociCmplxPlaneX $BMPMouseX
    set BMPLociCmplxPlaneY $BMPMouseY
    set BMPLociCmplxPlaneValue $BMPValue
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEon"} {
    set BMPLociCmplxPlaneX $BMPMouseX
    set BMPLociCmplxPlaneY $BMPMouseY
    set BMPLociCmplxPlaneValue $BMPValue
    set config ""
    if {$BMPLociCmplxPlaneX != ""} {append config "okx"}
    if {$BMPLociCmplxPlaneY != ""} {append config "oky"}
    if {$config == "okxoky"} { LociCmplxPlaneExtractPlot }
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPoff"} {
    set BMPLociCmplxPlaneX $BMPMouseX
    set BMPLociCmplxPlaneY $BMPMouseY
    set BMPLociCmplxPlaneValue $BMPValue
    }
if {$MouseActiveButton == "LensLOCICMPLXPLANEPPon"} {
    set BMPLociCmplxPlaneX $BMPMouseX
    set BMPLociCmplxPlaneY $BMPMouseY
    set BMPLociCmplxPlaneValue $BMPValue
    set config ""
    if {$BMPLociCmplxPlaneX != ""} {append config "okx"}
    if {$BMPLociCmplxPlaneY != ""} {append config "oky"}
    if {$config == "okxoky"} { LociCmplxPlaneExtractPPPlot }
    }
if {$MouseActiveButton == "LensPROFILE"} {
    set BMPProfileX $BMPMouseX
    set BMPProfileY $BMPMouseY
    set config ""
    if {$BMPProfileX != ""} {append config "okx"}
    if {$BMPProfileY != ""} {append config "oky"}
    if {$config == "okxoky"} { ProfileExtractData }
    }            
}
#############################################################################
## Procedure:  GnuPlotInit

proc ::GnuPlotInit {xpos ypos xsize ysize} {
global PlatForm WinDir GnuPlotPath GnuplotPipeFid WGNUPLOTINIDir 

if {$PlatForm == "windows"} {
    set Wgnuplot_Config "$WGNUPLOTINIDir/WGNUPLOT.INI"
    DeleteFile $Wgnuplot_Config
    set f [open $Wgnuplot_Config w+]
    puts $f "\x5BWGNUPLOT\x5D"
    puts $f "TextOrigin=0 0"
    puts $f "TextSize=640 150"
    puts $f "TextFont=Terminal,8"
    puts $f "GraphOrigin=$xpos $ypos"
    puts $f "GraphSize=$xsize $ysize"
    puts $f "Graph=Arial,8"
    puts $f "GraphColor=1"
    puts $f "GraphToTop=1"
    puts $f "GraphBackground=255 255 255"
    puts $f "Border=0 0 0 0 0"
    puts $f "Axis=192 192 192 2 2"
    puts $f "Line1=0 0 255 0 0"
    puts $f "Line2=0 255 0 0 1"
    puts $f "Line3=255 0 0 0 2"
    puts $f "Line4=255 0 255 0 3"
    puts $f "Line5=0 0 128 0 4"
    close $f
    }
    
set GnuplotPipeFid [ open "| $GnuPlotPath" r+]
#GnuPlotTerm $GnuplotPipeFid "SCREEN"
}
#############################################################################
## Procedure:  CloseAllPipe

proc ::CloseAllPipe {} {
global PolSigExecFid CalibExecFid StatExecFid
global HistoExecFid CmplxPlaneExecFid LociCmplxPlaneExecFid
global ProfileExecFid PCTExecFid
global GnuplotPipeFid GnuplotPipeSave
global GnuplotPipeCopol GnuplotPipeXpol
global GnuplotPipeSpectrum
global GnuplotPipeSquint
global GnuplotPipeCalib
global GnuplotPipeStat
global GnuplotPipeHisto
global GnuplotPipeCmplxPlane
global GnuplotPipeLociCmplxPlane
global GnuplotPipeProfile
global GnuplotPipeScatterPlot
global GnuplotPipePTOMDisplay
global ErrorCatch

set ErrorCatch "0"
if {$PolSigExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $PolSigExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $PolSigExecFid "exit\n"
        flush $PolSigExecFid
        fconfigure $PolSigExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $PolSigExecFid ProgressLine
            update
            }
        catch "close $PolSigExecFid"
        }
    set PolSigExecFid ""
    }
set ErrorCatch "0"
if {$PCTExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $PCTExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $PCTExecFid "exit\n"
        flush $PCTExecFid
        fconfigure $PCTExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $PCTExecFid ProgressLine
            update
            }
        catch "close $PCTExecFid"
        }
    set PCTExecFid ""
    }
set ErrorCatch "0"
if {$CalibExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $CalibExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $CalibExecFid "exit\n"
        flush $CalibExecFid
        fconfigure $CalibExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $CalibExecFid ProgressLine
            update
            }
        catch "close $CalibExecFid"
    }
    set CalibExecFid ""
    }
set ErrorCatch "0"
if {$StatExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $StatExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $StatExecFid "exit\n"
        flush $StatExecFid
        fconfigure $StatExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $StatExecFid ProgressLine
            update
            }
        catch "close $StatExecFid"
        }
    set StatExecFid ""
    }
set ErrorCatch "0"
if {$HistoExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $HistoExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $HistoExecFid "exit\n"
        flush $HistoExecFid
        fconfigure $HistoExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $HistoExecFid ProgressLine
            update
            }
        catch "close $HistoExecFid"
        }
    set HistoExecFid ""
    }
set ErrorCatch "0"
if {$CmplxPlaneExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $CmplxPlaneExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $CmplxPlaneExecFid "exit\n"
        flush $CmplxPlaneExecFid
        fconfigure $CmplxPlaneExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $CmplxPlaneExecFid ProgressLine
            update
            }
        catch "close $CmplxPlaneExecFid"
        }
    set CmplxPlaneExecFid ""
    }
set ErrorCatch "0"
if {$LociCmplxPlaneExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $LociCmplxPlaneExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $LociCmplxPlaneExecFid "exit\n"
        flush $LociCmplxPlaneExecFid
        fconfigure $LociCmplxPlaneExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $LociCmplxPlaneExecFid ProgressLine
            update
            }
        catch "close $LociCmplxPlaneExecFid"
        }
    set LociCmplxPlaneExecFid ""
    }
set ErrorCatch "0"
if {$ProfileExecFid != ""} {
    set ProgressLine ""
    set ErrorCatch [catch {puts $ProfileExecFid "exit\n"}]
    if { $ErrorCatch == "0" } {
        puts $ProfileExecFid "exit\n"
        flush $ProfileExecFid
        fconfigure $ProfileExecFid -buffering line
        while {$ProgressLine != "OKexit"} {
            gets $ProfileExecFid ProgressLine
            update
            }
        catch "close $ProfileExecFid"
        }
    set ProfileExecFid ""
    }

if {$GnuplotPipeCopol != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeCopol "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeCopol "quit"
        flush $GnuplotPipeCopol
        }
    catch "close $GnuplotPipeCopol"
    set GnuplotPipeCopol ""
    }
if {$GnuplotPipeXpol != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeXpol "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeXpol "quit"
        flush $GnuplotPipeXpol
        }
    catch "close $GnuplotPipeXpol"
    set GnuplotPipeXpol ""
    }
if {$GnuplotPipeSpectrum != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeSpectrum "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeSpectrum "quit"
        flush $GnuplotPipeSpectrum 
        }
    catch "close $GnuplotPipeSpectrum"
    set GnuplotPipeSpectrum ""
    }
if {$GnuplotPipeSquint != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeSquint "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeSquint "quit"
        flush $GnuplotPipeSquint 
        }
    catch "close $GnuplotPipeSquint"
    set GnuplotPipeSquint ""
    }
if {$GnuplotPipeCalib != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeCalib "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeCalib "quit"
        flush $GnuplotPipeCalib 
        }
    catch "close $GnuplotPipeCalib"
    set GnuplotPipeCalib ""
    }
if {$GnuplotPipeStat != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeStat "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeStat "quit"
        flush $GnuplotPipeStat 
        }
    catch "close $GnuplotPipeStat"
    set GnuplotPipeStat ""
    }
if {$GnuplotPipeHisto != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeHisto "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeHisto "quit"
        flush $GnuplotPipeHisto 
        }
    catch "close $GnuplotPipeHisto"
    set GnuplotPipeHisto ""
    }
if {$GnuplotPipeCmplxPlane != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeCmplxPlane "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeCmplxPlane "quit"
        flush $GnuplotPipeCmplxPlane 
        }
    catch "close $GnuplotPipeCmplxPlane"
    set GnuplotPipeCmplxPlane ""
    }
if {$GnuplotPipeLociCmplxPlane != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeLociCmplxPlane "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeLociCmplxPlane "quit"
        flush $GnuplotPipeLociCmplxPlane 
        }
    catch "close $GnuplotPipeLociCmplxPlane"
    set GnuplotPipeLociCmplxPlane ""
    }
if {$GnuplotPipeProfile != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeProfile "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeProfile "quit"
        flush $GnuplotPipeProfile 
        }
    catch "close $GnuplotPipeProfile"
    set GnuplotPipeProfile ""
    }
if {$GnuplotPipeScatterPlot != ""} {
    set ErrorCatch [catch {puts $GnuplotPipeScatterPlot "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeScatterPlot "quit"
        flush $GnuplotPipeScatterPlot 
        }
    catch "close $GnuplotPipeScatterPlot"
    set GnuplotPipeScatterPlot ""
    }
if {$GnuplotPipePTOMDisplay != ""} {
    set ErrorCatch [catch {puts $GnuplotPipePTOMDisplay "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipePTOMDisplay "quit"
        flush $GnuplotPipePTOMDisplay 
        }
    catch "close $GnuplotPipePTOMDisplay"
    set GnuplotPipePTOMDisplay ""
    }

set GnuplotPipeFid "" 
set GnuplotPipeSave ""   
}
#############################################################################
## Procedure:  GnuPlot3D

proc ::GnuPlot3D {PipeFid FileTxt FileBin xlbl ylbl zlbl viewx viewz titre minmax format3d everyval} {
global GnuOutputFormat

WaitUntilCreated $FileTxt
if [file exists $FileTxt] {
    set f [open $FileTxt r]
    gets $f tmp; gets $f xmin; gets $f xmax
    gets $f tmp; gets $f ymin; gets $f ymax
    gets $f zmin; gets $f zmax
    gets $f min; gets $f max
    gets $f Nctr; gets $f NctrStart; gets $f NctrIncr
    close $f
    }
if [file exists $FileBin] {
    if {$GnuOutputFormat == "SCREEN"} {
        puts $PipeFid "clear"; flush $PipeFid
        puts $PipeFid "reset"; flush $PipeFid
        }
    
    puts $PipeFid "set hidden3d"; flush $PipeFid
    puts $PipeFid "set autoscale"; flush $PipeFid
    puts $PipeFid "set surface"; flush $PipeFid
    puts $PipeFid "set ticslevel 0.4"; flush $PipeFid
    set viewxz "$viewx,$viewz,1,1"; puts $PipeFid "set view $viewxz"; flush $PipeFid
#    puts $PipeFid "set palette defined (0 'blue',3 'green',6 'yellow',10 'red')"; flush $PipeFid
    puts $PipeFid "set palette defined (0 '#000090',1 '#000FFF',2 '#0090FF',3 '#0FFFEE',4 '#90FF70',5 '#FFEE00',6 '#FF7000',7 '#EE0000',8 '#7F0000')"; flush $PipeFid

    
    if {$format3d == "mesh"} {
        puts $PipeFid "set ticslevel 0"; flush $PipeFid
        }

    if {$format3d == "contour"} {
        puts $PipeFid "unset hidden3d"; flush $PipeFid
        puts $PipeFid "unset surface"; flush $PipeFid
        puts $PipeFid "set contour base"; flush $PipeFid
        puts $PipeFid "set cntrparam levels auto $Nctr"; flush $PipeFid
        puts $PipeFid "set cntrparam bspline"; flush $PipeFid
        puts $PipeFid "set cntrparam levels incremental $NctrStart,$NctrIncr"; flush $PipeFid
        puts $PipeFid "set style data lines"; flush $PipeFid
        set viewxz "0,359.99,1,1"; puts $PipeFid "set view $viewxz"; flush $PipeFid
        }
        
    if {$format3d == "surface"} {
        puts $PipeFid "unset hidden3d"; flush $PipeFid
        puts $PipeFid "unset surface"; flush $PipeFid
        puts $PipeFid "set view map"; flush $PipeFid
        puts $PipeFid "set pm3d"; flush $PipeFid
        puts $PipeFid "set pm3d at b"; flush $PipeFid
        set viewxz "0,359.99,1,1"; puts $PipeFid "set view $viewxz"; flush $PipeFid
        }
        
    if {$format3d == "meshcolor"} {
        puts $PipeFid "unset surface"; flush $PipeFid
        puts $PipeFid "set ticslevel 0"; flush $PipeFid
        puts $PipeFid "set pm3d"; flush $PipeFid
        puts $PipeFid "set pm3d at s"; flush $PipeFid
        }
        
    if {$format3d == "meshcontour"} {
        puts $PipeFid "set contour base"; flush $PipeFid
        puts $PipeFid "set cntrparam levels auto $Nctr"; flush $PipeFid
        puts $PipeFid "set cntrparam bspline"; flush $PipeFid
        puts $PipeFid "set cntrparam levels incremental $NctrStart,$NctrIncr"; flush $PipeFid
        puts $PipeFid "set style data lines"; flush $PipeFid
        }
        
    if {$format3d == "meshsurface"} {
        puts $PipeFid "set surface"; flush $PipeFid
        puts $PipeFid "set pm3d"; flush $PipeFid
        puts $PipeFid "set pm3d at b"; flush $PipeFid
        puts $PipeFid "unset hidden3d"; flush $PipeFid
        }
        
    puts $PipeFid "set xlabel \x22$xlbl\x22"; flush $PipeFid
    puts $PipeFid "set ylabel \x22$ylbl\x22"; flush $PipeFid
    puts $PipeFid "set zlabel \x22$zlbl\x22"; flush $PipeFid
    set xrg "\x5B$xmin:$xmax\x5D";puts $PipeFid "set xrange $xrg noreverse nowriteback"; flush $PipeFid
    set yrg "\x5B$ymin:$ymax\x5D"; puts $PipeFid "set yrange $yrg noreverse nowriteback"; flush $PipeFid
    set zrg "\x5B$zmin:$zmax\x5D"; puts $PipeFid "set zrange $zrg noreverse nowriteback"; flush $PipeFid
    puts $PipeFid "set title \x22$titre\x22 textcolor lt 3"; flush $PipeFid
    if {$minmax == 1} {
        set minmaxval "Max = $max $zlbl"
        puts $PipeFid "set label \x22$minmaxval\x22 at screen 0.05, screen 0.10 textcolor lt 1"; flush $PipeFid
        set minmaxval "Min = $min $zlbl"
        puts $PipeFid "set label \x22$minmaxval\x22 at screen 0.65, screen 0.10 textcolor lt 1"; flush $PipeFid
        }
    puts $PipeFid "splot \x22$FileBin\x22 binary every $everyval:$everyval notitle with lines"; flush $PipeFid
    }
    
}
#############################################################################
## Procedure:  GnuPlotTerm

proc ::GnuPlotTerm {PipeFid Term} {
global PlatForm GnuOutputFile PSPThumbnails

puts $PipeFid "reset"; flush $PipeFid
puts $PipeFid "clear"; flush $PipeFid

if {$Term == "SCREEN"} {
    puts $PipeFid "unset output"; flush $PipeFid
    if {$PlatForm == "windows"} {
        puts $PipeFid "set terminal windows"; flush $PipeFid
        }
    if {$PlatForm == "unix"} {
        puts $PipeFid "set terminal x11"; flush $PipeFid
        }
    } else {
    if {$Term == "cgm"} {puts $PipeFid "set terminal cgm"; flush $PipeFid}
    if {$Term == "cdw"} {puts $PipeFid "set terminal corel"; flush $PipeFid}
    if {$Term == "emf"} {puts $PipeFid "set terminal emf"; flush $PipeFid}
    if {$Term == "png"} {
        set GnuSizeCol [expr (640 * $PSPThumbnails)]
        set GnuSizeLig [expr (480 * $PSPThumbnails)]
        set GnuSize $GnuSizeCol; append GnuSize ","; append GnuSize $GnuSizeLig
        puts $PipeFid "set terminal png tiny size $GnuSize font 'arial'"; flush $PipeFid
        }
    if {$Term == "eps"} {puts $PipeFid "set terminal postscript eps color"; flush $PipeFid}
    if {$Term == "tk"} {puts $PipeFid "set terminal tk"; flush $PipeFid}
    if {$Term == "gif"} {puts $PipeFid "set terminal gif medium size 640,480 font 'arial'"; flush $PipeFid}
    puts $PipeFid "set output \x22$GnuOutputFile\x22"; flush $PipeFid
    }
    
}
#############################################################################
## Procedure:  WriteConfigSubApt

proc ::WriteConfigSubApt {} {
global ConfigFile FinalNlig FinalNcol PolarCase PolarType
global SubAptOutputDirSubNum SubAptPctRes SubAptNSubIm SubAptSquint

set f [open $ConfigFile w]
puts $f "Nrow"
puts $f $FinalNlig
puts $f "---------"
puts $f "Ncol"
puts $f $FinalNcol
puts $f "---------"
puts $f "PolarCase"
puts $f $PolarCase
puts $f "---------"
puts $f "PolarType"
puts $f $PolarType
puts $f "---------"
puts $f "Sub Aperture Number"
puts $f $SubAptOutputDirSubNum
puts $f "---------"
puts $f "Total Sub Aperture Number"
puts $f $SubAptNSubIm
puts $f "---------"
puts $f "ResolutionFraction(pct)"
puts $f $SubAptPctRes
puts $f "---------"
puts $f "FrequencyOffset(pct)"
puts $f $SubAptSquint
close $f

set MapInfoConfigDir [file dirname $ConfigFile]
MapInfoWriteConfig $MapInfoConfigDir
}
#############################################################################
## Procedure:  LoadConfigSubApt

proc ::LoadConfigSubApt {} {
global ConfigFile NligFullSize NcolFullSize PolarCase PolarType
global SubAptSubNum SubAptPctRes SubAptNSubIm SubAptSquint
global MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global ErrorMessage VarError FatalErrorMessage VarFatalError

set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""

if [file exists $ConfigFile] {
    set f [open $ConfigFile r]
    gets $f tmp
    gets $f NligFullSize
    gets $f tmp
    gets $f tmp
    gets $f NcolFullSize
    gets $f tmp
    gets $f tmp
    gets $f PolarCase
    gets $f tmp
    gets $f tmp
    gets $f PolarType
    gets $f tmp
    if {![eof $f]} {
        gets $f tmp
        gets $f SubAptSubNum
        gets $f tmp
        gets $f tmp
        gets $f SubAptNSubIm
        gets $f tmp
        gets $f tmp
        gets $f SubAptPctRes
        gets $f tmp
        gets $f tmp
        gets $f SubAptSquint
        close $f
        set config "false"
        if {$PolarCase == "monostatic"} {set config "true"}
        if {$PolarCase == "bistatic"} {set config "true"}
        if {$PolarCase == "intensities"} {set config "true"}
        if {$config == "false"} {
            set VarFatalError ""
            set FatalErrorMessage "WRONG POLAR-CASE ARGUMENT IN CONFIG.TXT"
            .top236.fra34.cpd68 configure -state disable
            Window show .top236
            tkwait variable VarFatalError
            }
        set config "false"
        if {$PolarType == "full"} {set config "true"}
        if {$PolarType == "pp1"} {set config "true"}
        if {$PolarType == "pp2"} {set config "true"}
        if {$PolarType == "pp3"} {set config "true"}
        if {$PolarType == "pp4"} {set config "true"}
        if {$PolarType == "pp5"} {set config "true"}
        if {$PolarType == "pp6"} {set config "true"}
        if {$PolarType == "pp7"} {set config "true"}
        if {$config == "false"} {
            set VarFatalError ""
            set FatalErrorMessage "WRONG POLAR-TYPE ARGUMENT IN CONFIG.TXT"
            .top236.fra34.cpd68 configure -state disable
            Window show .top236
            tkwait variable VarFatalError
            }
        set NligInit 1
        set NligEnd $NligFullSize
        set NcolInit 1
        set NcolEnd $NcolFullSize
        set ErrorMessage ""
        } else {
        set ErrorMessage "INPUT DATA MUST BE SUB-APERTURE DATA TYPE"
        set NligInit 0
        set NligEnd 0
        set NcolInit 0
        set NcolEnd 0
        }
      
    set MapInfoConfigFile [file rootname $ConfigFile]
    append MapInfoConfigFile "_mapinfo.txt" 
    if [file exists $MapInfoConfigFile] { MapInfoReadConfig $MapInfoConfigFile }

    } else {
    set ErrorMessage "NO CONFIG FILE !"
    set NligInit 0
    set NligEnd 0
    set NcolInit 0
    set NcolEnd 0
    }
}
#############################################################################
## Procedure:  TestVar

proc ::TestVar {Nvar} {
global TestVarName TestVarType TestVarValue TestVarMin TestVarMax TestVarError
global SetUpErrorMessage SetUpErrorMessage2 VarSetUpError

set TestVarError "ok"
set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
set VarSetUpError ""

for {set ii 0} {$ii < $Nvar} {incr ii} {
    set len [string length $TestVarValue($ii)]
    if {$len == "0"} {
        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
        set SetUpErrorMessage2 "Set Up Error : Empty Value"
        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarSetUpError
        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
        set TestVarError ""
        } else {
        set testresult "int"; set testold $testresult
        for {set i 0} {$i < $len} { incr i} {
            set test [string index $TestVarValue($ii) $i]
            set config "ok"
            if {$test == "-"} { set config "" }
            if {$test == "+"} { set config "" }
            if {[string is space $test]} { set config "" }
            if {$config == "ok" } {
                if {[string is integer $test]} {
                        if {$testresult == "int"} {
                            set testresult "int"; set testold $testresult
                            }
                        if {$testresult == "float"} {
                            set testresult "float"; set testold $testresult
                            }
                    } else {
                    if {[string is punct $test]} {
                        if {$testresult == "int"} {
                            set testresult "float"; set testold $testresult
                            }
                        if {$testresult == "char"} {
                            set testresult "char"; set testold $testresult
                            }
                        } else {
                        set testresult "char"; set testold $testresult
                        }
                    }
                }                    
            }

        if {$testresult == "int"} { if {$TestVarType($ii) == "float"} { set testresult "float" } }
            
        if {$testresult == "int"} {
            if {$TestVarType($ii) != "int"} {
                set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                set SetUpErrorMessage2 "Set Up Error : Not An Integer Type"
                Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarSetUpError
                set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                set TestVarError ""
                } else {
                if {$TestVarMin($ii) != ""} {
                    if {$TestVarValue($ii) < $TestVarMin($ii)} {
                        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                        set SetUpErrorMessage2 "Set Up Error : Out of Range Value < Val Min = $TestVarMin($ii)"
                        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                        tkwait variable VarSetUpError
                        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                        set TestVarError ""
                        }
                    }
                if {$TestVarMax($ii) != ""} {
                    if {$TestVarValue($ii) > $TestVarMax($ii)} {
                        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                        set SetUpErrorMessage2 "Set Up Error : Out of Range Value > Val Max = $TestVarMax($ii)"
                        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                        tkwait variable VarSetUpError
                        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                        set TestVarError ""
                        }
                    }
                }
            }
        if {$testresult == "float"} {
            if {$TestVarType($ii) != "float"} {
                set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                set SetUpErrorMessage2 "Set Up Error : Not A Float Type"
                Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarSetUpError
                set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                set TestVarError ""
                } else {
                if {$TestVarMin($ii) != ""} {
                    if {$TestVarValue($ii) < $TestVarMin($ii)} {
                        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                        set SetUpErrorMessage2 "Set Up Error : Out of Range Value < Val Min = $TestVarMin($ii)"
                        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                        tkwait variable VarSetUpError
                        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                        set TestVarError ""
                        }
                    }
                if {$TestVarMax($ii) != ""} {
                    if {$TestVarValue($ii) > $TestVarMax($ii)} {
                        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                        set SetUpErrorMessage2 "Set Up Error : Out of Range Value > Val Max = $TestVarMax($ii)"
                        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                        tkwait variable VarSetUpError
                        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                        set TestVarError ""
                        }
                    }
                }
            }
        if {$testresult == "char"} {
            set config ""
            if {$TestVarType($ii) == "ascii"} {set config "ok"}
            if {$TestVarType($ii) == "file"} {set config "ok"}
            if {$TestVarType($ii) == "path"} {set config "ok"}
            if {$config != "ok"} {
                set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                set SetUpErrorMessage2 "Set Up Error : Not A String Type"
                Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarSetUpError
                set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                set TestVarError ""
                } else {
                if {$TestVarType($ii) == "file"} {
                    if [file exists $TestVarValue($ii)] {
                        } else {
                        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                        set SetUpErrorMessage2 "Set Up Error : File does not exist"
                        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                        tkwait variable VarSetUpError
                        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                        set TestVarError ""
                        }
                    }
                if {$TestVarType($ii) == "path"} {
                    if [file isdirectory $TestVarValue($ii)] {
                        } else {
                        set SetUpErrorMessage "Input Parameter : $TestVarName($ii)"
                        set SetUpErrorMessage2 "Set Up Error : Not a Directory Path"
                        Window show .top255; TextEditorRunTrace "Open Window Error" "b"
                        tkwait variable VarSetUpError
                        set SetUpErrorMessage ""; set SetUpErrorMessage2 ""
                        set TestVarError ""
                        }
                    }
                }
            }
        }
    }    
            
}
#############################################################################
## Procedure:  ReadXML

proc ::ReadXML {FileIn FileOut FileTmp Sensor} {
if {![file readable $FileIn]} {return}
set res ""
set fin [open $FileIn r]
set ctrl [gets $fin]
if {[lindex $ctrl 0] eq "<?xml" && [lindex $ctrl end] eq "?>"} {
    foreach paire [split [string range $ctrl 6 end-3] " "] {
        foreach "id val" [split $paire "="] { set $id [string tolower [lindex $val 0]] }
        }
    #if {$version ne "1.0" || $standalone ne "yes" || ![info exists encoding]} { return }
    if {$version ne "1.0" || ![info exists encoding]} { return }
    }

set fout [open $FileOut w]
set ftmp [open $FileTmp w]

if {$Sensor == "FSAR"} {
    set configband ""
    set configcampaign ""
    set configflight ""
    set configpass ""
    set configpolar ""
    set confignpixrg ""
    set confignpixaz ""
    }

if {$Sensor == "terrasar"} { 
    set config_productComponents "false"
    set config_productInfo "false"
    set config_calFactor "false"
    set polLayerInd 0
    set configimgql ""
    for {set i 0} {$i <= 4} {incr i} { set polLayerImg($i) ""; set polLayerQl($i) ""; set polLayerCal($i) "" }
    for {set i 0} {$i <= 4} {incr i} { set FileImg($i) ""; set FileQl($i) ""; set calFactor($i) "" }
    }

if {$Sensor == "tandemx"} { 
    set config_productComponents "false"
    set config_commonAcquisitionInfo "false"
    set config_processingInfo "false"
    set polLayerInd 0
    set configpol ""; set configname ""; set configimg ""
    set DirPrimary ""; set DirSecondary ""
    set IdPrimary ""; set IdSecondary ""
    set XmlPrimary ""; set XmlSecondary ""
    set inSARmasterID ""; set satelliteIDsat1 ""; set satelliteIDsat2 "" 
    for {set i 0} {$i <= 2} {incr i} { set polLayerImg($i) "" }
    }

gets $fin xml

puts $fout "**********************************************************************"
puts $fout "*                                                                    *"
if {$Sensor == "alosvex"} {   puts $fout "*                      ALOS Product File:                            *" }
if {$Sensor == "radarsat"} {  puts $fout "*                      RADARSAT-2 Product File:                      *" }
if {$Sensor == "sentinel1"} { puts $fout "*                      SENTINEL-1 Product File:                      *" }
if {$Sensor == "terrasar"} {  puts $fout "*                      TerraSAR-X Product File:                      *" }
if {$Sensor == "tandemx"} {   puts $fout "*                      TANDEM-X Product File:                        *" }
if {$Sensor == "FSAR"} {      puts $fout "*                      FSAR Product File:                            *" }
puts $fout "*                                                                    *"
puts $fout "**********************************************************************"
puts $fout ""

set nblank 0
set blanktxt ""
while { ![eof $fin] } {
    gets $fin xml
    regsub -all {>\s*<} [string trim $xml " \n\t<>"] "\} \{" xml
    set xml [string map { > "\} \{\x0E " < "\} \{" } $xml]
    set val_tag ""; set val_para ""; set tagtmp {}
    set debutxml "false"; set finxml "false"
    foreach item "{$xml}" {
        switch -regexp -- $item {
            ^\x0F { continue }
            ^!DOCTYPE { continue }
            ^!-- { continue }
            ^\x0E { set val_para [string range $item 2 end] }
            ^/ { set finxml "true" }
            default {
                set debutxml "true"
                set tagname [lindex [string map {{ "} \" {" } \"} $item] 0]
                set tagtmp [string map {"\"" ","} $item]
                set tagtmp [lrange $tagtmp 1 end]
                set tagtmp [string map {"=," ": "} $tagtmp]
                if {$tagtmp == ""} {
                    set val_tag $tagname
                    } else {
                    set val_tag "$tagname ($tagtmp)"
                    set val_tag [string map {",)" ")"} $val_tag]
                    }
                }
            }
        }
    set tag_para "true"; set changeblank "false"; set tag_name "true"
    if {$debutxml == "true" && $finxml == "false"} { set tag_para "false"; set tag_name "begin"; set changeblank "true"; set nblank [expr $nblank + 1] }
    if {$debutxml == "false" && $finxml == "true"} { set tag_para "false"; set tag_name "false"; set changeblank "true"; set nblank [expr $nblank - 1] }
    set val_tagout $blanktxt; append val_tagout $val_tag
    if {$tag_name != "false"} { 
        if {$tag_name == "begin"} {
            set config "false"                
            if {$Sensor == "FSAR"} {
                if {$val_tag == "parameter (name: band)"} { set configband "true" }
                if {$val_tag == "parameter (name: campaign)"} { set configcampaign "true" }
                if {$val_tag == "parameter (name: flight)"} { set configflight "true" }
                if {$val_tag == "parameter (name: pass)"} { set configpass "true" }
                if {$val_tag == "parameter (name: polarisation)"} { set configpolar "true" }
                if {$val_tag == "parameter (name: nrx)"} { set confignpixrg "true" }
                if {$val_tag == "parameter (name: nry)"} { set confignpixaz "true" }
                }
            if {$Sensor == "radarsat"} {
                if {$val_tag == "sourceAttributes"} { set config "true" }
                if {$val_tag == "imageGenerationParameters"} { set config "true" }
                if {$val_tag == "imageAttributes"} { set config "true" }
                }
            if {$Sensor == "sentinel"} {
                if {$val_tag == "qualityInformation"} { set config "true" }
                if {$val_tag == "generalAnnotation"} { set config "true" }
                if {$val_tag == "imageAnnotation"} { set config "true" }
                if {$val_tag == "dopplerCentroid"} { set config "true" }
                if {$val_tag == "antennaPattern"} { set config "true" }
                if {$val_tag == "swathTiming"} { set config "true" }
                if {$val_tag == "geolocationGrid"} { set config "true" }
                }
            if {$Sensor == "terrasar"} {
                if {$val_tag == "productComponents"} { set config "true"; set config_productComponents "true"}
                if {$config_productComponents == "true"} {
                    if {$val_tag == "imageData (layerIndex: 1)"} { set polLayerInd 1; set configimgql "img" }
                    if {$val_tag == "imageData (layerIndex: 2)"} { set polLayerInd 2; set configimgql "img" }
                    if {$val_tag == "imageData (layerIndex: 3)"} { set polLayerInd 3; set configimgql "img" }
                    if {$val_tag == "imageData (layerIndex: 4)"} { set polLayerInd 4; set configimgql "img" }
                    if {$val_tag == "quicklooks (layerIndex: 1)"} { set polLayerInd 1; set configimgql "ql" }
                    if {$val_tag == "quicklooks (layerIndex: 2)"} { set polLayerInd 2; set configimgql "ql" }
                    if {$val_tag == "quicklooks (layerIndex: 3)"} { set polLayerInd 3; set configimgql "ql" }
                    if {$val_tag == "quicklooks (layerIndex: 4)"} { set polLayerInd 4; set configimgql "ql" }
                    }
                if {$val_tag == "productInfo"} { set config "true"; set config_productInfo "true"; set config_productComponents "false" }
                if {$val_tag == "productSpecific"} { set config "true" }
                if {$val_tag == "setup"} { set config "true" }
                if {$val_tag == "processing"} { set config "true" }
                if {$val_tag == "instrument"} { set config "true" }
                if {$val_tag == "calibration"} { set config "true"; set config_calFactor "true"; set config_productInfo "false" }
                if {$config_calFactor == "true"} {
                    if {$val_tag == "calibrationConstant (layerIndex: 1)"} { set polLayerInd 1 }
                    if {$val_tag == "calibrationConstant (layerIndex: 2)"} { set polLayerInd 2 }
                    if {$val_tag == "calibrationConstant (layerIndex: 3)"} { set polLayerInd 3 }
                    if {$val_tag == "calibrationConstant (layerIndex: 4)"} { set polLayerInd 4 }
                    }
                if {$val_tag == "noise (layerIndex: 1)"} { set config "true" }
                if {$val_tag == "noise (layerIndex: 2)"} { set config "true" }
                if {$val_tag == "noise (layerIndex: 3)"} { set config "true" }
                if {$val_tag == "noise (layerIndex: 4)"} { set config "true" }
                if {$val_tag == "platform"} { set config "true" }
                if {$val_tag == "productQuality"} { set config "true" }
                }
            if {$Sensor == "tandemx"} {
                if {$val_tag == "productComponents"} { set config "true"; set config_productComponents "true"}
                if {$val_tag == "productInfo"} { set config "true" }
                if {$val_tag == "commonAcquisitionInfo"} { set config "true"; set config_commonAcquisitionInfo "true"; set config_productComponents "false"}
                if {$config_commonAcquisitionInfo == "true"} {
                    if {$val_tag == "polarizationList"} { set configpol "ok" }
                    }
                if {$val_tag == "commonSceneInfo"} { set config "true" }
                if {$val_tag == "baselineInfo"} { set config "true" }
                if {$val_tag == "processingInfo"} { set config "true"; set config_processingInfo "true"; set config_commonAcquisitionInfo "false"}
                if {$config_processingInfo == "true"} {
                    if {$val_tag == "coregRaster"} { set configimg "ok" }
                    }
                if {$val_tag == "productQuality"} { set config "true" }
                }
            if {$config == "true"} { puts $fout ""; puts $fout "**********************************************************************" }
            puts $fout $val_tagout
            } else {
            set pointtxt ""; set lenghtpoint [ expr 69 - [string length $val_tagout]]
            for {set i 0} {$i < $lenghtpoint} {incr i} { append pointtxt "." }
            append val_tagout $pointtxt; append val_tagout ": "
            if {$tag_para == "true"} { append val_tagout $val_para }
            puts $fout $val_tagout
            if {$Sensor == "FSAR"} {
                if {$configband == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set configband "" }
                    }
                if {$configcampaign == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set configcampaign "" }
                    }
                if {$configflight == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set configflight "" }
                    }
                if {$configpass == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set configpass "" }
                    }
                if {$configpolar == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set configpolar "" }
                    }
                if {$confignpixrg == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set confignpixrg "" }
                    }
                if {$confignpixaz == "true" } {
                    if {$val_tag == "value"} { puts $ftmp $val_para; set confignpixaz "" }
                    }
                }
            if {$Sensor == "alosvex"} {
                if {$val_tag == "polarity"} { puts $ftmp $val_para }
                if {$val_tag == "product_data"} { puts $ftmp $val_para }
                if {$val_tag == "pixel"} { puts $ftmp $val_para }
                if {$val_tag == "line"} { puts $ftmp $val_para }
                }
            if {$Sensor == "radarsat"} {
                if {$val_tag == "polarizations"} { puts $ftmp $val_para }
                if {$val_tag == "dataType"} { puts $ftmp $val_para }
                }
            if {$Sensor == "sentinel1"} {
                if {$val_tag == "numberOfLines"} { puts $ftmp $val_para }
                if {$val_tag == "linesPerBurst"} { puts $ftmp $val_para }
                }
            if {$Sensor == "terrasar"} {
                if {$config_productComponents == "true"} {
                    if {$configimgql == "img"} {
                        if {$val_tag == "polLayer"} { set polLayerImg($polLayerInd) $val_para }
                        if {$val_tag == "filename"} { set FileImg($polLayerInd) $val_para; set configimgql ""}
                        }
                    if {$configimgql == "ql"} {
                        if {$val_tag == "polLayer"} { set polLayerQl($polLayerInd) $val_para }
                        if {$val_tag == "filename"} { set FileQl($polLayerInd) $val_para; set configimgql "" }
                        }
                    }
                if {$config_productInfo == "true"} {
                    if {$val_tag == "polarisationMode"} { set polarisationMode $val_para }         
                    if {$val_tag == "productVariant"} { set productVariant $val_para }         
                    if {$val_tag == "imageDataFormat"} { set imageDataFormat $val_para }         
                    if {$val_tag == "numberOfRows"} { set numberOfRows $val_para }
                    if {$val_tag == "numberOfColumns"} { set numberOfColumns $val_para; set config_productInfo "false" }
                    }
                if {$config_calFactor == "true"} {
                    if {$val_tag == "polLayer"} { set polLayerCal($polLayerInd) $val_para }
                    if {$val_tag == "calFactor"} { set calFactor($polLayerInd) $val_para }
                    }         
                }
            if {$Sensor == "tandemx"} {
                if {$config_productComponents == "true"} {
                    if {$configname == "dirprimary"} {
                        if {$val_tag == "name"} { set DirPrimary $val_para}
                        if {$val_tag == "satIDs"} { set IdPrimary $val_para; set configname ""}
                        }
                    if {$configname == "dirsecondary"} {
                        if {$val_tag == "name"} { set DirSecondary $val_para}
                        if {$val_tag == "satIDs"} { set IdSecondary $val_para; set configname ""}
                        }
                    if {$configname == "xmlprimary"} {
                        if {$val_tag == "name"} { set XmlPrimary $val_para; set configname ""}
                        }
                    if {$configname == "xmlsecondary"} {
                        if {$val_tag == "name"} { set XmlSecondary $val_para; set configname ""}
                        }
                    if {$val_para == "cossc_component_primary"} { set configname "dirprimary" }
                    if {$val_para == "cossc_component_secondary"} { set configname "dirsecondary" }
                    if {$val_para == "cossc_annotation_primary"} { set configname "xmlprimary" }
                    if {$val_para == "cossc_annotation_secondary"} { set configname "xmlsecondary" }
                    }
                if {$config_commonAcquisitionInfo == "true"} {
                    if {$val_tag == "satelliteIDsat1"} { set satelliteIDsat1 $val_para}
                    if {$val_tag == "satelliteIDsat2"} { set satelliteIDsat2 $val_para}
                    if {$val_tag == "inSARmasterID"} { set inSARmasterID $val_para}
                    if {$configpol == "ok"} {
                        if {$val_tag == "polLayer"} { 
                            set polLayerInd [expr $polLayerInd + 1]
                            if {$polLayerInd < 3} { set polLayerImg($polLayerInd) $val_para }
                            }
                        }
                    }
                if {$config_processingInfo == "true"} {
                    if {$configimg == "ok"} {
                        if {$val_tag == "samples"} { set numberOfColumns $val_para }
                        if {$val_tag == "lines"} { set numberOfRows $val_para; set configimg "" }
                        }
                    }
                }
            }
        }
    if {$changeblank == "true" } {
        set blanktxt ""
        if {$Sensor != "FSAR"} { for {set i 0} {$i < $nblank} {incr i} { append blanktxt "    " } }
        }
    }
close $fin
close $fout

if {$Sensor == "terrasar"} { 
    if {$polarisationMode == "DUAL"} { set polarisationMode "dual" }
    if {$polarisationMode == "QUAD"} { set polarisationMode "quad" }
    puts $ftmp $polarisationMode
    puts $ftmp $productVariant
    puts $ftmp $numberOfRows
    puts $ftmp $numberOfColumns

    set fichpathimg "IMAGEDATA/"
    set fichpathql "PREVIEW/"

    if {$polarisationMode == "dual" } {
        #TerraSar Polar Definition = TxRx so dual pol = (HH,HV) (VH,VV) or (HH,VV)
        set TSXPol $polLayerImg(1); append TSXPol " "; append TSXPol $polLayerImg(2); set PolType ""
        if {$TSXPol == "HH HV" } { set PolType "pp1" }
        if {$TSXPol == "HV HH" } { set PolType "pp1" }
        if {$TSXPol == "VH VV" } { set PolType "pp2" }
        if {$TSXPol == "VV VH" } { set PolType "pp2" }
        if {$TSXPol == "HH VV" } { set PolType "pp3" }
        if {$TSXPol == "VV HH" } { set PolType "pp3" }
        if {$TSXPol == "HV VH" } { set PolType "pp0" }
        if {$TSXPol == "VH HV" } { set PolType "pp0" }
        puts $ftmp $PolType
        if {$PolType == "pp1" } {
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "HH" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "HH" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "HH" } { puts $ftmp $calFactor($i) } }
            
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "HV" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "HV" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "HV" } { puts $ftmp $calFactor($i) } }
            }
        if {$PolType == "pp2" } {
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "VV" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "VV" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "VV" } { puts $ftmp $calFactor($i) } }
            
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "VH" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "VH" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "VH" } { puts $ftmp $calFactor($i) } }
            }
        if {$PolType == "pp3" } {
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "HH" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "HH" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "HH" } { puts $ftmp $calFactor($i) } }
            
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "VV" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "VV" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "VV" } { puts $ftmp $calFactor($i) } }
            }
        if {$PolType == "pp0" } {
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "HV" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "HV" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "HV" } { puts $ftmp $calFactor($i) } }
            
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "VH" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "VH" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
            for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "VH" } { puts $ftmp $calFactor($i) } }
            }
        }

    if {$polarisationMode == "quad" } {
        puts $ftmp "full"

        for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "HH" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "HH" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "HH" } { puts $ftmp $calFactor($i) } }

        for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "HV" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "HV" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "HV" } { puts $ftmp $calFactor($i) } }

        for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "VH" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "VH" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "VH" } { puts $ftmp $calFactor($i) } }

        for {set i 1} {$i <= 4} {incr i} { if {$polLayerImg($i) == "VV" } { set datafile $fichpathimg; append datafile $FileImg($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerQl($i) == "VV" } { set datafile $fichpathql; append datafile $FileQl($i); puts $ftmp $datafile } }
        for {set i 1} {$i <= 4} {incr i} { if {$polLayerCal($i) == "VV" } { puts $ftmp $calFactor($i) } }
        }
    }

if {$Sensor == "tandemx"} { 
    if {$inSARmasterID == "SAT1"} {
        if {$IdPrimary == $satelliteIDsat1 } {
            puts $ftmp $DirPrimary
            puts $ftmp $DirSecondary
            puts $ftmp $XmlPrimary
            puts $ftmp $XmlSecondary
            }
        if {$IdSecondary == $satelliteIDsat1 } {
            puts $ftmp $DirSecondary
            puts $ftmp $DirPrimary
            puts $ftmp $XmlSecondary
            puts $ftmp $XmlPrimary
            }
        }
    if {$inSARmasterID == "SAT2"} {
        if {$IdPrimary == $satelliteIDsat2 } {
            puts $ftmp $DirPrimary
            puts $ftmp $DirSecondary
            puts $ftmp $XmlPrimary
            puts $ftmp $XmlSecondary
            }
        if {$IdSecondary == $satelliteIDsat2 } {
            puts $ftmp $DirSecondary
            puts $ftmp $DirPrimary
            puts $ftmp $XmlSecondary
            puts $ftmp $XmlPrimary
            }
        }
    puts $ftmp $numberOfRows
    puts $ftmp $numberOfColumns

    #TerraSar Polar Definition = TxRx so dual pol = (HH,HV) (VH,VV) or (HH,VV)
    set TSXPol $polLayerImg(1); append TSXPol " "; append TSXPol $polLayerImg(2); set PolType ""
    if {$TSXPol == "HH HV" } { set PolType "pp1" }
    if {$TSXPol == "HV HH" } { set PolType "pp1" }
    if {$TSXPol == "VH VV" } { set PolType "pp2" }
    if {$TSXPol == "VV VH" } { set PolType "pp2" }
    if {$TSXPol == "HH VV" } { set PolType "pp3" }
    if {$TSXPol == "VV HH" } { set PolType "pp3" }
    if {$TSXPol == "HV VH" } { set PolType "pp0" }
    if {$TSXPol == "VH HV" } { set PolType "pp0" }
    puts $ftmp $PolType
    }

close $ftmp
}
#############################################################################
## Procedure:  load_bmp_lens

proc ::load_bmp_lens {w wc} {
global SourceWidth SourceHeight SizeRect SizeLens Lens
global BMPImage BMPImageLens BMPLens ImageSource BMPViewFileInput
global RectLensCenter RectLensCenterX RectLensCenterY RectLens  LensX1 LensY1 plot
global LineXLensInit LineYLensInit LineXLens LineYLens plot2 line_color
global BMPSampleLens BMPWidthSource BMPHeightSource BMPSampleSource BMPLensDeltaX BMPLensDeltaY
global ZoomBMP ZoomBMPSource ZoomLensBMP
global MouseActiveButton MouseRectLens

    set MouseRectLens "Outside"
    set Lens "1"
    set BMPSampleLens "1"
    set ZoomLensBMP "1:1"

    set BMPLensDeltaX "0"
    set BMPLensDeltaY "0"
        
    set SizeRect 200
    set SizeLens 200
    
    #show lens
    package require Img
    set LensX1 [expr round(($SourceWidth - $SizeLens) / 2 )]
    if {$LensX1 < 0} { set LensX1 0}
    set LensY1 [expr round(($SourceHeight - $SizeLens) / 2 )]
    if {$LensY1 < 0} { set LensY1 0}
    set LensX2 [expr $LensX1 + $SizeLens]
    if {$LensX2 > $SourceWidth} { set LensX2 $SourceWidth}
    set LensY2 [expr $LensY1 + $SizeLens]
    if {$LensY2 > $SourceHeight} { set LensY2 $SourceHeight}
    BMPLens blank
    BMPLens copy ImageSource -from $LensX1 $LensY1 $LensX2 $LensY2 -subsample $BMPSampleLens $BMPSampleLens
    $wc configure -width $SizeLens -height $SizeLens
    $wc create image 0 0 -anchor nw -image BMPLens
    #catch {wm geometry $w {}}

    #show image_lens
    set ZoomBMP $ZoomBMPSource 
    BMPImageLens blank
    BMPImageLens copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSampleSource $BMPSampleSource
    # .top73 = $widget(VIEWBMPLENS)
    # .top73.can81 = $widget(CANVASBMPLENS)
    .top73.can81 configure -width $BMPWidthSource -height $BMPHeightSource
    .top73.can81 create image 0 0 -anchor nw -image BMPImageLens
    catch {wm geometry .top73 {}} 
    wm title .top73 [file tail $BMPViewFileInput]
    Window show .top73; TextEditorRunTrace "Open Window View BMP Lens" "b"

    #show rect_zoom
    set RectLensCenterX [expr round($BMPWidthSource/2)]
    set RectLensCenterY [expr round($BMPHeightSource/2)]
    set RectLensCenter {$RectLensCenterX $RectLensCenterY}
   
    set RectLensX1 [expr [lindex $RectLensCenter 0] - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensY1 [expr [lindex $RectLensCenter 1] - round($SizeRect / 2 / $BMPSampleSource)]
    set RectLensX2 [expr $RectLensX1 + round($SizeRect / $BMPSampleSource)]
    set RectLensY2 [expr $RectLensY1 + round($SizeRect / $BMPSampleSource)]
    set RectLens [.top73.can81 create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
    .top73.can81 addtag RectLensCenter withtag $RectLens
    bind .top73.can81 <B1-Motion> "RectLensMove .top73.can81 %x %y $wc"
    set plot(lastX) 0
    set plot(lastY) 0
    
}
#############################################################################
## Procedure:  load_bmp_file_line_2

proc ::load_bmp_file_line_2 {bmpfile wc} {
global SizeLens SourceWidth_2 SourceHeight_2 ZoomBMP_2 
global BMPMax_2 BMPMin_2 BMPValue_2 BMPImageOpen_2
global ImageSource_2 BMPImage_2 BMPWidth_2 BMPHeight_2
global BMPWidthSource_2 BMPHeightSource_2 BMPSampleSource_2 ZoomBMPSource_2
global ColorNumber_2 ColorNumberUtil_2 ColorNumberUtilDisplay_2 RedPalette_2 GreenPalette_2 BluePalette_2
global TMPBmpTmpHeader_2 TMPBmpTmpData_2 TMPBmp24TmpData_2 TMPBmpTmpColormap_2 TMPBmpColorBar_2 TMPColorMapBMP_2
global LineXLensInit LineYLensInit LineXLens LineYLens plot2 line_color

set SourceWidth_2 ""; set SourceHeight_2 ""
set BMPMouseX_2 ""; set BMPMouseY_2 ""
set BMPMax_2 ""; set BMPMin_2 ""
set BMPValue_2 ""
set BMPImageOpen_2 "1"

#read colormap
DeleteFile $TMPColorMapBMP_2
DeleteFile $TMPBmpColorBar_2

TextEditorRunTrace "Process The Function Soft/bmp_process/extract_bmp_colormap.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$bmpfile\x22 -ofh \x22$TMPBmpTmpHeader\x22 -ofd \x22$TMPBmpTmpData\x22 -ofd24 \x22$TMPBmp24TmpData\x22 -ofcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22 -ocf \x22$TMPColorMapBMP\x22" "k"
set f [ open "| Soft/bmp_process/extract_bmp_colormap.exe -if \x22$bmpfile\x22 -ofh \x22$TMPBmpTmpHeader\x22 -ofd \x22$TMPBmpTmpData\x22 -ofd24 \x22$TMPBmp24TmpData\x22 -ofcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22 -ocf \x22$TMPColorMapBMP\x22" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError

for {set i 0} {$i <= 256} {incr i} {
    set RedPalette_2($i) 1
    set GreenPalette_2($i) 1
    set BluePalette_2($i) 1
    }

WaitUntilCreated $TMPBmpTmpHeader_2
if [file exists $TMPBmpTmpHeader_2] {
    set f [open $TMPBmpTmpHeader_2 r]
    gets $f tmp
    gets $f tmp
    gets $f tmp
    set BMPMax_2 [format %5.2f $tmp]
    gets $f tmp
    set BMPMin_2 [format %5.2f $tmp]
    gets $f ColorNumber_2
    close $f
    
    if {$ColorNumber_2 != "BMP 24 Bits"} {
        set ColorNumberUtil_2 $ColorNumber_2
        set ColorNumberUtilDisplay_2 256
        if {$ColorNumberUtil_2 <= 32 } {set ColorNumberUtilDisplay_2 32}
        if {$ColorNumberUtil_2 <= 16 } {set ColorNumberUtilDisplay_2 16}
        if {$ColorNumberUtil_2 <=  8 } {set ColorNumberUtilDisplay_2  8}
        WaitUntilCreated $TMPColorMapBMP_2
        set f [open $TMPColorMapBMP_2 r]
        gets $f tmp
        gets $f tmp
        gets $f ColorNumber_2
        for {set i 1} {$i <= $ColorNumber_2} {incr i} {
            gets $f couleur
            set RedPalette_2($i) [lindex $couleur 0]
            set GreenPalette_2($i) [lindex $couleur 1]
            set BluePalette_2($i) [lindex $couleur 2]
            }
        close $f
        }
    }

image create photo ImageSource_2 -file $bmpfile
set SourceWidth_2 [image width ImageSource_2]
set SourceHeight_2 [image height ImageSource_2]

image create photo BMPImage_2; BMPImage_2 blank

#show image
set ZoomBMP_2 "0:0"
set SizeLens 200
set BMPWidth_2 $SizeLens
set BMPHeight_2 $SizeLens

if {$SourceWidth_2 == $SizeLens} {
    set BMPSample_2 1
    set ZoomBMP_2 "1:1"
    BMPImage_2 copy ImageSource_2 -from 0 0 $SourceWidth_2 $SourceHeight_2 -subsample $BMPSample_2 $BMPSample_2
    }

if {$SourceWidth_2 > $SizeLens} {
    set BMPSample_2 [expr round($SourceWidth_2 / $SizeLens)]
    set ZoomBMP_2 "1:$BMPSample_2"
    BMPImage_2 copy ImageSource_2 -from 0 0 $SourceWidth_2 $SourceHeight_2 -subsample $BMPSample_2 $BMPSample_2
    }

if {$SourceWidth_2 < $SizeLens} {
    set BMPSample_2 [expr round($SizeLens / $SourceWidth_2)]
    set ZoomBMP_2 "$BMPSample_2:1"
    BMPImage_2 copy ImageSource_2 -from 0 0 $SourceWidth_2 $SourceHeight_2 -zoom $BMPSample_2 $BMPSample_2
    }

$wc configure -width $SizeLens -height $SizeLens
$wc create image 0 0 -anchor nw -image BMPImage_2

set BMPSampleSource_2 $BMPSample_2
set BMPWidthSource_2 $BMPWidth_2
set BMPHeightSource_2 $BMPHeight_2
set ZoomBMPSource_2 $ZoomBMP_2

#show line_lens
set LineXLensInit {0 0}
set LineYLensInit {0 0}
set LineXLens [$wc create line 0 0 0 $SizeLens -fill $line_color -width 2]
set LineYLens [$wc create line 0 0 $SizeLens 0 -fill $line_color -width 2]
$wc addtag LineXLensInit withtag $LineXLens
$wc addtag LineYLensInit withtag $LineYLens
bind $wc <Motion> "MouseMotionLine_2 %x %y"
set plot2(lastX) 0
set plot2(lastY) 0
}
#############################################################################
## Procedure:  MouseMotionLine_2

proc ::MouseMotionLine_2 {nx ny} {
global ZoomBMP_2 SourceWidth_2 SourceHeight_2
global BMPMouseX BMPMouseY
global MouseActiveButton
global ColorNumber_2 SizeLens
global LineXLensInit LineYLensInit plot2

set config "false"
if {$MouseActiveButton == "LensPOLINSAR"} {set config "true"}

if {$config == "true"} {
set Num1 ""
set Num2 ""
set Num1 [string index $ZoomBMP_2 0]
set Num2 [string index $ZoomBMP_2 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP_2 2]
    set Den2 [string index $ZoomBMP_2 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP_2 3]
    set Den2 [string index $ZoomBMP_2 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set BMPMouseX [expr round($nx*$BMPSample)]
    set BMPMouseY [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set BMPMouseX [expr round($nx/$BMPZoom)]
    set BMPMouseY [expr round($ny/$BMPZoom)]
    }

if {$BMPMouseX < 0} {set BMPMouseX 0}
if {$BMPMouseX > [expr abs($SourceWidth_2 -1)]} {set BMPMouseX [expr abs($SourceWidth_2 -1)]}
if {$BMPMouseY < 0} {set BMPMouseY 0}
if {$BMPMouseY > [expr abs($SourceHeight_2 -1)]} {set BMPMouseY [expr abs($SourceHeight_2 -1)]}

if {"$ColorNumber_2" != "BMP 24 Bits"} { MouseBMPValue_2 }

if {$MouseActiveButton == "LensPOLINSAR"} {
    .top330.fra71.cpd74.cpd81.cpd82 move LineXLensInit [expr $nx-$plot2(lastX)] 0
    .top330.fra71.cpd74.cpd81.cpd82 move LineYLensInit 0 [expr $ny-$plot2(lastY)]
    set LineXLensInit {$nx 0}
    set LineYLensInit {0 $ny}
    set plot2(lastX) $nx
    set plot2(lastY) $ny
    }
}
}
#############################################################################
## Procedure:  MouseBMPValue_2

proc ::MouseBMPValue_2 {} {
global ColorNumber_2 ColorNumberUtil_2
global ImageSource_2 BMPMouseX BMPMouseY
global RedPalette_2 GreenPalette_2 BluePalette_2
global BMPMax_2 BMPMin_2 BMPValue_2

if {"$ColorNumber_2" != "BMP 24 Bits"} {
    set IndPal 0
    set pixcolor [ImageSource_2 get $BMPMouseX $BMPMouseY]
    set couleur [format #%02x%02x%02x [lindex $pixcolor 0] [lindex $pixcolor 1] [lindex $pixcolor 2]]
    for {set i 1} {$i <= [expr $ColorNumberUtil_2 + 1]} {incr i} {
            set color [format #%02x%02x%02x $RedPalette_2($i) $GreenPalette_2($i) $BluePalette_2($i)]
            if {$couleur == $color } {set IndPal $i}
            }
    if {$IndPal != 0} {
        set Value [expr $BMPMin_2 + ($IndPal-1)*($BMPMax_2-$BMPMin_2) / ($ColorNumberUtil_2 -1)]
        set BMPValue_2 [format %5.2f $Value]
        } else {
        #set BMPValue_2 ""
        #if {$couleur == "#000000"} {set BMPValue_2 [format %5.2f $BMPMin_2]}
        #if {$couleur == "#FFFFFF"} {set BMPValue_2 [format %5.2f $BMPMax_2]}
        #if {$couleur == "#ffffff"} {set BMPValue_2 [format %5.2f $BMPMax_2]}
        set BMPValue_2 [format %5.2f $BMPMax]
        }
    }
}
#############################################################################
## Procedure:  load_bmp_file_2

proc ::load_bmp_file_2 {bmpfile wc} {
global SizeLens SourceWidth_2 SourceHeight_2 ZoomBMP_2 
global BMPMax_2 BMPMin_2 BMPValue_2 BMPImageOpen_2
global ImageSource_2 BMPImage_2 BMPWidth_2 BMPHeight_2
global BMPWidthSource_2 BMPHeightSource_2 BMPSampleSource_2 ZoomBMPSource_2
global ColorNumber_2 ColorNumberUtil_2 ColorNumberUtilDisplay_2 RedPalette_2 GreenPalette_2 BluePalette_2
global TMPBmpTmpHeader_2 TMPBmpTmpData_2 TMPBmp24TmpData_2 TMPBmpTmpColormap_2 TMPBmpColorBar_2 TMPColorMapBMP_2

set SourceWidth_2 ""; set SourceHeight_2 ""
set BMPMouseX_2 ""; set BMPMouseY_2 ""
set BMPMax_2 ""; set BMPMin_2 ""
set BMPValue_2 ""
set BMPImageOpen_2 "1"

#read colormap
DeleteFile $TMPColorMapBMP_2
DeleteFile $TMPBmpColorBar_2

TextEditorRunTrace "Process The Function Soft/bmp_process/extract_bmp_colormap.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$bmpfile\x22 -ofh \x22$TMPBmpTmpHeader\x22 -ofd \x22$TMPBmpTmpData\x22 -ofd24 \x22$TMPBmp24TmpData\x22 -ofcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22 -ocf \x22$TMPColorMapBMP\x22" "k"
set f [ open "| Soft/bmp_process/extract_bmp_colormap.exe -if \x22$bmpfile\x22 -ofh \x22$TMPBmpTmpHeader\x22 -ofd \x22$TMPBmpTmpData\x22 -ofd24 \x22$TMPBmp24TmpData\x22 -ofcm \x22$TMPBmpTmpColormap\x22 -ofcb \x22$TMPBmpColorBar\x22 -ocf \x22$TMPColorMapBMP\x22" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError

for {set i 0} {$i <= 256} {incr i} {
    set RedPalette_2($i) 1
    set GreenPalette_2($i) 1
    set BluePalette_2($i) 1
    }

WaitUntilCreated $TMPBmpTmpHeader_2
if [file exists $TMPBmpTmpHeader_2] {
    set f [open $TMPBmpTmpHeader_2 r]
    gets $f tmp
    gets $f tmp
    gets $f tmp
    set BMPMax_2 [format %5.2f $tmp]
    gets $f tmp
    set BMPMin_2 [format %5.2f $tmp]
    gets $f ColorNumber_2
    close $f
    
    if {$ColorNumber_2 != "BMP 24 Bits"} {
        set ColorNumberUtil_2 $ColorNumber_2
        set ColorNumberUtilDisplay_2 256
        if {$ColorNumberUtil_2 <= 32 } {set ColorNumberUtilDisplay_2 32}
        if {$ColorNumberUtil_2 <= 16 } {set ColorNumberUtilDisplay_2 16}
        if {$ColorNumberUtil_2 <=  8 } {set ColorNumberUtilDisplay_2  8}
        WaitUntilCreated $TMPColorMapBMP_2
        set f [open $TMPColorMapBMP_2 r]
        gets $f tmp
        gets $f tmp
        gets $f ColorNumber_2
        for {set i 1} {$i <= $ColorNumber_2} {incr i} {
            gets $f couleur
            set RedPalette_2($i) [lindex $couleur 0]
            set GreenPalette_2($i) [lindex $couleur 1]
            set BluePalette_2($i) [lindex $couleur 2]
            }
        close $f
        }
    }

image create photo ImageSource_2 -file $bmpfile
set SourceWidth_2 [image width ImageSource_2]
set SourceHeight_2 [image height ImageSource_2]

image create photo BMPImage_2; BMPImage_2 blank

#show image
set ZoomBMP_2 "0:0"
set SizeLens 200
set BMPWidth_2 $SizeLens
set BMPHeight_2 $SizeLens

if {$SourceWidth_2 == $SizeLens} {
    set BMPSample_2 1
    set ZoomBMP_2 "1:1"
    BMPImage_2 copy ImageSource_2 -from 0 0 $SourceWidth_2 $SourceHeight_2 -subsample $BMPSample_2 $BMPSample_2
    }

if {$SourceWidth_2 > $SizeLens} {
    set BMPSample_2 [expr round($SourceWidth_2 / $SizeLens)]
    set ZoomBMP_2 "1:$BMPSample_2"
    BMPImage_2 copy ImageSource_2 -from 0 0 $SourceWidth_2 $SourceHeight_2 -subsample $BMPSample_2 $BMPSample_2
    }

if {$SourceWidth_2 < $SizeLens} {
    set BMPSample_2 [expr round($SizeLens / $SourceWidth_2)]
    set ZoomBMP_2 "$BMPSample_2:1"
    BMPImage_2 copy ImageSource_2 -from 0 0 $SourceWidth_2 $SourceHeight_2 -zoom $BMPSample_2 $BMPSample_2
    }
        
$wc configure -width $SizeLens -height $SizeLens
$wc create image 0 0 -anchor nw -image BMPImage_2

set BMPSampleSource_2 $BMPSample_2
set BMPWidthSource_2 $BMPWidth_2
set BMPHeightSource_2 $BMPHeight_2
set ZoomBMPSource_2 $ZoomBMP_2
}
#############################################################################
## Procedure:  RAZ_PolInSARDataAnalysis

proc ::RAZ_PolInSARDataAnalysis {} {
global PolInSARExecFid GnuplotPipeFid
global PolInSARBMPViewFileInput PolInSARBMPViewTitle
global BMPPolInSAROut BMPPolInSAROutX BMPPolInSAROutY BMPPolInSAROutValue
global LineXLensInit LineYLensInit
global GnuXview GnuZview

set PolInSARExecFid ""; set GnuplotPipeFid ""
set PolInSARBMPViewFileInput ""; set PolInSARBMPViewTitle ""
set BMPPolInSAROut "false"
set BMPPolInSAROutX ""; set BMPPolInSAROutY ""; set BMPPolInSAROutValue ""

#CANVASPOLINSAROUT = top330.fra71.cpd74.cpd81.cpd82
.top330.fra71.cpd74.cpd81.cpd82 dtag LineXLensInit
.top330.fra71.cpd74.cpd81.cpd82 dtag LineYLensInit

#Button330_0 = top330.fra71.cpd74.cpd81.cpd83.cpd75.but80
.top330.fra71.cpd74.cpd81.cpd83.cpd75.but80 configure -state disable 
#Button330_1 = top330.fra71.cpd78.fra73.but75
.top330.fra71.cpd78.fra73.but75 configure -state disable 
#Button330_2 = top330.fra71.cpd74.cpd81.cpd83.cpd75.but83
.top330.fra71.cpd74.cpd81.cpd83.cpd75.but83 configure -state disable 
#Button330_3 = top330.fra71.cpd74.cpd81.cpd83.but73
.top330.fra71.cpd74.cpd81.cpd83.but73 configure -state disable 
#TitleFrame330_1 = top330.fra71.cpd74.cpd81.cpd83.tit74
.top330.fra71.cpd74.cpd81.cpd83.tit74 configure -state disable 
#Button330_4 = top330.fra71.cpd74.cpd81.cpd83.tit74.f.fra75.but78
.top330.fra71.cpd74.cpd81.cpd83.tit74.f.fra75.but78 configure -state disable 
#Button330_5 = top330.fra71.cpd74.cpd81.cpd83.tit74.f.fra75.but77
.top330.fra71.cpd74.cpd81.cpd83.tit74.f.fra75.but77 configure -state disable 
#Entry330_4 = top330.fra71.cpd74.cpd81.cpd83.tit74.f.fra75.ent79
.top330.fra71.cpd74.cpd81.cpd83.tit74.f.fra75.ent79 configure -state disable 
#Button330_6 = top330.fra71.cpd74.cpd81.cpd83.tit74.f.cpd80.but78
.top330.fra71.cpd74.cpd81.cpd83.tit74.f.cpd80.but78 configure -state disable 
#Button330_7 = top330.fra71.cpd74.cpd81.cpd83.tit74.f.cpd80.but77
.top330.fra71.cpd74.cpd81.cpd83.tit74.f.cpd80.but77 configure -state disable 
#Entry330_5 = top330.fra71.cpd74.cpd81.cpd83.tit74.f.cpd80.ent79
.top330.fra71.cpd74.cpd81.cpd83.tit74.f.cpd80.ent79 configure -state disable 

set GnuXview ""; set GnuZview ""
}
#############################################################################
## Procedure:  GoogleEarth

proc ::GoogleEarth {Title} {
global wshGoogleEarth GoogleEarthReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

if [file exists $Title] {
    if [file exists $GoogleEarthReader] {
        set taskIdHelp [ open "| \x22$GoogleEarthReader\x22 \x22$Title\x22" r]
        } else {
        #error message
        set VarError ""
        set ErrorMessage "GOOGLE EARTH APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "GOOGLE EARTH APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "GOOGLEEARTH"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "googleearth gEarth gearth google-earth GEarth"
            set ConfigFileNameList "googleearth gEarth gearth google-earth GEarth"
            .top341.fra74.lab76 configure -text "GOOGLE EARTH"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/google_earth.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration GOOGLE EARTH" "b"
            tkwait variable VarConfigFileName 
            }        
        }
    } else {
    Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"
    }
}
#############################################################################
## Procedure:  InitDataDir

proc ::InitDataDir {} {
global DataDirInit DataDir DataDirChannel1 DataDirChannel2 DataDirChannel3
global DataDirTmp DataDirTmp1 DataDirTmp2 DataDirTmp3 DataDirTmpMult
global DataDirMult DataDirMultActive NDataDirMult NDataDirMultActive
global BMPDirInput DEMoutputDir MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit

#DataDir Initialisation to the Working Directory
set DataDir $DataDirInit
set DataDirChannel1 $DataDir
set DataDirChannel2 $DataDir
set DataDirChannel3 $DataDir
set DataDirTmp $DataDir
set DataDirTmp1 $DataDir
set DataDirTmp2 $DataDir
set DataDirTmp3 $DataDir
set BMPDirInput $DataDir
set DEMoutputDir $DataDir
for {set i 0} {$i <= 100} {incr i} {set DataDirMult($i) $DataDir}
set DataDirMultActive $DataDirMult(1) 
set DataDirTmpMult $DataDirMult(1) 
set NDataDirMult 1
set NDataDirMultActive 1
set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""
}
#############################################################################
## Procedure:  MouseButtonDownOverviewAll

proc ::MouseButtonDownOverviewAll {sx sy} {
global SourceWidth SourceHeight ImageSource
global MouseActiveButton MouseRectOverviewAll SizeRectOverviewAll
global BMPSampleOverview SizeOverviewAllWidth SizeOverviewAllHeight
global BMPOverviewAll BMPLensAll BMPViewAll
global RectOverviewAll plotOverviewAll
global RectLensAll plotLensAll
global SizeViewAll SizeRectLensAll BMPSampleLens
global RectLensAllCenterX RectLensAllCenterY RectLensAllCenter
global RectOverviewX1 RectOverviewY1 RectOverviewX2 RectOverviewY2 RectLensAll
global SizeViewAll SizeLensAll BMPMouseX BMPMouseY
global RectOverviewAllCenter RectOverviewAllCenterX RectOverviewAllCenterY
global OverviewAllX1 OverviewAllY1 OverviewAllX2 OverviewAllY2

if {$MouseActiveButton == "ViewAll"} {

if {$MouseRectOverviewAll == "Inside"} {
    
    set RectOverviewX1 [expr $sx - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
    set RectOverviewY1 [expr $sy - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
    set RectOverviewX2 [expr $RectOverviewX1 + round($SizeRectOverviewAll / $BMPSampleOverview)]
    set RectOverviewY2 [expr $RectOverviewY1 + round($SizeRectOverviewAll / $BMPSampleOverview)]

    set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
    if { $RectOverviewX1 < 0 } {set RectOverviewX1 0; set x1 "ko"}
    if { $RectOverviewX1 > $SizeOverviewAllWidth } {set RectOverviewX1 $SizeOverviewAllWidth; set x1 "ko"}
    if { $RectOverviewX2 < 0 } {set RectOverviewX2 0; set x2 "ko"}
    if { $RectOverviewX2 > $SizeOverviewAllWidth } {set RectOverviewX2 $SizeOverviewAllWidth; set x2 "ko"}
    if { $RectOverviewY1 < 0 } {set RectOverviewY1 0; set y1 "ko"}
    if { $RectOverviewY1 > $SizeOverviewAllHeight } {set RectOverviewY1 $SizeOverviewAllHeight; set y1 "ko"}
    if { $RectOverviewY2 < 0 } {set RectOverviewY2 0; y2 "ko"}
    if { $RectOverviewY2 > $SizeOverviewAllHeight } {set RectOverviewY2 $SizeOverviewAllHeight; set y2 "ko"}
    if {$x1 == "ok"} {
        if {$y1 == "ok"} {
            set RectOverviewAllCenterX [expr $RectOverviewX1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenterY [expr $RectOverviewY1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectOverviewAllCenterX [expr $RectOverviewX1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenterY [expr $RectOverviewY2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
            }    
        }
    if {$x2 == "ok"} {
        if {$y1 == "ok"} {
            set RectOverviewAllCenterX [expr $RectOverviewX2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenterY [expr $RectOverviewY1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectOverviewAllCenterX [expr $RectOverviewX2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenterY [expr $RectOverviewY2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
            set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
            }    
        }
    #Rem: .top339.fra74.fra76.can78 = CANVASOVERVIEWALL Widget
    .top339.fra74.fra76.can78 dtag RectOverviewAllCenter
    .top339.fra74.fra76.can78  create image 0 0 -anchor nw -image BMPOverviewAll
    set RectOverviewAll [.top339.fra74.fra76.can78  create rectangle $RectOverviewX1 $RectOverviewY1 $RectOverviewX2 $RectOverviewY2 -outline white -width 2]
    .top339.fra74.fra76.can78  addtag RectOverviewAllCenter withtag $RectOverviewAll
    set plotOverviewAll(lastX) $sx
    set plotOverviewAll(lastY) $sy

    set BMPMouseX [expr round($sx * $BMPSampleOverview)]
    set BMPMouseY [expr round($sy * $BMPSampleOverview)]
    
    }
}
}
#############################################################################
## Procedure:  RectOverviewAllMove

proc ::RectOverviewAllMove {w x y wz} {
global BMPImageOpen SourceWidth SourceHeight BMPViewAll ImageSource
global ZoomBMP BMPSampleOverview SizeOverviewAllWidth SizeOverviewAllHeight SizeViewAll
global RectOverviewAllCenterX RectOverviewAllCenterY RectOverviewAllCenter
global RectLens SizeRectOverviewAll SizeLensOverview
global OverviewAllX1 OverviewAllY1 OverviewAllX2 OverviewAllY2
global plotOverviewAll BMPMouseX BMPMouseY
global RectOverviewX1 RectOverviewY1 RectOverviewX2 RectOverviewY2
global MouseActiveButton MouseRectOverviewAll

if {$MouseActiveButton == "ViewAll"} {
if {$MouseRectOverviewAll == "Inside"} {
    set RectOverviewX1 [expr $x - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
    set RectOverviewY1 [expr $y - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
    set RectOverviewX2 [expr $RectOverviewX1 + round($SizeRectOverviewAll / $BMPSampleOverview)]
    set RectOverviewY2 [expr $RectOverviewY1 + round($SizeRectOverviewAll / $BMPSampleOverview)]

    set config "true"
    if { $RectOverviewX1 < 0 } {set config "false"}
    if { $RectOverviewX1 > $SizeOverviewAllWidth } {set config "false"}
    if { $RectOverviewX2 < 0 } {set config "false"}
    if { $RectOverviewX2 > $SizeOverviewAllWidth } {set config "false"}
    if { $RectOverviewY1 < 0 } {set config "false"}
    if { $RectOverviewY1 > $SizeOverviewAllHeight } {set config "false"}
    if { $RectOverviewY2 < 0 } {set config "false"}
    if { $RectOverviewY2 > $SizeOverviewAllHeight } {set config "false"}

    if { "$config" == "true" } {
        $w move RectOverviewAllCenter [expr $x-$plotOverviewAll(lastX)] [expr $y-$plotOverviewAll(lastY)]
        set plotOverviewAll(lastX) $x
        set plotOverviewAll(lastY) $y
   
        set RectOverviewAllCenterX [expr $RectOverviewX1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
        set RectOverviewAllCenterY [expr $RectOverviewY1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
        set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}
       
        } else {
        $w dtag RectOverviewAllCenter
        $w  create image 0 0 -anchor nw -image BMPOverviewAll
      
        set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
        if { $RectOverviewX1 < 0 } {set RectOverviewX1 0; set x1 "ko"}
        if { $RectOverviewX1 > $SizeOverviewAllWidth } {set RectOverviewX1 $SizeOverviewAllWidth; set x1 "ko"}
        if { $RectOverviewX2 < 0 } {set RectOverviewX2 0; set x2 "ko"}
        if { $RectOverviewX2 > $SizeOverviewAllWidth } {set RectOverviewX2 $SizeOverviewAllWidth; set x2 "ko"}
        if { $RectOverviewY1 < 0 } {set RectOverviewY1 0; set y1 "ko"}
        if { $RectOverviewY1 > $SizeOverviewAllHeight } {set RectOverviewY1 $SizeOverviewAllHeight; set y1 "ko"}
        if { $RectOverviewY2 < 0 } {set RectOverviewY2 0; y2 "ko"}
        if { $RectOverviewY2 > $SizeOverviewAllHeight } {set RectOverviewY2 $SizeOverviewAllHeight; set y2 "ko"}
        if {$x1 == "ok"} {
            if {$y1 == "ok"} {
                set RectOverviewAllCenterX [expr $RectOverviewX1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenterY [expr $RectOverviewY1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
                }    
            if {$y2 == "ok"} {
                set RectOverviewAllCenterX [expr $RectOverviewX1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenterY [expr $RectOverviewY2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
                }    
            }
        if {$x2 == "ok"} {
            if {$y1 == "ok"} {
                set RectOverviewAllCenterX [expr $RectOverviewX2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenterY [expr $RectOverviewY1 + round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
                }    
            if {$y2 == "ok"} {
                set RectOverviewAllCenterX [expr $RectOverviewX2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenterY [expr $RectOverviewY2 - round($SizeRectOverviewAll / 2 / $BMPSampleOverview)]
                set RectOverviewAllCenter {$RectOverviewAllCenterX $RectOverviewAllCenterY}   
                }    
            }
        set RectOverviewAll [$w  create rectangle $RectOverviewX1 $RectOverviewY1 $RectOverviewX2 $RectOverviewY2 -outline white -width 2]
        $w  addtag RectOverviewAllCenter withtag $RectOverviewAll
        set plotOverviewAll(lastX) $x
        set plotOverviewAll(lastY) $y
        
        }
    set BMPMouseX [expr round($x*$BMPSampleOverview)]
    set BMPMouseY [expr round($y*$BMPSampleOverview)]
    
    }
}
}
#############################################################################
## Procedure:  MouseButtonReleaseOverviewAll

proc ::MouseButtonReleaseOverviewAll {nx ny} {
global SourceWidth SourceHeight ImageSource
global MouseActiveButton MouseRectOverviewAll RectOverviewAllCenter
global OverviewAllX1 OverviewAllY1 OverviewAllX2 OverviewAllY2 SizeViewAll 
global RectLensX1 RectLensX2 RectLensY1 RectLensY2
global RectOverviewX1 RectOverviewY1 RectOverviewX2 RectOverviewY2
global BMPLensAll SizeLensAll ImageSource SizeRectLensAll
global RectLensAllCenterX RectLensAllCenterY RectLensAllCenter
global SizeRectAll BMPSampleLens RectLensAll plotLensAll
global SizeRectAllTmp SizeRectAllTmpX SizeRectAllTmpY
global ZoomLensBMP BMPSampleLens BMPZoomLens BMPSampleOverview

if {$MouseActiveButton == "ViewAll"} {
    if {$MouseRectOverviewAll == "Inside"} {
        #Rem: .top339.fra75.cpd77.can80 = CANVASVIEWALL Widget
        .top339.fra75.cpd77.can80 dtag RectLensAllCenter  
            
        set OverviewAllX1 [expr round($RectOverviewX1 * $BMPSampleOverview)]
        set OverviewAllY1 [expr round($RectOverviewY1 * $BMPSampleOverview)]
        set OverviewAllX2 [expr round($RectOverviewX2 * $BMPSampleOverview)]
        set OverviewAllY2 [expr round($RectOverviewY2 * $BMPSampleOverview)]
        set config "true"
        if { $OverviewAllX1 < 0 } {set config "false"}
        if { $OverviewAllX1 > $SourceWidth } {set config "false"}
        if { $OverviewAllX2 < 0 } {set config "false"}
        if { $OverviewAllX2 > $SourceWidth } {set config "false"}
        if { $OverviewAllY1 < 0 } {set config "false"}
        if { $OverviewAllY1 > $SourceHeight } {set config "false"}
        if { $OverviewAllY2 < 0 } {set config "false"}
        if { $OverviewAllY2 > $SourceHeight } {set config "false"}
        if { "$config" == "true" } {
            BMPViewAll blank
            BMPViewAll copy ImageSource -from $OverviewAllX1 $OverviewAllY1 $OverviewAllX2 $OverviewAllY2
            }
        #Rem: .top339.fra75.cpd77.can80 = CANVASVIEWALL Widget
        .top339.fra75.cpd77.can80 configure -width $SizeViewAll -height $SizeViewAll
        .top339.fra75.cpd77.can80 create image 0 0 -anchor nw -image BMPViewAll
        
        #show rect_zoom
        set RectLensAllCenterX [expr round(($OverviewAllX2 - $OverviewAllX1)/2)]
        set RectLensAllCenterY [expr round(($OverviewAllY2 - $OverviewAllY1)/2)]
        set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}
   
        set Num1 ""
        set Num2 ""
        set Num1 [string index $ZoomLensBMP 0]
        set Num2 [string index $ZoomLensBMP 1]
        if {$Num2 == ":"} {
            set Num $Num1
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 2]
            set Den2 [string index $ZoomLensBMP 3]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            } else {
            set Num [expr 10*$Num1 + $Num2]
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 3]
            set Den2 [string index $ZoomLensBMP 4]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            }
         if {$Num >= $Den} {
            set BMPZoom $Num
            set SizeRectNew [expr round($SizeRectLensAll / $BMPZoom)]
            } else {
            set BMPSample $Den
            set SizeRectNew [expr round($SizeRectLensAll * $BMPSample)]
            }
        
        set SizeRectAllTmpX [expr round($OverviewAllX2 - $OverviewAllX1)]
        set SizeRectAllTmpY [expr round($OverviewAllY2 - $OverviewAllY1)]
        if {$SizeRectAllTmpY >= $SizeRectAllTmpX} {
            set SizeRectAllTmp $SizeRectAllTmpX
            } else {
            set SizeRectAllTmp $SizeRectAllTmpY
            }
        if {$SizeRectAllTmp >= $SizeRectNew} { set SizeRectAllTmp $SizeRectNew }
              
        set RectLensX1 [expr [lindex $RectLensAllCenter 0] - round($SizeRectAllTmp / 2)]
        set RectLensY1 [expr [lindex $RectLensAllCenter 1] - round($SizeRectAllTmp / 2)]
        set RectLensX2 [expr $RectLensX1 + $SizeRectAllTmp]
        set RectLensY2 [expr $RectLensY1 + $SizeRectAllTmp]
                  
        set RectLensAll [.top339.fra75.cpd77.can80 create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        .top339.fra75.cpd77.can80 addtag RectLensAllCenter withtag $RectLensAll
        set plotLensAll(lastX) 0
        set plotLensAll(lastY) 0       
        
        #show Lens
        set Num1 ""
        set Num2 ""
        set Num1 [string index $ZoomLensBMP 0]
        set Num2 [string index $ZoomLensBMP 1]
        if {$Num2 == ":"} {
            set Num $Num1
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 2]
            set Den2 [string index $ZoomLensBMP 3]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            } else {
            set Num [expr 10*$Num1 + $Num2]
            set Den1 ""
            set Den2 ""
            set Den1 [string index $ZoomLensBMP 3]
            set Den2 [string index $ZoomLensBMP 4]
            if {$Den2 == ""} {
                set Den $Den1
                } else {
                set Den [expr 10*$Den1 + $Den2]
                }
            }

        set LensAllX1 [expr $OverviewAllX1 + $RectLensX1]
        set LensAllY1 [expr $OverviewAllY1 + $RectLensY1]
        
        set SizeLens [expr $RectLensX2 - $RectLensX1]
        if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
        set LensAllX2 [expr $LensAllX1 + $SizeLens]
        if {$LensAllX2 > $OverviewAllX2} { set LensAllX2 $OverviewAllX2 }
        
        set SizeLens [expr $RectLensY2 - $RectLensY1]
        if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
        set LensAllY2 [expr $LensAllY1 + $SizeLens]
        if {$LensAllY2 > $OverviewAllY2} { set LensAllY2 $OverviewAllY2 }
        
        BMPLensAll blank
        if {$Den >= $Num} {
            set BMPSampleLens $Den
            BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -subsample $BMPSampleLens $BMPSampleLens
            }
        if {$Den < $Num} {
            set BMPZoomLens $Num
            BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -zoom $BMPZoomLens $BMPZoomLens
            }

        #Rem: .top339.fra74.fra77.can79 = CANVASLENSALL Widget
        .top339.fra74.fra77.can79 configure -width $SizeLensAll -height $SizeLensAll
        .top339.fra74.fra77.can79 itemconfigure current -image BMPLensAll  
        }
    }        
}
#############################################################################
## Procedure:  MouseMotionViewAll

proc ::MouseMotionViewAll {nx ny} {
global MouseActiveButton MouseRectLensAll
global ZoomBMP BMPMouseX BMPMouseY ColorNumber
global OverviewAllX1 OverviewAllX2 OverviewAllY1 OverviewAllY2
global RectLensAllCenter RectLensAllCenterX RectLensAllCenterY
global SizeRectAllTmp

if {$MouseActiveButton == "ViewAll"} {

set Num1 ""
set Num2 ""
set Num1 [string index $ZoomBMP 0]
set Num2 [string index $ZoomBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 2]
    set Den2 [string index $ZoomBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomBMP 3]
    set Den2 [string index $ZoomBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set BMPMouseX [expr round($nx*$BMPSample)]
    set BMPMouseY [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set BMPMouseX [expr round($nx/$BMPZoom)]
    set BMPMouseY [expr round($ny/$BMPZoom)]
    }

    set BMPMouseXX $BMPMouseX
    if {$BMPMouseXX < 0} {set BMPMouseXX 0}
    set BMPMouseXX [expr abs($BMPMouseXX + $OverviewAllX1)]
    if {$BMPMouseXX < $OverviewAllX1} {set BMPMouseXX "ko"}
    if {$BMPMouseXX > $OverviewAllX2} {set BMPMouseXX "ko"}
    #if {$BMPMouseX > [expr abs($SourceWidth -1)]} {set BMPMouseX [expr abs($SourceWidth -1)]}
    
    set BMPMouseYY $BMPMouseY
    if {$BMPMouseYY < 0} {set BMPMouseYY 0}
    set BMPMouseYY [expr abs($BMPMouseYY + $OverviewAllY1)]
    if {$BMPMouseYY < $OverviewAllY1} {set BMPMouseYY "ko"}
    if {$BMPMouseYY > $OverviewAllY2} {set BMPMouseYY "ko"}
    #if {$BMPMouseY > [expr abs($SourceHeight -1)]} {set BMPMouseY [expr abs($SourceHeight -1)]}
    
    if {$BMPMouseXX == "ko"} {
        set BMPMouseX $OverviewAllX1; set BMPMouseY $OverviewAllY1
        } else {
        if {$BMPMouseYY == "ko"} {
            set BMPMouseX $OverviewAllX1; set BMPMouseY $OverviewAllY1
            } else {
            set BMPMouseX $BMPMouseXX; set BMPMouseY $BMPMouseYY
            }
        }

    if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }

    set RectLensX1 [expr [lindex $RectLensAllCenter 0] - round($SizeRectAllTmp / 2)]
    set RectLensY1 [expr [lindex $RectLensAllCenter 1] - round($SizeRectAllTmp / 2)]
    set RectLensX2 [expr $RectLensX1 + $SizeRectAllTmp]
    set RectLensY2 [expr $RectLensY1 + $SizeRectAllTmp]
    set MouseRectLensAll ""
    set RectLensMouse "OK"
    if {[expr ($nx-$RectLensX1)] > 0} {append RectLensMouse "1"}
    if {[expr ($nx-$RectLensX2)] < 0} {append RectLensMouse "2"}
    if {[expr ($ny-$RectLensY1)] > 0} {append RectLensMouse "3"}
    if {[expr ($ny-$RectLensY2)] < 0} {append RectLensMouse "4"}
    #Rem: .top73.can81 = CANVASBMPLENS Widget
    if {$RectLensMouse == "OK1234"} {
        set MouseRectLensAll "Inside"
        .top339.fra75.cpd77.can80 configure -cursor X_cursor
        } else {
        set MouseRectLensAll "Outside"
        .top339.fra75.cpd77.can80 configure -cursor arrow
        }
    }
}
#############################################################################
## Procedure:  MouseButtonDownLensAll

proc ::MouseButtonDownLensAll {sx sy} {
global SourceWidth SourceHeight ImageSource
global MouseActiveButton MouseRectLensAll SizeRectLensAll
global SizeRectAllTmp SizeRectAllTmpX SizeRectAllTmpY
global BMPSampleOverview BMPOverviewAll BMPLensAll BMPViewAll
global RectLensAll plotLensAll BMPTitleLensAll
global OverviewAllX1 OverviewAllX2 OverviewAllY1 OverviewAllY2
global ZoomLensBMP BMPSampleLens BMPZoomLens
global RectLensAllCenterX RectLensAllCenterY RectLensAllCenter
global RectLensX1 RectLensY1 RectLensX2 RectLensY2
global SizeViewAll SizeLensAll BMPMouseX BMPMouseY
global LensAllX1 LensAllY1 LensAllX2 LensAllY2

if {$MouseActiveButton == "ViewAll"} {

if {$MouseRectLensAll == "Inside"} {
    
    set RectLensX1 [expr $sx - round($SizeRectAllTmp / 2)]
    set RectLensY1 [expr $sy - round($SizeRectAllTmp / 2)]
    set RectLensX2 [expr $RectLensX1 + $SizeRectAllTmp]
    set RectLensY2 [expr $RectLensY1 + $SizeRectAllTmp]

    set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
    if { $RectLensX1 < 0 } {set RectLensX1 0; set x1 "ko"}
    if { $RectLensX1 > $SizeRectAllTmpX } {set RectLensX1 $SizeRectAllTmpX; set x1 "ko"}
    if { $RectLensX2 < 0 } {set RectLensX2 0; set x2 "ko"}
    if { $RectLensX2 > $SizeRectAllTmpX } {set RectLensX2 $SizeRectAllTmpX; set x2 "ko"}
    if { $RectLensY1 < 0 } {set RectLensY1 0; set y1 "ko"}
    if { $RectLensY1 > $SizeRectAllTmpY } {set RectLensY1 $SizeRectAllTmpY; set y1 "ko"}
    if { $RectLensY2 < 0 } {set RectLensY2 0; y2 "ko"}
    if { $RectLensY2 > $SizeRectAllTmpY } {set RectLensY2 $SizeRectAllTmpY; set y2 "ko"}
    if {$x1 == "ok"} {
        if {$y1 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        }
    if {$x2 == "ok"} {
        if {$y1 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        }
    #Rem: .top339.fra75.cpd77.can80 = CANVASVIEWALL Widget
    .top339.fra75.cpd77.can80 dtag RectLensAllCenter   
    .top339.fra75.cpd77.can80  create image 0 0 -anchor nw -image BMPViewAll
    set RectLensAll [.top339.fra75.cpd77.can80  create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
    .top339.fra75.cpd77.can80  addtag RectLensAllCenter withtag $RectLensAll
    set plotLensAll(lastX) $sx
    set plotLensAll(lastY) $sy

    set BMPMouseX [expr $sx + $OverviewAllX1]
    set BMPMouseY [expr $sy + $OverviewAllY1]
    }

if {$MouseRectLensAll == "Outside"} {
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
     if {$Num >= $Den} {
        set BMPZoom [expr $Num +1]
        if {$BMPZoom > 99} {
            #warning
            set BMPZoom 99
            } else {
            #process
            set ZoomLensBMP "$BMPZoom:1"
            set SizeRectNew [expr round($SizeRectLensAll / $BMPZoom)]
            }
        } else {
        set BMPSample [expr $Den -1]
        set ZoomLensBMP "1:$BMPSample"
        set SizeRectNew [expr round($SizeRectLensAll * $BMPSample)]
        }
        
    set SizeRectAllTmpX [expr round($OverviewAllX2 - $OverviewAllX1)]
    set SizeRectAllTmpY [expr round($OverviewAllY2 - $OverviewAllY1)]
    if {$SizeRectAllTmpY >= $SizeRectAllTmpX} {
        set SizeRectAllTmp $SizeRectAllTmpX
        } else {
        set SizeRectAllTmp $SizeRectAllTmpY
        }
    if {$SizeRectAllTmp >= $SizeRectNew} { set SizeRectAllTmp $SizeRectNew }

    set RectLensX1 [expr [lindex $RectLensAllCenter 0] - round($SizeRectAllTmp / 2)]
    set RectLensY1 [expr [lindex $RectLensAllCenter 1] - round($SizeRectAllTmp / 2)]
    set RectLensX2 [expr $RectLensX1 + $SizeRectAllTmp]
    set RectLensY2 [expr $RectLensY1 + $SizeRectAllTmp]

    set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
    if { $RectLensX1 < 0 } {set RectLensX1 0; set x1 "ko"}
    if { $RectLensX1 > $SizeRectAllTmpX } {set RectLensX1 $SizeRectAllTmpX; set x1 "ko"}
    if { $RectLensX2 < 0 } {set RectLensX2 0; set x2 "ko"}
    if { $RectLensX2 > $SizeRectAllTmpX } {set RectLensX2 $SizeRectAllTmpX; set x2 "ko"}
    if { $RectLensY1 < 0 } {set RectLensY1 0; set y1 "ko"}
    if { $RectLensY1 > $SizeRectAllTmpY } {set RectLensY1 $SizeRectAllTmpY; set y1 "ko"}
    if { $RectLensY2 < 0 } {set RectLensY2 0; y2 "ko"}
    if { $RectLensY2 > $SizeRectAllTmpY } {set RectLensY2 $SizeRectAllTmpY; set y2 "ko"}
    if {$x1 == "ok"} {
        if {$y1 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        }
    if {$x2 == "ok"} {
        if {$y1 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        }
    #Rem: .top339.fra75.cpd77.can80 = CANVASVIEWALL Widget
    .top339.fra75.cpd77.can80 dtag RectLensAllCenter   
    .top339.fra75.cpd77.can80  create image 0 0 -anchor nw -image BMPViewAll
    set RectLensAll [.top339.fra75.cpd77.can80  create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
    .top339.fra75.cpd77.can80  addtag RectLensAllCenter withtag $RectLensAll

    set BMPTitleLensAll "Zoom "
    append BMPTitleLensAll $ZoomLensBMP

    #show Lens
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }

    set LensAllX1 [expr $OverviewAllX1 + $RectLensX1]
    set LensAllY1 [expr $OverviewAllY1 + $RectLensY1]
        
    set SizeLens [expr $RectLensX2 - $RectLensX1]
    if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
    set LensAllX2 [expr $LensAllX1 + $SizeLens]
    if {$LensAllX2 > $OverviewAllX2} { set LensAllX2 $OverviewAllX2 }
        
    set SizeLens [expr $RectLensY2 - $RectLensY1]
    if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
    set LensAllY2 [expr $LensAllY1 + $SizeLens]
    if {$LensAllY2 > $OverviewAllY2} { set LensAllY2 $OverviewAllY2 }
    
    BMPLensAll blank
    if {$Den >= $Num} {
        set BMPSampleLens $Den
        BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -subsample $BMPSampleLens $BMPSampleLens
        }
    if {$Den < $Num} {
        set BMPZoomLens $Num
        BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -zoom $BMPZoomLens $BMPZoomLens
        }

    #Rem: .top339.fra74.fra77.can79 = CANVASLENSALL Widget
    .top339.fra74.fra77.can79 configure -width $SizeLensAll -height $SizeLensAll
    .top339.fra74.fra77.can79 itemconfigure current -image BMPLensAll  
    }
}
}
#############################################################################
## Procedure:  MouseButtonReleaseLensAll

proc ::MouseButtonReleaseLensAll {nx ny} {
global SourceWidth SourceHeight ImageSource
global MouseActiveButton MouseRectLensAll SizeRectLensAll
global SizeRectAllTmp SizeRectAllTmpX SizeRectAllTmpY
global BMPSampleOverview BMPOverviewAll BMPLensAll BMPViewAll
global RectLensAll plotLensAll BMPTitleLensAll
global OverviewAllX1 OverviewAllX2 OverviewAllY1 OverviewAllY2
global ZoomLensBMP BMPSampleLens BMPZoomLens
global RectLensAllCenterX RectLensAllCenterY RectLensAllCenter
global RectLensX1 RectLensY1 RectLensX2 RectLensY2
global SizeViewAll SizeLensAll BMPMouseX BMPMouseY
global LensAllX1 LensAllY1 LensAllX2 LensAllY2

if {$MouseActiveButton == "ViewAll"} {

if {$MouseRectLensAll == "Inside"} {
    
    #show Lens
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }

    set LensAllX1 [expr $OverviewAllX1 + $RectLensX1]
    set LensAllY1 [expr $OverviewAllY1 + $RectLensY1]
        
    set SizeLens [expr $RectLensX2 - $RectLensX1]
    if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
    set LensAllX2 [expr $LensAllX1 + $SizeLens]
    if {$LensAllX2 > $OverviewAllX2} { set LensAllX2 $OverviewAllX2 }
        
    set SizeLens [expr $RectLensY2 - $RectLensY1]
    if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
    set LensAllY2 [expr $LensAllY1 + $SizeLens]
    if {$LensAllY2 > $OverviewAllY2} { set LensAllY2 $OverviewAllY2 }
    
    BMPLensAll blank
    if {$Den >= $Num} {
        set BMPSampleLens $Den
        BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -subsample $BMPSampleLens $BMPSampleLens
        }
    if {$Den < $Num} {
        set BMPZoomLens $Num
        BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -zoom $BMPZoomLens $BMPZoomLens
        }

    #Rem: .top339.fra74.fra77.can79 = CANVASLENSALL Widget
    .top339.fra74.fra77.can79 configure -width $SizeLensAll -height $SizeLensAll
    .top339.fra74.fra77.can79 itemconfigure current -image BMPLensAll  
    }
}
}
#############################################################################
## Procedure:  RectLensAllMove

proc ::RectLensAllMove {w x y wz} {
global ImageSource BMPViewAll BMPLensAll
global OverviewAllX1 OverviewAllY1 OverviewAllX2 OverviewAllY2
global SizeRectAllTmp SizeRectAllTmpX SizeRectAllTmpY
global ZoomBMP ZoomLensBMP BMPSampleLens BMPZoomLens
global RectLensAllCenterX RectLensAllCenterY RectLensAllCenter
global RectLensAll plotLensAll
global SizeViewAll SizeLensAll BMPMouseX BMPMouseY
global MouseActiveButton MouseRectLensAll SizeRectLensAll
global RectLensX1 RectLensY1 RectLensX2 RectLensY2
global LensAllX1 LensAllY1 LensAllX2 LensAllY2

if {$MouseActiveButton == "ViewAll"} {
if {$MouseRectLensAll == "Inside"} {
    set RectLensX1 [expr $x - round($SizeRectAllTmp / 2)]
    set RectLensY1 [expr $y - round($SizeRectAllTmp / 2)]
    set RectLensX2 [expr $RectLensX1 + $SizeRectAllTmp]
    set RectLensY2 [expr $RectLensY1 + $SizeRectAllTmp]

    set config "true"
    if { $RectLensX1 < 0 } {set config "false"}
    if { $RectLensX1 > $SizeRectAllTmp } {set config "false"}
    if { $RectLensX2 < 0 } {set config "false"}
    if { $RectLensX2 > $SizeRectAllTmp } {set config "false"}
    if { $RectLensY1 < 0 } {set config "false"}
    if { $RectLensY1 > $SizeRectAllTmp } {set config "false"}
    if { $RectLensY2 < 0 } {set config "false"}
    if { $RectLensY2 > $SizeRectAllTmp } {set config "false"}

    if { "$config" == "true" } {
        $w move RectLensAllCenter [expr $x-$plotLensAll(lastX)] [expr $y-$plotLensAll(lastY)]
        set plotLensAll(lastX) $x
        set plotLensAll(lastY) $y
   
        set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
        set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
        set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}

        } else {
        $w dtag RectLensAllCenter
        $w  create image 0 0 -anchor nw -image BMPViewAll
      
        set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
        if { $RectLensX1 < 0 } {set RectLensX1 0; set x1 "ko"}
        if { $RectLensX1 > $SizeRectAllTmpX } {set RectLensX1 $SizeRectAllTmpX; set x1 "ko"}
        if { $RectLensX2 < 0 } {set RectLensX2 0; set x2 "ko"}
        if { $RectLensX2 > $SizeRectAllTmpX } {set RectLensX2 $SizeRectAllTmpX; set x2 "ko"}
        if { $RectLensY1 < 0 } {set RectLensY1 0; set y1 "ko"}
        if { $RectLensY1 > $SizeRectAllTmpY } {set RectLensY1 $SizeRectAllTmpY; set y1 "ko"}
        if { $RectLensY2 < 0 } {set RectLensY2 0; y2 "ko"}
        if { $RectLensY2 > $SizeRectAllTmpY } {set RectLensY2 $SizeRectAllTmpY; set y2 "ko"}
        if {$x1 == "ok"} {
            if {$y1 == "ok"} {
                set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
                set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
                set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
                }    
            if {$y2 == "ok"} {
                set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
                set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
                set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
                }    
            }
        if {$x2 == "ok"} {
            if {$y1 == "ok"} {
                set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
                set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
                set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
                }    
            if {$y2 == "ok"} {
                set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
                set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
                set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
                }    
            }

        set RectLensAll [$w  create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
        $w  addtag RectLensAllCenter withtag $RectLensAll
        set plotLensAll(lastX) $x
        set plotLensAll(lastY) $y     
        }

    set BMPMouseX [expr $x + $OverviewAllX1]
    set BMPMouseY [expr $y + $OverviewAllY1]
    }
}
}
#############################################################################
## Procedure:  MouseButtonRightDownLensAll

proc ::MouseButtonRightDownLensAll {x y} {
global SourceWidth SourceHeight ImageSource
global MouseActiveButton MouseRectLensAll SizeRectLensAll
global SizeRectAllTmp SizeRectAllTmpX SizeRectAllTmpY
global BMPSampleOverview BMPOverviewAll BMPLensAll BMPViewAll
global RectLensAll plotLensAll BMPTitleLensAll
global OverviewAllX1 OverviewAllX2 OverviewAllY1 OverviewAllY2
global ZoomLensBMP BMPSampleLens BMPZoomLens
global RectLensAllCenterX RectLensAllCenterY RectLensAllCenter
global RectLensX1 RectLensY1 RectLensX2 RectLensY2
global SizeViewAll SizeLensAll BMPMouseX BMPMouseY
global LensAllX1 LensAllY1 LensAllX2 LensAllY2

if {$MouseActiveButton == "ViewAll"} {

if {$MouseRectLensAll == "Outside"} {

if {$ZoomLensBMP != "1:1" } {
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }
     if {$Den >= $Num} {
        set BMPSample [expr $Den +1]
        if {$BMPSample > 99} { 
            #warning
            set BMPSample 99
            } else {
            #process
            set ZoomLensBMP "1:$BMPSample"
            set SizeRectNew [expr round($SizeRectLensAll * $BMPSample)]                
            }
        } else {
        set BMPZoom [expr $Num -1]
        set ZoomLensBMP "$BMPZoom:1"
        set SizeRectNew [expr round($SizeRectLensAll / $BMPZoom)]            
        }
               
    set SizeRectAllTmpX [expr round($OverviewAllX2 - $OverviewAllX1)]
    set SizeRectAllTmpY [expr round($OverviewAllY2 - $OverviewAllY1)]
    if {$SizeRectAllTmpY >= $SizeRectAllTmpX} {
        set SizeRectAllTmp $SizeRectAllTmpX
        } else {
        set SizeRectAllTmp $SizeRectAllTmpY
        }
    if {$SizeRectAllTmp >= $SizeRectNew} { set SizeRectAllTmp $SizeRectNew }

    set RectLensX1 [expr [lindex $RectLensAllCenter 0] - round($SizeRectAllTmp / 2)]
    set RectLensY1 [expr [lindex $RectLensAllCenter 1] - round($SizeRectAllTmp / 2)]
    set RectLensX2 [expr $RectLensX1 + $SizeRectAllTmp]
    set RectLensY2 [expr $RectLensY1 + $SizeRectAllTmp]

    set x1 "ok"; set x2 "ok"; set y1 "ok"; set y2 "ok"
    if { $RectLensX1 < 0 } {set RectLensX1 0; set x1 "ko"}
    if { $RectLensX1 > $SizeRectAllTmpX } {set RectLensX1 $SizeRectAllTmpX; set x1 "ko"}
    if { $RectLensX2 < 0 } {set RectLensX2 0; set x2 "ko"}
    if { $RectLensX2 > $SizeRectAllTmpX } {set RectLensX2 $SizeRectAllTmpX; set x2 "ko"}
    if { $RectLensY1 < 0 } {set RectLensY1 0; set y1 "ko"}
    if { $RectLensY1 > $SizeRectAllTmpY } {set RectLensY1 $SizeRectAllTmpY; set y1 "ko"}
    if { $RectLensY2 < 0 } {set RectLensY2 0; y2 "ko"}
    if { $RectLensY2 > $SizeRectAllTmpY } {set RectLensY2 $SizeRectAllTmpY; set y2 "ko"}
    if {$x1 == "ok"} {
        if {$y1 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        }
    if {$x2 == "ok"} {
        if {$y1 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY1 + round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        if {$y2 == "ok"} {
            set RectLensAllCenterX [expr $RectLensX2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenterY [expr $RectLensY2 - round($SizeRectAllTmp / 2)]
            set RectLensAllCenter {$RectLensAllCenterX $RectLensAllCenterY}   
            }    
        }
    #Rem: .top339.fra75.cpd77.can80 = CANVASVIEWALL Widget
    .top339.fra75.cpd77.can80 dtag RectLensAllCenter   
    .top339.fra75.cpd77.can80  create image 0 0 -anchor nw -image BMPViewAll
    set RectLensAll [.top339.fra75.cpd77.can80  create rectangle $RectLensX1 $RectLensY1 $RectLensX2 $RectLensY2 -outline white -width 2]
    .top339.fra75.cpd77.can80  addtag RectLensAllCenter withtag $RectLensAll

    set BMPTitleLensAll "Zoom "
    append BMPTitleLensAll $ZoomLensBMP

    #show Lens
    set Num1 ""
    set Num2 ""
    set Num1 [string index $ZoomLensBMP 0]
    set Num2 [string index $ZoomLensBMP 1]
    if {$Num2 == ":"} {
        set Num $Num1
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 2]
        set Den2 [string index $ZoomLensBMP 3]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        } else {
        set Num [expr 10*$Num1 + $Num2]
        set Den1 ""
        set Den2 ""
        set Den1 [string index $ZoomLensBMP 3]
        set Den2 [string index $ZoomLensBMP 4]
        if {$Den2 == ""} {
            set Den $Den1
            } else {
            set Den [expr 10*$Den1 + $Den2]
            }
        }

    set LensAllX1 [expr $OverviewAllX1 + $RectLensX1]
    set LensAllY1 [expr $OverviewAllY1 + $RectLensY1]
        
    set SizeLens [expr $RectLensX2 - $RectLensX1]
    if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
    set LensAllX2 [expr $LensAllX1 + $SizeLens]
    if {$LensAllX2 > $OverviewAllX2} { set LensAllX2 $OverviewAllX2 }
        
    set SizeLens [expr $RectLensY2 - $RectLensY1]
    if {$SizeRectAllTmp <= $SizeLens} { set SizeLens $SizeRectAllTmp }
    set LensAllY2 [expr $LensAllY1 + $SizeLens]
    if {$LensAllY2 > $OverviewAllY2} { set LensAllY2 $OverviewAllY2 }
    
    BMPLensAll blank
    if {$Den >= $Num} {
        set BMPSampleLens $Den
        BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -subsample $BMPSampleLens $BMPSampleLens
        }
    if {$Den < $Num} {
        set BMPZoomLens $Num
        BMPLensAll copy ImageSource -from $LensAllX1 $LensAllY1 $LensAllX2 $LensAllY2 -zoom $BMPZoomLens $BMPZoomLens
        }

    #Rem: .top339.fra74.fra77.can79 = CANVASLENSALL Widget
    .top339.fra74.fra77.can79 configure -width $SizeLensAll -height $SizeLensAll
    .top339.fra74.fra77.can79 itemconfigure current -image BMPLensAll  
    }
  }
}
}
#############################################################################
## Procedure:  MouseMotionLensAll

proc ::MouseMotionLensAll {nx ny} {
global MouseActiveButton MouseRectLensAll
global ZoomLensBMP BMPMouseX BMPMouseY ColorNumber
global LensAllX1 LensAllX2 LensAllY1 LensAllY2

if {$MouseActiveButton == "ViewAll"} {

set Num1 ""
set Num2 ""
set Num1 [string index $ZoomLensBMP 0]
set Num2 [string index $ZoomLensBMP 1]
if {$Num2 == ":"} {
    set Num $Num1
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomLensBMP 2]
    set Den2 [string index $ZoomLensBMP 3]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    } else {
    set Num [expr 10*$Num1 + $Num2]
    set Den1 ""
    set Den2 ""
    set Den1 [string index $ZoomLensBMP 3]
    set Den2 [string index $ZoomLensBMP 4]
    if {$Den2 == ""} {
        set Den $Den1
        } else {
        set Den [expr 10*$Den1 + $Den2]
        }
    }

if {$Den >= $Num} {
    set BMPSample $Den
    set BMPMouseX [expr round($nx*$BMPSample)]
    set BMPMouseY [expr round($ny*$BMPSample)]
    }
if {$Den < $Num} {
    set BMPZoom $Num
    set BMPMouseX [expr round($nx/$BMPZoom)]
    set BMPMouseY [expr round($ny/$BMPZoom)]
    }

    set BMPMouseXX $BMPMouseX
    if {$BMPMouseXX < 0} {set BMPMouseXX 0}
    set BMPMouseXX [expr abs($BMPMouseXX + $LensAllX1)]
    if {$BMPMouseXX < $LensAllX1} {set BMPMouseXX "ko"}
    if {$BMPMouseXX > $LensAllX2} {set BMPMouseXX "ko"}
    
    set BMPMouseYY $BMPMouseY
    if {$BMPMouseYY < 0} {set BMPMouseYY 0}
    set BMPMouseYY [expr abs($BMPMouseYY + $LensAllY1)]
    if {$BMPMouseYY < $LensAllY1} {set BMPMouseYY "ko"}
    if {$BMPMouseYY > $LensAllY2} {set BMPMouseYY "ko"}
    
    if {$BMPMouseXX == "ko"} {
        set BMPMouseX $LensAllX1; set BMPMouseY $LensAllY1
        } else {
        if {$BMPMouseYY == "ko"} {
            set BMPMouseX $LensAllX1; set BMPMouseY $LensAllY1
            } else {
            set BMPMouseX $BMPMouseXX; set BMPMouseY $BMPMouseYY
            }
        }

    if {"$ColorNumber" != "BMP 24 Bits"} { MouseBMPValue }
    }
}
#############################################################################
## Procedure:  CleanTMPDirectory

proc ::CleanTMPDirectory {} {
global TMPTmp TMPDir
global TMPMinMaxBmp TMPBmpTmpHeader TMPBmpTmpData TMPBmp24TmpData TMPColorMapBMP TMPBmpTmpColormap TMPBmpColorBar TMPBmpTmp
global TMPBmpTmpHeader_2 TMPBmpTmpData_2 TMPBmp24TmpData_2 TMPColorMapBMP_2 TMPBmpTmpColormap_2 TMPBmpColorBar_2
global TMPBmpTmpHeaderGray TMPBmpTmpDataGray TMPBmp24TmpDataGray TMPBmpTmpColormapGray TMPBmpColorBarGray TMPColorMapBMPGray
global TMPBmpTmpHeaderColor TMPBmpTmpDataColor TMPBmp24TmpDataColor TMPBmpTmpColormapColor TMPBmpColorBarColor TMPColorMapBMPColor
global TMPAirsarConfig TMPEsarConfig TMPFsarConfig TMPPisarConfig TMPTopsarConfig TMPSIRCConfig TMPALOSConfig TMPCSKConfig TMPCSKTmp TMPCSKBatchRun TMPCSKBinary1 TMPCSKBinary2
global TMPRadarsat2Config TMPTerrasarxConfig TMPTANDEMXConfig TMPTANDEMXConfigMaster TMPTANDEMXConfigSlave TMPUavsarConfig TMPRISATConfig TMPSentinel1Config
global TMPAirsarFstHeader TMPAirsarParHeader TMPAirsarCalHeader TMPAirsarDemHeader
global TMPAsarConfig TMPAsarHeaderTxt TMPAsarHeaderBin TMPAsarFormat 
global TMPQuickLookDir TMPQuickLookRawbin TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookTandemX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC TMPQuickLookSethi TMPQuickLookUavsar
global TMPQuickLookRisat TMPQuickLookSentinel1
global TMPEnviList TMPEnviListTmp TMPFFTfile TMPSyntBmp TMPSyntBlue TMPSyntGreen TMPSyntRed
global TMPCopolSigTxt TMPCopolSigBin TMPXpolSigTxt TMPXpolSigBin
global TMPRawSpectrumTxt TMPAvgSpectrumTxt TMPRawSpectrumBin TMPAvgSpectrumBin
global TMPCalibratorTxt TMPCalibratorBin TMPCalibratorValTxt TMPCalibratorValBin
global TMPCalibrator3Ds11Txt TMPCalibrator3Ds12Txt TMPCalibrator3Ds21Txt TMPCalibrator3Ds22Txt
global TMPCalibrator3Ds11Bin TMPCalibrator3Ds12Bin TMPCalibrator3Ds21Bin TMPCalibrator3Ds22Bin
global TMPStatisticsTxt TMPStatisticsBin TMPStatHistoTxt TMPStatResultsTxt TMPStatLabelTxt
global TMPStatisticsBin1 TMPStatHistoTxt1 TMPStatResultsTxt1
global TMPStatisticsBin2 TMPStatHistoTxt2 TMPStatResultsTxt2
global TMPCmplxPlaneTxt TMPLociCmplxPlaneTxt TMPLociCmplxPlaneLineTxt TMPLociCmplxPlaneLociTxt TMPLociCmplxPlaneTripletTxt
global TMPTreeClassRulesTxt TMPTreeClassPrmListTxt
global TMPProfileTxt TMPProfileXTxt TMPProfileYTxt TMPProfileXYTxt
global TMPProfileXBin TMPProfileYBin TMPProfileXYBin
global TMPProfile1DXBin TMPProfile1DYBin TMPProfile3DBin
global TMPCheckBinaryData TMPPolSARproSIM TMPPCTAsc TMPPCTBin TMPPCTBmp
global TMPDirectory TMPGoogle TMPCoRegTxt TMPBaselineTxt
global TMPClusterCenter8 TMPClusterCenter16 TMPCompareBinaryData
global TMPMapReadyGeocodeCfg TMPMapReadyGeocodeLog TMPMapReadyGeocodeStatusStatus TMPMapReadyGeocodeStatusFiles TMPMapReadyGeocodeProj
global TMPMapReadyMatrixCfg TMPMapReadyMatrixLog TMPMapReadyMatrixStatusStatus TMPMapReadyMatrixStatusFiles TMPMapReadyMatrixProj
global TMPMapReadyParameterCfg TMPMapReadyParameterLog TMPMapReadyParameterStatusStatus TMPMapReadyParameterStatusFiles TMPMapReadyParameterProj
global TMPMapReadyGeocodingCfg TMPMapReadyGeocodingMeta TMPMapReadyGeocodingImg TMPMapReadyGeocodingHdr
global TMPMapReadyImportCfg TMPMapReadyImportMeta TMPMapReadyImportImg TMPMapReadyImportHdr
global TMPMapReadyImportUnscaledCfg TMPMapReadyImportUnscaledMeta TMPMapReadyImportUnscaledImg TMPMapReadyImportUnscaledHdr
global TMPMapReadyPolarimetryCfg TMPMapReadyPolarimetryMeta TMPMapReadyPolarimetryImg TMPMapReadyPolarimetryHdr
global TMPSNAPBatchCfg TMPSNAPBatchOut TMPSNAPBatchRun TMPSNAPBatchDir TMPSNAPConfigTxt
global TMPFileNull TMPMaskROIarea TMPMaskROIbin TMPMaskROItxt 
global TMPGnuPlotTk1 TMPGnuPlotTk2 TMPGnuPlotTk3 TMPGnuPlotTk4 TMPGnuPlotTk5 TMPGnuPlotTk6 TMPGnuPlotTk7 TMPGnuPlotTk8 TMPGnuPlotTk9
global TMPGnuPlot1Tk TMPGnuPlot2Tk TMPGnuPlot3Tk TMPGnuPlot4Tk TMPGnuPlot5Tk TMPGnuPlot6Tk TMPGnuPlot7Tk TMPGnuPlot8Tk TMPGnuPlot9Tk
global TMPFileKmlBin TMPFileKmlHdr TMPFileKmlBlueBin TMPFileKmlBlueHdr TMPFileKmlGreenBin TMPFileKmlGreenHdr TMPFileKmlRedBin TMPFileKmlRedHdr
global TMPScatterPlotFileOutputXtxt TMPScatterPlotFileOutputXbin TMPScatterPlotFileOutputYtxt TMPScatterPlotFileOutputYbin
global TMPScatterPlotFileOutputXYtxt TMPScatterPlotFileOutputXYbin TMPDecompDir TMPMemoryAllocError
global TMPPSPCalcDirResult1 TMPPSPCalcDirResult2 TMPPSPCalcDirResult3 TMPPSPCalcMatSU TMPPSPCalcMatX0 TMPPSPCalcMatX1 TMPPSPCalcMatX2
global TMPPTOMDisplayFileOutputXtxt TMPPTOMDisplayFileOutputXbin TMPPTOMDisplayFileOutputXYtxt TMPPTOMDisplayFileOutputXYbin

DeleteFile $TMPTmp

DeleteFile $TMPMinMaxBmp
DeleteFile $TMPBmpTmpHeader
DeleteFile $TMPBmpTmpData
DeleteFile $TMPBmp24TmpData
DeleteFile $TMPColorMapBMP
DeleteFile $TMPBmpTmpColormap
DeleteFile $TMPBmpColorBar
DeleteFile $TMPBmpTmpHeaderGray
DeleteFile $TMPBmpTmpDataGray
DeleteFile $TMPBmp24TmpDataGray
DeleteFile $TMPColorMapBMPGray
DeleteFile $TMPBmpTmpColormapGray
DeleteFile $TMPBmpColorBarGray
DeleteFile $TMPBmpTmpHeaderColor
DeleteFile $TMPBmpTmpDataColor
DeleteFile $TMPBmp24TmpDataColor
DeleteFile $TMPColorMapBMPColor
DeleteFile $TMPBmpTmpColormapColor
DeleteFile $TMPBmpColorBarColor
DeleteFile $TMPBmpTmp
DeleteFile $TMPBmpTmpHeader_2
DeleteFile $TMPBmpTmpData_2
DeleteFile $TMPBmp24TmpData_2
DeleteFile $TMPColorMapBMP_2
DeleteFile $TMPBmpTmpColormap_2
DeleteFile $TMPBmpColorBar_2
DeleteFile $TMPAirsarConfig
DeleteFile $TMPAirsarFstHeader
DeleteFile $TMPAirsarParHeader
DeleteFile $TMPAirsarCalHeader
DeleteFile $TMPAirsarDemHeader
DeleteFile $TMPTopsarConfig
DeleteFile $TMPUavsarConfig
DeleteFile $TMPSIRCConfig
DeleteFile $TMPALOSConfig
DeleteFile $TMPRISATConfig
DeleteFile $TMPEsarConfig
DeleteFile $TMPFsarConfig
DeleteFile $TMPPisarConfig
DeleteFile $TMPAsarConfig
DeleteFile $TMPAsarHeaderTxt
DeleteFile $TMPAsarHeaderBin
DeleteFile $TMPAsarFormat
DeleteFile $TMPCSKConfig
DeleteFile $TMPCSKTmp
DeleteFile $TMPCSKBatchRun
DeleteFile $TMPCSKBinary1
DeleteFile $TMPCSKBinary2
DeleteFile $TMPRadarsat2Config
DeleteFile $TMPSentinel1Config
DeleteFile $TMPTerrasarxConfig
DeleteFile $TMPTANDEMXConfig
DeleteFile $TMPTANDEMXConfigMaster
DeleteFile $TMPTANDEMXConfigSlave
DeleteFile $TMPQuickLookRawbin
DeleteFile $TMPQuickLookAlos
DeleteFile $TMPQuickLookAsar
DeleteFile $TMPQuickLookCSK
DeleteFile $TMPQuickLookRadarsat2
DeleteFile $TMPQuickLookRisat
DeleteFile $TMPQuickLookSentinel1
DeleteFile $TMPQuickLookTerrasarX
DeleteFile $TMPQuickLookTandemX
DeleteFile $TMPQuickLookSirc
DeleteFile $TMPQuickLookAirsar
DeleteFile $TMPQuickLookConvair
DeleteFile $TMPQuickLookEmisar
DeleteFile $TMPQuickLookEsar
DeleteFile $TMPQuickLookFsar
DeleteFile $TMPQuickLookPisarMGPC
DeleteFile $TMPQuickLookPisarMGPSSC
DeleteFile $TMPQuickLookSethi
DeleteFile $TMPQuickLookUavsar
DeleteFile $TMPEnviList
DeleteFile $TMPEnviListTmp
DeleteFile $TMPFFTfile
DeleteFile $TMPSyntBmp
DeleteFile $TMPSyntBlue
DeleteFile $TMPSyntGreen
DeleteFile $TMPSyntRed
DeleteFile $TMPCopolSigTxt
DeleteFile $TMPCopolSigBin
DeleteFile $TMPXpolSigTxt
DeleteFile $TMPXpolSigBin
DeleteFile $TMPRawSpectrumTxt
DeleteFile $TMPAvgSpectrumTxt
DeleteFile $TMPRawSpectrumBin
DeleteFile $TMPAvgSpectrumBin
DeleteFile $TMPCalibratorTxt
DeleteFile $TMPCalibratorBin
DeleteFile $TMPCalibratorValTxt
DeleteFile $TMPCalibratorValBin
DeleteFile $TMPCalibrator3Ds11Txt
DeleteFile $TMPCalibrator3Ds12Txt
DeleteFile $TMPCalibrator3Ds21Txt
DeleteFile $TMPCalibrator3Ds22Txt
DeleteFile $TMPCalibrator3Ds11Bin
DeleteFile $TMPCalibrator3Ds12Bin
DeleteFile $TMPCalibrator3Ds21Bin
DeleteFile $TMPCalibrator3Ds22Bin
DeleteFile $TMPStatisticsTxt
DeleteFile $TMPStatisticsBin
DeleteFile $TMPStatHistoTxt
DeleteFile $TMPStatResultsTxt
DeleteFile $TMPStatLabelTxt
DeleteFile $TMPStatisticsBin1
DeleteFile $TMPStatHistoTxt1
DeleteFile $TMPStatResultsTxt1
DeleteFile $TMPStatisticsBin2
DeleteFile $TMPStatHistoTxt2
DeleteFile $TMPStatResultsTxt2
DeleteFile $TMPCmplxPlaneTxt
DeleteFile $TMPLociCmplxPlaneTxt
DeleteFile $TMPLociCmplxPlaneLineTxt
DeleteFile $TMPLociCmplxPlaneLociTxt
DeleteFile $TMPLociCmplxPlaneTripletTxt
DeleteFile $TMPTreeClassRulesTxt
DeleteFile $TMPTreeClassPrmListTxt
DeleteFile $TMPProfileTxt
DeleteFile $TMPProfileXTxt
DeleteFile $TMPProfileXBin
DeleteFile $TMPProfileYTxt
DeleteFile $TMPProfileYBin
DeleteFile $TMPProfileXYTxt
DeleteFile $TMPProfileXYBin
DeleteFile $TMPProfile1DXBin
DeleteFile $TMPProfile1DYBin
DeleteFile $TMPProfile3DBin
DeleteFile $TMPCheckBinaryData
DeleteFile $TMPPolSARproSIM
DeleteFile $TMPPCTAsc
DeleteFile $TMPPCTBin
DeleteFile $TMPPCTBmp
DeleteFile $TMPGoogle
DeleteFile $TMPCoRegTxt
DeleteFile $TMPBaselineTxt
DeleteFile $TMPClusterCenter8
DeleteFile $TMPClusterCenter16
DeleteFile "$TMPCompareBinaryData.txt"
DeleteFile "$TMPCompareBinaryData.bin"
DeleteFile "$TMPCompareBinaryData.bmp"

set TMPCBD $TMPCompareBinaryData; append TMPCBD "s11.bin"; DeleteFile $TMPCBD 
set TMPCBD $TMPCompareBinaryData; append TMPCBD "s12.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "s21.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "s22.bin"; DeleteFile $TMPCBD

set TMPCBD $TMPCompareBinaryData; append TMPCBD "I11.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "I12.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "I21.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "I22.bin"; DeleteFile $TMPCBD

set TMPCBD $TMPCompareBinaryData; append TMPCBD "C11.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C12_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C12_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C13_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C13_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C14_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C14_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C22.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C23_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C23_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C24_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C24_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C33.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C34_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C34_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "C44.bin"; DeleteFile $TMPCBD

set TMPCBD $TMPCompareBinaryData; append TMPCBD "T11.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T12_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T12_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T13_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T13_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T14_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T14_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T15_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T15_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T16_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T16_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T22.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T23_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T23_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T24_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T24_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T25_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T25_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T26_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T26_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T33.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T34_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T34_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T35_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T35_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T36_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T36_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T44.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T45_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T45_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T46_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T46_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T55.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T56_real.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T56_imag.bin"; DeleteFile $TMPCBD
set TMPCBD $TMPCompareBinaryData; append TMPCBD "T66.bin"; DeleteFile $TMPCBD

DeleteFile $TMPMapReadyGeocodeCfg
DeleteFile $TMPMapReadyGeocodeLog
DeleteFile $TMPMapReadyGeocodeStatusStatus
DeleteFile $TMPMapReadyGeocodeStatusFiles
DeleteFile $TMPMapReadyGeocodeProj
DeleteFile $TMPMapReadyMatrixCfg
DeleteFile $TMPMapReadyMatrixLog
DeleteFile $TMPMapReadyMatrixStatusStatus
DeleteFile $TMPMapReadyMatrixStatusFiles
DeleteFile $TMPMapReadyMatrixProj
DeleteFile $TMPMapReadyParameterCfg
DeleteFile $TMPMapReadyParameterLog
DeleteFile $TMPMapReadyParameterStatusStatus
DeleteFile $TMPMapReadyParameterStatusFiles
DeleteFile $TMPMapReadyParameterProj
DeleteFile $TMPMapReadyGeocodingCfg
DeleteFile $TMPMapReadyGeocodingMeta
DeleteFile $TMPMapReadyGeocodingImg
DeleteFile $TMPMapReadyGeocodingHdr
DeleteFile $TMPMapReadyImportCfg
DeleteFile $TMPMapReadyImportMeta
DeleteFile $TMPMapReadyImportImg
DeleteFile $TMPMapReadyImportHdr
DeleteFile $TMPMapReadyImportUnscaledCfg
DeleteFile $TMPMapReadyImportUnscaledMeta
DeleteFile $TMPMapReadyImportUnscaledImg
DeleteFile $TMPMapReadyImportUnscaledHdr
DeleteFile $TMPMapReadyPolarimetryCfg
DeleteFile $TMPMapReadyPolarimetryMeta
DeleteFile $TMPMapReadyPolarimetryImg
DeleteFile $TMPMapReadyPolarimetryHdr

DeleteFile $TMPSNAPBatchCfg
DeleteFile $TMPSNAPBatchOut
DeleteFile $TMPSNAPBatchRun
DeleteFile "$TMPDir/target.bin"
DeleteFile "$TMPDir/target.bin.hdr"
#DeleteFile "$TMPDir/target.dim"
DeleteDir "$TMPDir/target"
DeleteFile $TMPSNAPConfigTxt

DeleteFile $TMPMaskROIarea
DeleteFile $TMPMaskROIbin
DeleteFile $TMPMaskROItxt

DeleteFile $TMPGnuPlotTk1
DeleteFile $TMPGnuPlotTk2
DeleteFile $TMPGnuPlotTk3
DeleteFile $TMPGnuPlotTk4
DeleteFile $TMPGnuPlotTk5
DeleteFile $TMPGnuPlotTk6
DeleteFile $TMPGnuPlotTk7
DeleteFile $TMPGnuPlotTk8
DeleteFile $TMPGnuPlotTk9
DeleteFile $TMPGnuPlot1Tk
DeleteFile $TMPGnuPlot2Tk
DeleteFile $TMPGnuPlot3Tk
DeleteFile $TMPGnuPlot4Tk
DeleteFile $TMPGnuPlot5Tk
DeleteFile $TMPGnuPlot6Tk
DeleteFile $TMPGnuPlot7Tk
DeleteFile $TMPGnuPlot8Tk
DeleteFile $TMPGnuPlot9Tk

DeleteFile $TMPFileNull

DeleteFile $TMPFileKmlBin
DeleteFile $TMPFileKmlHdr
DeleteFile $TMPFileKmlBlueBin
DeleteFile $TMPFileKmlBlueHdr
DeleteFile $TMPFileKmlGreenBin
DeleteFile $TMPFileKmlGreenHdr
DeleteFile $TMPFileKmlRedBin
DeleteFile $TMPFileKmlRedHdr

DeleteFile $TMPScatterPlotFileOutputXtxt
DeleteFile $TMPScatterPlotFileOutputXbin
DeleteFile $TMPScatterPlotFileOutputYtxt
DeleteFile $TMPScatterPlotFileOutputYbin
DeleteFile $TMPScatterPlotFileOutputXYtxt
DeleteFile $TMPScatterPlotFileOutputXYbin

DeleteFile $TMPPTOMDisplayFileOutputXtxt
DeleteFile $TMPPTOMDisplayFileOutputXbin
DeleteFile $TMPPTOMDisplayFileOutputXYtxt
DeleteFile $TMPPTOMDisplayFileOutputXYbin

DeleteFile $TMPPSPCalcMatSU
DeleteFile $TMPPSPCalcMatX0
DeleteFile $TMPPSPCalcMatX1
DeleteFile $TMPPSPCalcMatX2

DeleteFile $TMPMemoryAllocError

DeleteDir $TMPDirectory
}
#############################################################################
## Procedure:  MenuEnv

proc ::MenuEnv {} {
global ActiveProgram
global ALOSDataFormat RADARSAT2DataFormat
global TERRASARXDataFormat TERRASARXDataLevel
global TANDEMXDataFormat TANDEMXDataLevel
global SIRCDataFormatPol CSKDataFormat RISATDataFormat SENTINEL1DataFormat
global Load_Environment Load_EnvironmentDual Load_EnvironmentMult

#Label Vide
#ENVSNGL
.top2.fra71.fra75.cpd74 configure -text ""
.top2.fra71.fra75.cpd74 configure -state disable
#ENVDUAL
.top2.fra71.fra75.cpd73 configure -text ""
.top2.fra71.fra75.cpd73 configure -state disable
#ENVMULT
.top2.fra71.fra75.cpd67 configure -text ""
.top2.fra71.fra75.cpd67 configure -state disable

if {$ActiveProgram == ""} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state disable
    }
    
if {$ActiveProgram == "POLINSAR"} {
    .top2.fra71.fra75.cpd73 configure -text "Environment"
    .top2.fra71.fra75.cpd73 configure -state normal
    }

if {$ActiveProgram == "POLMULT"} {
    .top2.fra71.fra75.cpd67 configure -text "Environment"
    .top2.fra71.fra75.cpd67 configure -state normal
    }

if {$ActiveProgram == "POLSARPRO"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    }

if {$ActiveProgram == "ASAR"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    }
    
#EOSI - DUAL-GROUND TopLevel(7)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "dual1.5"} { set config "true"}
    if {$ALOSDataFormat == "quad1.5"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "dual1.5"} { set config "true"}
    if {$ALOSDataFormat == "quad1.5"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "dual"} {
        if {$TERRASARXDataLevel != "SSC"} { set config "true"}
        }
    }
if {$config == "true"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    }

#EOSI - DUAL-SLANT TopLevel(8)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "dual1.1"} { set config "true"}
    if {$ALOSDataFormat == "dual1.1vex"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "dual1.1"} { set config "true"}
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKDataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2DataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "dual1.1"} { set config "true"}
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1DataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "dual"} {
        if {$TERRASARXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXDataFormat == "dual"} {
        if {$TANDEMXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCDataFormatPol == "dual"} { set config "true"}
    }
if {$config == "true"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    }

#EOSI - QUAD TopLevel(5)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "quad1.1"} { set config "true"}
    if {$ALOSDataFormat == "quad1.1vex"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "quad1.1"} { set config "true"}
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2DataFormat == "quad"} { set config "true"}
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "quad1.1"} { set config "true"}
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCDataFormatPol == "quad"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "quad"} {
        if {$TERRASARXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "AIRSAR"} { set config "true"}
if {$ActiveProgram == "CONVAIR"} { set config "true"}
if {$ActiveProgram == "EMISAR"} { set config "true"}
if {$ActiveProgram == "ESAR"} { set config "true"}
if {$ActiveProgram == "FSAR"} { set config "true"}
if {$ActiveProgram == "PISAR"} { set config "true"}
if {$ActiveProgram == "SETHI"} { set config "true"}
if {$ActiveProgram == "UAVSAR"} { set config "true"}
if {$config == "true"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    }                
}
#############################################################################
## Procedure:  MenuRAZ

proc ::MenuRAZ {} {
global couleur_fond DataFormatActive
global ImgMenuPSP ImgMenuALOS ImgMenuALOS2 
global ImgMenuRISAT ImgMenuRCM ImgMenuS1A 
global ImgMenuRAD2 ImgMenuTSX ImgMenuSPACEBORNE
global ImgMenuAIRSAR ImgMenuAIRBORNE ImgMenuESAR
global ImgMenuSETHI ImgMenuUAVSAR ImgMenuCSK ImgMenuTDX

#Couleur Fond Boutons PSP Spaceborne et Airborne
#PSP
set cc .top2.cpd73.cpd79.men73; $cc configure -background $couleur_fond
$cc configure -image ImgMenuPSP
#ALOS
set cc .top2.cpd73.fra23.men72; $cc configure -background $couleur_fond
$cc configure -image ImgMenuALOS
#ALOS2
set cc .top2.cpd73.fra23.men67; $cc configure -background $couleur_fond
$cc configure -image ImgMenuALOS2
#ASAR - SIRC - SPACEBORNE
set cc .top2.cpd73.fra23.men75; $cc configure -background $couleur_fond
$cc configure -image ImgMenuSPACEBORNE
#CSK
set cc .top2.cpd73.fra23.cpd66; $cc configure -background $couleur_fond
$cc configure -image ImgMenuCSK
#RADARSAT2
set cc .top2.cpd73.fra23.men71; $cc configure -background $couleur_fond
$cc configure -image ImgMenuRAD2
#RCM
set cc .top2.cpd73.fra23.cpd68; $cc configure -background $couleur_fond
$cc configure -image ImgMenuRCM
#RISAT
set cc .top2.cpd73.fra23.cpd70; $cc configure -background $couleur_fond
$cc configure -image ImgMenuRISAT
#SENTINEL1
set cc .top2.cpd73.fra23.cpd67; $cc configure -background $couleur_fond
$cc configure -image ImgMenuS1A
#TERRASARX
set cc .top2.cpd73.fra23.men74; $cc configure -background $couleur_fond
$cc configure -image ImgMenuTSX
#TANDEMX
set cc .top2.cpd73.fra23.cpd69; $cc configure -background $couleur_fond
$cc configure -image ImgMenuTDX
#AIRSAR
set cc .top2.cpd73.fra29.but24; $cc configure -background $couleur_fond
$cc configure -image ImgMenuAIRSAR
#CONVAIR - EMISAR - PISAR
set cc .top2.cpd73.fra29.men67; $cc configure -background $couleur_fond
$cc configure -image ImgMenuAIRBORNE
#ESAR
set cc .top2.cpd73.fra29.men66; $cc configure -background $couleur_fond
$cc configure -image ImgMenuESAR
#SETHI
set cc .top2.cpd73.fra29.but23; $cc configure -background $couleur_fond
$cc configure -image ImgMenuSETHI
#UAVSAR
set cc .top2.cpd73.fra29.cpd66; $cc configure -background $couleur_fond
$cc configure -image ImgMenuUAVSAR

MenuOff
}
#############################################################################
## Procedure:  OpenCloseProgressBar

proc ::OpenCloseProgressBar {ProgressFile} {
global ProgressLine FunctionAbort

set FunctionAbort "ok"
set FlagStop 0
fconfigure $ProgressFile -buffering line
set ProgLine .top345.pro35
while {$FlagStop == 0} {
    if {$FunctionAbort != "abort"} {
        if {![eof $ProgressFile]} {
            gets $ProgressFile ProgressLine
            set n [expr {$ProgressLine < 0? 0: $ProgressLine > 100? 100: int($ProgressLine)}]
            if {$n < 100} {
                set Red   [expr {$n > 75? 60 - $n * 15 / 25 : 15}]
                set Green [expr {$n < 50? $n * 15 / 50 : 15}]
                set couleur [format #%01x%01x0 $Red $Green]
                $ProgLine configure -color $couleur
                }
            update
            } else {
            set FlagStop 1
            catch "close $ProgressFile"
            }
        } else {
        set FlagStop 2
        catch "close $ProgressFile"
        }
    }
}
#############################################################################
## Procedure:  EnviWriteConfigClassif

proc ::EnviWriteConfigClassif {EnviFile EnviNlig EnviNcol EnviType EnviColorMap EnviNColor} {
global ENVIConfigFile MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit

for {set i 0} {$i <= 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set f [open $EnviColorMap r]
gets $f tmp
gets $f tmp
gets $f ColorNumber
for {set i 1} {$i <= $ColorNumber} {incr i} {
    gets $f couleur
    set RedPalette($i) [lindex $couleur 0]
    set GreenPalette($i) [lindex $couleur 1]
    set BluePalette($i) [lindex $couleur 2]
    }
close $f

if {$ENVIConfigFile == 1} {
    if [file exists $EnviFile] {
        set EnviNameHdr $EnviFile
        append EnviNameHdr ".hdr"
        set EnviName [file tail $EnviFile]
        set f [open $EnviNameHdr w]
        puts $f "ENVI"
        puts $f "description = {"
        puts $f "PolSARpro File Imported to ENVI}"
        puts $f "samples = $EnviNcol"
        puts $f "lines   = $EnviNlig"
        puts $f "bands   = 1"
        puts $f "header offset = 0"
        puts $f "file type = ENVI Classification"
        puts $f "data type = $EnviType"
        puts $f "interleave = bsq"
        if {$MapInfoActive == ""} { puts $f "sensor type = Unknown" }
        if {$MapInfoActive == "Unknown"} { puts $f "sensor type = Unknown" }
        if {$MapInfoActive == "ALOS"} { puts $f "sensor type = ALOS" }
        if {$MapInfoActive == "ALOS2"} { puts $f "sensor type = ALOS2" }
        if {$MapInfoActive == "CSK"} { puts $f "sensor type = COSMO-SKYMED" }
        if {$MapInfoActive == "RS2"} { puts $f "sensor type = RADARSAT2" }
        if {$MapInfoActive == "RISAT"} { puts $f "sensor type = RISAT" }
        if {$MapInfoActive == "S1A"} { puts $f "sensor type = SENTINEL1" }
        if {$MapInfoActive == "TSX"} { puts $f "sensor type = TerraSAR-X" }
        if {$MapInfoActive == "Other"} { puts $f "sensor type = Other" }
        puts $f "byte order = 0"
        if {$MapInfoActive != ""} {
            puts $f $MapInfoMapInfo
            if {$MapInfoProjInfo != ""} { puts $f $MapInfoProjInfo }
            puts $f $MapInfoUnit
            }
        set EnviNColorp1 [expr $EnviNColor + 1]
        puts $f "classes = $EnviNColorp1"
        puts $f "class lookup = {$RedPalette(1), $GreenPalette(1), $BluePalette(1),"
        for {set i 2} {$i < $EnviNColorp1} {incr i} { puts $f "$RedPalette($i), $GreenPalette($i), $BluePalette($i)," }
        puts $f "$RedPalette($EnviNColorp1), $GreenPalette($EnviNColorp1), $BluePalette($EnviNColorp1) }"
        puts $f "class names = {"
        puts $f "Unclassified"
        for {set i 1} {$i <= $EnviNColor} {incr i} { puts $f "Class $i," }
        puts $f "Class $EnviNColor }" 
        puts $f "band names = {"
        puts $f "$EnviName }"
        close $f
        
        set EnviDir [file dirname $EnviFile]
        set MaskFile "$EnviDir/mask_valid_pixels.bin"
        if [file exists $MaskFile] {
            WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
            set ProgressLine "0"
            update
            TextEditorRunTrace "Process The Function apply_mask_valid_pixels.exe" "k"
            TextEditorRunTrace "Arguments: -bf \x22$EnviFile\x22 -mf \x22$MaskFile\x22 -iodf $EnviType -fnr $EnviNlig -fnc $EnviNcol" "k"
            set f [ open "| Soft/tools/apply_mask_valid_pixels.exe -bf \x22$EnviFile\x22 -mf \x22$MaskFile\x22 -iodf $EnviType -fnr $EnviNlig -fnc $EnviNcol" r]
            PsPprogressBar $f
            TextEditorRunTrace "Check RunTime Errors" "r"
            CheckRunTimeError
            WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
            }     
        }
    }
}
#############################################################################
## Procedure:  Gimp

proc ::Gimp {Title} {
global wshGimp GimpReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

if [file exists $Title] {
    if [file exists $GimpReader] {
        if {$PlatForm == "windows"} {
            package require tcom
            set wshGimp [::tcom::ref createobject "WScript.Shell"]
            set taskIdGimp [$wshGimp Run "\x22$GimpReader\x22 \x22$Title\x22"]
            }
        if {$PlatForm == "unix"} {set taskIdGimp [ open "| \x22$GimpReader\x22 \x22$Title\x22" r]}
        } else {
        #error message
        set VarError ""
        set ErrorMessage "GIMP VIEWER APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "GIMP VIEWER APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "GIMP"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "gimp-2.6"
            set ConfigFileNameList "gimp-2.6"
            .top341.fra74.lab76 configure -text "GIMP"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/GIMPshortcut.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration GIMP VIEWER Software" "b"
            tkwait variable VarConfigFileName 
            }        
        }
    } else {
    Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"
    }
}
#############################################################################
## Procedure:  Snap

proc ::Snap {Title} {
global wshSnap SnapReader SnapRun PlatForm ImageConfig DataDirInit VarConfigFileName 
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar CONFIGDir
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

if [file exists $Title] {
    if [file exists $SnapReader] {
        set VarWarning "ok"
        if {$SnapRun == 1} {
            set WarningMessage "SNAP S1-TBX APPLICATION IS ALREADY RUNNING"
            set WarningMessage2 "LAUNCH ANOTHER SNAP S1-TBX APPLICATION ?"
            set VarWarning ""
            Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning
            }
        if {$VarWarning == "ok"} {
            if {$PlatForm == "windows"} {
                package require tcom

                #Snap Batch Configuration
                set f [open "$CONFIGDir/SnapBatch.bat" w]
                set SnapPath "C:"
                puts $f $SnapPath
                set SnapPath "cd \x22"
                set SnapPathTmp [file dirname $SnapReader]
                set LengthSnapPath [string length $SnapPathTmp]
                for {set i 0} {$i <= $LengthSnapPath} {incr i} {
                    set lettre [string range $SnapPathTmp $i $i]
                    if {$lettre == "/"} { set lettre "\\" }
                    append SnapPath $lettre
                    }
                append SnapPath "\x22"
                puts $f $SnapPath
                set SnapExe [file tail $SnapReader]
                #append SnapExe " %1"
                puts $f $SnapExe
                close $f
                }
            if {$PlatForm == "unix"} {
                #Snap Batch Configuration
                set f [open "$CONFIGDir/SnapBatch.bat" w]
                set SnapPath "cd \x22"
                append SnapPath [file dirname $SnapReader]
                append SnapPath "\x22"
                puts $f $SnapPath
                set SnapExe [file tail $SnapReader]
                puts $f $SnapExe
                close $f
                }
            set taskIdSnap [ open "| \x22$CONFIGDir/SnapBatch.bat\x22" r]
            set SnapRun 1
            }
        } else {
        #error message
        set VarError ""
        set ErrorMessage "SNAP S1-TBX APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "SNAP S1-TBX APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "SNAP"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "s1tbx"
            set ConfigFileNameList "s1tbx"
            .top341.fra74.lab76 configure -text "SNAP S1-TBX"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/SNAPshortcut.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration SNAP Software" "b"
            tkwait variable VarConfigFileName 
            }        
        }
    } else {
    Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"
    }
}
#############################################################################
## Procedure:  Dem_Kml

proc ::Dem_Kml {Title} {
global DEMNlig DEMNcol
global DEMLatCenter DEMLongCenter DEMLat00 DEMLong00 DEMLat0N DEMLong0N
global DEMLatN0 DEMLongN0 DEMLatNN DEMLongNN DEMWest DEMEast DEMNorth DEMSouth

if [file exists "$Title/DEM.bmp"] {
    set f [open "$Title/DEM.kml" w]
    puts $f "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    puts $f "<kml xmlns=\"http://earth.google.com/kml/2.0\">"
    puts $f "<GroundOverlay>"
    puts $f "<name>"; puts $f "$Title/DEM.bmp"; puts $f "</name>"
    puts $f "<Icon>"
    puts $f "<href>"; puts $f "$Title/DEM.bmp"; puts $f "</href>"
    puts $f "<viewBoundScale>0.75</viewBoundScale>"
    puts $f "</Icon>"
    puts $f "<LatLonBox>"
    puts $f "<north>"; puts $f $DEMNorth; puts $f "</north>"
    puts $f "<south>"; puts $f $DEMSouth; puts $f "</south>"
    puts $f "<west>"; puts $f $DEMWest; puts $f "</west>"
    puts $f "<east>"; puts $f $DEMEast; puts $f "</east>"
    puts $f "<rotation>0.0</rotation>"
    puts $f "</LatLonBox>"
    puts $f "</GroundOverlay>"
    puts $f "</kml>"
    close $f
    }
}
#############################################################################
## Procedure:  CheckDataDirMult

proc ::CheckDataDirMult {} {
global NDataDirMult LoadDataDirMult SaveDataDirMult TestDataDirMult
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

set TestDataDirMult "OK"

if {$NDataDirMult == 1 } {
    set WarningMessage "THE NUMBER OF MULTI TIME / FREQ"
    set WarningMessage2 "DIRECTORIES MUST BE GREATER THAN 1"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set TestDataDirMult ""
    } else {
    if {$LoadDataDirMult == 0 } {
        if {$SaveDataDirMult == 0 } {
            set WarningMessage "THE MULTI TIME / FREQ DIRECTORIES"
            set WarningMessage2 "SELECTION MUST BE SAVED BEFORE PROCESSING"
            set VarWarning ""
            Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning
            set TestDataDirMult ""
            }
        }
    }
        
}
#############################################################################
## Procedure:  WriteConfigMult

proc ::WriteConfigMult {} {
global DataDirMultActive DataDirMult NDataDirMultActive NDataDirMult
global DataDirInit SaveDataDirMult ConfigMultFile FormatDataDirMult

if {$NDataDirMult > 1} {
    set ConfigMultFile "$DataDirMult(1)/config_mult.txt"
    set f [open $ConfigMultFile w]
    puts $f $NDataDirMult
    puts $f $FormatDataDirMult
    for {set ii 1} {$ii <= $NDataDirMult} {incr ii} {
        puts $f $DataDirMult($ii)
        }
    close $f
    set DataDirMultActive $DataDirMult(1)
    set SaveDataDirMult 1
    } else {
    set SaveDataDirMult 0
    }
}
#############################################################################
## Procedure:  LoadConfigMult

proc ::LoadConfigMult {} {
global DataDirMultActive DataDirMult NDataDirMultActive NDataDirMult
global MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global ConfigMultFile DataDirInit LoadDataDirMult SaveDataDirMult FormatDataDirMult

set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""

set NDataDirMult 0
set ConfigMultFile "$DataDirMult(1)/config_mult.txt"
if [file exists $ConfigMultFile] {
    set f [open $ConfigMultFile r]
    if {![eof $f]} {
        gets $f NDataDirMult
        gets $f FormatDataDirMult
        for {set ii 1} {$ii <= $NDataDirMult} {incr ii} { gets $f DataDirMult($ii) }
        }
    close $f
    }
if {$NDataDirMult != 0 } {
    set DataDirMultActive $DataDirMult(1)
    set LoadDataDirMult 1
    set SaveDataDirMult 1
    } else {
    set DataDirActive $DataDirInit
    set LoadDataDirMult 0
    set SaveDataDirMult 0
    set NDataDirMult 1
    }
    
set MapInfoConfigFile "$DataDirMult(1)/config_mapinfo.txt" 
if [file exists $MapInfoConfigFile] { MapInfoReadConfig $MapInfoConfigFile }

}
#############################################################################
## Procedure:  CheckEnvBinData

proc ::CheckEnvBinData {} {
global ActiveProgram ConfigFile PolarType
global DataDir DataDirChannel1 DataDirChannel2
global DataDirMult DataDirMultActive
global AsarDirInput AsarDirOutput AsarDataFormat FileInputAsar
global ConfigFile NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize
global PolarCase PolarType ErrorMessage FatalErrorMessage VarError
global Load_Environment Load_EnvironmentDual Load_EnvironmentMult

set CheckBinData "ko"

if {$ActiveProgram == "POLINSAR"} {
    set conf "0"
    if {$DataDirChannel1 != ""} { set conf "1" }
    if {$DataDirChannel2 != ""} { append conf "2" }
    if {$conf == "12"} {
        if {$DataDirChannel1 == $DataDirChannel2} {
            if [file isdirectory "$DataDirChannel1/T4"] {
                if [file exists "$DataDirChannel1/T4/config.txt"] {
                    set ConfigFile "$DataDirChannel1/T4/config.txt"; LoadConfig
                    if [file exists "$DataDirChannel1/T4/T11.bin"] { set CheckBinData "ok" }
                    }
                }            
            if [file isdirectory "$DataDirChannel1/T6"] {
                if [file exists "$DataDirChannel1/T6/config.txt"] {
                    set ConfigFile "$DataDirChannel1/T6/config.txt"; LoadConfig
                    if [file exists "$DataDirChannel1/T6/T11.bin"] { set CheckBinData "ok" }
                    }
                }            
            } else {
            set configmaster "Q"
            if {$DataDirChannel1 != ""} {
                if [file exists "$DataDirChannel1/config.txt"] {
                    set ConfigFile "$DataDirChannel1/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configmaster "Q"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s12.bin"] {append configmaster "2"}
                        if [file exists "$DataDirChannel1/s21.bin"] {append configmaster "3"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "4"}
                        }
                    if {$PolarType == "pp1"} {
                        set configmaster "D"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s21.bin"] {append configmaster "2"}
                        }
                    if {$PolarType == "pp2"} {
                        set configmaster "D"
                        if [file exists "$DataDirChannel1/s12.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "2"}
                        }
                    if {$PolarType == "pp3"} {
                        set configmaster "D"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "2"}
                        }
                    set NligFullSizeMaster $NligFullSize
                    set NcolFullSizeMaster $NcolFullSize
                    set PolarCaseMaster $PolarCase
                    set PolarTypeMaster $PolarType
                    }
                }            
            set configslave "Q"
            if {$DataDirChannel2 != ""} {
                if [file exists "$DataDirChannel2/config.txt"] {
                    set ConfigFile "$DataDirChannel2/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configslave "Q"
                        if [file exists "$DataDirChannel2/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s12.bin"] {append configslave "2"}
                        if [file exists "$DataDirChannel2/s21.bin"] {append configslave "3"}
                        if [file exists "$DataDirChannel2/s22.bin"] {append configslave "4"}
                        }
                    if {$PolarType == "pp1"} {
                        set configslave "D"
                        if [file exists "$DataDirChannel2/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s21.bin"] {append configslave "2"}
                        }
                    if {$PolarType == "pp2"} {
                        set configslave "D"
                        if [file exists "$DataDirChannel2/s12.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s22.bin"] {append configslave "2"}
                        }
                    if {$PolarType == "pp3"} {
                        set configslave "D"
                        if [file exists "$DataDirChannel2/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel2/s22.bin"] {append configslave "2"}
                        }
                    set NligFullSizeSlave $NligFullSize
                    set NcolFullSizeSlave $NcolFullSize
                    set PolarCaseSlave $PolarCase
                    set PolarTypeSlave $PolarType
                    }
                }        
            set config "0"
            if {$configmaster == "D12"} {append config "1"}
            if {$configslave == "D12"} {append config "2"}
            if {$configmaster == "Q1234"} {append config "1"}
            if {$configslave == "Q1234"} {append config "2"}
            if {$config == "012"} {
                set configmasterslave "0"
                if {$NligFullSizeMaster == $NligFullSizeSlave} {append configmasterslave "1"}
                if {$NcolFullSizeMaster == $NcolFullSizeSlave} {append configmasterslave "2"}
                if {$PolarCaseMaster == $PolarCaseSlave} {append configmasterslave "3"}
                if {$PolarTypeMaster == $PolarTypeSlave} {append configmasterslave "4"}
                if {$configmasterslave == "01234"} {
                    set CheckBinData "ok"
                    } else {
                    set ErrorMessage "INPUT DATA MUST HAVE THE SAME SIZE AND TYPE"
                    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
                    tkwait variable VarError
                    set ErrorMessage ""
                    } 
                }
            }
        }
    }
    
if {$ActiveProgram == "ASAR"} {
    set AsarDirInput $DataDir
    set AsarDirOutput $DataDir
    set FileInputAsar ""
    set ConfigFile "$AsarDirInput/config.txt"
    if [file exists $ConfigFile] {
        set ErrorMessage ""
        LoadConfig
        if {$PolarType == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            } else {    
            if {$PolarType == "pp1"} {set AsarDataFormat "APS"}
            if {$PolarType == "pp2"} {set AsarDataFormat "APS"}
            if {$PolarType == "pp3"} {set AsarDataFormat "APS"}
            if {$PolarType == "pp4"} {set AsarDataFormat "APP"}
            if {$PolarType == "pp5"} {set AsarDataFormat "APP"}
            if {$PolarType == "pp6"} {set AsarDataFormat "APP"}
            if {$PolarType == "pp7"} {set AsarDataFormat "APP"}
            set CheckBinData "ok"
            }
        } else {
        set ConfigFile "$AsarDirInput/C2/config.txt"
        if [file exists $ConfigFile] {
            set ErrorMessage ""
            LoadConfig
            if {$PolarType == "full"} {
                set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
                Window show .top44; TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                set ErrorMessage ""
                } else {    
                if {$PolarType == "pp1"} {set AsarDataFormat "APS"}
                if {$PolarType == "pp2"} {set AsarDataFormat "APS"}
                if {$PolarType == "pp3"} {set AsarDataFormat "APS"}
                if {$PolarType == "pp4"} {set AsarDataFormat "APP"}
                if {$PolarType == "pp5"} {set AsarDataFormat "APP"}
                if {$PolarType == "pp6"} {set AsarDataFormat "APP"}
                if {$PolarType == "pp7"} {set AsarDataFormat "APP"}
                set CheckBinData "ok"
                }
            }
        }
    }
    
set config "false"
if {$ActiveProgram == "POLSARPRO"} { set config "true"}
if {$ActiveProgram == "ALOS"} { set config "true"}
if {$ActiveProgram == "ALOS2"} { set config "true"}
if {$ActiveProgram == "CSK"} { set config "true"}
if {$ActiveProgram == "RADARSAT2"} { set config "true"}
if {$ActiveProgram == "RISAT"} { set config "true"}
if {$ActiveProgram == "SENTINEL1"} { set config "true"}
if {$ActiveProgram == "TERRASARX"} { set config "true"}
if {$ActiveProgram == "TANDEMX"} { set config "true"}
if {$ActiveProgram == "SIRC"} { set config "true"}
if {$ActiveProgram == "AIRSAR"} { set config "true"}
if {$ActiveProgram == "CONVAIR"} { set config "true"}
if {$ActiveProgram == "EMISAR"} { set config "true"}
if {$ActiveProgram == "ESAR"} { set config "true"}
if {$ActiveProgram == "FSAR"} { set config "true"}
if {$ActiveProgram == "PISAR"} { set config "true"}
if {$ActiveProgram == "SETHI"} { set config "true"}
if {$ActiveProgram == "UAVSAR"} { set config "true"}
if {$config == "true"} {
    set config "false"
    if [file exists "$DataDir/config.txt"] {
        set ConfigFile "$DataDir/config.txt"; LoadConfig
        if [file exists "$DataDir/s11.bin"] {set config "true"}
        if [file exists "$DataDir/s22.bin"] {set config "true"}
        if [file exists "$DataDir/I11.bin"] {set config "true"}
        if [file exists "$DataDir/I22.bin"] {set config "true"}
        }        
    if [file isdirectory "$DataDir/T2"] {
        if [file exists "$DataDir/T2/config.txt"] {
            set ConfigFile "$DataDir/T2/config.txt"; LoadConfig
            if [file exists "$DataDir/T2/T11.bin"] {set config "true"}
            }
        }            
    if [file isdirectory "$DataDir/T3"] {
        if [file exists "$DataDir/T3/config.txt"] {
            set ConfigFile "$DataDir/T3/config.txt"; LoadConfig
            if [file exists "$DataDir/T3/T11.bin"] {set config "true"}
            }
        }
    if [file isdirectory "$DataDir/T4"] {
        if [file exists "$DataDir/T4/config.txt"] {
            set ConfigFile "$DataDir/T4/config.txt"; LoadConfig
            if [file exists "$DataDir/T4/T11.bin"] {set config "true"}
            }
        }
    if [file isdirectory "$DataDir/C2"] {
        if [file exists "$DataDir/C2/config.txt"] {
            set ConfigFile "$DataDir/C2/config.txt"; LoadConfig
            if [file exists "$DataDir/C2/C11.bin"] {set config "true"}
            }
        }            
    if [file isdirectory "$DataDir/C3"] {
        if [file exists "$DataDir/C3/config.txt"] {
            set ConfigFile "$DataDir/C3/config.txt"; LoadConfig
            if [file exists "$DataDir/C3/C11.bin"] {set config "true"}
            }
        }            
    if [file isdirectory "$DataDir/C4"] {
        if [file exists "$DataDir/C4/config.txt"] {
            set ConfigFile "$DataDir/C4/config.txt"; LoadConfig
            if [file exists "$DataDir/C4/C11.bin"] {set config "true"}
            }
        }            
    if {$config == "true"} { set CheckBinData "ok" }
    }

if {$ActiveProgram == "POLMULT"} {
    set config "false"
    if [file exists "$DataDirMultActive/config.txt"] {
        set ConfigFile "$DataDirMultActive/config.txt"; LoadConfig
        if [file exists "$DataDirMultActive/s11.bin"] {set config "true"}
        if [file exists "$DataDirMultActive/s22.bin"] {set config "true"}
        if [file exists "$DataDirMultActive/I11.bin"] {set config "true"}
        if [file exists "$DataDirMultActive/I22.bin"] {set config "true"}
        }        
    if [file isdirectory "$DataDirMultActive/T2"] {
        if [file exists "$DataDirMultActive/T2/config.txt"] {
            set ConfigFile "$DataDirMultActive/T2/config.txt"; LoadConfig
            if [file exists "$DataDirMultActive/T2/T11.bin"] {set config "true"}
            }
        }            
    if [file isdirectory "$DataDirMultActive/T3"] {
        if [file exists "$DataDirMultActive/T3/config.txt"] {
            set ConfigFile "$DataDirMultActive/T3/config.txt"; LoadConfig
            if [file exists "$DataDirMultActive/T3/T11.bin"] {set config "true"}
            }
        }
    if [file isdirectory "$DataDirMultActive/T4"] {
        if [file exists "$DataDirMultActive/T4/config.txt"] {
            set ConfigFile "$DataDirMultActive/T4/config.txt"; LoadConfig
            if [file exists "$DataDirMultActive/T4/T11.bin"] {set config "true"}
            }
        }
    if [file isdirectory "$DataDirMultActive/C2"] {
        if [file exists "$DataDirMultActive/C2/config.txt"] {
            set ConfigFile "$DataDirMultActive/C2/config.txt"; LoadConfig
            if [file exists "$DataDirMultActive/C2/C11.bin"] {set config "true"}
            }
        }            
    if [file isdirectory "$DataDirMultActive/C3"] {
        if [file exists "$DataDirMultActive/C3/config.txt"] {
            set ConfigFile "$DataDirMultActive/C3/config.txt"; LoadConfig
            if [file exists "$DataDirMultActive/C3/C11.bin"] {set config "true"}
            }
        }            
    if [file isdirectory "$DataDirMultActive/C4"] {
        if [file exists "$DataDirMultActive/C4/config.txt"] {
            set ConfigFile "$DataDirMultActive/C4/config.txt"; LoadConfig
            if [file exists "$DataDirMultActive/C4/C11.bin"] {set config "true"}
            }
        }            
    if {$config == "true"} { set CheckBinData "ok" }
    }
}
#############################################################################
## Procedure:  MapReady

proc ::MapReady {Fonction} {
global TMPMapReadyGeocodeCfg TMPMapReadyGeocodeLog TMPMapReadyMatrixCfg TMPMapReadyMatrixLog TMPMapReadyParameterCfg TMPMapReadyParameterLog

global wshMapReady MapReadyReader MapReadyKmlReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

if {$Fonction != ""} {
    if [file exists $MapReadyReader] {
        if {$Fonction == "geocode"} {
            set MapReadyFonction "-log \x22$TMPMapReadyGeocodeLog\x22 \x22$TMPMapReadyGeocodeCfg\x22"
            }
        if {$Fonction == "matrix"} {
            set MapReadyFonction "-log \x22$TMPMapReadyMatrixLog\x22 \x22$TMPMapReadyMatrixCfg\x22"
            }
        if {$Fonction == "parameter"} {
            set MapReadyFonction "-log \x22$TMPMapReadyParameterLog\x22 \x22$TMPMapReadyParameterCfg\x22"
            }
        if {$PlatForm == "windows"} {
            package require tcom
            set wshMapReady [::tcom::ref createobject "WScript.Shell"]
            set taskIdMapReady [$wshMapReady Run "\x22$MapReadyReader\x22 $MapReadyFonction"]
            #set taskIdMapReady [ open "| \x22$MapReadyReader\x22 $MapReadyFonction" r]
            }
        if {$PlatForm == "unix"} {set taskIdMapReady [ open "| \x22$MapReadyReader\x22 $MapReadyFonction" r]}
        } else {
        #error message
        set VarError ""
        set ErrorMessage "MAP READY APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "MAP READY APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "MAPREADY"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "asf_mapready"
            set ConfigFileNameList "asf_mapready"
            .top341.fra74.lab76 configure -text "MAP READY"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/ASFshortcut.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration MAP READY Software" "b"
            tkwait variable VarConfigFileName 
            if {$MapReadyReader != ""} {
                set MapReadyKmlReader [file dirname $MapReadyReader]
                append MapReadyKmlReader "/asf_kml_overlay.exe"
                }
            }        
        }
    } else {
    Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"
    }
}
#############################################################################
## Procedure:  MapReadyDelete

proc ::MapReadyDelete {} {
global TMPMapReadyGeocodeCfg TMPMapReadyGeocodeLog TMPMapReadyGeocodeStatusStatus TMPMapReadyGeocodeStatusFiles TMPMapReadyGeocodeProj
global TMPMapReadyMatrixCfg TMPMapReadyMatrixLog TMPMapReadyMatrixStatusStatus TMPMapReadyMatrixStatusFiles TMPMapReadyMatrixProj
global TMPMapReadyParameterCfg TMPMapReadyParameterLog TMPMapReadyParameterStatusStatus TMPMapReadyParameterStatusFiles TMPMapReadyParameterProj
global TMPMapReadyGeocodingCfg TMPMapReadyGeocodingMeta TMPMapReadyGeocodingImg TMPMapReadyGeocodingHdr
global TMPMapReadyImportCfg TMPMapReadyImportMeta TMPMapReadyImportImg TMPMapReadyImportHdr
global TMPMapReadyImportUnscaledCfg TMPMapReadyImportUnscaledMeta TMPMapReadyImportUnscaledImg TMPMapReadyImportUnscaledHdr
global TMPMapReadyPolarimetryCfg TMPMapReadyPolarimetryMeta TMPMapReadyPolarimetryImg TMPMapReadyPolarimetryHdr


DeleteFile $TMPMapReadyGeocodeCfg
DeleteFile $TMPMapReadyGeocodeLog
DeleteFile $TMPMapReadyGeocodeStatusStatus
DeleteFile $TMPMapReadyGeocodeStatusFiles
DeleteFile $TMPMapReadyGeocodeProj
DeleteFile $TMPMapReadyMatrixCfg
DeleteFile $TMPMapReadyMatrixLog
DeleteFile $TMPMapReadyMatrixStatusStatus
DeleteFile $TMPMapReadyMatrixStatusFiles
DeleteFile $TMPMapReadyMatrixProj
DeleteFile $TMPMapReadyParameterCfg
DeleteFile $TMPMapReadyParameterLog
DeleteFile $TMPMapReadyParameterStatusStatus
DeleteFile $TMPMapReadyParameterStatusFiles
DeleteFile $TMPMapReadyParameterProj
DeleteFile $TMPMapReadyGeocodingCfg
DeleteFile $TMPMapReadyGeocodingMeta
DeleteFile $TMPMapReadyGeocodingImg
DeleteFile $TMPMapReadyGeocodingHdr
DeleteFile $TMPMapReadyImportCfg
DeleteFile $TMPMapReadyImportMeta
DeleteFile $TMPMapReadyImportImg
DeleteFile $TMPMapReadyImportHdr
DeleteFile $TMPMapReadyImportUnscaledCfg
DeleteFile $TMPMapReadyImportUnscaledMeta
DeleteFile $TMPMapReadyImportUnscaledImg
DeleteFile $TMPMapReadyImportUnscaledHdr
DeleteFile $TMPMapReadyPolarimetryCfg
DeleteFile $TMPMapReadyPolarimetryMeta
DeleteFile $TMPMapReadyPolarimetryImg
DeleteFile $TMPMapReadyPolarimetryHdr
}
#############################################################################
## Procedure:  MapReadyGeocode

proc ::MapReadyGeocode {} {
global TMPMapReadyGeocodeCfg TMPMapReadyGeocodeLog TMPMapReadyGeocodeStatusStatus TMPMapReadyGeocodeStatusFiles TMPMapReadyGeocodeProj
global TMPDir TMPTmp PlatForm MapReadyReader MapReadyLeaderFile MapReadyDirOutput
global MapReadyTerrain MapReadyResampling MapReadyTerrainGeo
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp MapReadyTerrainSave
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyAutomaticInterpolate MapReadyPixelSize

set MapReadyDefaults [file dirname $MapReadyReader]
append MapReadyDefaults "/asf_mapready/asf_mapready.defaults"

set f [open $TMPMapReadyGeocodeCfg w]
puts $f "Temporary config file, generated by the ASF MapReady Tool"
puts $f "File was generated on: 27-Sep-2009, 00:15:00"
puts $f ""
puts $f "\x5BGeneral\x5D"
puts $f "input file = $MapReadyLeaderFile"
puts $f "output file = $MapReadyDirOutput/MapReady_PauliRGB.jpg"
puts $f "import = 1"
puts $f "external = 0"
puts $f "sar processing = 0"
puts $f "polarimetry = 1"
puts $f "terrain correction = $MapReadyTerrain"
puts $f "geocoding = 1"
puts $f "export = 1"
puts $f "intermediates = 1"
puts $f "status file = $TMPMapReadyGeocodeStatusStatus"
puts $f "short configuration file = 0"
puts $f "default values = $MapReadyDefaults"
puts $f "tmp dir = $TMPDir"
puts $f "thumbnail = 1"
puts $f ""
puts $f "\x5BImport\x5D"
puts $f "format = CEOS (1)"
puts $f "radiometry = sigma_image"
puts $f "output db = 0"
puts $f "multilook SLC = 0"
puts $f "apply ers2 gain fix = 1"
puts $f ""
puts $f "\x5BPolarimetry\x5D"
puts $f "pauli = 1"
puts $f "sinclair = 0"
puts $f "cloude pottier = 0"
puts $f "extended cloude pottier = 0"
puts $f "entropy anisotropy alpha = 0"
puts $f "freeman durden = 0"
puts $f "faraday correction = 0"
puts $f "farcorr threshold = 0.000000"
puts $f ""
if {$MapReadyTerrain == 1} {
    puts $f "\x5BTerrain correction\x5D"
    puts $f "digital elevation model = $MapReadyDEMFile"
    if {$MapReadyTerrainGeo == "geo"} {
        puts $f "refine geolocation only = 1"
        puts $f "auto mask water = 0"
        puts $f "smooth dem holes = $MapReadyTerrainSmooth"
        }
    if {$MapReadyTerrainGeo == "correc"} {
        if {$MapReadyAutomaticInterpolate == "0"} {
            puts $f "pixel spacing = $MapReadyPixelSize"
            }
        puts $f "refine geolocation only = 0"
        puts $f "interpolate = $MapReadyTerrainInterp"
        puts $f "do radiometric = $MapReadyTerrainRadio"
        puts $f "save terrcorr dem = 0"
        puts $f "save terrcorr layover mask = $MapReadyTerrainSave"
        puts $f "use zero offsets if match fails = $MapReadyTerrainSkip"
        if {$MapReadyTerrainAutoMask == 0} {
            puts $f "auto mask water = 0"   
            }
        if {$MapReadyTerrainAutoMask == 1} {
            if {$MapReadyTerrainMask == "auto"} {
                puts $f "auto mask water = 1"   
                }
            if {$MapReadyTerrainMask == "file"} {
                puts $f "auto mask water = 0"   
                puts $f "mask = $MapReadyMaskFile"
                }
            }
        puts $f "smooth dem holes = $MapReadyTerrainSmooth"
        }
    puts $f ""
    }
puts $f "\x5BGeocoding\x5D"
puts $f "projection = $TMPMapReadyGeocodeProj"
if {$MapReadyAutomaticInterpolate == "0"} {
    puts $f "pixel spacing = $MapReadyPixelSize"
    }
puts $f "datum = WGS84"
puts $f "resampling = $MapReadyResampling"
puts $f "force = 0"
puts $f ""
puts -nonewline $f "\x5B"; puts $f "Export\x5D"
puts $f "format = jpeg"
puts $f "byte conversion = sigma"
puts $f "rgb banding = HH-VV,HV+VH,HH+VV"
puts $f "truecolor = 0"
puts $f "falsecolor = 0"
close $f

set f [open $TMPMapReadyGeocodeLog w]
puts $f ""
close $f

set f [open $TMPMapReadyGeocodeStatusStatus w]
puts $f ""
close $f

set f [open $TMPMapReadyGeocodeStatusFiles w]
puts $f ""
close $f

set f [open $TMPMapReadyGeocodeProj w]
puts $f "\x5BUniversal Transverse Mercator\x5D"
puts $f "Zone=0"
puts $f "Datum=WGS84"
close $f

WaitUntilCreated $TMPMapReadyGeocodeCfg

if {$PlatForm == "windows"} {
    TextEditorRunTrace "Process The Function Soft/tools/mapready_check_file.exe" "k"
    TextEditorRunTrace "Arguments: -of \x22$TMPTmp\x22 -if \x22$TMPMapReadyGeocodeCfg\x22" "k"
    set f [ open "| Soft/tools/mapready_check_file.exe -of \x22$TMPTmp\x22 -if \x22$TMPMapReadyGeocodeCfg\x22" r]
    PsPprogressBar $f
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    }
}
#############################################################################
## Procedure:  MapReadyMatrix

proc ::MapReadyMatrix {} {
global TMPMapReadyMatrixCfg TMPMapReadyMatrixLog TMPMapReadyMatrixStatusStatus TMPMapReadyMatrixStatusFiles TMPMapReadyMatrixProj
global TMPDir TMPTmp PlatForm MapReadyReader MapReadyLeaderFile MapReadyDirInput MapReadyOutputDir
global MapReadyTerrain MapReadyResampling MapReadyTerrainGeo
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp MapReadyTerrainSave
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyAutomaticInterpolate MapReadyPixelSize

set MapReadyDefaults [file dirname $MapReadyReader]
append MapReadyDefaults "/asf_mapready/asf_mapready.defaults"

set f [open $TMPMapReadyMatrixCfg w]
puts $f "Temporary config file, generated by the ASF MapReady Tool"
puts $f "File was generated on: 27-Sep-2009, 00:15:00"
puts $f ""
puts $f "\x5BGeneral\x5D"
puts $f "input file = $MapReadyDirInput"
puts $f "ancillary file = $MapReadyLeaderFile"
puts $f "output file = $MapReadyOutputDir"
puts $f "import = 1"
puts $f "external = 0"
puts $f "sar processing = 0"
puts $f "polarimetry = 0"
puts $f "terrain correction = $MapReadyTerrain"
puts $f "geocoding = 1"
puts $f "export = 1"
puts $f "intermediates = 1"
puts $f "status file = $TMPMapReadyMatrixStatusStatus"
puts $f "short configuration file = 0"
puts $f "default values = $MapReadyDefaults"
puts $f "tmp dir = $TMPDir"
puts $f "thumbnail = 1"
puts $f ""
puts $f "\x5BImport\x5D"
puts $f "format = polsarpro"
puts $f "output db = 0"
puts $f "dump envi header = 0"
puts $f "multilook SLC = 1"
puts $f "apply ers2 gain fix = 0"
puts $f "image data type = POLARIMETRIC_MATRIX"
puts $f ""
if {$MapReadyTerrain == 1} {
    puts $f "\x5BTerrain correction\x5D"
    puts $f "digital elevation model = $MapReadyDEMFile"
    if {$MapReadyTerrainGeo == "geo"} {
        puts $f "refine geolocation only = 1"
        puts $f "auto mask water = 0"
        puts $f "smooth dem holes = $MapReadyTerrainSmooth"
        }
    if {$MapReadyTerrainGeo == "correc"} {
        if {$MapReadyAutomaticInterpolate == "0"} {
            puts $f "pixel spacing = $MapReadyPixelSize"
            }
        puts $f "refine geolocation only = 0"
        puts $f "interpolate = $MapReadyTerrainInterp"
        puts $f "do radiometric = $MapReadyTerrainRadio"
        puts $f "save terrcorr dem = 0"
        puts $f "save terrcorr layover mask = $MapReadyTerrainSave"
        puts $f "use zero offsets if match fails = $MapReadyTerrainSkip"
        if {$MapReadyTerrainAutoMask == 0} {
            puts $f "auto mask water = 0"   
            }
        if {$MapReadyTerrainAutoMask == 1} {
            if {$MapReadyTerrainMask == "auto"} {
                puts $f "auto mask water = 1"   
                }
            if {$MapReadyTerrainMask == "file"} {
                puts $f "auto mask water = 0"   
                puts $f "mask = $MapReadyMaskFile"
                }
            }
        puts $f "smooth dem holes = $MapReadyTerrainSmooth"
        }
    puts $f ""
    }
puts $f "\x5BGeocoding\x5D"
puts $f "projection = $TMPMapReadyMatrixProj"
if {$MapReadyAutomaticInterpolate == "0"} {
    puts $f "pixel spacing = $MapReadyPixelSize"
    }
puts $f "datum = WGS84"
puts $f "resampling = $MapReadyResampling"
puts $f "force = 0"
puts $f ""
puts -nonewline $f "\x5B"; puts $f "Export\x5D"
puts $f "format = polsarpro"
puts $f "byte conversion = none"
close $f

set f [open $TMPMapReadyMatrixLog w]
puts $f ""
close $f

set f [open $TMPMapReadyMatrixStatusStatus w]
puts $f ""
close $f

set f [open $TMPMapReadyMatrixStatusFiles w]
puts $f ""
close $f

set f [open $TMPMapReadyMatrixProj w]
puts $f "\x5BUniversal Transverse Mercator\x5D"
puts $f "Zone=0"
puts $f "Datum=WGS84"
close $f

WaitUntilCreated $TMPMapReadyMatrixCfg

if {$PlatForm == "windows"} {
    TextEditorRunTrace "Process The Function Soft/tools/mapready_check_file.exe" "k"
    TextEditorRunTrace "Arguments: -of \x22$TMPTmp\x22 -if \x22$TMPMapReadyMatrixCfg\x22" "k"
    set f [ open "| Soft/tools/mapready_check_file.exe -of \x22$TMPTmp\x22 -if \x22$TMPMapReadyMatrixCfg\x22" r]
    PsPprogressBar $f
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    }
}
#############################################################################
## Procedure:  MapReadyParameter

proc ::MapReadyParameter {} {
global TMPMapReadyParameterCfg TMPMapReadyParameterLog TMPMapReadyParameterStatusStatus TMPMapReadyParameterStatusFiles TMPMapReadyParameterProj
global TMPDir TMPTmp PlatForm MapReadyReader MapReadyLeaderFile MapReadyDirOutput
global MapReadyParameterInput MapReadyParameterOutput
global MapReadyTerrain MapReadyResampling MapReadyTerrainGeo
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp MapReadyTerrainSave
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyAutomaticInterpolate MapReadyPixelSize

set MapReadyDefaults [file dirname $MapReadyReader]
append MapReadyDefaults "/asf_mapready/asf_mapready.defaults"

set f [open $TMPMapReadyParameterCfg w]
puts $f "Temporary config file, generated by the ASF MapReady Tool"
puts $f "File was generated on: 27-Sep-2009, 00:15:00"
puts $f ""
puts $f "\x5BGeneral\x5D"
puts $f "input file = $MapReadyParameterInput"
puts $f "ancillary file = $MapReadyLeaderFile"
puts $f "output file = $MapReadyParameterOutput"
puts $f "import = 1"
puts $f "external = 0"
puts $f "sar processing = 0"
puts $f "polarimetry = 0"
puts $f "terrain correction = $MapReadyTerrain"
puts $f "geocoding = 1"
puts $f "export = 1"
puts $f "intermediates = 1"
puts $f "status file = $TMPMapReadyParameterStatusStatus"
puts $f "short configuration file = 0"
puts $f "default values = $MapReadyDefaults"
puts $f "tmp dir = $TMPDir"
puts $f "thumbnail = 1"
puts $f ""
puts $f "\x5BImport\x5D"
puts $f "format = polsarpro"
puts $f "output db = 0"
puts $f "dump envi header = 0"
puts $f "multilook SLC = 1"
puts $f "apply ers2 gain fix = 0"
puts $f "image data type = POLARIMETRIC_PARAMETER"
puts $f ""
if {$MapReadyTerrain == 1} {
    puts $f "\x5BTerrain correction\x5D"
    puts $f "digital elevation model = $MapReadyDEMFile"
    if {$MapReadyTerrainGeo == "geo"} {
        puts $f "refine geolocation only = 1"
        puts $f "auto mask water = 0"
        puts $f "smooth dem holes = $MapReadyTerrainSmooth"
        }
    if {$MapReadyTerrainGeo == "correc"} {
        if {$MapReadyAutomaticInterpolate == "0"} {
            puts $f "pixel spacing = $MapReadyPixelSize"
            }
        puts $f "refine geolocation only = 0"
        puts $f "interpolate = $MapReadyTerrainInterp"
        puts $f "do radiometric = $MapReadyTerrainRadio"
        puts $f "save terrcorr dem = 0"
        puts $f "save terrcorr layover mask = $MapReadyTerrainSave"
        puts $f "use zero offsets if match fails = $MapReadyTerrainSkip"
        if {$MapReadyTerrainAutoMask == 0} {
            puts $f "auto mask water = 0"   
            }
        if {$MapReadyTerrainAutoMask == 1} {
            if {$MapReadyTerrainMask == "auto"} {
                puts $f "auto mask water = 1"   
                }
            if {$MapReadyTerrainMask == "file"} {
                puts $f "auto mask water = 0"   
                puts $f "mask = $MapReadyMaskFile"
                }
            }
        puts $f "smooth dem holes = $MapReadyTerrainSmooth"
        }
    puts $f ""
    }
puts $f "\x5BGeocoding\x5D"
puts $f "projection = $TMPMapReadyParameterProj"
if {$MapReadyAutomaticInterpolate == "0"} {
    puts $f "pixel spacing = $MapReadyPixelSize"
    }
puts $f "datum = WGS84"
puts $f "resampling = $MapReadyResampling"
puts $f "force = 0"
puts $f ""
puts -nonewline $f "\x5B"; puts $f "Export\x5D"
puts $f "format = polsarpro"
puts $f "byte conversion = none"
close $f

set f [open $TMPMapReadyParameterLog w]
puts $f ""
close $f

set f [open $TMPMapReadyParameterStatusStatus w]
puts $f ""
close $f

set f [open $TMPMapReadyParameterStatusFiles w]
puts $f ""
close $f

set f [open $TMPMapReadyParameterProj w]
puts $f "\x5BUniversal Transverse Mercator\x5D"
puts $f "Zone=0"
puts $f "Datum=WGS84"
close $f

WaitUntilCreated $TMPMapReadyParameterCfg

if {$PlatForm == "windows"} {
    TextEditorRunTrace "Process The Function Soft/tools/mapready_check_file.exe" "k"
    TextEditorRunTrace "Arguments: -of \x22$TMPTmp\x22 -if \x22$TMPMapReadyParameterCfg\x22" "k"
    set f [ open "| Soft/tools/mapready_check_file.exe -of \x22$TMPTmp\x22 -if \x22$TMPMapReadyParameterCfg\x22" r]
    PsPprogressBar $f
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    }
}
#############################################################################
## Procedure:  MapInfoReadConfig

proc ::MapInfoReadConfig {MapInfoConfFile} {
global MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global MapInfoGeocoding MapReadyPixelSize 
global MapInfoUTM_X0 MapInfoUTM_Y0 MapInfoUTM_dX MapInfoUTM_dY
global MapInfoLatLong_X0 MapInfoLatLong_Y0 MapInfoLatLong_Lat0 MapInfoLatLong_Long0
global MapInfoLatLong_dLat MapInfoLatLong_dLong

if [file exists $MapInfoConfFile] {
    set f [open $MapInfoConfFile r]
    set FlagStop 0
    while {$FlagStop == 0} {
        gets $f tmp
        if {$tmp == "Sensor"} { gets $f MapInfoActive }    
        if {$tmp == "MapInfo"} { gets $f MapInfoMapInfo }    
        if {$tmp == "ProjInfo"} { gets $f MapInfoProjInfo }    
        if {$tmp == "WaveUnit"} { gets $f MapInfoUnit }    
        if {$tmp == "MapProj"} { 
            gets $f MapInfoGeocoding
            if {$MapInfoGeocoding == "UTM"} {
                gets $f MapInfoUTM_X0
                gets $f MapInfoUTM_Y0
                gets $f MapInfoUTM_dX; set MapReadyPixelSize $MapInfoUTM_dX
                gets $f MapInfoUTM_dY
                }
            if {$MapInfoGeocoding == "Geographic Lat/Lon"} {
                gets $f MapInfoLatLong_X0
                gets $f MapInfoLatLong_Y0
                gets $f MapInfoLatLong_Lat0
                gets $f MapInfoLatLong_Long0
                gets $f MapInfoLatLong_dLat
                gets $f MapInfoLatLong_dLong
                }
            set FlagStop 1
            }
        }
    close $f
    }
}
#############################################################################
## Procedure:  MapInfoWriteConfig

proc ::MapInfoWriteConfig {MapInfoConfDir} {
global MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global MapInfoGeocoding MapReadyPixelSize 
global MapInfoUTM_X0 MapInfoUTM_Y0 MapInfoUTM_dX MapInfoUTM_dY
global MapInfoLatLong_X0 MapInfoLatLong_Y0 MapInfoLatLong_Lat0 MapInfoLatLong_Long0
global MapInfoLatLong_dLat MapInfoLatLong_dLong

if {$MapInfoActive != ""} {
    set MapInfoConfFile "$MapInfoConfDir/config_mapinfo.txt"
    set f [open $MapInfoConfFile w]
    if {$MapInfoActive != ""} { puts $f "Sensor"; puts $f $MapInfoActive; puts $f "---------"}    
    if {$MapInfoMapInfo != ""} { puts $f "MapInfo"; puts $f $MapInfoMapInfo; puts $f "---------"}    
    if {$MapInfoProjInfo != ""} { puts $f "ProjInfo"; puts $f $MapInfoProjInfo; puts $f "---------"}
    if {$MapInfoUnit != ""} { puts $f "WaveUnit"; puts $f $MapInfoUnit; puts $f "---------"}
    if {$MapInfoGeocoding != ""} {
        puts $f "MapProj"; puts $f $MapInfoGeocoding
        if {$MapInfoGeocoding == "UTM"} {
            puts $f $MapInfoUTM_X0
            puts $f $MapInfoUTM_Y0
            puts $f $MapInfoUTM_dX;
            puts $f $MapInfoUTM_dY
            }
        if {$MapInfoGeocoding == "Geographic Lat/Lon"} {
            puts $f $MapInfoLatLong_X0
            puts $f $MapInfoLatLong_Y0
            puts $f $MapInfoLatLong_Lat0
            puts $f $MapInfoLatLong_Long0
            puts $f $MapInfoLatLong_dLat
            puts $f $MapInfoLatLong_dLong
            }
        }
    close $f
    }
}
#############################################################################
## Procedure:  InitPolSARproEnv

proc ::InitPolSARproEnv {} {
global tcl_platform env
global WinDir PlatForm DataDirInit
global Tmp Log PSPDir TMPDir LOGDir CONFIGDir COLORMAPDir WGNUPLOTINIDir 
global FatalErrorMessage InitPSPEnv

set FatalErrorMessage "ok"
set InitPSPEnv "ok"

set PlatForm $tcl_platform(platform)

##Windows
if {$PlatForm == "windows"} {
    set WinDir ""
    set WinDir $env(WINDIR)
    set DataDirInit [pwd]

#Tmp/Log/Config/ColorMap Directories Configuration
    set PSPDir [pwd]
    if [file exists "Config/Version.txt"] {
        set f [open "Config/Version.txt" r]
        gets $f Version
        close $f
        }
    set PSPEnv "PolSARpro_"; append PSPEnv $Version
    set temp0 $env(TMP); set temp ""
    set Lengthtemp [string length $temp0]
        for {set i 0} {$i <= $Lengthtemp} {incr i} {
            set lettre [string range $temp0 $i $i]
            if {$lettre == "\\"} { set lettre "/" }
            append temp $lettre
            }
    set TMPDir "$temp"; append TMPDir "/$PSPEnv/Tmp"
    set appdata0 $env(APPDATA); set appdata ""
    set Lengthtemp [string length $appdata0]
        for {set i 0} {$i <= $Lengthtemp} {incr i} {
            set lettre [string range $appdata0 $i $i]
            if {$lettre == "\\"} { set lettre "/" }
            append appdata $lettre
            }
    set LOGDir "$appdata"; append LOGDir "/$PSPEnv/Log"
    set CONFIGDir "$appdata"; append CONFIGDir "/$PSPEnv/Config"
    set COLORMAPDir "$appdata"; append COLORMAPDir "/$PSPEnv/ColorMap"
    set WGNUPLOTINIDir "$appdata"
    set Tmp $TMPDir; set Log $LOGDir
    }        

##Unix - Linux
if {$PlatForm == "unix"} {
    set DataDirInit [pwd]

#Tmp/Log/Config/ColorMap Directories Configuration
    set PSPDir [pwd]
    if [file exists "Config/Version.txt"] {
        set f [open "Config/Version.txt" r]
        gets $f Version
        close $f
        }
    set VarHome $env(HOME)
    set PSPEnv "$VarHome/.polsarpro_"; append PSPEnv $Version
    set TMPDir "$PSPEnv/Tmp"
    set LOGDir "$PSPEnv/Log"
    set CONFIGDir "$PSPEnv/Config"
    set COLORMAPDir "$PSPEnv/ColorMap"
    set Tmp $TMPDir; set Log $LOGDir
    }

#Tmp/Log/Config/ColorMap Directories Update
    if [file isdirectory $TMPDir] {
        } else {
        if { [catch {file mkdir $TMPDir } ErrorCreateDir] } {
            set FatalErrorMessage $ErrorCreateDir
            }
        }
    if [file isdirectory $LOGDir] {
        } else {
        if { [catch {file mkdir $LOGDir } ErrorCreateDir] } {
            set FatalErrorMessage $ErrorCreateDir
            }
        }
    set PSPEnvUpdate ""
    if [file isdirectory $CONFIGDir] { set PSPEnvUpdate "Config" }
    if [file isdirectory $COLORMAPDir] { append PSPEnvUpdate "ColorMap" }
    if {$PSPEnvUpdate != "ConfigColorMap" } {
        if {$PSPEnvUpdate == "" } {
            CopyDir Config "$CONFIGDir/"
            DeleteFile "$CONFIGDir/ASTER.kml"
            CopyDir ColorMap "$COLORMAPDir/"
            }
        if {$PSPEnvUpdate == "Config" } {
            CopyDir Config "$CONFIGDir/"
            DeleteFile "$CONFIGDir/ASTER.kml"
            }
        if {$PSPEnvUpdate == "ColorMap" } {
            CopyDir ColorMap "$COLORMAPDir/"
            }
        }
    
if { $FatalErrorMessage != "ok" } { set InitPSPEnv "ko" }
}
#############################################################################
## Procedure:  WidgetShow

proc ::WidgetShow {WidgetNum} {
global WidgetPosition

set geowidgetwidth [winfo width $WidgetNum]
set geowidgetheight [winfo height $WidgetNum]

set tx [winfo rootx .top2]
set ty [winfo rooty .top2]
set x [winfo x .top2]
set y [winfo y .top2]
set geoscreenborderw [expr {$tx-$x}]
set geoscreentitleh [expr {$ty-$y}]

if {$WidgetPosition == 0} { 
    set positionwidth [expr 2 * $geoscreenborderw] 
    set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
    set positionheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 
    set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
    append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight
    wm geometry $WidgetNum $geometrie; update
    }

if {$WidgetPosition == 1} { 
    set geoscreenwidth [winfo width .top2]
    set geoscreenheight [winfo height .top2]
    set tx [winfo rootx .top2]
    set ty [winfo rooty .top2]
    set x [winfo x .top2]
    set y [winfo y .top2]
    set geoscreenborderw [expr {$tx-$x}]
    set geoscreentitleh [expr {$ty-$y}]
    set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
    set offsetheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 
    set offsetbottom [expr (2 * $geoscreenborderw) + 100 ] 
    set geoscreenheighttmp [expr $geoscreenheight - $offsetheight - $offsetbottom]

    set geoscreenwidths2 [expr $geoscreenwidth / 2]
    set geoscreenheights2 [expr $geoscreenheighttmp / 2]

    set geowidgetwidths2 [expr $geowidgetwidth / 2]
    set geowidgetheights2 [expr $geowidgetheight / 2]

    set positionwidth [expr $geoscreenwidths2 - $geowidgetwidths2]
    set positionheight [expr $geoscreenheights2 - $geowidgetheights2 + $offsetheight]
    if {$positionheight < $offsetheight} {set positionheight $offsetheight}

    set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
    append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight
    wm geometry $WidgetNum $geometrie; update
    }

#catch {wm geometry $WidgetNum {}}
Window show $WidgetNum
}
#############################################################################
## Procedure:  DeleteFile

proc ::DeleteFile {FileNameDelete} {
global ErrorMessage VarError

set FileNameDel $FileNameDelete
if [file exists $FileNameDel] {
    if { [catch { file delete -force -- $FileNameDel } ErrorDelete] } {
        set ErrorMessage $ErrorDelete
        set VarError ""
        Window show .top44
        }
    WaitUntilDeleted $FileNameDel
    }

append FileNameDel ".hdr"
if [file exists $FileNameDel] {
    if { [catch { file delete -force -- $FileNameDel } ErrorDelete] } {
        set ErrorMessage $ErrorDelete
        set VarError ""
        Window show .top44
        }
    WaitUntilDeleted $FileNameDel
    }
}
#############################################################################
## Procedure:  DeleteMatrixT

proc ::DeleteMatrixT {DirNameDelete} {
DeleteFile "$DirNameDelete/config.txt"
DeleteFile "$DirNameDelete/config_mapinfo.txt"
DeleteFile "$DirNameDelete/mask_valid_pixels.bin"
DeleteFile "$DirNameDelete/T11.bin"
DeleteFile "$DirNameDelete/T12_real.bin"
DeleteFile "$DirNameDelete/T12_imag.bin"
DeleteFile "$DirNameDelete/T13_real.bin"
DeleteFile "$DirNameDelete/T13_imag.bin"
DeleteFile "$DirNameDelete/T14_real.bin"
DeleteFile "$DirNameDelete/T14_imag.bin"
DeleteFile "$DirNameDelete/T15_real.bin"
DeleteFile "$DirNameDelete/T15_imag.bin"
DeleteFile "$DirNameDelete/T16_real.bin"
DeleteFile "$DirNameDelete/T16_imag.bin"
DeleteFile "$DirNameDelete/T22.bin"
DeleteFile "$DirNameDelete/T23_real.bin"
DeleteFile "$DirNameDelete/T23_imag.bin"
DeleteFile "$DirNameDelete/T24_real.bin"
DeleteFile "$DirNameDelete/T24_imag.bin"
DeleteFile "$DirNameDelete/T25_real.bin"
DeleteFile "$DirNameDelete/T25_imag.bin"
DeleteFile "$DirNameDelete/T26_real.bin"
DeleteFile "$DirNameDelete/T26_imag.bin"
DeleteFile "$DirNameDelete/T33.bin"
DeleteFile "$DirNameDelete/T34_real.bin"
DeleteFile "$DirNameDelete/T34_imag.bin"
DeleteFile "$DirNameDelete/T35_real.bin"
DeleteFile "$DirNameDelete/T35_imag.bin"
DeleteFile "$DirNameDelete/T36_real.bin"
DeleteFile "$DirNameDelete/T36_imag.bin"
DeleteFile "$DirNameDelete/T44.bin"
DeleteFile "$DirNameDelete/T45_real.bin"
DeleteFile "$DirNameDelete/T45_imag.bin"
DeleteFile "$DirNameDelete/T46_real.bin"
DeleteFile "$DirNameDelete/T46_imag.bin"
DeleteFile "$DirNameDelete/T55.bin"
DeleteFile "$DirNameDelete/T56_real.bin"
DeleteFile "$DirNameDelete/T56_imag.bin"
DeleteFile "$DirNameDelete/T66.bin"
after 100
}
#############################################################################
## Procedure:  DeleteMatrixC

proc ::DeleteMatrixC {DirNameDelete} {
DeleteFile "$DirNameDelete/config.txt"
DeleteFile "$DirNameDelete/config_mapinfo.txt"
DeleteFile "$DirNameDelete/mask_valid_pixels.bin"
DeleteFile "$DirNameDelete/C11.bin"
DeleteFile "$DirNameDelete/C12_real.bin"
DeleteFile "$DirNameDelete/C12_imag.bin"
DeleteFile "$DirNameDelete/C13_real.bin"
DeleteFile "$DirNameDelete/C13_imag.bin"
DeleteFile "$DirNameDelete/C14_real.bin"
DeleteFile "$DirNameDelete/C14_imag.bin"
DeleteFile "$DirNameDelete/C22.bin"
DeleteFile "$DirNameDelete/C23_real.bin"
DeleteFile "$DirNameDelete/C23_imag.bin"
DeleteFile "$DirNameDelete/C24_real.bin"
DeleteFile "$DirNameDelete/C24_imag.bin"
DeleteFile "$DirNameDelete/C33.bin"
DeleteFile "$DirNameDelete/C34_real.bin"
DeleteFile "$DirNameDelete/C34_imag.bin"
DeleteFile "$DirNameDelete/C44.bin"
after 100
}
#############################################################################
## Procedure:  DeleteMatrixS

proc ::DeleteMatrixS {DirNameDelete} {
DeleteFile "$DirNameDelete/config.txt"
DeleteFile "$DirNameDelete/config_mapinfo.txt"
DeleteFile "$DirNameDelete/mask_valid_pixels.bin"
DeleteFile "$DirNameDelete/s11.bin"
DeleteFile "$DirNameDelete/s12.bin"
DeleteFile "$DirNameDelete/s21.bin"
DeleteFile "$DirNameDelete/s22.bin"
after 100
}
#############################################################################
## Procedure:  DeleteMatrixI

proc ::DeleteMatrixI {DirNameDelete} {
DeleteFile "$DirNameDelete/config.txt"
DeleteFile "$DirNameDelete/config_mapinfo.txt"
DeleteFile "$DirNameDelete/mask_valid_pixels.bin"
DeleteFile "$DirNameDelete/I11.bin"
DeleteFile "$DirNameDelete/I12.bin"
DeleteFile "$DirNameDelete/I21.bin"
DeleteFile "$DirNameDelete/I22.bin"
after 100
}
#############################################################################
## Procedure:  MenuEnvImp

proc ::MenuEnvImp {} {
global ActiveProgram
global ALOSDataFormat RADARSAT2DataFormat
global TERRASARXDataFormat TERRASARXDataLevel
global TANDEMXDataFormat TANDEMXDataLevel
global SIRCDataFormatPol CSKDataFormat RISATDataFormat SENTINEL1DataFormat
global Load_Environment Load_EnvironmentDual Load_EnvironmentMult

#Label Vide
#ENVSNGL
.top2.fra71.fra75.cpd74 configure -text ""
.top2.fra71.fra75.cpd74 configure -state disable
#ENVDUAL
.top2.fra71.fra75.cpd73 configure -text ""
.top2.fra71.fra75.cpd73 configure -state disable
#ENVMULT
.top2.fra71.fra75.cpd67 configure -text ""
.top2.fra71.fra75.cpd67 configure -state disable
#IMPPSP
.top2.fra71.fra76.men69 configure -text ""
.top2.fra71.fra76.men69 configure -state disable
#IMPEOSI
.top2.fra71.fra76.men98 configure -text ""
.top2.fra71.fra76.men98 configure -state disable
#IMPDPG
.top2.fra71.fra76.men74 configure -text ""
.top2.fra71.fra76.men74 configure -state disable
#IMPDPS
.top2.fra71.fra76.men76 configure -text ""
.top2.fra71.fra76.men76 configure -state disable
#IMPASAR
.top2.fra71.fra76.men70 configure -text ""
.top2.fra71.fra76.men70 configure -state disable

if {$ActiveProgram == ""} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state disable
    .top2.fra71.fra76.men69 configure -text "Import"
    .top2.fra71.fra76.men69 configure -state disable
    }
    
if {$ActiveProgram == "POLINSAR"} {
    .top2.fra71.fra75.cpd73 configure -text "Environment"
    .top2.fra71.fra75.cpd73 configure -state normal
    .top2.fra71.fra76.men69 configure -text "Import"
    .top2.fra71.fra76.men69 configure -state disable
    }

if {$ActiveProgram == "POLMULT"} {
    .top2.fra71.fra75.cpd67 configure -text "Environment"
    .top2.fra71.fra75.cpd67 configure -state normal
    .top2.fra71.fra76.men69 configure -text "Import"
    .top2.fra71.fra76.men69 configure -state disable
    }

if {$ActiveProgram == "POLSARPRO"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    .top2.fra71.fra76.men69 configure -text "Import"
    .top2.fra71.fra76.men69 configure -state normal
    }

if {$ActiveProgram == "ASAR"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    .top2.fra71.fra76.men70 configure -text "Import"
    .top2.fra71.fra76.men70 configure -state normal
    }
    
#EOSI - DUAL-GROUND TopLevel(7)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "dual1.5"} { set config "true"}
    if {$ALOSDataFormat == "quad1.5"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "dual1.5"} { set config "true"}
    if {$ALOSDataFormat == "quad1.5"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "dual"} {
        if {$TERRASARXDataLevel != "SSC"} { set config "true"}
        }
    }
if {$config == "true"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    .top2.fra71.fra76.men74 configure -text "Import"
    .top2.fra71.fra76.men74 configure -state normal
    }

#EOSI - DUAL-SLANT TopLevel(8)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "dual1.1"} { set config "true"}
    if {$ALOSDataFormat == "dual1.1vex"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "dual1.1"} { set config "true"}
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKDataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2DataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "dual1.1"} { set config "true"}
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1DataFormat == "dual"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "dual"} {
        if {$TERRASARXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXDataFormat == "dual"} {
        if {$TANDEMXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCDataFormatPol == "dual"} { set config "true"}
    }
if {$config == "true"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    .top2.fra71.fra76.men76 configure -text "Import"
    .top2.fra71.fra76.men76 configure -state normal
    }

#EOSI - QUAD TopLevel(5)
set config "false"
if {$ActiveProgram == "ALOS"} {
    if {$ALOSDataFormat == "quad1.1"} { set config "true"}
    if {$ALOSDataFormat == "quad1.1vex"} { set config "true"}
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSDataFormat == "quad1.1"} { set config "true"}
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2DataFormat == "quad"} { set config "true"}
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "quad1.1"} { set config "true"}
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCDataFormatPol == "quad"} { set config "true"}
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "quad"} {
        if {$TERRASARXDataLevel == "SSC"} { set config "true"}
        }
    }
if {$ActiveProgram == "AIRSAR"} { set config "true"}
if {$ActiveProgram == "CONVAIR"} { set config "true"}
if {$ActiveProgram == "EMISAR"} { set config "true"}
if {$ActiveProgram == "ESAR"} { set config "true"}
if {$ActiveProgram == "FSAR"} { set config "true"}
if {$ActiveProgram == "PISAR"} { set config "true"}
if {$ActiveProgram == "SETHI"} { set config "true"}
if {$ActiveProgram == "UAVSAR"} { set config "true"}
if {$config == "true"} {
    .top2.fra71.fra75.cpd74 configure -text "Environment"
    .top2.fra71.fra75.cpd74 configure -state normal
    .top2.fra71.fra76.men98 configure -text "Import"
    .top2.fra71.fra76.men98 configure -state normal
    }                
}
#############################################################################
## Procedure:  WaitUntilDeleted

proc ::WaitUntilDeleted {WaitUntilFileName} {
set FlagStop 0
while {$FlagStop == 0} {
    if [file exists $WaitUntilFileName] {
        set FlagStop 0
        } else {
        set FlagStop 1
        }
    update
    }
after 100
}
#############################################################################
## Procedure:  WaitUntilCreated

proc ::WaitUntilCreated {WaitUntilFileName} {
set FlagStop 0
while {$FlagStop == 0} {
    if [file exists $WaitUntilFileName] {
        set FlagStop 1
        } else {
        set FlagStop 0
        }
    update
    }
after 100
}
#############################################################################
## Procedure:  WaitUntilDeletedDir

proc ::WaitUntilDeletedDir {WaitUntilDirName} {
set FlagStop 0
while {$FlagStop == 0} {
    if [file isdirectory $WaitUntilDirName] {
        set FlagStop 0
        } else {
        set FlagStop 1
        }
    update
    }
after 100
}
#############################################################################
## Procedure:  CopyFile

proc ::CopyFile {FileNameSource FileNameTarget} {
global ErrorMessage VarError

if [file exists $FileNameTarget] {
    if { [catch { file delete -force -- $FileNameTarget } ErrorDelete] } {
        set ErrorMessage $ErrorDelete
        set VarError ""
        Window show .top44
        }
    WaitUntilDeleted $FileNameTarget
    }

if [file exists $FileNameSource] {
    if { [catch { file copy -force -- $FileNameSource $FileNameTarget } ErrorCopy] } {
        set ErrorMessage $ErrorCopy
        set VarError ""
        Window show .top44
        }
    WaitUntilCreated $FileNameTarget
    }
}
#############################################################################
## Procedure:  WaitUntilCreatedDir

proc ::WaitUntilCreatedDir {WaitUntilDirName} {
set FlagStop 0
while {$FlagStop == 0} {
    if [file isdirectory $WaitUntilDirName] {
        set FlagStop 1
        } else {
        set FlagStop 0
        }
    update
    }
after 100
}
#############################################################################
## Procedure:  CopyDir

proc ::CopyDir {DirNameSource DirNameTarget} {
global ErrorMessage VarError

if [file isdirectory $DirNameTarget] {
    if { [catch { file delete -force -- $DirNameTarget } ErrorDelete] } {
        set ErrorMessage $ErrorDelete
        set VarError ""
        Window show .top44
        }
    WaitUntilDeletedDir $DirNameTarget
    }

if [file isdirectory $DirNameSource] {
    if { [catch { file copy -force -- $DirNameSource $DirNameTarget } ErrorCopy] } {
        set ErrorMessage $ErrorCopy
        set VarError ""
        Window show .top44
        }
    WaitUntilCreatedDir $DirNameTarget
    }
}
#############################################################################
## Procedure:  DeleteDir

proc ::DeleteDir {DirNameDelete} {
global ErrorMessage VarError

if [file isdirectory $DirNameDelete] {
    if { [catch { file delete -force -- $DirNameDelete } ErrorDelete] } {
        set ErrorMessage $ErrorDelete
        set VarError ""
        Window show .top44
        }
    WaitUntilDeletedDir $DirNameDelete
    }
}
#############################################################################
## Procedure:  PSPcreate_bmp_file

proc ::PSPcreate_bmp_file {PSPcbf_Mcol PSPcbf_FileInput PSPcbf_FileOutput PSPcbf_InputFormat PSPcbf_OutputFormat PSPcbf_ColorMap PSPcbf_Ncol PSPcbf_OffsetLig PSPcbf_OffsetCol PSPcbf_FinalNlig PSPcbf_FinalNcol PSPcbf_MinMaxBMP PSPcbf_MinBMP PSPcbf_MaxBMP} {
global Fonction Fonction2 ProgressLine PSPViewGimpBMP

set Fonction "Create BMP file"
set Fonction2 $PSPcbf_FileOutput

set PSPcbf_MaskCmd ""
set PSPcbf_MaskDir [file dirname $PSPcbf_FileInput]
set PSPcbf_MaskFile "$PSPcbf_MaskDir/mask_valid_pixels.bin"
if [file exists $PSPcbf_MaskFile] { set PSPcbf_MaskCmd "-mask \x22$PSPcbf_MaskFile\x22" }

set ProgressLine "0"
WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
update
TextEditorRunTrace "Process The Function Soft/bmp_process/create_bmp_file.exe" "k"
TextEditorRunTrace "Arguments: -mcol $PSPcbf_Mcol -if \x22$PSPcbf_FileInput\x22 -of \x22$PSPcbf_FileOutput\x22 -ift $PSPcbf_InputFormat -oft $PSPcbf_OutputFormat -clm \x22$PSPcbf_ColorMap\x22 -nc $PSPcbf_Ncol -ofr $PSPcbf_OffsetLig -ofc $PSPcbf_OffsetCol -fnr $PSPcbf_FinalNlig -fnc $PSPcbf_FinalNcol -mm $PSPcbf_MinMaxBMP -min $PSPcbf_MinBMP -max $PSPcbf_MaxBMP $PSPcbf_MaskCmd" "k"
set f [ open "| Soft/bmp_process/create_bmp_file.exe -mcol $PSPcbf_Mcol -if \x22$PSPcbf_FileInput\x22 -of \x22$PSPcbf_FileOutput\x22 -ift $PSPcbf_InputFormat -oft $PSPcbf_OutputFormat -clm \x22$PSPcbf_ColorMap\x22 -nc $PSPcbf_Ncol -ofr $PSPcbf_OffsetLig -ofc $PSPcbf_OffsetCol -fnr $PSPcbf_FinalNlig -fnc $PSPcbf_FinalNcol -mm $PSPcbf_MinMaxBMP -min $PSPcbf_MinBMP -max $PSPcbf_MaxBMP $PSPcbf_MaskCmd" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError
WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
if {$PSPViewGimpBMP == 1} { Gimp $PSPcbf_FileOutput }
}
#############################################################################
## Procedure:  PSPcluster_avg_prm

proc ::PSPcluster_avg_prm {PSPcap_ClusterFileInData PSPcap_ClusterFileIn PSPcap_ClusterFileOut PSPcap_FinalNlig PSPcap_FinalNcol} {
global Fonction Fonction2 ProgressLine PSPMemory TMPMemoryAllocError

set Fonction "Creation of the Averaged Data File"
set Fonction2 $PSPcap_ClusterFileIn

set PSPcap_MaskCmd ""
set PSPcap_MaskDir [file dirname $PSPcap_ClusterFileIn]
set PSPcap_MaskFile "$PSPcap_MaskDir/mask_valid_pixels.bin"
if [file exists $PSPcap_MaskFile] { set PSPcap_MaskCmd "-mask \x22$PSPcap_MaskFile\x22" }

set ProgressLine "0"
WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
update
TextEditorRunTrace "Process The Function Soft/data_process_sngl/cluster_avg_prm.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$PSPcap_ClusterFileInData\x22 -icf \x22$PSPcap_ClusterFileIn\x22 -of \x22$PSPcap_ClusterFileOut\x22 -inc $PSPcap_FinalNcol -ofr 0 -ofc 0 -fnr $PSPcap_FinalNlig -fnc $PSPcap_FinalNcol -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $PSPcap_MaskCmd" "k"
set f [ open "| Soft/data_process_sngl/cluster_avg_prm.exe -if \x22$PSPcap_ClusterFileInData\x22 -icf \x22$PSPcap_ClusterFileIn\x22 -of \x22$PSPcap_ClusterFileOut\x22 -inc $PSPcap_FinalNcol -ofr 0 -ofc 0 -fnr $PSPcap_FinalNlig -fnc $PSPcap_FinalNcol -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $PSPcap_MaskCmd" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError
WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
}
#############################################################################
## Procedure:  PSPCreateDirectoryMult

proc ::PSPCreateDirectoryMult {DirNameCreate DirNameCreateTmp DirNameFormat} {
global VarWarning WarningMessage WarningMessage2 ErrorMessage VarError

set VarWarning ""
if [file isdirectory $DirNameCreate] {
    if {$DirNameFormat == "S2"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2m"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2b"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2C4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2T4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T6"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2C2pp1"} { DeleteMatrixC $DirNameCreate } 
    if {$DirNameFormat == "S2C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2T2pp1"} { DeleteMatrixT $DirNameCreate } 
    if {$DirNameFormat == "S2T2pp2"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2pp3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2lhv"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2rhv"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2pi4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2SPPpp1"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPpp2"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPpp3"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPlhv"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPrhv"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPpi4"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2IPPfull"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp4"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp7"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "T2"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T2C2"} { DeleteMatrixC $DirNameCreate }

    if {$DirNameFormat == "T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T3C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp4"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp7"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "T4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T4C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T4C4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4IPPfull"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPpp7"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPfull"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "T6"} { DeleteMatrixT $DirNameCreate }
    
    if {$DirNameFormat == "C2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C2T2"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C2IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp7"} { DeleteMatrixI $DirNameCreate }
    
    if {$DirNameFormat == "C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C3C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp4"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp7"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "C4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C4T4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C4C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4IPPfull"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPpp7"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPfull"} { DeleteMatrixI $DirNameCreate }
    
    if {$DirNameFormat == "SPP"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "SPPIPP"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "SPPC2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "SPPT2"} { DeleteMatrixT $DirNameCreate }
    
    if {$DirNameFormat == "IPP"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "Ixx"} { DeleteMatrixI $DirNameCreate }
    
    set VarWarning "ok"
    return $DirNameCreate
    } else {
    TextEditorRunTrace "Create Directory" "k"
    if { [catch {file mkdir $DirNameCreate} ErrorCreateDir] } {
        set ErrorMessage $ErrorCreateDir
        set VarError ""
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        }
    return $DirNameCreate
    }
}
#############################################################################
## Procedure:  PSPCreateDirectory

proc ::PSPCreateDirectory {DirNameCreate DirNameCreateTmp DirNameFormat} {
global VarWarning WarningMessage WarningMessage2 ErrorMessage VarError

set VarWarning ""
if [file isdirectory $DirNameCreate] {
    if {$DirNameFormat == "S2"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2m"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2b"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2C4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2T4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T6"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2C2pp1"} { DeleteMatrixC $DirNameCreate } 
    if {$DirNameFormat == "S2C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "S2T2pp1"} { DeleteMatrixT $DirNameCreate } 
    if {$DirNameFormat == "S2T2pp2"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2pp3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2lhv"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2rhv"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2T2pi4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "S2SPPpp1"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPpp2"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPpp3"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPlhv"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPrhv"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2SPPpi4"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "S2IPPfull"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp4"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "S2IPPpp7"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "T2"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T2C2"} { DeleteMatrixC $DirNameCreate }

    if {$DirNameFormat == "T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T3C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp4"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T3IPPpp7"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "T4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T4C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "T4C4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "T4IPPfull"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPpp7"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "T4IPPfull"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "T6"} { DeleteMatrixT $DirNameCreate }
    
    if {$DirNameFormat == "C2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C2T2"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C2IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp7"} { DeleteMatrixI $DirNameCreate }
    
    if {$DirNameFormat == "C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C3C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp4"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C3IPPpp7"} { DeleteMatrixI $DirNameCreate }

    if {$DirNameFormat == "C4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4T3"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C4T4"} { DeleteMatrixT $DirNameCreate }
    if {$DirNameFormat == "C4C2pp1"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2pp2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2pp3"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2lhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2rhv"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4C2pi4"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "C4IPPfull"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPpp5"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPpp6"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPpp7"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "C4IPPfull"} { DeleteMatrixI $DirNameCreate }
    
    if {$DirNameFormat == "SPP"} { DeleteMatrixS $DirNameCreate }
    if {$DirNameFormat == "SPPIPP"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "SPPC2"} { DeleteMatrixC $DirNameCreate }
    if {$DirNameFormat == "SPPT2"} { DeleteMatrixT $DirNameCreate }
    
    if {$DirNameFormat == "IPP"} { DeleteMatrixI $DirNameCreate }
    if {$DirNameFormat == "Ixx"} { DeleteMatrixI $DirNameCreate }
    
    set VarWarning "ok"
    return $DirNameCreate
    } else {
    set WarningMessage "CREATE THE DIRECTORY ?"
    set WarningMessage2 $DirNameCreate
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        TextEditorRunTrace "Create Directory" "k"
        if { [catch {file mkdir $DirNameCreate} ErrorCreateDir] } {
            set ErrorMessage $ErrorCreateDir
            set VarError ""
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            set VarWarning ""
            }
        return $DirNameCreate
        } else {
        return $DirNameCreateTmp
        }
    }
}
#############################################################################
## Procedure:  WidgetShowFromWidget

proc ::WidgetShowFromWidget {WidgetNum1 WidgetNum2} {
WidgetShowFromMenuFix $WidgetNum1 $WidgetNum2
}
#############################################################################
## Procedure:  WidgetShowFromObject

proc ::WidgetShowFromObject {WidgetObject WidgetNum Position} {
}
#############################################################################
## Procedure:  WidgetShowFromMenuAuto

proc ::WidgetShowFromMenuAuto {WidgetMenu WidgetNum} {
global WidgetPosition

set geomenuwidth [winfo width $WidgetMenu]
set geomenuheight [winfo height $WidgetMenu]
set geowidgetwidth [winfo width $WidgetNum]
set geowidgetheight [winfo height $WidgetNum]

if {$WidgetPosition == 0} { 
    WidgetShowFromMenuFix $WidgetMenu $WidgetNum
    }

if {$WidgetPosition == 1} { 
    set geoscreenwidth [winfo width .top2]
    set geoscreenheight [winfo height .top2]
    set geoscreenwidths2 [expr $geoscreenwidth / 2]
    set geoscreenheights2 [expr $geoscreenheight / 2]

    set geowidgetwidths2 [expr $geowidgetwidth / 2]
    set geowidgetheights2 [expr $geowidgetheight / 2]

    set positionwidth $geoscreenwidths2; set positionwidth [expr $positionwidth - $geowidgetwidths2]
    set positionheight $geoscreenheights2; set positionheight [expr $positionheight - $geowidgetheights2]

    set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
    append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight
    wm geometry $WidgetNum $geometrie; update
    }

#catch {wm geometry $WidgetNum {}}
Window show $WidgetNum
}
#############################################################################
## Procedure:  WidgetShowFromMenuFix

proc ::WidgetShowFromMenuFix {WidgetMenu WidgetNum} {
set geoscreenwidth [winfo width .top2]
set geoscreenheight [winfo height .top2]
set tx [winfo rootx .top2]
set ty [winfo rooty .top2]
set x [winfo x .top2]
set y [winfo y .top2]
set geoscreenborderw [expr {$tx-$x}]
set geoscreentitleh [expr {$ty-$y}]
set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
set offsetheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 
set offsetbottom [expr (2 * $geoscreenborderw) + 100 ] 
set geoscreenheighttmp [expr $geoscreenheight - $offsetheight - $offsetbottom]
set geoscreenwidths2 [expr $geoscreenwidth / 2]
set geoscreenheights2 [expr $geoscreenheighttmp / 2]

set geomenuwidth [winfo width $WidgetMenu]
set geomenuheight [winfo height $WidgetMenu]
set geomenuX [winfo x $WidgetMenu]
set geomenuY [winfo y $WidgetMenu]

set geowidgetwidth [winfo width $WidgetNum]
set geowidgetheight [winfo height $WidgetNum]
set geowidgetwidths2 [expr $geowidgetwidth / 2]
set geowidgetheights2 [expr $geowidgetheight / 2]

set positionheight $geomenuY

#Positionnement a Droite
set positionwidth [expr $geomenuX + $geomenuwidth]; set positionwidth [expr $positionwidth + (3 * $geoscreenborderw)];
set limitwidth [expr $positionwidth + $geowidgetwidth]
set config "true"
if {$limitwidth > $geoscreenwidth} {set config "false"}

if {$config == "false"} {
    #Positionnement a Gauche
    set positionwidth [expr $geomenuX - $geowidgetwidth]; set positionwidth [expr $positionwidth - (3 * $geoscreenborderw)];
    set limitwidth $positionwidth
    set config "true"
    set limit [expr $geoscreenborderw + $geoscreenborderw]
    if {$limitwidth < $limit} {set config "false"}

    if {$config == "false"} {
        #Positionnement au Centre
        set positionwidth [expr $geoscreenwidths2 - $geowidgetwidths2]
        set positionheight [expr $geoscreenheights2 - $geowidgetheights2 + $offsetheight]
        if {$positionheight < $offsetheight} {set positionheight $offsetheight}
        }  
    }  

set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight

wm geometry $WidgetNum $geometrie; update
#catch {wm geometry $WidgetNum {}}
Window show $WidgetNum
}
#############################################################################
## Procedure:  WidgetGeometryCenter

proc ::WidgetGeometryCenter {WidgetNum} {
set geoscreenwidth [winfo width .top2]
set geoscreenheight [winfo height .top2]
set tx [winfo rootx .top2]
set ty [winfo rooty .top2]
set x [winfo x .top2]
set y [winfo y .top2]
set geoscreenborderw [expr {$tx-$x}]
set geoscreentitleh [expr {$ty-$y}]
set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
set offsetheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 
set offsetbottom [expr (2 * $geoscreenborderw) + 100 ] 
set geoscreenheighttmp [expr $geoscreenheight - $offsetheight - $offsetbottom]

set geoscreenwidths2 [expr $geoscreenwidth / 2]
set geoscreenheights2 [expr $geoscreenheighttmp / 2]

set geowidgetwidth [winfo width $WidgetNum]
set geowidgetheight [winfo height $WidgetNum]
set geowidgetwidths2 [expr $geowidgetwidth / 2]
set geowidgetheights2 [expr $geowidgetheight / 2]

set positionwidth [expr $geoscreenwidths2 - $geowidgetwidths2]
set positionheight [expr $geoscreenheights2 - $geowidgetheights2 + $offsetheight]
if {$positionheight < $offsetheight} {set positionheight $offsetheight}

set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight
wm geometry $WidgetNum $geometrie; update
#catch {wm geometry $WidgetNum {}}
}
#############################################################################
## Procedure:  WidgetGeometryLeft

proc ::WidgetGeometryLeft {WidgetNum} {
set geoscreenwidth [winfo width .top2]
set geoscreenheight [winfo height .top2]
set tx [winfo rootx .top2]
set ty [winfo rooty .top2]
set x [winfo x .top2]
set y [winfo y .top2]
set geoscreenborderw [expr {$tx-$x}]
set geoscreentitleh [expr {$ty-$y}]

set geowidgetwidth [winfo width $WidgetNum]
set geowidgetheight [winfo height $WidgetNum]

set positionwidth [expr 2 * $geoscreenborderw] 
set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
set positionheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 

set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight
wm geometry $WidgetNum $geometrie; update
#catch {wm geometry $WidgetNum {}}
}
#############################################################################
## Procedure:  WidgetGeometryRight

proc ::WidgetGeometryRight {WidgetNum} {
set geoscreenwidth [winfo width .top2]
set geoscreenheight [winfo height .top2]
set tx [winfo rootx .top2]
set ty [winfo rooty .top2]
set x [winfo x .top2]
set y [winfo y .top2]
set geoscreenborderw [expr {$tx-$x}]
set geoscreentitleh [expr {$ty-$y}]

set geowidgetwidth [winfo width $WidgetNum]
set geowidgetheight [winfo height $WidgetNum]

set positionwidth [expr $geoscreenwidth - (2 * $geoscreenborderw) - $geowidgetwidth] 
set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
set positionheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 

set geometrie $geowidgetwidth; append geometrie "x"; append geometrie $geowidgetheight; append geometrie "+";
append geometrie $positionwidth; append geometrie "+"; append geometrie $positionheight
wm geometry $WidgetNum $geometrie; update
#catch {wm geometry $WidgetNum {}}
}
#############################################################################
## Procedure:  PsPPTOMDisplayThumb

proc ::PsPPTOMDisplayThumb {} {
global GnuplotPipeFid GnuplotPipePTOMDisplay 
global TestVarError TestVarName TestVarType TestVarValue TestVarMin TestVarMax
global TMPGnuPlot1Tk GnuOutputFormat GnuOutputFile
global TMPPTOMDisplayFileOutputXbin TMPPTOMDisplayFileOutputXYbin TMPPTOMDisplayFileOutputXYtxt
global PTOMDisplayLabelX PTOMDisplayLabelY PTOMDisplayTitle PTOMxdim PTOMzdim 
global PTOMDisplayFileZGround PTOMDisplayFileZTop
global PTOMGifCol PTOMGifLig PTOMGifColThumb PTOMGifLigThumb
global PlatForm WinDir GnuPlotPath WGNUPLOTINIDir PSPThumbnails

WaitUntilCreated $TMPPTOMDisplayFileOutputXYbin
WaitUntilCreated $TMPPTOMDisplayFileOutputXYtxt

if [file exists $TMPPTOMDisplayFileOutputXYtxt] {
    DeleteFile $TMPGnuPlot1Tk
    set GnuOutputFile $TMPGnuPlot1Tk
    puts $GnuplotPipePTOMDisplay "reset"; flush $GnuplotPipePTOMDisplay
    puts $GnuplotPipePTOMDisplay "clear"; flush $GnuplotPipePTOMDisplay
    set PTOMGifColThumb [expr int($PTOMGifCol * $PSPThumbnails)]
    set PTOMGifLigThumb [expr int($PTOMGifLig * $PSPThumbnails)]
    set GnuSize $PTOMGifColThumb; append GnuSize ","; append GnuSize $PTOMGifLigThumb
    puts $GnuplotPipePTOMDisplay "set terminal png tiny size $GnuSize font 'arial'"; flush $GnuplotPipePTOMDisplay
    puts $GnuplotPipePTOMDisplay "set output \x22$GnuOutputFile\x22"; flush $GnuplotPipePTOMDisplay

    if [file exists $TMPPTOMDisplayFileOutputXYtxt] {
        set f [open $TMPPTOMDisplayFileOutputXYtxt r]
        gets $f tmp; gets $f xmin; gets $f xmax
        gets $f tmp; gets $f ymin; gets $f ymax
        gets $f zmin; gets $f zmax
        gets $f min; gets $f max
        gets $f Nctr; gets $f NctrStart; gets $f NctrIncr
        close $f
        }
    if [file exists $TMPPTOMDisplayFileOutputXYbin] {  
        puts $GnuplotPipePTOMDisplay "set colorbox"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set autoscale xfix"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set autoscale yfix"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set palette defined (0 '#000090',1 '#000FFF',2 '#0090FF',3 '#0FFFEE',4 '#90FF70',5 '#FFEE00',6 '#FF7000',7 '#EE0000',8 '#7F0000')"; flush $GnuplotPipePTOMDisplay
        set cbrg "\x5B$min:$max\x5D";puts $GnuplotPipePTOMDisplay "set cbrange $cbrg"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set linewidth 3"; flush $GnuplotPipePTOMDisplay 

        set xlbl "$PTOMDisplayLabelX - \x5B $PTOMxdim \x5D"
        set ylbl "$PTOMDisplayLabelY - \x5B $PTOMzdim \x5D"
        puts $GnuplotPipePTOMDisplay "set xlabel \x22$xlbl\x22"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set ylabel \x22$ylbl\x22"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set title \x22$PTOMDisplayTitle\x22 textcolor lt 3"; flush $GnuplotPipePTOMDisplay

        set xrg "\x5B$xmin:$xmax\x5D";puts $GnuplotPipePTOMDisplay "set xrange $xrg noreverse nowriteback"; flush $GnuplotPipePTOMDisplay
        set yrg "\x5B$ymin:$ymax\x5D"; puts $GnuplotPipePTOMDisplay "set yrange $yrg noreverse nowriteback"; flush $GnuplotPipePTOMDisplay
        set zrg "\x5B$min:$max\x5D"; puts $GnuplotPipePTOMDisplay "set zrange $zrg noreverse nowriteback"; flush $GnuplotPipePTOMDisplay

        if {$PTOMDisplayFileZGround != "nofile" && $PTOMDisplayFileZTop != "nofile" } {
            puts $GnuplotPipePTOMDisplay "plot \x22$TMPPTOMDisplayFileOutputXYbin\x22 binary matrix with image notitle, \x22$TMPPTOMDisplayFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, \x22$TMPPTOMDisplayFileOutputXbin\x22 using 1:3 with lines linecolor rgb 'white' notitle"; flush $GnuplotPipePTOMDisplay
            }
        if {$PTOMDisplayFileZGround == "nofile" || $PTOMDisplayFileZTop == "nofile" } {
            puts $GnuplotPipePTOMDisplay "plot \x22$TMPPTOMDisplayFileOutputXYbin\x22 binary matrix with image notitle, \x22$TMPPTOMDisplayFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle"; flush $GnuplotPipePTOMDisplay
            }
        if {$PTOMDisplayFileZGround == "nofile" && $PTOMDisplayFileZTop == "nofile" } {
            puts $GnuplotPipePTOMDisplay "plot \x22$TMPPTOMDisplayFileOutputXYbin\x22 binary matrix with image notitle"; flush $GnuplotPipePTOMDisplay
            }
        }

    puts $GnuplotPipePTOMDisplay "unset output"; flush $GnuplotPipePTOMDisplay 
    
    WaitUntilCreated $TMPGnuPlot1Tk
    }
}
#############################################################################
## Procedure:  PsPPTOMDisplay

proc ::PsPPTOMDisplay {} {
global GnuplotPipeFid GnuplotPipePTOMDisplay 
global TestVarError TestVarName TestVarType TestVarValue TestVarMin TestVarMax
global ImageMagickMaker TMPGnuPlotTk1 TMPGnuPlot1Tk GnuOutputFormat GnuOutputFile
global TMPPTOMDisplayFileOutputXbin TMPPTOMDisplayFileOutputXYbin TMPPTOMDisplayFileOutputXYtxt
global PTOMDisplayLabelX PTOMDisplayLabelY PTOMDisplayTitle PTOMxdim PTOMzdim 
global PTOMDisplayFileZGround PTOMDisplayFileZTop
global PTOMGifCol PTOMGifLig
global PlatForm WinDir GnuPlotPath WGNUPLOTINIDir ImageMagickMaker PSPThumbnails

DeleteFile $TMPGnuPlotTk1
DeleteFile $TMPGnuPlot1Tk

WaitUntilCreated $TMPPTOMDisplayFileOutputXYbin
WaitUntilCreated $TMPPTOMDisplayFileOutputXYtxt

if [file exists $TMPPTOMDisplayFileOutputXYtxt] {

    if {$GnuplotPipePTOMDisplay == ""} {
        if {$PlatForm == "windows"} {
            set Wgnuplot_Config "$WGNUPLOTINIDir/WGNUPLOT.INI"
            DeleteFile $Wgnuplot_Config
            set f [open $Wgnuplot_Config w+]
            puts $f "\x5BWGNUPLOT\x5D"
            puts $f "TextOrigin=0 0"
            puts $f "TextSize=640 150"
            puts $f "TextFont=Terminal,8"
            puts $f "GraphOrigin=0 0"
            puts $f "GraphSize=1 1"
            puts $f "Graph=Arial,8"
            puts $f "GraphColor=1"
            puts $f "GraphToTop=1"
            puts $f "GraphBackground=255 255 255"
            puts $f "Border=0 0 0 0 0"
            puts $f "Axis=192 192 192 2 2"
            puts $f "Line1=255 255 255 0 0"
            puts $f "Line2=255 255 255 0 1"
            puts $f "Line3=255 0 0 0 2"
            puts $f "Line4=255 0 255 0 3"
            puts $f "Line5=0 0 128 0 4"
            close $f
            }
    
        set GnuplotPipeFid [ open "| $GnuPlotPath" r+]
        set GnuplotPipePTOMDisplay $GnuplotPipeFid
        }

    PsPPTOMDisplayThumb

    set GnuOutputFile $TMPGnuPlotTk1
    puts $GnuplotPipePTOMDisplay "reset"; flush $GnuplotPipePTOMDisplay
    puts $GnuplotPipePTOMDisplay "clear"; flush $GnuplotPipePTOMDisplay
    set GnuSize $PTOMGifCol; append GnuSize ","; append GnuSize $PTOMGifLig
    puts $GnuplotPipePTOMDisplay "set terminal gif medium size $GnuSize font 'arial'"; flush $GnuplotPipePTOMDisplay
    puts $GnuplotPipePTOMDisplay "set output \x22$GnuOutputFile\x22"; flush $GnuplotPipePTOMDisplay

    if [file exists $TMPPTOMDisplayFileOutputXYtxt] {
        set f [open $TMPPTOMDisplayFileOutputXYtxt r]
        gets $f tmp; gets $f xmin; gets $f xmax
        gets $f tmp; gets $f ymin; gets $f ymax
        gets $f zmin; gets $f zmax
        gets $f min; gets $f max
        gets $f Nctr; gets $f NctrStart; gets $f NctrIncr
        close $f
        }
    if [file exists $TMPPTOMDisplayFileOutputXYbin] {  
        puts $GnuplotPipePTOMDisplay "set colorbox"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set autoscale xfix"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set autoscale yfix"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set palette defined (0 '#000090',1 '#000FFF',2 '#0090FF',3 '#0FFFEE',4 '#90FF70',5 '#FFEE00',6 '#FF7000',7 '#EE0000',8 '#7F0000')"; flush $GnuplotPipePTOMDisplay
        set cbrg "\x5B$min:$max\x5D";puts $GnuplotPipePTOMDisplay "set cbrange $cbrg"; flush $GnuplotPipePTOMDisplay

        set xlbl "$PTOMDisplayLabelX - \x5B $PTOMxdim \x5D"
        set ylbl "$PTOMDisplayLabelY - \x5B $PTOMzdim \x5D"
        puts $GnuplotPipePTOMDisplay "set xlabel \x22$xlbl\x22"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set ylabel \x22$ylbl\x22"; flush $GnuplotPipePTOMDisplay
        puts $GnuplotPipePTOMDisplay "set title \x22$PTOMDisplayTitle\x22 textcolor lt 3"; flush $GnuplotPipePTOMDisplay

        set xrg "\x5B$xmin:$xmax\x5D";puts $GnuplotPipePTOMDisplay "set xrange $xrg noreverse nowriteback"; flush $GnuplotPipePTOMDisplay
        set yrg "\x5B$ymin:$ymax\x5D"; puts $GnuplotPipePTOMDisplay "set yrange $yrg noreverse nowriteback"; flush $GnuplotPipePTOMDisplay
        set zrg "\x5B$min:$max\x5D"; puts $GnuplotPipePTOMDisplay "set zrange $zrg noreverse nowriteback"; flush $GnuplotPipePTOMDisplay

        if {$PTOMDisplayFileZGround != "nofile" && $PTOMDisplayFileZTop != "nofile" } {
            puts $GnuplotPipePTOMDisplay "plot \x22$TMPPTOMDisplayFileOutputXYbin\x22 binary matrix with image notitle, \x22$TMPPTOMDisplayFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, \x22$TMPPTOMDisplayFileOutputXbin\x22 using 1:3 with lines linecolor rgb 'white' notitle"; flush $GnuplotPipePTOMDisplay
            }
        if {$PTOMDisplayFileZGround == "nofile" || $PTOMDisplayFileZTop == "nofile" } {
            puts $GnuplotPipePTOMDisplay "plot \x22$TMPPTOMDisplayFileOutputXYbin\x22 binary matrix with image notitle, \x22$TMPPTOMDisplayFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle"; flush $GnuplotPipePTOMDisplay
            }
        if {$PTOMDisplayFileZGround == "nofile" && $PTOMDisplayFileZTop == "nofile" } {
            puts $GnuplotPipePTOMDisplay "plot \x22$TMPPTOMDisplayFileOutputXYbin\x22 binary matrix with image notitle"; flush $GnuplotPipePTOMDisplay
            }
        }

    puts $GnuplotPipePTOMDisplay "unset output"; flush $GnuplotPipePTOMDisplay 
    
    set ErrorCatch [catch {puts $GnuplotPipePTOMDisplay "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipePTOMDisplay "quit"; flush $GnuplotPipePTOMDisplay 
        }
    catch "close $GnuplotPipePTOMDisplay"
    set GnuplotPipePTOMDisplay ""

    WaitUntilCreated $TMPGnuPlotTk1

    set ProgressLine "0"; update
    ViewGnuPlotTK tomo .top524 "Tomogram Display"
    }
}
#############################################################################
## Procedure:  PsPScatterPlotThumb

proc ::PsPScatterPlotThumb {BorderType ScatterPlotLabelX ScatterPlotLabelY ScatterPlotTitle ScatterPlotWidgetNum WidgetScatterPlot} {
global MinMaxAutoScatterPlotX MinMaxContrastScatterPlotX
global MinMaxAutoScatterPlotY MinMaxContrastScatterPlotY
global VarError ErrorMessage Fonction Fonction2 ProgressLine OpenDirFile
global TestVarError TestVarName TestVarType TestVarValue TestVarMin TestVarMax
global TMPScatterPlotFileOutputXtxt TMPScatterPlotFileOutputXbin TMPScatterPlotFileOutputYtxt TMPScatterPlotFileOutputYbin
global TMPScatterPlotFileOutputXYbin TMPScatterPlotFileOutputXYtxt
global GnuplotPipeFid GnuplotPipeScatterPlot GnuXview GnuZview  
global ImageMagickMaker GnuOutputFormat GnuOutputFile
global TMPGnuPlot1Tk TMPGnuPlot2Tk TMPGnuPlot3Tk TMPGnuPlot4Tk 
global TMPGnuPlot5Tk TMPGnuPlot6Tk TMPGnuPlot7Tk TMPGnuPlot8Tk TMPGnuPlot9Tk 
global TMPGnuPlotTk1 TMPGnuPlotTk2 TMPGnuPlotTk3 TMPGnuPlotTk4
global TMPGnuPlotTk5 TMPGnuPlotTk6 TMPGnuPlotTk7 TMPGnuPlotTk8 TMPGnuPlotTk9
global PlatForm WinDir GnuPlotPath WGNUPLOTINIDir PSPThumbnails

WaitUntilCreated $TMPScatterPlotFileOutputXYbin
WaitUntilCreated $TMPScatterPlotFileOutputXYtxt

if [file exists $TMPScatterPlotFileOutputXYtxt] {
    if {$ScatterPlotWidgetNum == 1} { DeleteFile $TMPGnuPlot1Tk }
    if {$ScatterPlotWidgetNum == 2} { DeleteFile $TMPGnuPlot2Tk }
    if {$ScatterPlotWidgetNum == 3} { DeleteFile $TMPGnuPlot3Tk }
    if {$ScatterPlotWidgetNum == 4} { DeleteFile $TMPGnuPlot4Tk }
    if {$ScatterPlotWidgetNum == 5} { DeleteFile $TMPGnuPlot5Tk }
    if {$ScatterPlotWidgetNum == 6} { DeleteFile $TMPGnuPlot6Tk }
    if {$ScatterPlotWidgetNum == 7} { DeleteFile $TMPGnuPlot7Tk }
    if {$ScatterPlotWidgetNum == 8} { DeleteFile $TMPGnuPlot8Tk }
    if {$ScatterPlotWidgetNum == 9} { DeleteFile $TMPGnuPlot9Tk }  

    if {$ScatterPlotWidgetNum == 1} { set GnuOutputFile $TMPGnuPlot1Tk }
    if {$ScatterPlotWidgetNum == 2} { set GnuOutputFile $TMPGnuPlot2Tk }
    if {$ScatterPlotWidgetNum == 3} { set GnuOutputFile $TMPGnuPlot3Tk }
    if {$ScatterPlotWidgetNum == 4} { set GnuOutputFile $TMPGnuPlot4Tk }
    if {$ScatterPlotWidgetNum == 5} { set GnuOutputFile $TMPGnuPlot5Tk }
    if {$ScatterPlotWidgetNum == 6} { set GnuOutputFile $TMPGnuPlot6Tk }
    if {$ScatterPlotWidgetNum == 7} { set GnuOutputFile $TMPGnuPlot7Tk }
    if {$ScatterPlotWidgetNum == 8} { set GnuOutputFile $TMPGnuPlot8Tk }
    if {$ScatterPlotWidgetNum == 9} { set GnuOutputFile $TMPGnuPlot9Tk }  

    puts $GnuplotPipeScatterPlot "reset"; flush $GnuplotPipeScatterPlot 
    puts $GnuplotPipeScatterPlot "clear"; flush $GnuplotPipeScatterPlot
    set GnuSizeCol [expr (640 * $PSPThumbnails)]
    set GnuSizeLig [expr (480 * $PSPThumbnails)]
    set GnuSize $GnuSizeCol; append GnuSize ","; append GnuSize $GnuSizeLig
    puts $GnuplotPipeScatterPlot "set terminal png tiny size $GnuSize font 'arial'"; flush $GnuplotPipeScatterPlot 
#    puts $GnuplotPipeScatterPlot "set terminal gif small size $GnuSize"; flush $GnuplotPipeScatterPlot 
    puts $GnuplotPipeScatterPlot "set output \x22$GnuOutputFile\x22"; flush $GnuplotPipeScatterPlot 

    if [file exists $TMPScatterPlotFileOutputXYtxt ] {
        set f [open $TMPScatterPlotFileOutputXYtxt r]
        gets $f tmp; gets $f xmin; gets $f xmax
        gets $f tmp; gets $f ymin; gets $f ymax
        gets $f zmin; gets $f zmax
        gets $f min; gets $f max
        gets $f Nctr; gets $f NctrStart; gets $f NctrIncr
        close $f
        }
    if [file exists $TMPScatterPlotFileOutputXYbin ] {  
        puts $GnuplotPipeScatterPlot "set colorbox"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set autoscale xfix"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set autoscale yfix"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set palette defined (0 '#000090',1 '#000FFF',2 '#0090FF',3 '#0FFFEE',4 '#90FF70',5 '#FFEE00',6 '#FF7000',7 '#EE0000',8 '#7F0000')"; flush $GnuplotPipeScatterPlot 
        set cbrg "\x5B$zmin:$zmax\x5D";puts $GnuplotPipeScatterPlot "set cbrange $cbrg"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set linewidth 3"; flush $GnuplotPipeScatterPlot 

        set xlbl $ScatterPlotLabelX
        set ylbl $ScatterPlotLabelY
        set zlbl ""
        puts $GnuplotPipeScatterPlot "set xlabel \x22$xlbl\x22"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set ylabel \x22$ylbl\x22"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set zlabel \x22$zlbl\x22"; flush $GnuplotPipeScatterPlot 
        set titre "$ScatterPlotTitle - (Scale: 10^n)"
        puts $GnuplotPipeScatterPlot "set title \x22$titre\x22 textcolor lt 3"; flush $GnuplotPipeScatterPlot 

        set minmaxval "Max = $max $zlbl"
        puts $GnuplotPipeScatterPlot "set label \x22$minmaxval\x22 at screen 0.05, screen 0.020 textcolor lt 1"; flush $GnuplotPipeScatterPlot 
        set minmaxval "Min = $min $zlbl"
        puts $GnuplotPipeScatterPlot "set label \x22$minmaxval\x22 at screen 0.65, screen 0.020 textcolor lt 1"; flush $GnuplotPipeScatterPlot 

        set xrg "\x5B$xmin:$xmax\x5D"; puts $GnuplotPipeScatterPlot "set xrange $xrg noreverse nowriteback"; flush $GnuplotPipeScatterPlot 
        set yrg "\x5B$ymin:$ymax\x5D"; puts $GnuplotPipeScatterPlot "set yrange $yrg noreverse nowriteback"; flush $GnuplotPipeScatterPlot 
        set zrg "\x5B$zmin:$zmax\x5D"; puts $GnuplotPipeScatterPlot "set zrange $zrg noreverse nowriteback"; flush $GnuplotPipeScatterPlot 

        if {$BorderType == "HAlpha" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 3:4 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 5:6 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 7:8 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:5 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:6 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:8 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:9 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:11 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:12 with lines linecolor rgb 'white' notitle"
            }
        if {$BorderType == "HA" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:5 with lines linecolor rgb 'white' notitle, "
            }
        if {$BorderType == "AAlpha" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 3:4 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 3:5 with lines linecolor rgb 'white' notitle"
            }
        if {$BorderType == "HAlphaDual" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 3:4 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:5 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:6 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:8 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:9 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:11 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:12 with lines linecolor rgb 'white' notitle"
            }
        if {$BorderType == "LogCumul" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:2 with lines linecolor rgb 'white' notitle"
            }
        puts $GnuplotPipeScatterPlot "plot $ArgumentGnuPlot"; flush $GnuplotPipeScatterPlot 
        }
    
    puts $GnuplotPipeScatterPlot "unset output"; flush $GnuplotPipeScatterPlot 

    if {$ScatterPlotWidgetNum == 1} { WaitUntilCreated $TMPGnuPlot1Tk }
    if {$ScatterPlotWidgetNum == 2} { WaitUntilCreated $TMPGnuPlot2Tk }
    if {$ScatterPlotWidgetNum == 3} { WaitUntilCreated $TMPGnuPlot3Tk }
    if {$ScatterPlotWidgetNum == 4} { WaitUntilCreated $TMPGnuPlot4Tk }
    if {$ScatterPlotWidgetNum == 5} { WaitUntilCreated $TMPGnuPlot5Tk }
    if {$ScatterPlotWidgetNum == 6} { WaitUntilCreated $TMPGnuPlot6Tk }
    if {$ScatterPlotWidgetNum == 7} { WaitUntilCreated $TMPGnuPlot7Tk }
    if {$ScatterPlotWidgetNum == 8} { WaitUntilCreated $TMPGnuPlot8Tk }
    if {$ScatterPlotWidgetNum == 9} { WaitUntilCreated $TMPGnuPlot9Tk }  
    }
}
#############################################################################
## Procedure:  PsPScatterPlot

proc ::PsPScatterPlot {ScatterPlotFileInputX ScatterPlotFileMaskX InputFormatX OutputFormatX MinMaxScatterPlotX MinScatterPlotX MaxScatterPlotX ScatterPlotFileInputY ScatterPlotFileMaskY InputFormatY OutputFormatY MinMaxScatterPlotY MinScatterPlotY MaxScatterPlotY OffsetLig OffsetCol FinalNlig FinalNcol BorderType ScatterPlotLabelX ScatterPlotLabelY ScatterPlotTitle ScatterPlotWidgetNum WidgetScatterPlot} {
global MinMaxAutoScatterPlotX MinMaxContrastScatterPlotX
global MinMaxAutoScatterPlotY MinMaxContrastScatterPlotY
global VarError ErrorMessage Fonction Fonction2 ProgressLine OpenDirFile
global TestVarError TestVarName TestVarType TestVarValue TestVarMin TestVarMax
global TMPScatterPlotFileOutputXtxt TMPScatterPlotFileOutputXbin TMPScatterPlotFileOutputYtxt TMPScatterPlotFileOutputYbin
global TMPScatterPlotFileOutputXYbin TMPScatterPlotFileOutputXYtxt
global GnuplotPipeFid GnuplotPipeScatterPlot GnuXview GnuZview  
global ImageMagickMaker GnuOutputFormat GnuOutputFile
global TMPGnuPlot1Tk TMPGnuPlot2Tk TMPGnuPlot3Tk TMPGnuPlot4Tk 
global TMPGnuPlot5Tk TMPGnuPlot6Tk TMPGnuPlot7Tk TMPGnuPlot8Tk TMPGnuPlot9Tk 
global TMPGnuPlotTk1 TMPGnuPlotTk2 TMPGnuPlotTk3 TMPGnuPlotTk4
global TMPGnuPlotTk5 TMPGnuPlotTk6 TMPGnuPlotTk7 TMPGnuPlotTk8 TMPGnuPlotTk9
global PlatForm WinDir GnuPlotPath WGNUPLOTINIDir

DeleteFile $TMPScatterPlotFileOutputXbin
DeleteFile $TMPScatterPlotFileOutputXtxt
DeleteFile $TMPScatterPlotFileOutputYbin
DeleteFile $TMPScatterPlotFileOutputYtxt
DeleteFile $TMPScatterPlotFileOutputXYbin
DeleteFile $TMPScatterPlotFileOutputXYtxt
               
set Fonction "Creation of the ScatterPlot File :"
set Fonction2 ""    
set ProgressLine "0"
WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
update
TextEditorRunTrace "Process The Function Soft/bmp_process/prepare_scatterplot.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$ScatterPlotFileInputX\x22 -mask \x22$ScatterPlotFileMaskX\x22 -obf \x22$TMPScatterPlotFileOutputXbin\x22 -otf \x22$TMPScatterPlotFileOutputXtxt\x22 -ift $InputFormatX -oft $OutputFormatX -nc $FinalNcol -ofr $OffsetLig -ofc $OffsetCol -fnr $FinalNlig -fnc $FinalNcol -mm $MinMaxScatterPlotX -min $MinScatterPlotX -max $MaxScatterPlotX" "k"
set f [ open "| Soft/bmp_process/prepare_scatterplot.exe -if \x22$ScatterPlotFileInputX\x22 -mask \x22$ScatterPlotFileMaskX\x22 -obf \x22$TMPScatterPlotFileOutputXbin\x22 -otf \x22$TMPScatterPlotFileOutputXtxt\x22 -ift $InputFormatX -oft $OutputFormatX -nc $FinalNcol -ofr $OffsetLig -ofc $OffsetCol -fnr $FinalNlig -fnc $FinalNcol -mm $MinMaxScatterPlotX -min $MinScatterPlotX -max $MaxScatterPlotX" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError
WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"

set ProgressLine "0"
WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
update
TextEditorRunTrace "Process The Function Soft/bmp_process/prepare_scatterplot.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$ScatterPlotFileInputY\x22 -mask \x22$ScatterPlotFileMaskY\x22 -obf \x22$TMPScatterPlotFileOutputYbin\x22 -otf \x22$TMPScatterPlotFileOutputYtxt\x22 -ift $InputFormatY -oft $OutputFormatY -nc $FinalNcol -ofr $OffsetLig -ofc $OffsetCol -fnr $FinalNlig -fnc $FinalNcol -mm $MinMaxScatterPlotY -min $MinScatterPlotY -max $MaxScatterPlotY" "k"
set f [ open "| Soft/bmp_process/prepare_scatterplot.exe -if \x22$ScatterPlotFileInputY\x22 -mask \x22$ScatterPlotFileMaskY\x22 -obf \x22$TMPScatterPlotFileOutputYbin\x22 -otf \x22$TMPScatterPlotFileOutputYtxt\x22 -ift $InputFormatY -oft $OutputFormatY -nc $FinalNcol -ofr $OffsetLig -ofc $OffsetCol -fnr $FinalNlig -fnc $FinalNcol -mm $MinMaxScatterPlotY -min $MinScatterPlotY -max $MaxScatterPlotY" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError
WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"

set ProgressLine "0"
WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
update
TextEditorRunTrace "Process The Function Soft/bmp_process/create_scatterplot_border.exe" "k"
TextEditorRunTrace "Arguments: -ifbX \x22$TMPScatterPlotFileOutputXbin\x22 -iftX \x22$TMPScatterPlotFileOutputXtxt\x22 -ifbY \x22$TMPScatterPlotFileOutputYbin\x22 -iftY \x22$TMPScatterPlotFileOutputYtxt\x22 -ofb \x22$TMPScatterPlotFileOutputXYbin\x22 -oft \x22$TMPScatterPlotFileOutputXYtxt\x22 -fnr $FinalNlig -fnc $FinalNcol -bord $BorderType" "k"
set f [ open "| Soft/bmp_process/create_scatterplot_border.exe -ifbX \x22$TMPScatterPlotFileOutputXbin\x22 -iftX \x22$TMPScatterPlotFileOutputXtxt\x22 -ifbY \x22$TMPScatterPlotFileOutputYbin\x22 -iftY \x22$TMPScatterPlotFileOutputYtxt\x22 -ofb \x22$TMPScatterPlotFileOutputXYbin\x22 -oft \x22$TMPScatterPlotFileOutputXYtxt\x22 -fnr $FinalNlig -fnc $FinalNcol -bord $BorderType" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError
WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"

WaitUntilCreated $TMPScatterPlotFileOutputXYbin
WaitUntilCreated $TMPScatterPlotFileOutputXYtxt

if [file exists $TMPScatterPlotFileOutputXYtxt] {

    if {$ScatterPlotWidgetNum == 1} { DeleteFile $TMPGnuPlot1Tk }
    if {$ScatterPlotWidgetNum == 2} { DeleteFile $TMPGnuPlot2Tk }
    if {$ScatterPlotWidgetNum == 3} { DeleteFile $TMPGnuPlot3Tk }
    if {$ScatterPlotWidgetNum == 4} { DeleteFile $TMPGnuPlot4Tk }
    if {$ScatterPlotWidgetNum == 5} { DeleteFile $TMPGnuPlot5Tk }
    if {$ScatterPlotWidgetNum == 6} { DeleteFile $TMPGnuPlot6Tk }
    if {$ScatterPlotWidgetNum == 7} { DeleteFile $TMPGnuPlot7Tk }
    if {$ScatterPlotWidgetNum == 8} { DeleteFile $TMPGnuPlot8Tk }
    if {$ScatterPlotWidgetNum == 9} { DeleteFile $TMPGnuPlot9Tk }  

    if {$ScatterPlotWidgetNum == 1} { DeleteFile $TMPGnuPlotTk1 }
    if {$ScatterPlotWidgetNum == 2} { DeleteFile $TMPGnuPlotTk2 }
    if {$ScatterPlotWidgetNum == 3} { DeleteFile $TMPGnuPlotTk3 }
    if {$ScatterPlotWidgetNum == 4} { DeleteFile $TMPGnuPlotTk4 }
    if {$ScatterPlotWidgetNum == 5} { DeleteFile $TMPGnuPlotTk5 }
    if {$ScatterPlotWidgetNum == 6} { DeleteFile $TMPGnuPlotTk6 }
    if {$ScatterPlotWidgetNum == 7} { DeleteFile $TMPGnuPlotTk7 }
    if {$ScatterPlotWidgetNum == 8} { DeleteFile $TMPGnuPlotTk8 }
    if {$ScatterPlotWidgetNum == 9} { DeleteFile $TMPGnuPlotTk9 }  

    if {$GnuplotPipeScatterPlot == ""} {
      if {$PlatForm == "windows"} {
        set Wgnuplot_Config "$WGNUPLOTINIDir/WGNUPLOT.INI"
        DeleteFile $Wgnuplot_Config
        set f [open $Wgnuplot_Config w+]
        puts $f "\x5BWGNUPLOT\x5D"
        puts $f "TextOrigin=0 0"
        puts $f "TextSize=640 150"
        puts $f "TextFont=Terminal,8"
        puts $f "GraphOrigin=0 0"
        puts $f "GraphSize=1 1"
        puts $f "Graph=Arial,8"
        puts $f "GraphColor=1"
        puts $f "GraphToTop=1"
        puts $f "GraphBackground=255 255 255"
        puts $f "Border=0 0 0 0 0"
        puts $f "Axis=192 192 192 2 2"
        puts $f "Line1=255 255 255 0 0"
        puts $f "Line2=255 255 255 0 1"
        puts $f "Line3=255 0 0 0 2"
        puts $f "Line4=255 0 255 0 3"
        puts $f "Line5=0 0 128 0 4"
        close $f
        }
      set GnuplotPipeFid [ open "| $GnuPlotPath" r+]
    	set GnuplotPipeScatterPlot $GnuplotPipeFid
	}

    PsPScatterPlotThumb $BorderType $ScatterPlotLabelX $ScatterPlotLabelY $ScatterPlotTitle $ScatterPlotWidgetNum $WidgetScatterPlot

    if {$ScatterPlotWidgetNum == 1} { set GnuOutputFile $TMPGnuPlotTk1 }
    if {$ScatterPlotWidgetNum == 2} { set GnuOutputFile $TMPGnuPlotTk2 }
    if {$ScatterPlotWidgetNum == 3} { set GnuOutputFile $TMPGnuPlotTk3 }
    if {$ScatterPlotWidgetNum == 4} { set GnuOutputFile $TMPGnuPlotTk4 }
    if {$ScatterPlotWidgetNum == 5} { set GnuOutputFile $TMPGnuPlotTk5 }
    if {$ScatterPlotWidgetNum == 6} { set GnuOutputFile $TMPGnuPlotTk6 }
    if {$ScatterPlotWidgetNum == 7} { set GnuOutputFile $TMPGnuPlotTk7 }
    if {$ScatterPlotWidgetNum == 8} { set GnuOutputFile $TMPGnuPlotTk8 }
    if {$ScatterPlotWidgetNum == 9} { set GnuOutputFile $TMPGnuPlotTk9 }  

    puts $GnuplotPipeScatterPlot "reset"; flush $GnuplotPipeScatterPlot 
    puts $GnuplotPipeScatterPlot "clear"; flush $GnuplotPipeScatterPlot 
    puts $GnuplotPipeScatterPlot "set terminal gif medium size 640,480 font 'arial'"; flush $GnuplotPipeScatterPlot 
    puts $GnuplotPipeScatterPlot "set output \x22$GnuOutputFile\x22"; flush $GnuplotPipeScatterPlot 

    if [file exists $TMPScatterPlotFileOutputXYtxt ] {
        set f [open $TMPScatterPlotFileOutputXYtxt r]
        gets $f tmp; gets $f xmin; gets $f xmax
        gets $f tmp; gets $f ymin; gets $f ymax
        gets $f zmin; gets $f zmax
        gets $f min; gets $f max
        gets $f Nctr; gets $f NctrStart; gets $f NctrIncr
        close $f
        }
    if [file exists $TMPScatterPlotFileOutputXYbin ] {  
        puts $GnuplotPipeScatterPlot "set colorbox"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set autoscale xfix"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set autoscale yfix"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set palette defined (0 '#000090',1 '#000FFF',2 '#0090FF',3 '#0FFFEE',4 '#90FF70',5 '#FFEE00',6 '#FF7000',7 '#EE0000',8 '#7F0000')"; flush $GnuplotPipeScatterPlot 
        set cbrg "\x5B$zmin:$zmax\x5D";puts $GnuplotPipeScatterPlot "set cbrange $cbrg"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set linewidth 3"; flush $GnuplotPipeScatterPlot 

        set xlbl $ScatterPlotLabelX
        set ylbl $ScatterPlotLabelY
        set zlbl ""
        puts $GnuplotPipeScatterPlot "set xlabel \x22$xlbl\x22"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set ylabel \x22$ylbl\x22"; flush $GnuplotPipeScatterPlot 
        puts $GnuplotPipeScatterPlot "set zlabel \x22$zlbl\x22"; flush $GnuplotPipeScatterPlot 
        set titre "$ScatterPlotTitle - (Scale: 10^n)"
        puts $GnuplotPipeScatterPlot "set title \x22$titre\x22 textcolor lt 3"; flush $GnuplotPipeScatterPlot 

        set minmaxval "Max = $max $zlbl"
        puts $GnuplotPipeScatterPlot "set label \x22$minmaxval\x22 at screen 0.05, screen 0.020 textcolor lt 1"; flush $GnuplotPipeScatterPlot 
        set minmaxval "Min = $min $zlbl"
        puts $GnuplotPipeScatterPlot "set label \x22$minmaxval\x22 at screen 0.65, screen 0.020 textcolor lt 1"; flush $GnuplotPipeScatterPlot 

        set xrg "\x5B$xmin:$xmax\x5D"; puts $GnuplotPipeScatterPlot "set xrange $xrg noreverse nowriteback"; flush $GnuplotPipeScatterPlot 
        set yrg "\x5B$ymin:$ymax\x5D"; puts $GnuplotPipeScatterPlot "set yrange $yrg noreverse nowriteback"; flush $GnuplotPipeScatterPlot 
        set zrg "\x5B$zmin:$zmax\x5D"; puts $GnuplotPipeScatterPlot "set zrange $zrg noreverse nowriteback"; flush $GnuplotPipeScatterPlot 

        if {$BorderType == "HAlpha" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 3:4 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 5:6 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 7:8 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:5 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:6 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:8 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:9 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:11 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:12 with lines linecolor rgb 'white' notitle"
            }
        if {$BorderType == "HA" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:5 with lines linecolor rgb 'white' notitle, "
            }
        if {$BorderType == "AAlpha" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 3:4 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 3:5 with lines linecolor rgb 'white' notitle"
            }
        if {$BorderType == "HAlphaDual" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:2 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 3:4 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:5 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 4:6 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:8 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 7:9 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:11 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 10:12 with lines linecolor rgb 'white' notitle"
            }
        if {$BorderType == "LogCumul" } {
            set ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXYbin\x22 binary matrix with image notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 1:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputXbin\x22 using 2:3 with lines linecolor rgb 'white' notitle, "
            append ArgumentGnuPlot "\x22$TMPScatterPlotFileOutputYbin\x22 using 1:2 with lines linecolor rgb 'white' notitle"
            }
        puts $GnuplotPipeScatterPlot "plot $ArgumentGnuPlot"; flush $GnuplotPipeScatterPlot 
        }
    
    puts $GnuplotPipeScatterPlot "unset output"; flush $GnuplotPipeScatterPlot 

    set ErrorCatch [catch {puts $GnuplotPipeScatterPlot "quit"}]
    if { $ErrorCatch == "0" } {
        puts $GnuplotPipeScatterPlot "quit"; flush $GnuplotPipeScatterPlot 
        }
    catch "close $GnuplotPipeScatterPlot"
    set GnuplotPipeScatterPlot ""
    set GnuplotPipeFid "" 

    if {$ScatterPlotWidgetNum == 1} { WaitUntilCreated $TMPGnuPlotTk1 }
    if {$ScatterPlotWidgetNum == 2} { WaitUntilCreated $TMPGnuPlotTk2 }
    if {$ScatterPlotWidgetNum == 3} { WaitUntilCreated $TMPGnuPlotTk3 }
    if {$ScatterPlotWidgetNum == 4} { WaitUntilCreated $TMPGnuPlotTk4 }
    if {$ScatterPlotWidgetNum == 5} { WaitUntilCreated $TMPGnuPlotTk5 }
    if {$ScatterPlotWidgetNum == 6} { WaitUntilCreated $TMPGnuPlotTk6 }
    if {$ScatterPlotWidgetNum == 7} { WaitUntilCreated $TMPGnuPlotTk7 }
    if {$ScatterPlotWidgetNum == 8} { WaitUntilCreated $TMPGnuPlotTk8 }
    if {$ScatterPlotWidgetNum == 9} { WaitUntilCreated $TMPGnuPlotTk9 } 

    set ProgressLine "0"; update
    ViewGnuPlotTK $ScatterPlotWidgetNum $WidgetScatterPlot "Scatter Plot"

    }
}
#############################################################################
## Procedure:  SNAPReadXML

proc ::SNAPReadXML {FileIn FileTmp Sensor} {
if {![file readable $FileIn]} {return}
set res ""
set fin [open $FileIn r]
set ctrl [gets $fin]
if {[lindex $ctrl 0] eq "<?xml" && [lindex $ctrl end] eq "?>"} {
    foreach paire [split [string range $ctrl 6 end-3] " "] {
        foreach "id val" [split $paire "="] { set $id [string tolower [lindex $val 0]] }
        }
    #if {$version ne "1.0" || $standalone ne "yes" || ![info exists encoding]} { return }
    if {$version ne "1.0" || ![info exists encoding]} { return }
    }

set ftmp [open $FileTmp w]

gets $fin xml

set ValNcol ""
set ValNrow ""
set ValGeo ""

set nblank 0
set blanktxt ""
while { ![eof $fin] } {
    gets $fin xml
    regsub -all {>\s*<} [string trim $xml " \n\t<>"] "\} \{" xml
    set xml [string map { > "\} \{\x0E " < "\} \{" } $xml]
    set val_tag ""; set val_para ""; set tagtmp {}
    set debutxml "false"; set finxml "false"
    foreach item "{$xml}" {
        switch -regexp -- $item {
            ^\x0F { continue }
            ^!DOCTYPE { continue }
            ^!-- { continue }
            ^\x0E { set val_para [string range $item 2 end] }
            ^/ { set finxml "true" }
            default {
                set debutxml "true"
                set tagname [lindex [string map {{ "} \" {" } \"} $item] 0]
                set tagtmp [string map {"\"" ","} $item]
                set tagtmp [lrange $tagtmp 1 end]
                set tagtmp [string map {"=," ": "} $tagtmp]
                if {$tagtmp == ""} {
                    set val_tag $tagname
                    } else {
                    set val_tag "$tagname ($tagtmp)"
                    set val_tag [string map {",)" ")"} $val_tag]
                    }
                }
            }
        }
    set tag_para "true"; set changeblank "false"; set tag_name "true"
    if {$debutxml == "true" && $finxml == "false"} { set tag_para "false"; set tag_name "begin"; set changeblank "true"; set nblank [expr $nblank + 1] }
    if {$debutxml == "false" && $finxml == "true"} { set tag_para "false"; set tag_name "false"; set changeblank "true"; set nblank [expr $nblank - 1] }
    set val_tagout $blanktxt; append val_tagout $val_tag
    if {$tag_name != "false"} { 
        if {$tag_name == "begin"} {
            } else {
            set pointtxt ""; set lenghtpoint [ expr 69 - [string length $val_tagout]]
            for {set i 0} {$i < $lenghtpoint} {incr i} { append pointtxt "." }
            append val_tagout $pointtxt; append val_tagout ": "
            if {$tag_para == "true"} { append val_tagout $val_para }
            if {$Sensor == "radarsat"} {
                if {$val_tag == "incidenceAngleNearRange (units: deg)"} { puts $ftmp $val_para }
                if {$val_tag == "incidenceAngleFarRange (units: deg)"} { puts $ftmp $val_para }
                if {$val_tag == "sampledPixelSpacing (units: m)"} { puts $ftmp $val_para }
                if {$val_tag == "sampledLineSpacing (units: m)"} { puts $ftmp $val_para }
                }
            if {$Sensor == "terrasar"} {
                }
            if {$Sensor == "target"} {
                if {$val_tag == "first_near_lat"} { puts $ftmp $val_para }
                if {$val_tag == "first_near_long"} { puts $ftmp $val_para }
                if {$val_tag == "first_far_lat"} { puts $ftmp $val_para }
                if {$val_tag == "first_far_long"} { puts $ftmp $val_para }
                if {$val_tag == "last_near_lat"} { puts $ftmp $val_para }
                if {$val_tag == "last_near_long"} { puts $ftmp $val_para }
                if {$val_tag == "last_far_lat"} { puts $ftmp $val_para }
                if {$val_tag == "last_far_long"} { puts $ftmp $val_para }
                }
            }
        }
    }
close $fin
close $ftmp
}
#############################################################################
## Procedure:  SNAPBatchProcess

proc ::SNAPBatchProcess {SNAPParameterFileInput SNAPParameterFileOutput} {
global SNAPDirInput SNAPDirOutput SNAPOutputDir SnapGpt
global SNAPLeaderFile SNAPSensor SNAPSensorPol PolarType
global SNAPResamplingDEM SNAPResamplingIMG SNAPPixelSize TMPSNAPConfigTxt
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global TMPSNAPBatchCfg TMPSNAPBatchOut TMPSNAPBatchRun TMPSNAPBatchDir TMPDir
global wshSnap SnapReader PlatForm ImageConfig ConfigFile
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage
global ProgressLine FunctionAbort NligFullSize NcolFullSize 

WidgetShowTop399; TextEditorRunTrace "Open Window Message" "b"

SNAPDelete

DeleteFile $SNAPParameterFileOutput
DeleteFile "$SNAPParameterFileOutput.hdr"

set SNAPParaName [file tail $SNAPParameterFileInput]; set SNAPParameterName [file rootname $SNAPParaName] 

CopyFile $SNAPParameterFileInput "$TMPDir/target.bin"
set SNAPParameterFileInput "$TMPDir/target.bin"
EnviWriteConfig $SNAPParameterFileInput $NligFullSize $NcolFullSize 4

TextEditorRunTrace "Process The Function Soft/tools/SNAP_batch_config_file.exe" "k"
TextEditorRunTrace "Arguments: -ob \x22$TMPSNAPBatchCfg\x22 -od \x22$TMPDir\x22 -ilf \x22$SNAPLeaderFile\x22 -img $SNAPResamplingIMG -dms $SNAPDEM -dmr $SNAPResamplingDEM -sdm $SNAPSaveDEM -sia $SNAPSaveIncAng -spi $SNAPSaveProjIncAng -rad $SNAPRadioCorrec -pix $SNAPPixelSize -ipf \x22$SNAPParameterFileInput\x22 -ipn $SNAPParameterName -mrgi $SNAPMlkRgIn -mazi $SNAPMlkAzIn -mrgo $SNAPMlkRgOut -mazo $SNAPMlkAzOut -dmf \x22$SNAPDEMFile\x22" "k"
set f [ open "| Soft/tools/SNAP_batch_config_file.exe -ob \x22$TMPSNAPBatchCfg\x22 -od \x22$TMPDir\x22 -ilf \x22$SNAPLeaderFile\x22 -img $SNAPResamplingIMG -dms $SNAPDEM -dmr $SNAPResamplingDEM -sdm $SNAPSaveDEM -sia $SNAPSaveIncAng -spi $SNAPSaveProjIncAng -rad $SNAPRadioCorrec -pix $SNAPPixelSize -ipf \x22$SNAPParameterFileInput\x22 -ipn $SNAPParameterName -mrgi $SNAPMlkRgIn -mazi $SNAPMlkAzIn -mrgo $SNAPMlkRgOut -mazo $SNAPMlkAzOut -dmf \x22$SNAPDEMFile\x22" r]
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError

WaitUntilCreated $TMPSNAPBatchCfg

if [file exists $SnapReader] {
    TextEditorRunTrace "Process The Function SNAP/gpt" "k"
    TextEditorRunTrace "Arguments: \x22$TMPSNAPBatchCfg\x22" "k"
    set f [ open "| \x22$SnapGpt\x22 \x22$TMPSNAPBatchCfg\x22" r]
    set FlagStop 0
    fconfigure $f -buffering line
    while {$FlagStop == 0} {
        if {![eof $f]} {
            gets $f tmp
            update
            } else {
            set FlagStop 1
            catch "close $f"
            }
        }
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    WidgetHideTop399; TextEditorRunTrace "Close Window Message" "b"

    set TMPConfigTxt "$TMPDir/target/config.txt"
    if [file exists $TMPConfigTxt] {
        DeleteFile $SNAPParameterFileInput
        DeleteFile "$SNAPParameterFileInput.hdr"
        DeleteFile "$SNAPDirOutput/config.txt"
        DeleteFile "$SNAPDirOutput/config_mapinfo.txt"
        set TMPConfigHdr "$TMPDir/target/target.bin.bin.hdr"
        TextEditorRunTrace "Process The Function Soft/tools/SNAP_mapinfo_config_file.exe" "k"
        TextEditorRunTrace "Arguments: -id \x22$SNAPDirOutput\x22 -if \x22$TMPConfigHdr\x22 -ss $SNAPSensor -pp $PolarType" "k"
        set f [ open "| Soft/tools/SNAP_mapinfo_config_file.exe -id \x22$SNAPDirOutput\x22 -if \x22$TMPConfigHdr\x22 -ss $SNAPSensor -pp $PolarType" r]
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WaitUntilCreated "$SNAPDirOutput/config.txt"
        WaitUntilCreated "$SNAPDirOutput/config_mapinfo.txt"

        set TMPMetaData "$TMPDir/target/metadata.xml"
        if [file exists $TMPMetaData] {
            DeleteFile "$SNAPOutputDir/GEARTH_POLY.kml"
            TextEditorRunTrace "Process The Function Soft/tools/SNAP_google_file.exe" "k"
            TextEditorRunTrace "Arguments: -od \x22$SNAPOutputDir\x22 -if \x22$TMPMetaData\x22" "k"
            set f [ open "| Soft/tools/SNAP_google_file.exe -od \x22$SNAPOutputDir\x22 -if \x22$TMPMetaData\x22" r]
            TextEditorRunTrace "Check RunTime Errors" "r"
            CheckRunTimeError
            WaitUntilCreated "$SNAPOutputDir/GEARTH_POLY.kml"
            set TMPMetaDataOut "$SNAPDirOutput/metadata.xml"
            CopyFile $TMPMetaData $TMPMetaDataOut
            }

        set ConfigFile "$SNAPDirOutput/config.txt"
        WaitUntilCreated $ConfigFile
        set ErrorMessage ""
        LoadConfig
        if {"$ErrorMessage" == ""} {
            set SNAPParameterFileInput "$TMPDir/target/target.bin.bin"
            if [file exists $SNAPParameterFileInput ] { 
                CopyFile $SNAPParameterFileInput $SNAPParameterFileOutput
                EnviWriteConfig $SNAPParameterFileOutput $NligFullSize $NcolFullSize 4
                }
            }
        set ConfigFile "$SNAPDirInput/config.txt"
        set ErrorMessage ""
        LoadConfig

        } else {
        set VarError ""
        set ErrorMessage "A PROBLEM OCCURED DURING THE GEOCODING"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    } else {
    #error message
    set VarError ""
    set ErrorMessage "SNAP S1-TBX APPLICATION NOT LINKED WITH PolSARpro"
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "SNAP S1-TBX APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "SNAP"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "s1tbx"
        set ConfigFileNameList "s1tbx"
        .top341.fra74.lab76 configure -text "SNAP S1-TBX"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/SNAPshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration SNAP Software" "b"
        tkwait variable VarConfigFileName 
        }        
    }
}
#############################################################################
## Procedure:  SNAPDelete

proc ::SNAPDelete {} {
global TMPSNAPBatchCfg TMPSNAPBatchOut TMPSNAPBatchRun TMPSNAPBatchDir TMPDir

DeleteFile $TMPSNAPBatchCfg
DeleteFile $TMPSNAPBatchOut
DeleteFile $TMPSNAPBatchRun
DeleteFile "$TMPDir/target.bin"
DeleteFile "$TMPDir/target.bin.hdr"
#DeleteFile "$TMPDir/target.dim"
#DeleteDir "$TMPDir/target.data"
DeleteDir "$TMPDir/target"
}
#############################################################################
## Procedure:  SNAPConvertIEEE

proc ::SNAPConvertIEEE {SNAPFileIn SNAPFileOut} {
global NligFullSize NcolFullSize Fonction Fonction2 
global ProgressLine

    set Fonction "Convert IEEE"

    if [file exists $SNAPFileIn] {
        set Fonction2 $SNAPFileOut
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/tools/SNAP_convert_ieee.exe" "k"
        TextEditorRunTrace "Arguments: -if \x22$SNAPFileIn\x22 -of \x22$SNAPFileOut\x22 -fnr $NligFullSize -fnc $NcolFullSize" "k"
        set f [ open "| Soft/tools/SNAP_convert_ieee.exe -if \x22$SNAPFileIn\x22 -of \x22$SNAPFileOut\x22 -fnr $NligFullSize -fnc $NcolFullSize" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        }
}
#############################################################################
## Procedure:  CSKBatchProcess

proc ::CSKBatchProcess {CSKDumpArg CSKFileInput} {
global PlatForm PSPDir TMPCSKBatchRun TMPCSKTmp TMPCSKConfig TMPCSKBinary1 TMPCSKBinary2

DeleteFile $TMPCSKBatchRun

if {$CSKDumpArg == "A"} {
    DeleteFile $TMPCSKTmp
    DeleteFile $TMPCSKConfig
    set f [open $TMPCSKBatchRun w]
    set CSKDumpExe "$PSPDir/Soft/lib/hdf5/"
    if {$PlatForm == "windows"} {
        append CSKDumpExe "h5dump_win32.exe"
        set CSKDumpCmd ""
        set LengthCSKDumpExe [string length $CSKDumpExe]
        for {set i 0} {$i <= $LengthCSKDumpExe} {incr i} {
            set lettre [string range $CSKDumpExe $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd " -A \x22"
        set LengthCSKFileInput [string length $CSKFileInput]
        for {set i 0} {$i <= $LengthCSKFileInput} {incr i} {
            set lettre [string range $CSKFileInput $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22 > \x22"
        set LengthTMPCSKTmp [string length $TMPCSKTmp]
        for {set i 0} {$i <= $LengthTMPCSKTmp} {incr i} {
            set lettre [string range $TMPCSKTmp $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22"
        } else {
        append CSKDumpExe "h5dump_linux.exe"
        set CSKDumpCmd "$CSKDumpExe -A \x22$TMPCSKFileInput\x22 > \x22$TMPCSKTmp\x22"
        }

    puts $f $CSKDumpCmd
    puts $f ""
    close $f
    set taskIdCSK [ open "| \x22$TMPCSKBatchRun\x22" r]

    WaitUntilCreated $TMPCSKTmp
    }

if {$CSKDumpArg == "d1"} {
    DeleteFile $TMPCSKTmp
    set f [open $TMPCSKBatchRun w]
    set CSKDumpExe "$PSPDir/Soft/lib/hdf5/"
    if {$PlatForm == "windows"} {
        append CSKDumpExe "h5dump_win32.exe"
        set CSKDumpCmd ""
        set LengthCSKDumpExe [string length $CSKDumpExe]
        for {set i 0} {$i <= $LengthCSKDumpExe} {incr i} {
            set lettre [string range $CSKDumpExe $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd " -d \x22/S01/SBI\x22 -b LE -o \x22"
        set LengthTMPCSKBinary1 [string length $TMPCSKBinary1]
        for {set i 0} {$i <= $LengthTMPCSKBinary1} {incr i} {
            set lettre [string range $TMPCSKBinary1 $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22 \x22"
        set LengthCSKFileInput [string length $CSKFileInput]
        for {set i 0} {$i <= $LengthCSKFileInput} {incr i} {
            set lettre [string range $CSKFileInput $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22 > \x22"
        set LengthTMPCSKTmp [string length $TMPCSKTmp]
        for {set i 0} {$i <= $LengthTMPCSKTmp} {incr i} {
            set lettre [string range $TMPCSKTmp $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22"
        } else {
        append CSKDumpExe "h5dump_linux.exe"
        set CSKDumpCmd "$CSKDumpExe -d \x22/S01/SBI\x22 -b LE -o \x22TMPCSKBinary1\x22 \x22$TMPCSKFileInput\x22 > \x22$TMPCSKTmp\x22"
        }

    puts $f $CSKDumpCmd
    puts $f ""
    close $f
    set taskIdCSK [ open "| \x22$TMPCSKBatchRun\x22" r]

    WaitUntilCreated $TMPCSKBinary1
    }

if {$CSKDumpArg == "d2"} {
    DeleteFile $TMPCSKTmp
    set f [open $TMPCSKBatchRun w]
    set CSKDumpExe "$PSPDir/Soft/lib/hdf5/"
    if {$PlatForm == "windows"} {
        append CSKDumpExe "h5dump_win32.exe"
        set CSKDumpCmd ""
        set LengthCSKDumpExe [string length $CSKDumpExe]
        for {set i 0} {$i <= $LengthCSKDumpExe} {incr i} {
            set lettre [string range $CSKDumpExe $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd " -d \x22/S02/SBI\x22 -b LE -o \x22"
        set LengthTMPCSKBinary2 [string length $TMPCSKBinary2]
        for {set i 0} {$i <= $LengthTMPCSKBinary2} {incr i} {
            set lettre [string range $TMPCSKBinary2 $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22 \x22"
        set LengthCSKFileInput [string length $CSKFileInput]
        for {set i 0} {$i <= $LengthCSKFileInput} {incr i} {
            set lettre [string range $CSKFileInput $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22 > \x22"
        set LengthTMPCSKTmp [string length $TMPCSKTmp]
        for {set i 0} {$i <= $LengthTMPCSKTmp} {incr i} {
            set lettre [string range $TMPCSKTmp $i $i]
            if {$lettre == "/"} { set lettre "\\" }
            append CSKDumpCmd $lettre
            }
        append CSKDumpCmd "\x22"
        } else {
        append CSKDumpExe "h5dump_linux.exe"
        set CSKDumpCmd "$CSKDumpExe -d \x22/S02/SBI\x22 -b LE -o \x22TMPCSKBinary2\x22 \x22$TMPCSKFileInput\x22 > \x22$TMPCSKTmp\x22"
        }

    puts $f $CSKDumpCmd
    puts $f ""
    close $f
    set taskIdCSK [ open "| \x22$TMPCSKBatchRun\x22" r]

    WaitUntilCreated $TMPCSKBinary2
    }
}
#############################################################################
## Procedure:  WidgetShowTop28

proc ::WidgetShowTop28 {} {
global PSPShow28

WidgetShowTop399

if {$PSPShow28 == 1 } {
    Window show .top28
    update
    #after 1000
    }
}
#############################################################################
## Procedure:  WidgetShowTop399

proc ::WidgetShowTop399 {} {
global PSPShow399 Top399

if {$PSPShow399 == 1 } {
    Window show .top399
    update
    after 1000
    set Top399 "on"
    }
}
#############################################################################
## Procedure:  WidgetHideTop399

proc ::WidgetHideTop399 {} {
global Top399

Window hide .top399
update
after 1000
set Top399 "off"
}
#############################################################################
## Procedure:  WidgetHideTop28

proc ::WidgetHideTop28 {} {
global Top399

if {$Top399 == "on"} { WidgetHideTop399 }

Window hide .top28
update
#after 1000
}
#############################################################################
## Procedure:  ViewGnuPlotTK

proc ::ViewGnuPlotTK {NumWidget WidgetNum Title} {
global TMPGnuPlot1Tk TMPGnuPlot2Tk TMPGnuPlot3Tk TMPGnuPlot4Tk
global TMPGnuPlot5Tk TMPGnuPlot6Tk TMPGnuPlot7Tk TMPGnuPlot8Tk
global TMPGnuPlot9Tk PTOMGifColThumb PTOMGifLigThumb
global VarError ErrorMessage WarningMessage WarningMessage2 VarWarning

if {$NumWidget == 1} {
    set TopWidget ".top401"
    set TopWidgetCan ".top401.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot1Tk
    }
if {$NumWidget == 2} {
    set TopWidget ".top402"
    set TopWidgetCan ".top402.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot2Tk
    }
if {$NumWidget == 3} {
    set TopWidget ".top419"
    set TopWidgetCan ".top419.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot3Tk
    }
if {$NumWidget == 4} {
    set TopWidget ".top420"
    set TopWidgetCan ".top420.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot4Tk
    }
if {$NumWidget == 5} {
    set TopWidget ".top421"
    set TopWidgetCan ".top421.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot5Tk
    }
if {$NumWidget == 6} {
    set TopWidget ".top422"
    set TopWidgetCan ".top422.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot6Tk
    }
if {$NumWidget == 7} {
    set TopWidget ".top423"
    set TopWidgetCan ".top423.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot7Tk
    }
if {$NumWidget == 8} {
    set TopWidget ".top424"
    set TopWidgetCan ".top424.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot8Tk
    }
if {$NumWidget == 9} {
    set TopWidget ".top425"
    set TopWidgetCan ".top425.cpd79.can66"
    set TMPGnuPlotTmp $TMPGnuPlot9Tk
    }
if {$NumWidget == "tomo"} {
    set TopWidget ".top401tomo"
    set TopWidgetCan ".top401tomo.cpd79.cpd80"
    set TMPGnuPlotTmp $TMPGnuPlot1Tk
    }

WaitUntilCreated $TMPGnuPlotTmp

Window hide $TopWidget
wm title $TopWidget $Title

if {$NumWidget == 1} {
    package require Img
    image create photo ImageGnuplot1; ImageGnuplot1 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot1
    image delete ImageGnuplot1
    set ErrorCatch [catch { image create photo ImageGnuplot1 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot1 }
    }
if {$NumWidget == 2} {
    package require Img
    image create photo ImageGnuplot2; ImageGnuplot2 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot2
    image delete ImageGnuplot2
    set ErrorCatch [catch { image create photo ImageGnuplot2 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot2 }
    }
if {$NumWidget == 3} {
    package require Img
    image create photo ImageGnuplot3; ImageGnuplot3 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot3
    image delete ImageGnuplot3
    set ErrorCatch [catch { image create photo ImageGnuplot3 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot3 }
    }
if {$NumWidget == 4} {
    package require Img
    image create photo ImageGnuplot4; ImageGnuplot4 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot4
    image delete ImageGnuplot4
    set ErrorCatch [catch { image create photo ImageGnuplot4 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot4 }
    }
if {$NumWidget == 5} {
    package require Img
    image create photo ImageGnuplot5; ImageGnuplot5 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot5
    image delete ImageGnuplot5
    set ErrorCatch [catch { image create photo ImageGnuplot5 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot5 }
    }
if {$NumWidget == 6} {
    package require Img
    image create photo ImageGnuplot6; ImageGnuplot6 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot6
    image delete ImageGnuplot6
    set ErrorCatch [catch { image create photo ImageGnuplot6 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot6 }
    }
if {$NumWidget == 7} {
    package require Img
    image create photo ImageGnuplot7; ImageGnuplot7 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot7
    image delete ImageGnuplot7
    set ErrorCatch [catch { image create photo ImageGnuplot7 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot7 }
    }
if {$NumWidget == 8} {
    package require Img
    image create photo ImageGnuplot8; ImageGnuplot8 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot8
    image delete ImageGnuplot8
    set ErrorCatch [catch { image create photo ImageGnuplot8 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot8 }
    }
if {$NumWidget == 9} {
    package require Img
    image create photo ImageGnuplot9; ImageGnuplot9 blank
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot9
    image delete ImageGnuplot9
    set ErrorCatch [catch { image create photo ImageGnuplot9 -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplot9 }
    }

if {$NumWidget == "tomo"} {
    package require Img
    image create photo ImageGnuplotTomo; ImageGnuplotTomo blank
    $TopWidgetCan configure -width $PTOMGifColThumb -height $PTOMGifLigThumb; update
    $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplotTomo
    image delete ImageGnuplotTomo
    set ErrorCatch [catch { image create photo ImageGnuplotTomo -file $TMPGnuPlotTmp }]
    if { $ErrorCatch == "0" } { $TopWidgetCan create image 0 0 -anchor nw -image ImageGnuplotTomo }
    set x [winfo x $TopWidget]
    set y [winfo y $TopWidget]
    set geometrie $PTOMGifColThumb; append geometrie "x"; append geometrie $PTOMGifLigThumb; append geometrie "+";
    append geometrie $x; append geometrie "+"; append geometrie $y
    wm geometry $TopWidget $geometrie; update
    WidgetGeometryLeft $TopWidget
    catch {wm geometry $TopWidget {}}; update
    Window show $TopWidget  
    }

if {$NumWidget != "tomo"} { WidgetShowFromWidget $WidgetNum $TopWidget }
}
#############################################################################
## Procedure:  PSPcreate_bmp_file_mask

proc ::PSPcreate_bmp_file_mask {PSPcbf_FileInput PSPcbf_FileOutput PSPcbf_InputFormat PSPcbf_OutputFormat PSPcbf_ColorMap PSPcbf_Ncol PSPcbf_OffsetLig PSPcbf_OffsetCol PSPcbf_FinalNlig PSPcbf_FinalNcol PSPcbf_MinMaxBMP PSPcbf_MinBMP PSPcbf_MaxBMP PSPcbf_Mask} {
global Fonction Fonction2 ProgressLine PSPViewGimpBMP

set Fonction "Create BMP file"
set Fonction2 $PSPcbf_FileOutput

set PSPcbf_MaskCmd ""
if [file exists $PSPcbf_Mask] { set PSPcbf_MaskCmd "-mask \x22$PSPcbf_Mask\x22" }

set ProgressLine "0"
WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
update
TextEditorRunTrace "Process The Function Soft/bmp_process/create_bmp_file.exe" "k"
TextEditorRunTrace "Arguments: -if \x22$PSPcbf_FileInput\x22 -of \x22$PSPcbf_FileOutput\x22 -ift $PSPcbf_InputFormat -oft $PSPcbf_OutputFormat -clm \x22$PSPcbf_ColorMap\x22 -nc $PSPcbf_Ncol -ofr $PSPcbf_OffsetLig -ofc $PSPcbf_OffsetCol -fnr $PSPcbf_FinalNlig -fnc $PSPcbf_FinalNcol -mm $PSPcbf_MinMaxBMP -min $PSPcbf_MinBMP -max $PSPcbf_MaxBMP $PSPcbf_MaskCmd" "k"
set f [ open "| Soft/bmp_process/create_bmp_file.exe -if \x22$PSPcbf_FileInput\x22 -of \x22$PSPcbf_FileOutput\x22 -ift $PSPcbf_InputFormat -oft $PSPcbf_OutputFormat -clm \x22$PSPcbf_ColorMap\x22 -nc $PSPcbf_Ncol -ofr $PSPcbf_OffsetLig -ofc $PSPcbf_OffsetCol -fnr $PSPcbf_FinalNlig -fnc $PSPcbf_FinalNcol -mm $PSPcbf_MinMaxBMP -min $PSPcbf_MinBMP -max $PSPcbf_MaxBMP $PSPcbf_MaskCmd" r]
PsPprogressBar $f
TextEditorRunTrace "Check RunTime Errors" "r"
CheckRunTimeError
WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
if {$PSPViewGimpBMP == 1 } { Gimp $PSPcbf_FileOutput }
}
#############################################################################
## Procedure:  PSPCreateDirectoryMask

proc ::PSPCreateDirectoryMask {DirNameCreate DirNameCreateTmp DirNameInput} {
global VarWarning WarningMessage WarningMessage2 ErrorMessage VarError

set VarWarning ""
if [file isdirectory $DirNameCreate] {  
    set VarWarning "ok"
    return $DirNameCreate
    } else {
    set WarningMessage "CREATE THE DIRECTORY ?"
    set WarningMessage2 $DirNameCreate
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        TextEditorRunTrace "Create Directory" "k"
        if { [catch {file mkdir $DirNameCreate} ErrorCreateDir] } {
            set ErrorMessage $ErrorCreateDir
            set VarError ""
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            set VarWarning ""
            }
        set MaskFile "$DirNameCreate/mask_valid_pixels.bin"
        if [file exists $MaskFile] {
            } else {
            set MaskFile "$DirNameInput/mask_valid_pixels.bin"
            if [file exists $MaskFile] { 
                CopyFile "$DirNameInput/mask_valid_pixels.bin" "$DirNameCreate/mask_valid_pixels.bin"
                CopyFile "$DirNameInput/mask_valid_pixels.bin.hdr" "$DirNameCreate/mask_valid_pixels.bin.hdr"
                }
            }
        set ConfigFile "$DirNameCreate/config.txt"
        if [file exists $ConfigFile] {
            } else {
            set ConfigFile "$DirNameInput/config.txt"
            if [file exists $ConfigFile] { 
                CopyFile "$DirNameInput/config.txt" "$DirNameCreate/config.txt"
                }
            }
        return $DirNameCreate
        } else {
        return $DirNameCreateTmp
        }
    }
    
}
#############################################################################
## Procedure:  PSPCreateDirectoryMaskMult

proc ::PSPCreateDirectoryMaskMult {DirNameCreate DirNameCreateTmp DirNameInput} {
global VarWarning WarningMessage WarningMessage2 ErrorMessage VarError

set VarWarning ""
if [file isdirectory $DirNameCreate] {  
    set VarWarning "ok"
    return $DirNameCreate
    } else {
    set WarningMessage "CREATE THE DIRECTORY ?"
    set WarningMessage2 $DirNameCreate
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        TextEditorRunTrace "Create Directory" "k"
        if { [catch {file mkdir $DirNameCreate} ErrorCreateDir] } {
            set ErrorMessage $ErrorCreateDir
            set VarError ""
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            set VarWarning ""
            }
        set MaskFile "$DirNameCreate/mask_valid_pixels.bin"
        if [file exists $MaskFile] {
            } else {
            set MaskFile "$DirNameInput/mask_valid_pixels.bin"
            if [file exists $MaskFile] { 
                CopyFile "$DirNameInput/mask_valid_pixels.bin" "$DirNameCreate/mask_valid_pixels.bin"
                CopyFile "$DirNameInput/mask_valid_pixels.bin.hdr" "$DirNameCreate/mask_valid_pixels.bin.hdr"
                }
            }
        set ConfigFile "$DirNameCreate/config.txt"
        if [file exists $ConfigFile] {
            } else {
            set ConfigFile "$DirNameInput/config.txt"
            if [file exists $ConfigFile] { 
                CopyFile "$DirNameInput/config.txt" "$DirNameCreate/config.txt"
                }
            }
        return $DirNameCreate
        } else {
        return $DirNameCreateTmp
        }
    }
    
}
#############################################################################
## Procedure:  CheckEnvBinData2

proc ::CheckEnvBinData2 {} {
global ActiveProgram ConfigFile PolarType
global DataDir DataDirChannel1 DataDirChannel3
global ConfigFile NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize
global PolarCase PolarType ErrorMessage FatalErrorMessage VarError

set CheckBinData "ko"

if {$ActiveProgram == "POLINSAR"} {
    set conf "0"
    if {$DataDirChannel1 != ""} { set conf "1" }
    if {$DataDirChannel3 != ""} { append conf "2" }
    if {$conf == "12"} {
        if {$DataDirChannel1 == $DataDirChannel3} {
            if [file isdirectory "$DataDirChannel1/T6"] {
                if [file exists "$DataDirChannel1/T6/config.txt"] {
                    set ConfigFile "$DataDirChannel1/T6/config.txt"; LoadConfig
                    if [file exists "$DataDirChannel1/T6/T11.bin"] { set CheckBinData "ok" }
                    }
                }            
            } else {
            set configmaster "Q"
            if {$DataDirChannel1 != ""} {
                if [file exists "$DataDirChannel1/config.txt"] {
                    set ConfigFile "$DataDirChannel1/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configmaster "Q"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s12.bin"] {append configmaster "2"}
                        if [file exists "$DataDirChannel1/s21.bin"] {append configmaster "3"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "4"}
                        }
                    set NligFullSizeMaster $NligFullSize
                    set NcolFullSizeMaster $NcolFullSize
                    set PolarCaseMaster $PolarCase
                    set PolarTypeMaster $PolarType
                    }
                }            
            set configslave "Q"
            if {$DataDirChannel3 != ""} {
                if [file exists "$DataDirChannel3/config.txt"] {
                    set ConfigFile "$DataDirChannel3/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configslave "Q"
                        if [file exists "$DataDirChannel3/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel3/s12.bin"] {append configslave "2"}
                        if [file exists "$DataDirChannel3/s21.bin"] {append configslave "3"}
                        if [file exists "$DataDirChannel3/s22.bin"] {append configslave "4"}
                        }
                    set NligFullSizeSlave $NligFullSize
                    set NcolFullSizeSlave $NcolFullSize
                    set PolarCaseSlave $PolarCase
                    set PolarTypeSlave $PolarType
                    }
                }        
            set config "0"
            if {$configmaster == "Q1234"} {append config "1"}
            if {$configslave == "Q1234"} {append config "2"}
            if {$config == "012"} {
                set configmasterslave "0"
                if {$NligFullSizeMaster == $NligFullSizeSlave} {append configmasterslave "1"}
                if {$NcolFullSizeMaster == $NcolFullSizeSlave} {append configmasterslave "2"}
                if {$PolarCaseMaster == $PolarCaseSlave} {append configmasterslave "3"}
                if {$PolarTypeMaster == $PolarTypeSlave} {append configmasterslave "4"}
                if {$configmasterslave == "01234"} {
                    set CheckBinData "ok"
                    } else {
                    set ErrorMessage "INPUT DATA MUST HAVE THE SAME SIZE AND TYPE"
                    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
                    tkwait variable VarError
                    set ErrorMessage ""
                    } 
                }
            }
        }
    }
    
}
#############################################################################
## Procedure:  CheckEnvironnement2

proc ::CheckEnvironnement2 {} {
global ActiveProgram ConfigFile PolarType DataFormatActive2 ActiveProgram2
global DataDir DataDirChannel1 DataDirChannel2 DataDirChannel3
global ConfigFile NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize
global PolarCase PolarType ErrorMessage FatalErrorMessage VarError
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2 NligFullSize NcolFullSize

set CheckMenuOn "ko"
set DataFormatActive2 ""
set ActiveProgram2 ""

if {$ActiveProgram == "POLINSAR"} {
    set conf "0"
    if {$DataDirChannel1 != ""} { set conf "1" }
    if {$DataDirChannel3 != ""} { append conf "2" }
    if {$conf == "12"} {
        if {$DataDirChannel1 == $DataDirChannel2} {
            if [file isdirectory "$DataDirChannel3/T6"] {
                if [file exists "$DataDirChannel3/T6/config.txt"] {
                    if [file exists "$DataDir/T6/config_mapready.txt"] {
                        if [file exists "$DataDir/T6/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDir; append ConfigMapSource "/T6/config_mapready.txt"
                            set ConfigMapTarget $DataDir; append ConfigMapTarget "/T6/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel1/T6/config.txt"; LoadConfig
                    if [file exists "$DataDirChannel3/T6/T11.bin"] { set DataFormatActive2 "T6"; set CheckMenuOn "ok" }
                    }
                }            
            } else {
            set configmaster "Q"
            if {$DataDirChannel1 != ""} {
                if [file exists "$DataDirChannel1/config.txt"] {
                    if [file exists "$DataDirChannel1/config_mapready.txt"] {
                        if [file exists "$DataDirChannel1/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultChannel1; append ConfigMapSource "/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultChannel1; append ConfigMapTarget "/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel1/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configmaster "Q"
                        if [file exists "$DataDirChannel1/s11.bin"] {append configmaster "1"}
                        if [file exists "$DataDirChannel1/s12.bin"] {append configmaster "2"}
                        if [file exists "$DataDirChannel1/s21.bin"] {append configmaster "3"}
                        if [file exists "$DataDirChannel1/s22.bin"] {append configmaster "4"}
                        }
                    set NligFullSizeMaster $NligFullSize
                    set NcolFullSizeMaster $NcolFullSize
                    set PolarCaseMaster $PolarCase
                    set PolarTypeMaster $PolarType
                    }
                }            
            set configslave "Q"
            if {$DataDirChannel3 != ""} {
                if [file exists "$DataDirChannel3/config.txt"] {
                    if [file exists "$DataDirChannel3/config_mapready.txt"] {
                        if [file exists "$DataDirChannel3/config_mapinfo.txt"] {
                            } else {
                            set ConfigMapSource $DataDirMultChannel3; append ConfigMapSource "/config_mapready.txt"
                            set ConfigMapTarget $DataDirMultChannel3; append ConfigMapTarget "/config_mapinfo.txt"
                            CopyFile $ConfigMapSource $ConfigMapTarget
                            }
                        }
                    set ConfigFile "$DataDirChannel3/config.txt"; LoadConfig
                    if {$PolarType == "full"} {
                        set configslave "Q"
                        if [file exists "$DataDirChannel3/s11.bin"] {append configslave "1"}
                        if [file exists "$DataDirChannel3/s12.bin"] {append configslave "2"}
                        if [file exists "$DataDirChannel3/s21.bin"] {append configslave "3"}
                        if [file exists "$DataDirChannel3/s22.bin"] {append configslave "4"}
                        }
                    set NligFullSizeSlave $NligFullSize
                    set NcolFullSizeSlave $NcolFullSize
                    set PolarCaseSlave $PolarCase
                    set PolarTypeSlave $PolarType
                    }
                }        
            set config "0"
            if {$configmaster == "Q1234"} {append config "1"}
            if {$configslave == "Q1234"} {append config "2"}
            if {$config == "012"} {
                set configmasterslave "0"
                if {$NligFullSizeMaster == $NligFullSizeSlave} {append configmasterslave "1"}
                if {$NcolFullSizeMaster == $NcolFullSizeSlave} {append configmasterslave "2"}
                if {$PolarCaseMaster == $PolarCaseSlave} {append configmasterslave "3"}
                if {$PolarTypeMaster == $PolarTypeSlave} {append configmasterslave "4"}
                if {$configmasterslave == "01234"} {
                    if {$configmaster == "Q1234"} {set DataFormatActive2 "S2"}
                    set CheckMenuOn "ok"
                    } else {
                    set ErrorMessage "INPUT DATA MUST HAVE THE SAME SIZE AND TYPE"
                    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
                    tkwait variable VarError
                    set ErrorMessage ""
                    } 
                }
            }
        }
    }
        
   
if {$CheckMenuOn == "ok" } {
    if {$ActiveProgram == "POLINSAR"} {
        set ActiveProgram2 "POLINSAR2"
        if { $DataFormatActive2 == "S2" } { 
            EnviWriteConfigCheck "$DataDirChannel3" $NligFullSize $NcolFullSize $DataFormatActive2
            }
        if { $DataFormatActive2 == "T6" } { EnviWriteConfigCheck "$DataDirChannel3/T6" $NligFullSize $NcolFullSize $DataFormatActive2}
        }
    } else {
    if {$CheckMenuOn == "ko" } {
        #warning message
        set VarWarning ""
        set WarningMessage "NO DATA FILES FOUND"
        set WarningMessage2 "CHANGE THE DATA DIR OR IMPORT DATA"
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        }
    if {$CheckMenuOn == "koligcol" } {
        #error message
        set VarError ""
        set ErrorMessage "THE DATA FILES HAVE NOT THE SAME ROW / COL SIZE"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }
}
#############################################################################
## Procedure:  Sentinel1_FlipUpDown

proc ::Sentinel1_FlipUpDown {S1DirInput S1DirOutput S1PolarType S1Nlig S1Ncol} {

TextEditorRunTrace "Process S1 Flip Up Down" "k"
TextEditorRunTrace "Process $S1Nlig $S1Ncol" "k"
    
if {$S1PolarType == "SPP"} {
    set ToolsFunction "Soft/tools/cmplx_tools.exe"
    if [file exists "$S1DirInput/s11.bin"] {
        set S1FileInput "$S1DirInput/s11.bin"; set S1FileOutput "$S1DirOutput/s11.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/s12.bin"] {
        set S1FileInput "$S1DirInput/s12.bin"; set S1FileOutput "$S1DirOutput/s12.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/s21.bin"] {
        set S1FileInput "$S1DirInput/s21.bin"; set S1FileOutput "$S1DirOutput/s21.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/s22.bin"] {
        set S1FileInput "$S1DirInput/s22.bin"; set S1FileOutput "$S1DirOutput/s22.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    }
    
if {$S1PolarType == "SPPIPP"} {
    set ToolsFunction "Soft/tools/float_tools.exe"
    if [file exists "$S1DirInput/I11.bin"] {
        set S1FileInput "$S1DirInput/I11.bin"; set S1FileOutput "$S1DirOutput/I11.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/I12.bin"] {
        set S1FileInput "$S1DirInput/I12.bin"; set S1FileOutput "$S1DirOutput/I12.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/I21.bin"] {
        set S1FileInput "$S1DirInput/I21.bin"; set S1FileOutput "$S1DirOutput/I21.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/I22.bin"] {
        set S1FileInput "$S1DirInput/I22.bin"; set S1FileOutput "$S1DirOutput/I22.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    }

if {$S1PolarType == "SPPC2"} {
TextEditorRunTrace "Process C2" "k"
    set ToolsFunction "Soft/tools/float_tools.exe"
    if [file exists "$S1DirInput/C11.bin"] {
        set S1FileInput "$S1DirInput/C11.bin"; set S1FileOutput "$S1DirOutput/C11.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/C12_real.bin"] {
        set S1FileInput "$S1DirInput/C12_real.bin"; set S1FileOutput "$S1DirOutput/C12_real.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/C12_imag.bin"] {
        set S1FileInput "$S1DirInput/C12_imag.bin"; set S1FileOutput "$S1DirOutput/C12_imag.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    if [file exists "$S1DirInput/C22.bin"] {
        set S1FileInput "$S1DirInput/C22.bin"; set S1FileOutput "$S1DirOutput/C22.bin"
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function $ToolsFunction" "k"
        TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
        set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        }
    }

TextEditorRunTrace "Process S1 Mask" "k"
set ToolsFunction "Soft/tools/float_tools.exe"
if [file exists "$S1DirInput/mask_valid_pixels.bin"] {
    set S1FileInput "$S1DirInput/mask_valid_pixels.bin"; set S1FileOutput "$S1DirOutput/mask_valid_pixels.bin"
    set ProgressLine "0"
    WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
    update
    TextEditorRunTrace "Process The Function $ToolsFunction" "k"
    TextEditorRunTrace "Arguments: -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" "k"
    set f [ open "| $ToolsFunction -id \x22$S1DirInput\x22 -od \x22$S1DirOutput\x22 -if \x22$S1FileInput\x22 -of \x22$S1FileOutput\x22 -op flipud -ofr 0 -ofc 0 -fnr $S1Nlig -fnc $S1Ncol" r]
    PsPprogressBar $f
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    }
}
#############################################################################
## Procedure:  LoadConfigTomo

proc ::LoadConfigTomo {} {
global ConfigFile NligFullSize NcolFullSize PolarCase PolarType
global PTOMRowmin PTOMRowmax PTOMRowunit PTOMColmin PTOMColmax PTOMColunit PTOMRowtomo PTOMColtomo
global MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global ErrorMessage VarError FatalErrorMessage VarFatalError

set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""

set PTOMRowmin "?"
set PTOMRowmax "?"
set PTOMRowunit ""
set PTOMColmin "?"
set PTOMColmax "?"
set PTOMColunit ""
set PTOMRowtomo "KO"
set PTOMColtomo "KO"

if [file exists $ConfigFile] {
    set f [open $ConfigFile r]
    gets $f tmp
    gets $f NligFullSize
    gets $f tmp
    gets $f tmp
    gets $f NcolFullSize
    gets $f tmp
    gets $f tmp
    gets $f PolarCase
    gets $f tmp
    gets $f tmp
    gets $f PolarType
    gets $f tmp
    if {![eof $f]} {
        gets $f tmp
        gets $f PTOMRowunit
        gets $f tmp
        gets $f tmp
        gets $f PTOMColunit
        gets $f tmp
        gets $f tmp
        gets $f PTOMRowmin
        gets $f tmp
        gets $f tmp
        gets $f PTOMRowmax
        gets $f tmp
        gets $f tmp
        gets $f PTOMColmin
        gets $f tmp
        gets $f tmp
        gets $f PTOMColmax
        close $f
        set config "false"
        if {$PTOMRowmin != "?" && $PTOMRowmax != "?" && $PTOMRowunit != ""} { set PTOMRowtomo "OK"}
        if {$PTOMColmin != "?" && $PTOMColmax != "?" && $PTOMColunit != ""} { set PTOMColtomo "OK"}
        if {$PolarCase == "monostatic"} {set config "true"}
        if {$PolarCase == "bistatic"} {set config "true"}
        if {$PolarCase == "intensities"} {set config "true"}
        if {$config == "false"} {
            set VarFatalError ""
            set FatalErrorMessage "WRONG POLAR-CASE ARGUMENT IN CONFIG.TXT"
            .top236.fra34.cpd68 configure -state disable
            Window show .top236
            tkwait variable VarFatalError
            }
        set config "false"
        if {$PolarType == "full"} {set config "true"}
        if {$PolarType == "pp1"} {set config "true"}
        if {$PolarType == "pp2"} {set config "true"}
        if {$PolarType == "pp3"} {set config "true"}
        if {$PolarType == "pp4"} {set config "true"}
        if {$PolarType == "pp5"} {set config "true"}
        if {$PolarType == "pp6"} {set config "true"}
        if {$PolarType == "pp7"} {set config "true"}
        if {$config == "false"} {
            set VarFatalError ""
            set FatalErrorMessage "WRONG POLAR-TYPE ARGUMENT IN CONFIG.TXT"
            .top236.fra34.cpd68 configure -state disable
            Window show .top236
            tkwait variable VarFatalError
            }
        set NligInit 1
        set NligEnd $NligFullSize
        set NcolInit 1
        set NcolEnd $NcolFullSize
        set ErrorMessage ""
        } else {
        set NligInit 1
        set NligEnd $NligFullSize
        set NcolInit 1
        set NcolEnd $NcolFullSize
        set PTOMRowmin 1
        set PTOMRowmax $NligFullSize
        set PTOMRowunit "bin"
        set PTOMColmin 1
        set PTOMColmax $NcolFullSize
        set PTOMColunit "bin"
        set ErrorMessage ""
        }
      
    set MapInfoConfigFile [file rootname $ConfigFile]
    append MapInfoConfigFile "_mapinfo.txt" 
    if [file exists $MapInfoConfigFile] { MapInfoReadConfig $MapInfoConfigFile }

    } else {
    set ErrorMessage "NO CONFIG FILE !"
    set NligInit 0
    set NligEnd 0
    set NcolInit 0
    set NcolEnd 0
    }
}

#############################################################################
## Initialization Procedure:  init

proc ::init {argc argv} {
global PSPTopLevel DataDir DataDirChannel1 DataDirChannel2
global PolarType PolarCase DataFormatActive ENVIConfigFile BinaryDataCheck RunTrace 
global ActiveProgram ActiveProgram2 ActiveImportData RADARSAT2DataFormat ALOSDataFormat CSKDataFormat
global SIRCDataFormatPol ESARDataFormat RISATDataFormat SENTINEL1DataFormat
global SessionName SessionNameLogFid ErrorCatch
global PolSigExecFid CalibExecFid StatExecFid PCTExecFid
global HistoExecFid CmplxPlaneExecFid LociCmplxPlaneExecFid ProfileExecFid
global GnuplotPipeFid GnuplotPipeSave
global GnuplotPipeCopol GnuplotPipeXpol GnuplotPipeSpectrum GnuplotPipeSquint GnuplotPipeProfile
global GnuplotPipeCalib GnuplotPipeStat GnuplotPipeHisto GnuplotPipeScatterPlot GnuplotPipePTOMDisplay
global GnuplotPipeCmplxPlane GnuplotPipeLociCmplxPlane
global wshTutorial wshHelp wshGoogleEarth wshGimp wshSnap wshMapReady
global KzFile MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit
global BMPDirInput BMPChange BMPImageOpen BMPViewFileInput ZoomBMP ZoomBMPQL QLBMPZoom QLZoom QLBMPImageOpen
global BMPDropperFlag BMPColorMapDisplay BMPColorMapGrayJetHsv BMPScreenDisplay BMPOutputFormat
global BMPMax BMPMin PVShortcut PVMainMenu DisplayMainMenu BMPSubAreaFlag
global x y plot plot2 tk_strictMotif TrainingAreaTool
global BMPMouseX BMPMouseY MouseInitX MouseInitY MouseEndX MouseEndY MouseNlig MouseNcol
global QLBMPMouseX QLBMPMouseY QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol
global BMPMax_2 BMPMin_2 ZoomBMP_2 BMPImageOpen_2
global RawBinaryQuickLook AlosQuickLook Radarsat2QuickLook TerrasarxQuickLook SircQuickLook CSKQuickLook RisatQuickLook
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook Sentinel1QuickLook
global GoogleLatCenter GoogleLongCenter GoogleLat00 GoogleLong00 GoogleLat0N GoogleLong0N
global GoogleLatN0 GoogleLongN0 GoogleLatNN GoogleLongNN
global DEMLatCenter DEMLongCenter DEMLat00 DEMLong00 DEMLat0N DEMLong0N
global DEMLatN0 DEMLongN0 DEMLatNN DEMLongNN DEMWest DEMEast DEMNorth DEMSouth
global DEMNlig DEMNcol PolSARapShortcut
global WindowShowDataFormatPSP WindowShowDataFormatDual WindowShowDataFormatMult

#BASIS CHANGE
global Load_EllipticalBasisChange
#BATCH PROCEDURE
global Load_BatchProcess Load_BatchProcessS2
#BMP PROCESS
global Load_colormap Load_colormap16 Load_colormap256 Load_colormap32 Load_colormap8 Load_colormap2
global Load_CreateBMPFile Load_CreateHSLFile Load_CreateRGBFile Load_CreateRGBFile_PP Load_Display
global Load_PolSARpro_Viewer Load_Save Load_ViewBMP1 Load_ViewBMPFile Load_ViewBMPLens Load_ViewBMPQL
global Load_Zoom Load_ColorMapGrayJetHsv Load_DisplayMenu Load_ViewOverview Load_ViewBMPOverview
global Load_SavePolSig Load_SaveSpectrum Load_SaveCalib Load_SaveStat Load_SaveHisto Load_SaveCmplxPlane
global Load_SaveLociCmplxPlane Load_SaveProfile Load_ViewBMPAll Load_ViewBMPPCT
global Load_DisplayMenuDual Load_CreateRGBDualFile Load_CreateRGBDualFile_PP Load_BMPtoGeoTIFF Load_CreateKMLFile Load_CreateGrayColorBMPFile 
global Load_CreateBMPKMLFile Load_CreateRGBKMLFile Load_CreateAnimGIF Load_CreateScatterPlot
global Load_ViewGNUPLOT1 Load_ViewGNUPLOT2 Load_ViewGNUPLOT3 Load_ViewGNUPLOT4
global Load_ViewGNUPLOT5 Load_ViewGNUPLOT6 Load_ViewGNUPLOT7 Load_ViewGNUPLOT8
global Load_ViewGNUPLOT9 Load_SaveScatterPlot Load_RGB24toBMP8 Load_CreatePolTomoDisplay Load_ViewGNUPLOTtomo
global Load_SaveDisplay1 Load_SaveDisplay1num Load_SaveDisplay2 Load_SaveDisplay3a Load_SaveDisplay3b
#CALIBRATION
global Load_CalibrationCalibrator Load_CalibrationProcedures Load_CalibrationSquintCheck Load_CalibrationQualityCheck
#DATA CONVERT
global Load_DataFileConvertS2 Load_DataFileConvert_PP Load_DataFileConvert_Ipp
global Load_DataFileConvertC3 Load_DataFileConvertC4
global Load_DataFileConvertT3 Load_DataFileConvertT4
global Load_DataFileConvertSPPIPPC2
#DATA CONVERT DUAL
global Load_DataFileConvertDual
#DATA CONVERT MULT
global Load_DataFileConvertMult
#DATA IMPORT
global Load_AIRSAR Load_ASAR Load_CONVAIR Load_EMISAR Load_ESAR Load_PISAR Load_SETHI Load_UAVSAR
global Load_ASAR_Input_File Load_ASAR_Extract_Data
global Load_ALOS_Input_File Load_ALOS2_Input_File Load_RADARSAT2_Input_File Load_TERRASARX_Input_File Load_SIRC_Input_File Load_CSK_Input_File 
global Load_AIRSAR_Input_File Load_CONVAIR_Input_File Load_EMISAR_Input_File Load_ESAR_Input_File Load_FSAR_Input_File Load_PISAR_Input_File
global Load_SETHI_Input_File Load_UAVSAR_Input_File Load_TANDEMX_Input_File Load_RISAT_Input_File Load_SENTINEL1_Input_File
global Load_EOSI_Extract_Data Load_PSP_Extract_Data Load_SubArea_GraphicEditor Load_ReadGEARTH_POLY Load_CreateGEARTH_POLY Load_ExtractDEM
global Load_RawBinaryData Load_RawBinaryDataFiles Load_PSP_Extract_Data Load_TOPSAR_Extract_Data Load_ALOS_Vex_Input_File
global Load_MapReadyGeocode Load_MapReadyMatrix Load_MapReadyParameter Load_MapReadyTerrain Load_MapInfoUpdate
global Load_SNAPMatrix Load_SNAPParameter Load_EOSI_TDX_Extract_Data
#DATA PROCESS SNGL
global Load_CovarianceElementsT3 Load_CovarianceElementsT4 Load_CovarianceElementsC2 Load_CovarianceElementsC3 Load_CovarianceElementsC4
global Load_CorrelationCoefficients2 Load_CorrelationCoefficients3 Load_CorrelationCoefficients4 Load_CorrelationCoefficientsPP
global Load_HAAlphaClassification Load_HAAlphaDecomposition2 Load_OPCE Load_OPCE_GraphicEditor Load_CompactPolarimetricMode
global Load_PCAnalysis Load_PolarimetricDecomposition Load_PolarimetricDecompositionYam4 Load_PolarisationSynthesis Load_RCSmax Load_SinclairElements
global Load_TrainingAreas_GraphicEditor Load_WishartHAAlphaClassification Load_WishartSupervisedClassification Load_StokesParameters
global Load_IntensitiesElements Load_WishartSupervisedClassification_PP Load_CameronDecomposition Load_PolarSignature
global Load_SubApertureDecomposition Load_SubApertureApplications Load_Statistics Load_ClassificationIdentification
global Load_SurfaceInversion Load_Histograms Load_DataValueProfile Load_FCMHAlphaClassification Load_SoilRoughnessInversion
global Load_HAAlphaDecomposition3 Load_HAAlphaEigenvalue3 Load_HAAlphaEigenvector3 
global Load_HAAlphaDecomposition4 Load_HAAlphaEigenvalue4 Load_HAAlphaEigenvector4 
global Load_HierarchicalSupervisedClassification Load_HierarchicalInputParameters Load_HierarchicalTreeArchitecture
global Load_HistogramStatistics Load_TextureAnalysis Load_EdgeDetector Load_Parameters Load_ParametersPR Load_ParametersZDR Load_DEMestimation Load_TSVMDecomposition
global Load_ClusterProcess Load_ClusterParaAvg Load_ClusterDataSetsAvg Load_MaskAreas_GraphicEditor Load_ROI_GraphicEditor 
global Load_SVMSupervisedClassification Load_SVM_PolarIndic Load_SVM_RBFCrossVal Load_WishartHAAlphaClassification_PP Load_WishartScattModelBasedClassification
global Load_ChangeDetectorFile Load_ChangeDetectorMat Load_CompactDecomposition Load_CompactClassification Load_GPFSupervisedClassification Load_GPFSupervisedClassification_PP
global Load_DiversityIndex
#DATA PROCESS DUAL
global Load_FlatEarthRemoval Load_CovarianceElementsT6_T11 Load_CovarianceElementsT6_T22 Load_CovarianceElementsT6_O12
global Load_CovarianceElementsT4_T11 Load_CovarianceElementsT4_T22 Load_CovarianceElementsT4_O12
global Load_ComplexCoherenceEstimation Load_ComplexCoherenceEstimation_PP Load_ForestHeightEstimation Load_ForestHeightEstimation_PP Load_HeightEstimationInversionProcedures
global Load_POLSARClassification Load_POLinSARUnsupervisedClassification Load_POLinSARSupervisedClassification Load_InterferogramEstimation Load_InterferogramEstimation_PP
global Load_CoherenceCmplxPlane Load_CoherenceCmplxPlane_PP Load_CoherenceLociCmplxPlane Load_CoherenceLociCmplxPlane_PP Load_PCT Load_DisplayPCT
global Load_FlatEarthEstimation Load_FlatEarthEstimation_PP Load_CoarseCoRegistration
global Load_BaselineEstimation Load_CorrelationCoefficients6 Load_CorrelationCoefficients4
#DATA PROCESS MULT
global Load_CoarseCoRegistrationMult Load_HAAlphaDecompositionMult2
global Load_HAAlphaDecompositionMult3 Load_HAAlphaEigenvalueMult3 Load_HAAlphaEigenvectorMult3 
global Load_SinclairElementsMult Load_CovarianceElementsMultT3 Load_CovarianceElementsMultC2 
global Load_DataAnalysisMult Load_DataAnimationMult Load_DataAveragingMult Load_HAAlphaClassificationMult
global Load_WishartSupervisedClassificationMult Load_WishartSupervisedClassificationMult_PP Load_WishartHAAlphaClassificationMult Load_WishartHAAlphaClassificationMult_PP
global Load_ParametersMult Load_ParametersMultPR Load_ParametersMultZDR
global Load_ChangeDetectorFileMult Load_ChangeDetectorMatMult Load_PolarTomography
#SPECKLE FILTER
global Load_SpeckleFilter Load_SpeckleFilter_S2 Load_SpeckleFilterSigma Load_SpeckleFilterSigma_S2
global Load_SpeckleFilterEdge Load_SpeckleFilterEdge_S2 Load_SpeckleFilterLopez Load_SpeckleFilterLopez_S2
global Load_SpeckleFilterAnYang Load_SIRVEstimationRestoration Load_SpeckleFilterScattModelBased Load_SpeckleFilterNLmean Load_SpeckleFilterMeanShift
#SPECKLE FILTER DUAL
global Load_SpeckleFilterDual Load_SpeckleFilterDualEdge Load_SpeckleFilterDualSigma
#SPECKLE FILTER MULT
global Load_SpeckleFilterMult Load_SpeckleFilterMultSigma Load_SpeckleFilterMultLopez
#TOOLS
global Load_CopyDirectory Load_CopyFile Load_CreateDirectory Load_CreateMyFunction Load_DeleteDirectory Load_DeleteFile Load_DeleteMyFunction
global Load_ExecuteMyFunction Load_RenameDirectory Load_RenameFile Load_Tools Load_ToolsMask Load_ToolsFFT Load_VisuVariable Load_ToolsMenu Load_ExportENVI
global Load_ToolsMenuDual Load_CheckBinaryData Load_PolSARproSIM Load_PolSARproSIMgr Load_PolSARproSIMsv Load_DataFileManagement Load_CreateHDRFile
global Load_CreateMask Load_CreateROI Load_DataFormat Load_DataFormatDual Load_DataFormatMult Load_CompareFile Load_CompareDir Load_ComplexFile
global Load_ReadBinaryDataFileValue Load_CheckSizeBinaryDataFile
#UTIL
global Load_AboutPSP Load_Error Load_HelpPSP Load_Environment Load_MainInputDirectory2 Load_MainInputDirectoryASAR Load_Message
global Load_Question Load_TextEdit Load_UnderConstruction Load_Warning Load_Warranty Load_WarrantyPSP Load_TrackVar Load_PSPMemory Load_PSPConfiguration
global Load_FatalError Load_PSPTeam Load_PSPContributors Load_Advice Load_Advice1 Load_EnvironmentDual Load_SetUpError Load_LoadingBMP Load_Processing
global Load_SearchingGoogle Load_Configuration Load_OpenClosePSP Load_EnvironmentMult Load_Advice2 Load_AdviceFunctionality Load_AdviceWarning
global Load_PolSARproCalc Load_PolSARproCalcOutputFile Load_PolSARproCalcOutputMat Load_PolSARproCalcFilter
#POLSARAP
global Load_PolSARapMenu Load_PolSARapAgriculture Load_PolSARapCryosphere Load_PolSARapForestEnvironment Load_PolSARapForestHeightEstimation Load_PolSARapOcean Load_PolSARapUrban


catch {package require unsafe}
set tk_strictMotif 1
catch {package Iwidgets 4.0}

set PSPTopLevel ""
set DataDir ""
set DataDirChannel1 ""
set DataDirChannel2 ""
set PolarType ""
set PolarCase ""
set DataFormatActive "---"
#####################
set ENVIConfigFile 1
set BinaryDataCheck 0
set RunTrace 1
set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""
#####################
set ActiveProgram ""
set ActiveProgram2 ""
set ActiveImportData ""
set ALOSDataFormat ""
set CSKDataFormat ""
set ESARDataFormat ""
set RADARSAT2DataFormat ""
set RISATDataFormat ""
set SENTINEL1DataFormat ""
set SIRCDataFormatPol ""
set RawBinaryQuickLook 0
set AlosQuickLook 0
set AsarQuickLook 0
set CSKQuickLook 0
set Radarsat2QuickLook 0
set RisatQuickLook 0
set Sentinel1QuickLook 0
set TerrasarxQuickLook 0
set SircQuickLook 0
set AirsarQuickLook 0
set ConvairQuickLook 0
set EmisarQuickLook 0
set EsarQuickLook 0
set PisarQuickLook 0
set SethiQuickLook 0
set UavsarQuickLook 0
#####################
set SessionName ""
set SessionNameLogFid ""
set PolSigExecFid ""
set PCTExecFid ""
set CalibExecFid ""
set StatExecFid ""
set HistoExecFid ""
set CmplxPlaneExecFid ""
set LociCmplxPlaneExecFid ""
set ProfileExecFid ""
set GnuplotPipeFid ""
set GnuplotPipeSave ""
set GnuplotPipeCopol ""
set GnuplotPipeXpol ""
set GnuplotPipeSpectrum ""
set GnuplotPipeSquint ""
set GnuplotPipeCalib ""
set GnuplotPipeStat ""
set GnuplotPipeHisto ""
set GnuplotPipeCmplxPlane ""
set GnuplotPipeLociCmplxPlane ""
set GnuplotPipeProfile ""
set GnuplotPipeScatterPlot ""
set GnuplotPipePTOMDisplay ""
set ErrorCatch "0"
#####################
set BMPDirInput ""
set TrainingAreaTool rect
set BMPChange 0
set BMPImageOpen 0
set BMPImageOpen_2 0
set QLBMPImageOpen 0
set BMPViewFileInput ""
set ZoomBMP "0:0"
set ZoomBMP_2 "0:0"
set ZoomBMPQL "0:0"
set QLZoomBMP "0:0"
set QLZoom "1"
set BMPDropperFlag 0
set BMPColorMapDisplay 0
set BMPColorMapGrayJetHsv 0
set BMPScreenDisplay 0
set BMPOutputFormat "bmp8"
set BMPMax ""
set BMPMin ""
set BMPMax_2 ""
set BMPMin_2 ""
set PVShortcut 0
set PVMainMenu 0
set DisplayMainMenu 0
set BMPSubAreaFlag 0
set MouseInitX ""
set MouseInitY ""
set MouseEndX ""
set MouseEndY ""
set MouseNlig ""
set MouseNcol ""
set BMPMouseX ""
set BMPMouseY ""
set QLMouseInitX ""
set QLMouseInitY ""
set QLMouseEndX ""
set QLMouseEndY ""
set QLMouseNlig ""
set QLMouseNcol ""
set QLBMPMouseX ""
set QLBMPMouseY ""
#####################
set GoogleLatCenter "?"
set GoogleLongCenter "?"
set GoogleLat00 "?"
set GoogleLong00 "?"
set GoogleLat0N "?"
set GoogleLong0N "?"
set GoogleLatN0 "?"
set GoogleLongN0 "?"
set GoogleLatNN "?"
set GoogleLongNN "?"
set DEMLatCenter "?"
set DEMLongCenter "?"
set DEMLat00 "?"
set DEMLong00 "?"
set DEMLat0N "?"
set DEMLong0N "?"
set DEMLatN0 "?"
set DEMLongN0 "?"
set DEMLatNN "?"
set DEMLongNN "?"
set DEMWest "?"
set DEMEast "?"
set DEMNorth "?"
set DEMSouth "?"
set DEMNlig ""
set DEMNcol ""
#####################
set WindowShowDataFormatPSP 0
set WindowShowDataFormatDual 0
set WindowShowDataFormatMult 0
#####################
set KzFile ""
#####################
set wshHelp ""
set wshTutorial ""
set wshGoogleEarth ""
set wshGimp ""
set wshSnap ""
set wshMapReady ""
#BASIS CHANGE
set Load_EllipticalBasisChange 0
#BATCH PROCEDURE
set Load_BatchProcess 0
set Load_BatchProcessS2 0
#BMP PROCESS
set Load_colormap 0
set Load_colormap16 0
set Load_colormap256 0
set Load_colormap32 0
set Load_colormap8 0
set Load_colormap2 0
set Load_CreateBMPFile 0
set Load_CreateHSLFile 0
set Load_CreateRGBFile 0
set Load_CreateRGBFile_PP 0
set Load_Display 0
set Load_PolSARpro_Viewer 0
set Load_Save 0
set Load_ViewBMP1 0
set Load_ViewBMPFile 0
set Load_ViewBMPLens 0
set Load_ViewBMPQL 0
set Load_ViewBMPAll 0
set Load_ViewBMPPCT 0
set Load_Zoom 0
set Load_ColorMapGrayJetHsv 0
set Load_DisplayMenu 0
set Load_ViewOverview 0
set Load_ViewBMPOverview 0
set Load_SavePolSig 0
set Load_SaveSpectrum 0
set Load_SaveCalib 0
set Load_SaveStat 0
set Load_SaveHisto 0
set Load_SaveCmplxPlane 0
set Load_SaveLociCmplxPlane 0
set Load_SaveProfile 0
set Load_DisplayMenuDual 0
set Load_CreateRGBDualFile 0
set Load_CreateRGBDualFile_PP 0
set Load_BMPtoGeoTIFF 0
set Load_CreateKMLFile 0
set Load_CreateGrayColorBMPFile 0
set Load_CreateBMPKMLFile 0
set Load_CreateRGBKMLFile 0
set Load_CreateAnimGIF 0
set Load_CreateScatterPlot 0
set Load_ViewGNUPLOT1 0
set Load_ViewGNUPLOT2 0
set Load_ViewGNUPLOT3 0
set Load_ViewGNUPLOT4 0
set Load_ViewGNUPLOT5 0
set Load_ViewGNUPLOT6 0
set Load_ViewGNUPLOT7 0
set Load_ViewGNUPLOT8 0
set Load_ViewGNUPLOT9 0
set Load_ViewGNUPLOTtomo 0
set Load_SaveScatterPlot 0
set Load_RGB24toBMP8 0
set Load_SaveDisplay1 0
set Load_SaveDisplay1num 0
set Load_SaveDisplay2 0
set Load_SaveDisplay3a 0
set Load_SaveDisplay3b 0
set Load_CreatePolTomoDisplay 0
#CALIBRATION
set Load_CalibrationCalibrator 0
set Load_CalibrationProcedures 0
set Load_CalibrationSquintCheck 0
set Load_CalibrationQualityCheck 0
#DATA CONVERT
set Load_DataFileConvertS2 0
set Load_DataFileConvertC3 0
set Load_DataFileConvertC4 0
set Load_DataFileConvertT3 0
set Load_DataFileConvertT4 0
set Load_DataFileConvertSPPIPPC2 0
set Load_DataFileConvert_PP 0
set Load_DataFileConvert_Ipp 0
#DATA CONVERT DUAL
set Load_DataFileConvertDual 0
#DATA CONVERT MULT
set Load_DataFileConvertMult 0
#DATA IMPORT
set Load_AIRSAR 0
set Load_ASAR 0
set Load_CONVAIR 0
set Load_EMISAR 0
set Load_ESAR 0
set Load_PISAR 0
set Load_SETHI 0
set Load_UAVSAR 0
set Load_ASAR_Input_File 0
set Load_ASAR_Extract_Data 0
set Load_ALOS_Input_File 0
set Load_ALOS2_Input_File 0
set Load_ALOS_Vex_Input_File 0
set Load_CSK_Input_File 0
set Load_RADARSAT2_Input_File 0
set Load_RISAT_Input_File 0
set Load_SENTINEL1_Input_File 0
set Load_TERRASARX_Input_File 0
set Load_SIRC_Input_File 0
set Load_AIRSAR_Input_File 0
set Load_CONVAIR_Input_File 0
set Load_EMISAR_Input_File 0
set Load_ESAR_Input_File 0
set Load_FSAR_Input_File 0
set Load_PISAR_Input_File 0
set Load_SETHI_Input_File 0
set Load_UAVSAR_Input_File 0
set Load_TANDEMX_Input_File 0
set Load_EOSI_Extract_Data 0
set Load_PSP_Extract_Data 0
set Load_SubArea_GraphicEditor 0
set Load_RawBinaryData 0
set Load_RawBinaryDataFiles 0
set Load_PSP_Extract_Data 0
set Load_TOPSAR_Extract_Data 0
set Load_ReadGEARTH_POLY 0
set Load_CreateGEARTH_POLY 0
set Load_ExtractDEM 0
set Load_MapReadyGeocode 0
set Load_MapReadyMatrix 0
set Load_MapReadyParameter 0
set Load_MapReadyTerrain 0
set Load_MapInfoUpdate 0
set Load_SNAPMatrix 0
set Load_SNAPParameter 0
set Load_EOSI_TDX_Extract_Data 0
#DATA PROCESS SNGL
set Load_CovarianceElementsT3 0
set Load_CovarianceElementsT4 0
set Load_CovarianceElementsC2 0
set Load_CovarianceElementsC3 0
set Load_CovarianceElementsC4 0
set Load_CorrelationCoefficients2 0
set Load_CorrelationCoefficients3 0
set Load_CorrelationCoefficients4 0
set Load_CorrelationCoefficientsPP 0
set Load_HAAlphaClassification 0
set Load_HAAlphaDecomposition2 0
set Load_HAAlphaDecomposition3 0
set Load_HAAlphaEigenvalue3 0
set Load_HAAlphaEigenvector3 0
set Load_HAAlphaDecomposition4 0
set Load_HAAlphaEigenvalue4 0
set Load_HAAlphaEigenvector4 0
set Load_OPCE 0
set Load_OPCE_GraphicEditor 0
set Load_CompactPolarimetricMode 0
set Load_PCAnalysis 0
set Load_PolarimetricDecomposition 0
set Load_PolarimetricDecompositionYam4 0
set Load_PolarisationSynthesis 0
set Load_RCSmax 0
set Load_SinclairElements 0
set Load_TrainingAreas_GraphicEditor 0
set Load_MaskAreas_GraphicEditor 0
set Load_ROI_GraphicEditor 0
set Load_WishartHAAlphaClassification 0
set Load_WishartHAAlphaClassification_PP 0
set Load_WishartSupervisedClassification 0
set Load_StokesParameters 0
set Load_IntensitiesElements 0
set Load_WishartSupervisedClassification_PP 0
set Load_CameronDecomposition 0
set Load_PolarSignature 0
set Load_SubApertureDecomposition 0
set Load_SubApertureApplications 0
set Load_Statistics 0
set Load_Histograms 0
set Load_DataValueProfile 0
set Load_ClassificationIdentification 0
set Load_SurfaceInversion 0
set Load_HierarchicalSupervisedClassification 0
set Load_HierarchicalInputParameters 0
set Load_HierarchicalTreeArchitecture 0
set Load_HistogramStatistics 0
set Load_TextureAnalysis 0
set Load_EdgeDetector 0
set Load_Parameters 0
set Load_ParametersPR 0
set Load_ParametersZDR 0
set Load_DEMestimation 0
set Load_TSVMDecomposition 0
set Load_FCMHAlphaClassification 0
set Load_ClusterProcess 0
set Load_ClusterParaAvg 0
set Load_ClusterDataSetsAvg 0
set Load_SVMSupervisedClassification 0
set Load_SVM_PolarIndic 0
set Load_SVM_RBFCrossVal 0
set Load_WishartScattModelBasedClassification 0
set Load_ChangeDetectorFile 0
set Load_ChangeDetectorMat 0
set Load_CompactDecomposition 0
set Load_CompactClassification 0
set Load_DiversityIndex 0
set Load_GPFSupervisedClassification 0
set Load_GPFSupervisedClassification_PP 0
set Load_SoilRoughnessInversion 0
#DATA PROCESS DUAL
set Load_FlatEarthRemoval 0
set Load_CovarianceElementsT6_T11 0
set Load_CovarianceElementsT6_T22 0
set Load_CovarianceElementsT6_O12 0
set Load_CovarianceElementsT4_T11 0
set Load_CovarianceElementsT4_T22 0
set Load_CovarianceElementsT4_O12 0
set Load_ComplexCoherenceEstimation 0
set Load_ComplexCoherenceEstimation_PP 0
set Load_InterferogramEstimation 0
set Load_InterferogramEstimation_PP 0
set Load_ForestHeightEstimation 0
set Load_ForestHeightEstimation_PP 0
set Load_HeightEstimationInversionProcedures 0
set Load_CoherenceCmplxPlane 0
set Load_CoherenceCmplxPlane_PP 0
set Load_CoherenceLociCmplxPlane 0
set Load_CoherenceLociCmplxPlane_PP 0
set Load_POLSARClassification 0
set Load_POLinSARUnsupervisedClassification 0
set Load_POLinSARSupervisedClassification 0
set Load_PCT 0
set Load_DisplayPCT 0
set Load_FlatEarthEstimation 0
set Load_FlatEarthEstimation_PP 0
set Load_CoarseCoRegistration 0
set Load_BaselineEstimation 0
set Load_CorrelationCoefficients4 0
set Load_CorrelationCoefficients6 0
#DATA PROCESS MULT
set Load_CoarseCoRegistrationMult 0
set Load_HAAlphaDecompositionMult2 0
set Load_HAAlphaDecompositionMult3 0
set Load_HAAlphaEigenvalueMult3 0
set Load_HAAlphaEigenvectorMult3 0
set Load_SinclairElementsMult 0
set Load_CovarianceElementsMultT3 0
set Load_CovarianceElementsMultC2 0
set Load_DataAnalysisMult 0
set Load_DataAnimationMult 0
set Load_DataAveragingMult 0
set Load_HAAlphaClassificationMult 0
set Load_WishartSupervisedClassificationMult 0
set Load_WishartSupervisedClassificationMult_PP 0
set Load_WishartHAAlphaClassificationMult 0
set Load_WishartHAAlphaClassificationMult_PP 0
set Load_ParametersMult 0
set Load_ParametersMultPR 0
set Load_ParametersMultZDR 0
set Load_ChangeDetectorFileMult 0
set Load_ChangeDetectorMatMult 0
set Load_PolarTomography 0
#SPECKLE FILTER
set Load_SpeckleFilter 0
set Load_SpeckleFilter_S2 0
set Load_SpeckleFilterSigma 0
set Load_SpeckleFilterSigma_S2 0
set Load_SpeckleFilterEdge 0
set Load_SpeckleFilterEdge_S2 0
set Load_SpeckleFilterLopez 0
set Load_SpeckleFilterLopez_S2 0
set Load_SpeckleFilterAnYang 0
set Load_SIRVEstimationRestoration 0
set Load_SpeckleFilterScattModelBased 0
set Load_SpeckleFilterNLmean 0
set Load_SpeckleFilterMeanShift 0
#SPECKLE FILTER DUAL
set Load_SpeckleFilterDual 0
set Load_SpeckleFilterDualEdge 0
set Load_SpeckleFilterDualSigma 0
#SPECKLE FILTER MULT
set Load_SpeckleFilterMult 0
set Load_SpeckleFilterMultSigma 0
set Load_SpeckleFilterMultLopez 0
#TOOLS
set Load_CopyDirectory 0
set Load_CopyFile 0
set Load_CreateDirectory 0
set Load_CreateMyFunction 0
set Load_DeleteDirectory 0
set Load_DeleteFile 0
set Load_DeleteMyFunction 0
set Load_ExecuteMyFunction 0
set Load_RenameDirectory 0
set Load_RenameFile 0
set Load_Tools 0
set Load_ToolsMask 0
set Load_ToolsFFT 0
set Load_VisuVariable 0
set Load_ToolsMenu 0
set Load_ExportENVI 0
set Load_ToolsMenuDual 0
set Load_CheckBinaryData 0
set Load_PolSARproSIM 0
set Load_PolSARproSIMgr 0
set Load_PolSARproSIMsv 0
set Load_DataFileManagement 0
set Load_CreateHDRFile 0
set Load_CreateMask 0
set Load_CreateROI 0
set Load_DataFormat 0
set Load_DataFormatDual 0
set Load_DataFormatMult 0
set Load_CompareFile 0
set Load_CompareDir 0
set Load_ComplexFile 0
set Load_ReadBinaryDataFileValue 0
set Load_CheckSizeBinaryDataFile 0
#UTIL
set Load_AboutPSP 0
set Load_Error 0
set Load_HelpPSP 0
set Load_Environment 0
set Load_MainInputDirectory2 0
set Load_MainInputDirectoryASAR 0
set Load_Message 0
set Load_Question 0
set Load_TextEdit 0
set Load_UnderConstruction 0
set Load_Warning 0
set Load_Warranty 0
set Load_WarrantyPSP 0
set Load_TrackVar 0
set Load_FatalError 0
set Load_PSPTeam 0
set Load_PSPContributors 0
set Load_Advice 0
set Load_Advice1 0
set Load_EnvironmentDual 0
set Load_SetUpError 0
set Load_LoadingBMP 0
set Load_SearchingGoogle 0
set Load_Configuration 0
set Load_OpenClosePSP 0
set Load_EnvironmentMult 0
set Load_Advice2 0
set Load_AdviceFunctionality 0
set Load_AdviceWarning 0
set Load_Processing 0
set Load_PSPMemory 0
set Load_PSPConfiguration 0
set Load_PolSARproCalc 0
set Load_PolSARproCalcOutputFile 0
set Load_PolSARproCalcOutputMat 0
set Load_PolSARproCalcFilter 0
#POLSARAP
set Load_PolSARapMenu 0
set Load_PolSARapAgriculture 0
set Load_PolSARapCryosphere 0
set Load_PolSARapForestEnvironment 0
set Load_PolSARapForestHeightEstimation 0
set Load_PolSARapOcean 0
set Load_PolSARapUrban 0
set PolSARapShortcut 0

InitPolSARproEnv
}

init $argc $argv

#################################
# VTCL GENERATED GUI PROCEDURES
#

proc vTclWindow. {base} {
    if {$base == ""} {
        set base .
    }
    ###################
    # CREATING WIDGETS
    ###################
    wm focusmodel $top passive
    wm geometry $top 200x200+22+22; update
    wm maxsize $top 1924 1065
    wm minsize $top 104 1
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm withdraw $top
    wm title $top "vtcl"
    bindtags $top "$top Vtcl all"
    vTcl:FireEvent $top <<Create>>
    wm protocol $top WM_DELETE_WINDOW "vTcl:FireEvent $top <<>>"

    ###################
    # SETTING GEOMETRY
    ###################

    vTcl:FireEvent $base <<Ready>>
}

proc vTclWindow.top1 {base} {
    if {$base == ""} {
        set base .top1
    }
    if {[winfo exists $base]} {
        wm deiconify $base; return
    }
    set top $base
    ###################
    # CREATING WIDGETS
    ###################
    vTcl:toplevel $top -class Toplevel \
        -menu "$top.m66" 
    wm focusmodel $top passive
    wm geometry $top 600x501+100+10; update
    wm maxsize $top 1604 1184
    wm minsize $top 136 1
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm deiconify $top
    wm title $top "Polarimetric SAR Data Processing and Educational Tool v5.0"
    vTcl:DefineAlias "$top" "Toplevel1" vTcl:Toplevel:WidgetProc "" 1
    bindtags $top "$top Toplevel all _TopLevel"
    vTcl:FireEvent $top <<Create>>
    wm protocol $top WM_DELETE_WINDOW "vTcl:FireEvent $top <<>>"

    label $top.lab80 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg1.gif]] \
        -padx 0 -pady 0 -underline 0 
    vTcl:DefineAlias "$top.lab80" "Label1" vTcl:WidgetProc "Toplevel1" 1
    frame $top.fra66 \
        -height 75 -width 125 
    vTcl:DefineAlias "$top.fra66" "Frame1" vTcl:WidgetProc "Toplevel1" 1
    set site_3_0 $top.fra66
    label $site_3_0.cpd70 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg23.gif]] \
        -padx 0 -pady 0 -text label -underline 0 
    vTcl:DefineAlias "$site_3_0.cpd70" "Label7" vTcl:WidgetProc "Toplevel1" 1
    frame $site_3_0.cpd69 \
        -background #999999 -cursor {} -highlightbackground #999999 \
        -width 125 
    vTcl:DefineAlias "$site_3_0.cpd69" "Frame21" vTcl:WidgetProc "Toplevel1" 1
    set site_4_0 $site_3_0.cpd69
    label $site_4_0.lab66 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg221.gif]] \
        -padx 0 -pady 0 -text label -underline 0 
    vTcl:DefineAlias "$site_4_0.lab66" "Label4" vTcl:WidgetProc "Toplevel1" 1
    button $site_4_0.but93 \
        -background #7ae14c751736 -borderwidth 0 \
        -command {global PSPTopLevel DataDirInit DataDir DataDirChannel1 DataDirChannel2 ScreenRatio
global OffsetLig OffsetCol FinalNlig FinalNcol NligInit NcolInit NligEnd NcolEnd NligFullSize NcolFullSize
global OpenDirFile ConfigFile PSPMemory TMPMemoryAllocError PSPThumb PSPThumbnails PSPShow28 PSPShow399 PSPViewGimpBMP
global TestVarError TestVarName TestVarType TestVarValue TestVarMin TestVarMax
global FatalErrorMessage InitPSPEnv TMPDir LOGDir CONFIGDir COLORMAPDir TMPDirSession TMPTmp PSPMemory TMPMemoryAllocError
global SessionName SessionNameLogFid BMPDirInput OpenDirFile SnapRun MapReadyRun MapInfoActive MapInfoMapInfo MapInfoProjInfo MapInfoUnit DEMoutputDir
global couleur_fond PVShortcut ViewerName WidthBMP HeightBMP WidthBMPNew HeightBMPNew PSPBackgroundColor 
global MouseButtonDownFunction MouseActiveButton FatalErrorMessage FunctionAbort geoscreenwidth geoscreenheight geoscreenborderw geoscreentitleh
global DataDirMult DataDirMultActive NDataDirMult NDataDirMultActive LoadDataDirMult SaveDataDirMult FormatDataDirMult
global TMPMinMaxBmp TMPBmpTmpHeader TMPBmpTmpData TMPBmp24TmpData TMPColorMapBMP TMPBmpTmpColormap TMPBmpColorBar TMPBmpTmp
global TMPBmpTmpHeaderGray TMPBmpTmpDataGray TMPBmp24TmpDataGray TMPBmpTmpColormapGray TMPBmpColorBarGray TMPColorMapBMPGray
global TMPBmpTmpHeaderColor TMPBmpTmpDataColor TMPBmp24TmpDataColor TMPBmpTmpColormapColor TMPBmpColorBarColor TMPColorMapBMPColor
global TMPBmpTmpColormapGrayColor
global TMPBmpTmpHeader_2 TMPBmpTmpData_2 TMPBmp24TmpData_2 TMPColorMapBMP_2 TMPBmpTmpColormap_2 TMPBmpColorBar_2 
global TMPAirsarConfig TMPEsarConfig TMPFsarConfig TMPPisarConfig TMPUavsarConfig TMPRadarsat2Config TMPTerrasarxConfig
global TMPTANDEMXConfig TMPTANDEMXConfigMaster TMPTANDEMXConfigSlave
global TMPTopsarConfig TMPSIRCConfig TMPALOSConfig TMPCSKConfig TMPCSKTmp TMPCSKBatchRun TMPCSKBinary1 TMPCSKBinary2
global TMPAirsarFstHeader TMPAirsarParHeader TMPAirsarCalHeader TMPAirsarDemHeader TMPRISATConfig TMPSentinel1Config
global TMPAsarConfig TMPAsarHeaderTxt TMPAsarHeaderBin TMPAsarFormat
global TMPQuickLookDir TMPQuickLookRawbin TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookTandemX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC TMPQuickLookSethi TMPQuickLookUavsar TMPQuickLookSentinel1
global TMPEnviList TMPEnviListTmp TMPFFTfile TMPSyntBmp TMPSyntBlue TMPSyntGreen TMPSyntRed
global TMPCopolSigTxt TMPCopolSigBin TMPXpolSigTxt TMPXpolSigBin
global TMPRawSpectrumTxt TMPRawSpectrumBin TMPAvgSpectrumTxt TMPAvgSpectrumBin
global TMPCalibratorTxt TMPCalibratorBin TMPCalibratorValTxt TMPCalibratorValBin
global TMPCalibrator3Ds11Txt TMPCalibrator3Ds12Txt TMPCalibrator3Ds21Txt TMPCalibrator3Ds22Txt
global TMPCalibrator3Ds11Bin TMPCalibrator3Ds12Bin TMPCalibrator3Ds21Bin TMPCalibrator3Ds22Bin
global TMPStatisticsTxt TMPStatisticsBin TMPStatHistoTxt TMPStatResultsTxt TMPStatLabelTxt
global TMPStatisticsBin1 TMPStatHistoTxt1 TMPStatResultsTxt1
global TMPStatisticsBin2 TMPStatHistoTxt2 TMPStatResultsTxt2
global TMPCmplxPlaneTxt TMPLociCmplxPlaneTxt TMPLociCmplxPlaneLineTxt TMPLociCmplxPlaneLociTxt TMPLociCmplxPlaneTripletTxt
global TMPTreeClassRulesTxt TMPTreeClassPrmListTxt
global TMPProfileTxt TMPProfileXTxt TMPProfileYTxt TMPProfileXYTxt
global TMPProfileXBin TMPProfileYBin TMPProfileXYBin
global TMPProfile1DXBin TMPProfile1DYBin TMPProfile3DBin TMPPCTAsc TMPPCTBin TMPPCTBmp
global TMPCheckBinaryData TMPPolSARproSIM TMPDirPolInSARMaster TMPDirPolInSARSlave TMPDirPolInSARMasterSlave
global TMPGoogle TMPDirectory TMPCoRegTxt TMPBaselineTxt
global TMPClusterCenter8 TMPClusterCenter16 TMPCompareBinaryData
global TMPMapReadyGeocodeCfg TMPMapReadyGeocodeLog TMPMapReadyGeocodeStatusStatus TMPMapReadyGeocodeStatusFiles TMPMapReadyGeocodeProj
global TMPMapReadyMatrixCfg TMPMapReadyMatrixLog TMPMapReadyMatrixStatusStatus TMPMapReadyMatrixStatusFiles TMPMapReadyMatrixProj
global TMPMapReadyParameterCfg TMPMapReadyParameterLog TMPMapReadyParameterStatusStatus TMPMapReadyParameterStatusFiles TMPMapReadyParameterProj
global TMPMapReadyGeocodingCfg TMPMapReadyGeocodingMeta TMPMapReadyGeocodingImg TMPMapReadyGeocodingHdr
global TMPMapReadyImportCfg TMPMapReadyImportMeta TMPMapReadyImportImg TMPMapReadyImportHdr
global TMPMapReadyImportUnscaledCfg TMPMapReadyImportUnscaledMeta TMPMapReadyImportUnscaledImg TMPMapReadyImportUnscaledHdr
global TMPMapReadyPolarimetryCfg TMPMapReadyPolarimetryMeta TMPMapReadyPolarimetryImg TMPMapReadyPolarimetryHdr
global TMPSNAPBatchCfg TMPSNAPBatchOut TMPSNAPBatchRun TMPSNAPBatchDir TMPSNAPConfigTxt
global TMPFileNull TMPMaskROIarea TMPMaskROIbin TMPMaskROIbinv
global TMPGnuPlotTk1 TMPGnuPlotTk2 TMPGnuPlotTk3 TMPGnuPlotTk4 TMPGnuPlotTk5 TMPGnuPlotTk6 TMPGnuPlotTk7 TMPGnuPlotTk8 TMPGnuPlotTk9
global TMPGnuPlot1Tk TMPGnuPlot2Tk TMPGnuPlot3Tk TMPGnuPlot4Tk TMPGnuPlot5Tk TMPGnuPlot6Tk TMPGnuPlot7Tk TMPGnuPlot8Tk TMPGnuPlot9Tk
global TMPFileKmlBin TMPFileKmlHdr TMPFileKmlBlueBin TMPFileKmlBlueHdr TMPFileKmlGreenBin TMPFileKmlGreenHdr TMPFileKmlRedBin TMPFileKmlRedHdr
global TMPScatterPlotFileOutputXtxt TMPScatterPlotFileOutputXbin TMPScatterPlotFileOutputYtxt TMPScatterPlotFileOutputYbin 
global TMPScatterPlotFileOutputXYbin TMPScatterPlotFileOutputXYtxt TMPDecompDir TMPMemoryAllocError
global TMPPSPCalcDirResult1 TMPPSPCalcDirResult2 TMPPSPCalcDirResult3 TMPPSPCalcMatSU TMPPSPCalcMatX0 TMPPSPCalcMatX1 TMPPSPCalcMatX2
global TMPPTOMDisplayFileOutputXtxt TMPPTOMDisplayFileOutputXbin TMPPTOMDisplayFileOutputXYtxt TMPPTOMDisplayFileOutputXYbin 

global GnuPlotPath GnuplotPipeFid

#SVM
global SVMBatch  TMPScriptSVM  TMPTrainingSetNorm  TMPTrainingSet SVMConfigFile SVMRangeFile SVMModelFile ClassificationFile
global TMPSVMRange TMPSVMConfig TMPSVMBestCG
global TrainingSamplingVal TrainingSampling UnbalanceTraining OldModel
global CostVal PolyDeg RBFGamma PolyDegVar RBFGammaVar 
global RBFCV Kernel 
global Log2cBegin Log2cEnd Log2cStep
global Log2gBegin Log2gEnd Log2gStep
global ProbOut DistOut
global PolarIndic PolarFiles Npolar

global PDFReader GoogleEarthReader GimpReader SnapReader SnapGpt MapReadyReader MapReadyKmlReader ImageMagickMaker
global PDFReaderFlag SnapReaderFlag MapReadyReaderFlag GimpReaderFlag GoogleEarthReaderFlag
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar ConfigFileNameList VarConfigFileName
global PlatForm WinDir GnuPlotPath
global TestVarName TestVarType TestVarValue TestVarMin TestVarMax TestVarError
global VarFatalError FatalErrorMessage TestDataDirMult MaskFonction
global ImgKMLflip ImgKMLflip_on ImgKMLmiror ImgKMLmiror_on
#UTIL
global Load_Error Load_HelpPSP Load_Message Load_Question Load_UnderConstruction Load_Warning
global Load_FatalError Load_Advice Load_Advice1 Load_SetUpError Load_LoadingBMP Load_SearchingGoogle Load_OpenClosePSP
global Load_Advice2 Load_AdviceFunctionality Load_AdviceWarning Load_Processing Load_PSPMemory Load_PSPConfiguration 
global Load_PolSARproCalc Load_PolSARproCalcOutputFile Load_PolSARproCalcOutputMat Load_PolSARproCalcFilter
#TOOLS
global Load_ToolsMenu Load_ToolsMenuDual
#BMP PROCESS
global Load_PolSARpro_Viewer Load_Display Load_DisplayMenu Load_DisplayMenuDual Load_ColorMapGrayJetHsv
global Load_ViewBMP1 Load_ViewBMPAll Load_ViewBMPFile Load_ViewBMPLens
global Load_ViewBMPOverview Load_ViewBMPQL Load_ViewOverview Load_Zoom
global Load_colormap256 Load_colormap32 Load_colormap16 Load_colormap8
global Load_Zoom Load_Save Load_ViewGNUPLOT1 Load_ViewGNUPLOT2 Load_ViewGNUPLOT3 Load_ViewGNUPLOT4  
global Load_ViewGNUPLOT5 Load_ViewGNUPLOT6 Load_ViewGNUPLOT7 Load_ViewGNUPLOT8 Load_ViewGNUPLOT9 Load_ViewGNUPLOTtomo
#MENU
global ImgMenuPSP ImgMenuPSPon ImgMenuALOS ImgMenuALOSon ImgMenuALOS2 ImgMenuALOS2on
global ImgMenuRCM ImgMenuRCMon ImgMenuRISAT ImgMenuRISATon ImgMenuS1A ImgMenuS1Aon 
global ImgMenuRAD2 ImgMenuRAD2on ImgMenuTSX ImgMenuTSXon ImgMenuSPACEBORNE ImgMenuSPACEBORNEon
global ImgMenuAIRSAR ImgMenuAIRSARon ImgMenuESAR ImgMenuESARon
global ImgMenuSETHI ImgMenuSETHIon ImgMenuAIRBORNE ImgMenuAIRBORNEon
global ImgMenuUAVSAR ImgMenuUAVSARon ImgMenuTDX ImgMenuTDXon WidgetPosition
#PolSARap
global PolSARapShortcut Load_PolSARapMenu

set MouseButtonDownFunction ""
set MouseActiveButton ""

set FunctionAbort "ok"

set WidgetPosition 1

set PSPBackgroundColor [$widget(Toplevel1) cget -background]

#$widget(MenubuttonMapReady) configure -state disable
#$widget(MenubuttonSnap) configure -state disable
$widget(MenubuttonMapReady) configure -state normal
$widget(MenubuttonSnap) configure -state normal

Window hide $widget(Toplevel1)

#GnuPlot Configuration
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {set GnuPlotPath "Soft/lib/wgnuplot/pgnuplot.exe"}        
if {$PlatForm == "unix"} {set GnuPlotPath "gnuplot"}

#GnuPlot Test
GnuPlotInit 0 0 1 1

if {$Load_FatalError == 0} {
    source "GUI/util/FatalError.tcl"
    set Load_FatalError 1
    }
$widget(Label236_1) configure -text ""
$widget(Label236_2) configure -text ""
$widget(Entry236_1) configure -state disable
$widget(Entry236_1) configure -state disable
$widget(Button236_1) configure -text ""
$widget(Button236_1) configure -state disable
$widget(Button236_0) configure -state disable

if { $InitPSPEnv == "ko" } {
    set VarFatalError ""
    $widget(Button236_0) configure -state disable
    Window show $widget(Toplevel236)
    tkwait variable VarFatalError
    exit
    }

#Screen Size Geometry
if [file exists "$CONFIGDir/ScreenSize.txt"] {
    set f [open "$CONFIGDir/ScreenSize.txt" r]
    gets $f geoscreenwidth
    gets $f geoscreenheight
    close $f
    } else {
    set geoscreenwidth 1200
    set geoscreenheight 768
    }
set geowidth [winfo screenwidth $widget(Toplevel2)]
set geoheight [winfo screenheight $widget(Toplevel2)]
set config "true"
if {$geowidth < $geoscreenwidth} { set config "falsewidth" }
if {$geoheight < $geoscreenheight} { append config "falseheight" }
if {$config == "true"} {
    # Recuperation geometrie (avec decoration)
    set g [wm geometry $widget(Toplevel2)]
    # Position absolue de la fenetre
    set tx [winfo rootx $widget(Toplevel2)]
    set ty [winfo rooty $widget(Toplevel2)]
    # Scan de la geometrie pour extraire les champs
    set x [winfo x $widget(Toplevel2)]
    set y [winfo y $widget(Toplevel2)]
    # Epaisseur de la bordure
    set geoscreenborderw [expr {$tx-$x}]
    # Hauteur de la barre de titre
    set geoscreentitleh [expr {$ty-$y}]

    set geoscreenwidth [winfo screenwidth .top2]
    set geoscreenheight [winfo screenheight .top2]
    set ScreenRatio [expr ($geoscreenwidth + 0.0) / ($geoscreenheight + 0.0)]

    set geowidth [expr $geowidth - (2 * $geoscreenborderw)]
    set geoheight [expr $geoheight - ($geoscreentitleh + $geoscreenborderw) ]
    } else {
    set VarFatalError ""
    if {$config == "falsewidth" } { set FatalErrorMessage "MINIMAL SCREEN WIDTH RESOLUTION MUST BE 1200" }
    if {$config == "truefalseheight" } { set FatalErrorMessage "MINIMAL SCREEN HEIGHT RESOLUTION MUST BE 768" }
    if {$config == "falsewidthfalseheight" } { set FatalErrorMessage "MINIMAL SCREEN RESOLUTION MUST BE 1200 x 768" }
    $widget(Button236_0) configure -state normal
    Window show $widget(Toplevel236)
    tkwait variable VarFatalError
    exit
    }

if {$Load_OpenClosePSP == 0} {
    source "GUI/util/OpenClosePSP.tcl"
    set Load_OpenClosePSP 1
    }
if {$Load_Error == 0} {
    source "GUI/util/Error.tcl"
    set Load_Error 1
    }
if {$Load_Message == 0} {
    source "GUI/util/Message.tcl"
    set Load_Message 1
    }
if {$Load_Question == 0} {
    source "GUI/util/Question.tcl"
    set Load_Question 1
    }
if {$Load_UnderConstruction == 0} {
    source "GUI/util/UnderConstruction.tcl"
    set Load_UnderConstruction 1
    }
if {$Load_Warning == 0} {
    source "GUI/util/Warning.tcl"
    set Load_Warning 1
    }
if {$Load_Advice == 0} {
    source "GUI/util/Advice.tcl"
    set Load_Advice 1
    }
if {$Load_Advice1 == 0} {
    source "GUI/util/Advice1.tcl"
    set Load_Advice1 1
    }
if {$Load_Advice2 == 0} {
    source "GUI/util/Advice2.tcl"
    set Load_Advice2 1
    }
if {$Load_AdviceFunctionality == 0} {
    source "GUI/util/AdviceFunctionality.tcl"
    set Load_AdviceFunctionality 1
    }
if {$Load_AdviceWarning == 0} {
    source "GUI/util/AdviceWarning.tcl"
    set Load_AdviceWarning 1
    }
if {$Load_SetUpError == 0} {
    source "GUI/util/SetUpError.tcl"
    set Load_SetUpError 1
    }
if {$Load_LoadingBMP == 0} {
    source "GUI/util/LoadingBMP.tcl"
    set Load_LoadingBMP 1
    }
if {$Load_Processing == 0} {
    source "GUI/util/Processing.tcl"
    set Load_Processing 1
    }
if {$Load_SearchingGoogle == 0} {
    source "GUI/util/SearchingGoogle.tcl"
    set Load_SearchingGoogle 1
    }
if {$Load_PolSARpro_Viewer == 0} {
    source "GUI/bmp_process/PolSARpro_Viewer.tcl"
    set Load_PolSARpro_Viewer 1
    }
if {$Load_Configuration == 0} {
    source "GUI/util/Configuration.tcl"
    set Load_Configuration 1
    }   
if {$Load_DisplayMenu == 0} {
    source "GUI/bmp_process/DisplayMenu.tcl"
    set Load_DisplayMenu 1
    }   
if {$Load_DisplayMenuDual == 0} {
    source "GUI/bmp_process/DisplayMenuDual.tcl"
    set Load_DisplayMenuDual 1
    }   
if {$Load_ToolsMenu == 0} {
    source "GUI/tools/ToolsMenu.tcl"
    set Load_ToolsMenu 1
    }   
if {$Load_ToolsMenuDual == 0} {
    source "GUI/tools/ToolsMenuDual.tcl"
    set Load_ToolsMenuDual 1
    }   
if {$Load_PSPMemory == 0} {
    source "GUI/util/PSPMemory.tcl"
    set Load_PSPMemory 1
    set PSPMemory 1000
    }
if {$Load_PSPConfiguration == 0} {
    source "GUI/util/PSPConfiguration.tcl"
    set Load_PSPConfiguration 1
    set PSPThumb "50"
    set PSPThumbnails "0.5"
    set PSPShow28 1
    set PSPShow399 1
    set PSPViewGimpBMP 1
    }
if {$Load_PolSARproCalc == 0} {
    source "GUI/util/PolSARproCalc.tcl"
    set Load_PolSARproCalc 1
    }
set PolSARapShortcut 0
if {$Load_PolSARapMenu == 0} {
    source "GUI/polsarap/PolSARapMenu.tcl"
    set Load_PolSARapMenu 1
    }

#View BMP
if {$Load_ViewBMP1 == 0} {
    source "GUI/bmp_process/ViewBMP1.tcl"
    set Load_ViewBMP1 1
    $widget(CANVASBMP1) configure -cursor arrow
    }
if {$Load_ViewBMPAll == 0} {
    source "GUI/bmp_process/ViewBMPAll.tcl"
    set Load_ViewBMPAll 1
    }
if {$Load_ViewBMPFile == 0} {
    source "GUI/bmp_process/ViewBMPFile.tcl"
    set Load_ViewBMPFile 1
    $widget(CANVASBMP) configure -cursor arrow
    }
if {$Load_ViewBMPLens == 0} {
    source "GUI/bmp_process/ViewBMPLens.tcl"
    set Load_ViewBMPLens 1
    }
if {$Load_ViewBMPOverview == 0} {
    source "GUI/bmp_process/ViewBMPOverview.tcl"
    set Load_ViewBMPOverview 1
    }
if {$Load_ViewBMPQL == 0} {
    source "GUI/bmp_process/ViewBMPQL.tcl"
    set Load_ViewBMPQL 1
    $widget(CANVASBMPQL) configure -cursor arrow
    }
if {$Load_ViewOverview == 0} {
    source "GUI/bmp_process/ViewOverview.tcl"
    set Load_ViewOverview 1
    }
if {$Load_Zoom == 0} {
    source "GUI/bmp_process/Zoom.tcl"
    set Load_Zoom 1
    }
if {$Load_ViewGNUPLOT1 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT1.tcl"
    set Load_ViewGNUPLOT1 1
    }
if {$Load_ViewGNUPLOT2 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT2.tcl"
    set Load_ViewGNUPLOT2 1
    }
if {$Load_ViewGNUPLOT3 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT3.tcl"
    set Load_ViewGNUPLOT3 1
    }
if {$Load_ViewGNUPLOT4 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT4.tcl"
    set Load_ViewGNUPLOT4 1
    }
if {$Load_ViewGNUPLOT5 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT5.tcl"
    set Load_ViewGNUPLOT5 1
    }
if {$Load_ViewGNUPLOT6 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT6.tcl"
    set Load_ViewGNUPLOT6 1
    }
if {$Load_ViewGNUPLOT7 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT7.tcl"
    set Load_ViewGNUPLOT7 1
    }
if {$Load_ViewGNUPLOT8 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT8.tcl"
    set Load_ViewGNUPLOT8 1
    }
if {$Load_ViewGNUPLOT9 == 0} {
    source "GUI/bmp_process/ViewGNUPLOT9.tcl"
    set Load_ViewGNUPLOT9 1
    }
if {$Load_ViewGNUPLOTtomo == 0} {
    source "GUI/bmp_process/ViewGNUPLOTtomo.tcl"
    set Load_ViewGNUPLOTtomo 1
    }

for {set i 0} {$i <= 10} {incr i} {
    set TestVarName($i) ""
    set TestVarType($i) ""
    set TestVarValue($i) ""
    set TestVarMin($i) ""
    set TestVarMax($i) ""
    }
set TestVarError "ok"

#DataDir Initialisation to the Working Directory
set DataDir $DataDirInit
set DataDirChannel1 $DataDir
set DataDirChannel2 $DataDir
set BMPDirInput $DataDir
set DEMoutputDir $DataDir
for {set i 0} {$i <= 100} {incr i} {set DataDirMult($i) $DataDirInit}
set DataDirMultActive $DataDirMult(1) 
set NDataDirMult 1
set NDataDirMultActive 1
set LoadDataDirMult 1
set SaveDataDirMult 1
set TestDataDirMult "ok"
set FormatDataDirMult ""
set MaskFonction "0"

#Display Configuration
set c0 .top2.fra71.fra72.cpd74
set couleur_fond [$c0 cget -background]
set PVShortcut 0
set BMPImageOpen 0
set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoProjInfo ""
set MapInfoUnit ""

package require Img
image create photo ImgMenuPSP -file "GUI/Images/PSPv2small.gif"
image create photo ImgMenuPSPon -file "GUI/Images/PSPv2small_on.gif"
image create photo ImgMenuALOS -file "GUI/Images/ALOSsmall.gif"
image create photo ImgMenuALOSon -file "GUI/Images/ALOSsmall_on.gif"
image create photo ImgMenuALOS2 -file "GUI/Images/ALOS2small.gif"
image create photo ImgMenuALOS2on -file "GUI/Images/ALOS2small_on.gif"
image create photo ImgMenuCSK -file "GUI/Images/CSKsmall.gif"
image create photo ImgMenuCSKon -file "GUI/Images/CSKsmall_on.gif"
image create photo ImgMenuRAD2 -file "GUI/Images/RADARSAT2small.gif"
image create photo ImgMenuRAD2on -file "GUI/Images/RADARSAT2small_on.gif"
image create photo ImgMenuRCM -file "GUI/Images/RCMsmall.gif"
image create photo ImgMenuRCMon -file "GUI/Images/RCMsmall_on.gif"
image create photo ImgMenuRISAT -file "GUI/Images/RISATsmall.gif"
image create photo ImgMenuRISATon -file "GUI/Images/RISATsmall_on.gif"
image create photo ImgMenuS1A -file "GUI/Images/SENTINEL1small.gif"
image create photo ImgMenuS1Aon -file "GUI/Images/SENTINEL1small_on.gif"
image create photo ImgMenuTSX -file "GUI/Images/TERRASARXsmall.gif"
image create photo ImgMenuTSXon -file "GUI/Images/TERRASARXsmall_on.gif"
image create photo ImgMenuTDX -file "GUI/Images/TANDEMXsmall.gif"
image create photo ImgMenuTDXon -file "GUI/Images/TANDEMXsmall_on.gif"
image create photo ImgMenuAIRSAR -file "GUI/Images/AIRSARsmall.gif"
image create photo ImgMenuAIRSARon -file "GUI/Images/AIRSARsmall_on.gif"
image create photo ImgMenuESAR -file "GUI/Images/ESARsmall.gif"
image create photo ImgMenuESARon -file "GUI/Images/ESARsmall_on.gif"
image create photo ImgMenuSETHI -file "GUI/Images/SETHIsmall.gif"
image create photo ImgMenuSETHIon -file "GUI/Images/SETHIsmall_on.gif"
image create photo ImgMenuUAVSAR -file "GUI/Images/UAVSARsmall.gif"
image create photo ImgMenuUAVSARon -file "GUI/Images/UAVSARsmall_on.gif"
image create photo ImgMenuSPACEBORNE -file "GUI/Images/down.gif"
image create photo ImgMenuSPACEBORNEon -file "GUI/Images/down_on.gif"
image create photo ImgMenuAIRBORNE -file "GUI/Images/down.gif"
image create photo ImgMenuAIRBORNEon -file "GUI/Images/down_on.gif"

image create photo ImgKMLflip -file "GUI/Images/img-yflip.gif"
image create photo ImgKMLflip_on  -file "GUI/Images/img-yflip_on.gif"
image create photo ImgKMLmiror -file "GUI/Images/img-xflip.gif"
image create photo ImgKMLmiror_on  -file "GUI/Images/img-xflip_on.gif"

set geoscreenwidth [winfo screenwidth .top2]
set geoscreenheight [winfo screenheight .top2]
set tx [winfo rootx .top2]
set ty [winfo rooty .top2]
set x [winfo x .top2]
set y [winfo y .top2]
set geoscreenborderw [expr {$tx-$x}]
set geoscreentitleh [expr {$ty-$y}]
set FrameGalBd 2; set FrameBd 2; set ButtonBd 3; set ButtonHeight 25
set offsetheight [expr $geoscreentitleh + $geoscreenborderw + 2 * ((2 * $FrameGalBd) + (2 * $FrameBd) + (2 * $ButtonBd) + $ButtonHeight) ] 
set offsetbottom [expr (2 * $geoscreenborderw) + 100 ] 
set HeightBMP [expr $geoscreenheight - $offsetheight - $offsetbottom]
set WidthBMP $HeightBMP

if [file exists "$CONFIGDir/Viewer.txt"] {
    set f [open "$CONFIGDir/Viewer.txt" r]
    gets $f ViewerName
    close $f
    set f [open "$CONFIGDir/Viewer.txt" w]
    puts $f $ViewerName
    puts $f "Width"
    puts $f $WidthBMP
    puts $f "Height"
    puts $f $HeightBMP
    close $f
    package require Img
    }
set WidthBMPNew $WidthBMP
set HeightBMPNew $HeightBMP

set OpenDirFile 0

#PDFReader Configuration
set PDFReader ""
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {
    if [file exists "$CONFIGDir/PDFReaderWindows.txt"] {
        set f [open "$CONFIGDir/PDFReaderWindows.txt" r]
        gets $f PDFReader
        close $f
        }
    }        
if {$PlatForm == "unix"} {
    if [file exists "$CONFIGDir/PDFReaderUnix.txt"] {
        set f [open "$CONFIGDir/PDFReaderUnix.txt" r]
        gets $f PDFReader
        close $f
        }
    }        

#GoogleEarth Configuration
set GoogleEarthReader ""
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {
    if [file exists "$CONFIGDir/GoogleEarthWindows.txt"] {
        set f [open "$CONFIGDir/GoogleEarthWindows.txt" r]
        gets $f GoogleEarthReader
        close $f
        }
    }
if {$PlatForm == "unix"} {
    if [file exists "$CONFIGDir/GoogleEarthUnix.txt"] {
        set f [open "$CONFIGDir/GoogleEarthUnix.txt" r]
        gets $f GoogleEarthReader
        close $f
        }
    }

#Gimp Configuration
set GimpReader ""
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {
    if [file exists "$CONFIGDir/GimpWindows.txt"] {
        set f [open "$CONFIGDir/GimpWindows.txt" r]
        gets $f GimpReader
        close $f
        }
    }
if {$PlatForm == "unix"} {
    if [file exists "$CONFIGDir/GimpUnix.txt"] {
        set f [open "$CONFIGDir/GimpUnix.txt" r]
        gets $f GimpReader
        close $f
        }
    }

#ImageMagick Configuration
set ImageMagickMaker ""
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {
    if [file exists "$CONFIGDir/ImageMagickWindows.txt"] {
        set f [open "$CONFIGDir/ImageMagickWindows.txt" r]
        gets $f ImageMagickMaker
        close $f
        }
    }
if {$PlatForm == "unix"} {
    if [file exists "$CONFIGDir/ImageMagickUnix.txt"] {
        set f [open "$CONFIGDir/ImageMagickUnix.txt" r]
        gets $f ImageMagickMaker
        close $f
        }
    }

#MapReady Configuration
set MapReadyRun 0
set MapInfoActive ""
set MapInfoMapInfo ""
set MapInfoUnit ""
set MapReadyReader ""
set MapReadyKmlReader ""
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {
    if [file exists "$CONFIGDir/MapReadyWindows.txt"] {
        set f [open "$CONFIGDir/MapReadyWindows.txt" r]
        gets $f MapReadyReader
        close $f
        }
    }
if {$PlatForm == "unix"} {
    if [file exists "$CONFIGDir/MapReadyUnix.txt"] {
        set f [open "$CONFIGDir/MapReadyUnix.txt" r]
        gets $f MapReadyReader
        close $f
        }
    }
if {$MapReadyReader != ""} {
    set MapReadyKmlReader [file dirname $MapReadyReader]
    append MapReadyKmlReader "/asf_kml_overlay.exe"
    }

#Snap Configuration
set SnapRun 0
set SnapReader ""
set SnapGpt ""
set PlatForm $tcl_platform(platform)
if {$PlatForm == "windows"} {
    if [file exists "$CONFIGDir/SnapWindows.txt"] {
        set f [open "$CONFIGDir/SnapWindows.txt" r]
        gets $f SnapReader
        close $f
        }
        #Snap Batch Configuration
        #set f [open "$CONFIGDir/SnapBatch.bat" w]
        #set SnapPath "C:"
        #puts $f $SnapPath
        #set SnapPath "cd \x22"
        #set SnapPathTmp [file dirname $SnapReader]
        #set LengthSnapPath [string length $SnapPathTmp]
        #for {set i 0} {$i <= $LengthSnapPath} {incr i} {
        #    set lettre [string range $SnapPathTmp $i $i]
        #    if {$lettre == "/"} { set lettre "\\" }
        #    append SnapPath $lettre
        #    }
        #append SnapPath "\x22"
        #puts $f $SnapPath
        #set SnapExe [file tail $SnapReader]
        #puts $f $SnapExe
        #close $f
    }
if {$PlatForm == "unix"} {
    if [file exists "$CONFIGDir/SnapUnix.txt"] {
        set f [open "$CONFIGDir/SnapUnix.txt" r]
        gets $f SnapReader
        close $f
        }
    }
set SnapGpt [file dirname $SnapReader]
append SnapGpt "/gpt"

#GnuPlot Test
#GnuPlotInit 0 0 1 1
#set ErrorCatch [catch {puts $GnuplotPipeFid "quit"}]
#if { $ErrorCatch == "0" } {
#    puts $GnuplotPipeFid "quit"
#    flush $GnuplotPipeFid 
#    }
#puts $GnuplotPipeFid "quit"; flush $GnuplotPipeFid
#catch "close $GnuplotPipeFid"
#set GnuplotPipeFid ""

#Session Name Temp
set SessionYear [clock format [clock seconds] -format "%Y"]
set SessionMonth [clock format [clock seconds] -format "%m"]
set SessionDay [clock format [clock seconds] -format "%d"]
set SessionHour [clock format [clock seconds] -format "%H"]
set SessionMinute [clock format [clock seconds] -format "%M"]
set SessionSecond [clock format [clock seconds] -format "%S"]
set SessionName $SessionYear;append SessionName "_$SessionMonth";append SessionName "_$SessionDay"
append SessionName "_$SessionHour";append SessionName "_$SessionMinute";append SessionName "_$SessionSecond"
set SessionNameLog "$LOGDir/LogFile_$SessionName.txt"
set SessionNameLogFid [open $SessionNameLog w]

set Date [clock format [clock seconds] -format "%A %d %B %Y"]
puts $SessionNameLogFid "Session Date : $Date"
puts $SessionNameLogFid "Session Time : $SessionHour H $SessionMinute Mn $SessionSecond s"
puts $SessionNameLogFid "********************************"
puts $SessionNameLogFid "Temporary Files Creation"

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP.tmp"; set TMPTmp $TmpFile; puts $SessionNameLogFid $TMPTmp

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_MinMaxBMP.txt"; set TMPMinMaxBmp $TmpFile; puts $SessionNameLogFid $TMPMinMaxBmp
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpHeader.txt"; set TMPBmpTmpHeader $TmpFile; puts $SessionNameLogFid $TMPBmpTmpHeader
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpData.bin"; set TMPBmpTmpData $TmpFile; puts $SessionNameLogFid $TMPBmpTmpData
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMP24TmpData.bin"; set TMPBmp24TmpData $TmpFile; puts $SessionNameLogFid $TMPBmp24TmpData
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ColorMapBMP.pal"; set TMPColorMapBMP $TmpFile; puts $SessionNameLogFid $TMPColorMapBMP
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpColormap.pal"; set TMPBmpTmpColormap $TmpFile; puts $SessionNameLogFid $TMPBmpTmpColormap
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPColorBar.bmp"; set TMPBmpColorBar $TmpFile; puts $SessionNameLogFid $TMPBmpColorBar
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmp.bmp"; set TMPBmpTmp $TmpFile; puts $SessionNameLogFid $TMPBmpTmp

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpHeaderGray.txt"; set TMPBmpTmpHeaderGray $TmpFile; puts $SessionNameLogFid $TMPBmpTmpHeaderGray
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpDataGray.bin"; set TMPBmpTmpDataGray $TmpFile; puts $SessionNameLogFid $TMPBmpTmpDataGray
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMP24TmpDataGray.bin"; set TMPBmp24TmpDataGray $TmpFile; puts $SessionNameLogFid $TMPBmp24TmpDataGray
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ColorMapBMPGray.pal"; set TMPColorMapBMPGray $TmpFile; puts $SessionNameLogFid $TMPColorMapBMPGray
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpColormapGray.pal"; set TMPBmpTmpColormapGray $TmpFile; puts $SessionNameLogFid $TMPBmpTmpColormapGray
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPColorBarGray.bmp"; set TMPBmpColorBarGray $TmpFile; puts $SessionNameLogFid $TMPBmpColorBarGray

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpHeaderColor.txt"; set TMPBmpTmpHeaderColor $TmpFile; puts $SessionNameLogFid $TMPBmpTmpHeaderColor
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpDataColor.bin"; set TMPBmpTmpDataColor $TmpFile; puts $SessionNameLogFid $TMPBmpTmpDataColor
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMP24TmpDataColor.bin"; set TMPBmp24TmpDataColor $TmpFile; puts $SessionNameLogFid $TMPBmp24TmpDataColor
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ColorMapBMPColor.pal"; set TMPColorMapBMPColor $TmpFile; puts $SessionNameLogFid $TMPColorMapBMPColor
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpColormapColor.pal"; set TMPBmpTmpColormapColor $TmpFile; puts $SessionNameLogFid $TMPBmpTmpColormapColor
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPColorBarColor.bmp"; set TMPBmpColorBarColor $TmpFile; puts $SessionNameLogFid $TMPBmpColorBarColor

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpColormapGrayColor.pal"; set TMPBmpTmpColormapGrayColor $TmpFile; puts $SessionNameLogFid $TMPBmpTmpColormapGrayColor

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpHeader_2.txt"; set TMPBmpTmpHeader_2 $TmpFile; puts $SessionNameLogFid $TMPBmpTmpHeader_2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpData_2.bin"; set TMPBmpTmpData_2 $TmpFile; puts $SessionNameLogFid $TMPBmpTmpData_2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMP24TmpData_2.bin"; set TMPBmp24TmpData_2 $TmpFile; puts $SessionNameLogFid $TMPBmp24TmpData_2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ColorMapBMP_2.pal"; set TMPColorMapBMP_2 $TmpFile; puts $SessionNameLogFid $TMPColorMapBMP_2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPTmpColormap_2.pal"; set TMPBmpTmpColormap_2 $TmpFile; puts $SessionNameLogFid $TMPBmpTmpColormap_2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_BMPColorBar_2.bmp"; set TMPBmpColorBar_2 $TmpFile; puts $SessionNameLogFid $TMPBmpColorBar_2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_null.bin"; set TMPFileNull $TmpFile; puts $SessionNameLogFid $TMPFileNull

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_kml.bin"; set TMPFileKmlBin $TmpFile; puts $SessionNameLogFid $TMPFileKmlBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_kml.bin.hdr"; set TMPFileKmlHdr $TmpFile; puts $SessionNameLogFid $TMPFileKmlHdr
set TmpFile "$TMPDir/"; append TmpFile "Freeman_Odd.bin"; set TMPFileKmlBlueBin $TmpFile; puts $SessionNameLogFid $TMPFileKmlBlueBin
set TmpFile "$TMPDir/"; append TmpFile "Freeman_Odd.bin.hdr"; set TMPFileKmlBlueHdr $TmpFile; puts $SessionNameLogFid $TMPFileKmlBlueHdr
set TmpFile "$TMPDir/"; append TmpFile "Freeman_Vol.bin"; set TMPFileKmlGreenBin $TmpFile; puts $SessionNameLogFid $TMPFileKmlGreenBin
set TmpFile "$TMPDir/"; append TmpFile "Freeman_Vol.bin.hdr"; set TMPFileKmlGreenHdr $TmpFile; puts $SessionNameLogFid $TMPFileKmlGreenHdr
set TmpFile "$TMPDir/"; append TmpFile "Freeman_Dbl.bin"; set TMPFileKmlRedBin $TmpFile; puts $SessionNameLogFid $TMPFileKmlRedBin
set TmpFile "$TMPDir/"; append TmpFile "Freeman_Dbl.bin.hdr"; set TMPFileKmlRedHdr $TmpFile; puts $SessionNameLogFid $TMPFileKmlRedHdr

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_airsar_config.txt"; set TMPAirsarConfig $TmpFile; puts $SessionNameLogFid $TMPAirsarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_esar_config.txt"; set TMPEsarConfig $TmpFile; puts $SessionNameLogFid $TMPEsarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_fsar_config.txt"; set TMPFsarConfig $TmpFile; puts $SessionNameLogFid $TMPFsarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_pisar_config.txt"; set TMPPisarConfig $TmpFile; puts $SessionNameLogFid $TMPPisarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_uavsar_config.txt"; set TMPUavsarConfig $TmpFile; puts $SessionNameLogFid $TMPUavsarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_topsar_config.txt"; set TMPTopsarConfig $TmpFile; puts $SessionNameLogFid $TMPTopsarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_sirc_config.txt"; set TMPSIRCConfig $TmpFile; puts $SessionNameLogFid $TMPSIRCConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_alos_config.txt"; set TMPALOSConfig $TmpFile; puts $SessionNameLogFid $TMPALOSConfig

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_airsar_fst_header_config.txt"; set TMPAirsarFstHeader $TmpFile; puts $SessionNameLogFid $TMPAirsarFstHeader
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_airsar_par_header_config.txt"; set TMPAirsarParHeader $TmpFile; puts $SessionNameLogFid $TMPAirsarParHeader
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_airsar_cal_header_config.txt"; set TMPAirsarCalHeader $TmpFile; puts $SessionNameLogFid $TMPAirsarCalHeader
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_airsar_dem_header_config.txt"; set TMPAirsarDemHeader $TmpFile; puts $SessionNameLogFid $TMPAirsarDemHeader

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_radarsat2_config.txt"; set TMPRadarsat2Config $TmpFile; puts $SessionNameLogFid $TMPRadarsat2Config
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_risat_config.txt"; set TMPRISATConfig $TmpFile; puts $SessionNameLogFid $TMPRISATConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_sentinel1_config.txt"; set TMPSentinel1Config $TmpFile; puts $SessionNameLogFid $TMPSentinel1Config
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_terrasarx_config.txt"; set TMPTerrasarxConfig $TmpFile; puts $SessionNameLogFid $TMPTerrasarxConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_tandemx_config.txt"; set TMPTANDEMXConfig $TmpFile; puts $SessionNameLogFid $TMPTANDEMXConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_tandemx_config_master.txt"; set TMPTANDEMXConfigMaster $TmpFile; puts $SessionNameLogFid $TMPTANDEMXConfigMaster
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_tandemx_config_slave.txt"; set TMPTANDEMXConfigSlave $TmpFile; puts $SessionNameLogFid $TMPTANDEMXConfigSlave
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_csk_config.txt"; set TMPCSKConfig $TmpFile; puts $SessionNameLogFid $TMPCSKConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_csk_tmp.txt"; set TMPCSKTmp $TmpFile; puts $SessionNameLogFid $TMPCSKTmp
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_csk_batch.bat"; set TMPCSKBatchRun $TmpFile; puts $SessionNameLogFid $TMPCSKBatchRun
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_csk_binary1.bin"; set TMPCSKBinary1 $TmpFile; puts $SessionNameLogFid $TMPCSKBinary1
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_csk_binary2.bin"; set TMPCSKBinary2 $TmpFile; puts $SessionNameLogFid $TMPCSKBinary2

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_asar_config.txt"; set TMPAsarConfig $TmpFile; puts $SessionNameLogFid $TMPAsarConfig
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_asar_header.txt"; set TMPAsarHeaderTxt $TmpFile; puts $SessionNameLogFid $TMPAsarHeaderTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_asar_header.bin"; set TMPAsarHeaderBin $TmpFile; puts $SessionNameLogFid $TMPAsarHeaderBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_asar_format.txt"; set TMPAsarFormat $TmpFile; puts $SessionNameLogFid $TMPAsarFormat

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookRawbin.bmp"; set TMPQuickLookRawbin $TmpFile; puts $SessionNameLogFid $TMPQuickLookRawbin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookAlos.bmp"; set TMPQuickLookAlos $TmpFile; puts $SessionNameLogFid $TMPQuickLookAlos
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookAsar.bmp"; set TMPQuickLookAsar $TmpFile; puts $SessionNameLogFid $TMPQuickLookAsar
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookCsk.bmp"; set TMPQuickLookCSK $TmpFile; puts $SessionNameLogFid $TMPQuickLookCSK
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookRadarsat2.bmp"; set TMPQuickLookRadarsat2 $TmpFile; puts $SessionNameLogFid $TMPQuickLookRadarsat2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookRisat.bmp"; set TMPQuickLookRisat $TmpFile; puts $SessionNameLogFid $TMPQuickLookRisat
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookSentinel1.bmp"; set TMPQuickLookSentinel1 $TmpFile; puts $SessionNameLogFid $TMPQuickLookSentinel1
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookTerrasarX.bmp"; set TMPQuickLookTerrasarX $TmpFile; puts $SessionNameLogFid $TMPQuickLookTerrasarX
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookTandemX.bmp"; set TMPQuickLookTandemX $TmpFile; puts $SessionNameLogFid $TMPQuickLookTandemX
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookSirc.bmp"; set TMPQuickLookSirc $TmpFile; puts $SessionNameLogFid $TMPQuickLookSirc
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookAirsar.bmp"; set TMPQuickLookAirsar $TmpFile; puts $SessionNameLogFid $TMPQuickLookAirsar
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookConvair.bmp"; set TMPQuickLookConvair $TmpFile; puts $SessionNameLogFid $TMPQuickLookConvair
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookEmisar.bmp"; set TMPQuickLookEmisar $TmpFile; puts $SessionNameLogFid $TMPQuickLookEmisar
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookEsar.bmp"; set TMPQuickLookEsar $TmpFile; puts $SessionNameLogFid $TMPQuickLookEsar
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookFsar.bmp"; set TMPQuickLookFsar $TmpFile; puts $SessionNameLogFid $TMPQuickLookFsar
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookPisarMGPC.bmp"; set TMPQuickLookPisarMGPC $TmpFile; puts $SessionNameLogFid $TMPQuickLookPisarMGPC
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookPisarMGPSSC.bmp"; set TMPQuickLookPisarMGPSSC $TmpFile; puts $SessionNameLogFid $TMPQuickLookPisarMGPSSC
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookSethi.bmp"; set TMPQuickLookSethi $TmpFile; puts $SessionNameLogFid $TMPQuickLookSethi
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_QuickLookUavsar.bmp"; set TMPQuickLookUavsar $TmpFile; puts $SessionNameLogFid $TMPQuickLookUavsar
set TMPQuickLookDir "$TMPDir/$SessionName"
set TMPDecompDir "$TMPDir/$SessionName"

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ENVIList.txt"; set TMPEnviList $TmpFile; puts $SessionNameLogFid $TMPEnviList
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ENVIListTmp.txt"; set TMPEnviListTmp $TmpFile; puts $SessionNameLogFid $TMPEnviListTmp

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_FFTfile.bin"; set TMPFFTfile $TmpFile; puts $SessionNameLogFid $TMPFFTfile

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_syntbmp.bin"; set TMPSyntBmp $TmpFile; puts $SessionNameLogFid $TMPSyntBmp
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_syntblue.bin"; set TMPSyntBlue $TmpFile; puts $SessionNameLogFid $TMPSyntBlue
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_syntgreen.bin"; set TMPSyntGreen $TmpFile; puts $SessionNameLogFid $TMPSyntGreen
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_syntred.bin"; set TMPSyntRed $TmpFile; puts $SessionNameLogFid $TMPSyntRed

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_copolsig.txt"; set TMPCopolSigTxt $TmpFile; puts $SessionNameLogFid $TMPCopolSigTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_copolsig.bin"; set TMPCopolSigBin $TmpFile; puts $SessionNameLogFid $TMPCopolSigBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_xpolsig.txt"; set TMPXpolSigTxt $TmpFile; puts $SessionNameLogFid $TMPXpolSigTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_xpolsig.bin"; set TMPXpolSigBin $TmpFile; puts $SessionNameLogFid $TMPXpolSigBin

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_rawspectrum.txt"; set TMPRawSpectrumTxt $TmpFile; puts $SessionNameLogFid $TMPRawSpectrumTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_avgspectrum.txt"; set TMPAvgSpectrumTxt $TmpFile; puts $SessionNameLogFid $TMPAvgSpectrumTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_rawspectrum.bin"; set TMPRawSpectrumBin $TmpFile; puts $SessionNameLogFid $TMPRawSpectrumBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_avgspectrum.bin"; set TMPAvgSpectrumBin $TmpFile; puts $SessionNameLogFid $TMPAvgSpectrumBin

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator.txt"; set TMPCalibratorTxt $TmpFile; puts $SessionNameLogFid $TMPCalibratorTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator.bin"; set TMPCalibratorBin $TmpFile; puts $SessionNameLogFid $TMPCalibratorBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibratorval.txt"; set TMPCalibratorValTxt $TmpFile; puts $SessionNameLogFid $TMPCalibratorValTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibratorval.bin"; set TMPCalibratorValBin $TmpFile; puts $SessionNameLogFid $TMPCalibratorValBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds11.txt"; set TMPCalibrator3Ds11Txt $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds11Txt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds12.txt"; set TMPCalibrator3Ds12Txt $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds12Txt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds21.txt"; set TMPCalibrator3Ds21Txt $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds21Txt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds22.txt"; set TMPCalibrator3Ds22Txt $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds22Txt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds11.bin"; set TMPCalibrator3Ds11Bin $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds11Bin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds12.bin"; set TMPCalibrator3Ds12Bin $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds12Bin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds21.bin"; set TMPCalibrator3Ds21Bin $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds21Bin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_calibrator3Ds22.bin"; set TMPCalibrator3Ds22Bin $TmpFile; puts $SessionNameLogFid $TMPCalibrator3Ds22Bin

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statistics.txt"; set TMPStatisticsTxt $TmpFile; puts $SessionNameLogFid $TMPStatisticsTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statistics.bin"; set TMPStatisticsBin $TmpFile; puts $SessionNameLogFid $TMPStatisticsBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_stathisto.txt"; set TMPStatHistoTxt $TmpFile; puts $SessionNameLogFid $TMPStatHistoTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statresults.txt"; set TMPStatResultsTxt $TmpFile; puts $SessionNameLogFid $TMPStatResultsTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statlabel.txt"; set TMPStatLabelTxt $TmpFile; puts $SessionNameLogFid $TMPStatLabelTxt

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statistics1.bin"; set TMPStatisticsBin1 $TmpFile; puts $SessionNameLogFid $TMPStatisticsBin1
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_stathisto1.txt"; set TMPStatHistoTxt1 $TmpFile; puts $SessionNameLogFid $TMPStatHistoTxt1
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statresults1.txt"; set TMPStatResultsTxt1 $TmpFile; puts $SessionNameLogFid $TMPStatResultsTxt1
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statistics2.bin"; set TMPStatisticsBin2 $TmpFile; puts $SessionNameLogFid $TMPStatisticsBin2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_stathisto2.txt"; set TMPStatHistoTxt2 $TmpFile; puts $SessionNameLogFid $TMPStatHistoTxt2
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_statresults2.txt"; set TMPStatResultsTxt2 $TmpFile; puts $SessionNameLogFid $TMPStatResultsTxt2

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_cmplxplane.txt"; set TMPCmplxPlaneTxt $TmpFile; puts $SessionNameLogFid $TMPCmplxPlaneTxt

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_locicmplxplane.txt"; set TMPLociCmplxPlaneTxt $TmpFile; puts $SessionNameLogFid $TMPLociCmplxPlaneTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_locicmplxplaneline.txt"; set TMPLociCmplxPlaneLineTxt $TmpFile; puts $SessionNameLogFid $TMPLociCmplxPlaneLineTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_locicmplxplaneloci.txt"; set TMPLociCmplxPlaneLociTxt $TmpFile; puts $SessionNameLogFid $TMPLociCmplxPlaneLociTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_locicmplxplanetrip.txt"; set TMPLociCmplxPlaneTripletTxt $TmpFile; puts $SessionNameLogFid $TMPLociCmplxPlaneTripletTxt

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profile.txt"; set TMPProfileTxt $TmpFile; puts $SessionNameLogFid $TMPProfileTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profilex.txt"; set TMPProfileXTxt $TmpFile; puts $SessionNameLogFid $TMPProfileXTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profilex.bin"; set TMPProfileXBin $TmpFile; puts $SessionNameLogFid $TMPProfileXBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profiley.txt"; set TMPProfileYTxt $TmpFile; puts $SessionNameLogFid $TMPProfileYTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profiley.bin"; set TMPProfileYBin $TmpFile; puts $SessionNameLogFid $TMPProfileYBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profilexy.txt"; set TMPProfileXYTxt $TmpFile; puts $SessionNameLogFid $TMPProfileXYTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profilexy.bin"; set TMPProfileXYBin $TmpFile; puts $SessionNameLogFid $TMPProfileXYBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profile1dx.bin"; set TMPProfile1DXBin $TmpFile; puts $SessionNameLogFid $TMPProfile1DXBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profile1dy.bin"; set TMPProfile1DYBin $TmpFile; puts $SessionNameLogFid $TMPProfile1DYBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_profile3d.bin"; set TMPProfile3DBin $TmpFile; puts $SessionNameLogFid $TMPProfile3DBin

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_treeclassrules.txt"; set TMPTreeClassRulesTxt $TmpFile; puts $SessionNameLogFid $TMPTreeClassRulesTxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_treeclassprmlist.txt"; set TMPTreeClassPrmListTxt $TmpFile; puts $SessionNameLogFid $TMPTreeClassPrmListTxt

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_checkbinarydata.txt"; set TMPCheckBinaryData $TmpFile; puts $SessionNameLogFid $TMPCheckBinaryData
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_polsarprosim.txt"; set TMPPolSARproSIM $TmpFile; puts $SessionNameLogFid $TMPPolSARproSIM

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_PCT_Tomo.txt"; set TMPPCTAsc $TmpFile; puts $SessionNameLogFid $TMPPCTAsc
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_PCT_Tomo.bin"; set TMPPCTBin $TmpFile; puts $SessionNameLogFid $TMPPCTBin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_PCT_Tomo.bmp"; set TMPPCTBmp $TmpFile; puts $SessionNameLogFid $TMPPCTBmp

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_Google.txt"; set TMPGoogle $TmpFile; puts $SessionNameLogFid $TMPGoogle

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_CoReg.txt"; set TMPCoRegTxt $TmpFile; puts $SessionNameLogFid $TMPCoRegTxt

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_Baseline.txt"; set TMPBaselineTxt $TmpFile; puts $SessionNameLogFid $TMPBaselineTxt

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ClusterCenter8.bin"; set TMPClusterCenter8 $TmpFile; puts $SessionNameLogFid $TMPClusterCenter8
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_ClusterCenter16.bin"; set TMPClusterCenter16 $TmpFile; puts $SessionNameLogFid $TMPClusterCenter16

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_comparebinarydata"; set TMPCompareBinaryData $TmpFile; puts $SessionNameLogFid $TMPCompareBinaryData

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Geocode_Cfg.cfg"; set TMPMapReadyGeocodeCfg $TmpFile; puts $SessionNameLogFid $TMPMapReadyGeocodeCfg 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Geocode_Log.log"; set TMPMapReadyGeocodeLog $TmpFile; puts $SessionNameLogFid $TMPMapReadyGeocodeLog 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Geocode_Status.status"; set TMPMapReadyGeocodeStatusStatus $TmpFile; puts $SessionNameLogFid $TMPMapReadyGeocodeStatusStatus 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Geocode_Status.files"; set TMPMapReadyGeocodeStatusFiles $TmpFile; puts $SessionNameLogFid $TMPMapReadyGeocodeStatusFiles 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Geocode_Proj.proj"; set TMPMapReadyGeocodeProj $TmpFile; puts $SessionNameLogFid $TMPMapReadyGeocodeProj 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Matrix_Cfg.cfg"; set TMPMapReadyMatrixCfg $TmpFile; puts $SessionNameLogFid $TMPMapReadyMatrixCfg 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Matrix_Log.log"; set TMPMapReadyMatrixLog $TmpFile; puts $SessionNameLogFid $TMPMapReadyMatrixLog 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Matrix_Status.status"; set TMPMapReadyMatrixStatusStatus $TmpFile; puts $SessionNameLogFid $TMPMapReadyMatrixStatusStatus 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Matrix_Status.files"; set TMPMapReadyMatrixStatusFiles $TmpFile; puts $SessionNameLogFid $TMPMapReadyMatrixStatusFiles 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Matrix_Proj.proj"; set TMPMapReadyMatrixProj $TmpFile; puts $SessionNameLogFid $TMPMapReadyMatrixProj 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Parameter_Cfg.cfg"; set TMPMapReadyParameterCfg $TmpFile; puts $SessionNameLogFid $TMPMapReadyParameterCfg 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Parameter_Log.log"; set TMPMapReadyParameterLog $TmpFile; puts $SessionNameLogFid $TMPMapReadyParameterLog 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Parameter_Status.status"; set TMPMapReadyParameterStatusStatus $TmpFile; puts $SessionNameLogFid $TMPMapReadyParameterStatusStatus 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Parameter_Status.files"; set TMPMapReadyParameterStatusFiles $TmpFile; puts $SessionNameLogFid $TMPMapReadyParameterStatusFiles 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MapReady_Parameter_Proj.proj"; set TMPMapReadyParameterProj $TmpFile; puts $SessionNameLogFid $TMPMapReadyParameterProj 

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_SNAP_Batch_Cfg.xml"; set TMPSNAPBatchCfg $TmpFile; puts $SessionNameLogFid $TMPSNAPBatchCfg 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_SNAP_Batch_Out.txt"; set TMPSNAPBatchOut $TmpFile; puts $SessionNameLogFid $TMPSNAPBatchOut 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_SNAP_Batch_Run.bat"; set TMPSNAPBatchRun $TmpFile; puts $SessionNameLogFid $TMPSNAPBatchRun 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_SNAP_Batch"; set TMPSNAPBatchDir $TmpFile; puts $SessionNameLogFid $TMPSNAPBatchDir 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_SNAP_Config.txt"; set TMPSNAPConfigTxt $TmpFile; puts $SessionNameLogFid $TMPSNAPConfigTxt 

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MaskROIarea.txt"; set TMPMaskROIarea $TmpFile; puts $SessionNameLogFid $TMPMaskROIarea 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MaskROI.bin"; set TMPMaskROIbin $TmpFile; puts $SessionNameLogFid $TMPMaskROIbin 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_MaskROI.txt"; set TMPMaskROItxt $TmpFile; puts $SessionNameLogFid $TMPMaskROItxt 

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_1GnuPlot.gif"; set TMPGnuPlotTk1 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk1 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_2GnuPlot.gif"; set TMPGnuPlotTk2 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk2 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_3GnuPlot.gif"; set TMPGnuPlotTk3 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk3 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_4GnuPlot.gif"; set TMPGnuPlotTk4 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk4 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_5GnuPlot.gif"; set TMPGnuPlotTk5 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk5 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_6GnuPlot.gif"; set TMPGnuPlotTk6 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk6 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_7GnuPlot.gif"; set TMPGnuPlotTk7 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk7 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_8GnuPlot.gif"; set TMPGnuPlotTk8 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk8 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_9GnuPlot.gif"; set TMPGnuPlotTk9 $TmpFile; puts $SessionNameLogFid $TMPGnuPlotTk9 

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot1.png"; set TMPGnuPlot1Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot1Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot2.png"; set TMPGnuPlot2Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot2Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot3.png"; set TMPGnuPlot3Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot3Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot4.png"; set TMPGnuPlot4Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot4Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot5.png"; set TMPGnuPlot5Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot5Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot6.png"; set TMPGnuPlot6Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot6Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot7.png"; set TMPGnuPlot7Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot7Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot8.png"; set TMPGnuPlot8Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot8Tk 
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_GnuPlot9.png"; set TMPGnuPlot9Tk $TmpFile; puts $SessionNameLogFid $TMPGnuPlot9Tk 

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_ScatterPlotX.txt"; set TMPScatterPlotFileOutputXtxt $TmpFile; puts $SessionNameLogFid $TMPScatterPlotFileOutputXtxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_ScatterPlotX.bin"; set TMPScatterPlotFileOutputXbin $TmpFile; puts $SessionNameLogFid $TMPScatterPlotFileOutputXbin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_ScatterPlotY.txt"; set TMPScatterPlotFileOutputYtxt $TmpFile; puts $SessionNameLogFid $TMPScatterPlotFileOutputYtxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_ScatterPlotY.bin"; set TMPScatterPlotFileOutputYbin $TmpFile; puts $SessionNameLogFid $TMPScatterPlotFileOutputYbin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_ScatterPlotXY.txt"; set TMPScatterPlotFileOutputXYtxt $TmpFile; puts $SessionNameLogFid $TMPScatterPlotFileOutputXYtxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_ScatterPlotXY.bin"; set TMPScatterPlotFileOutputXYbin $TmpFile; puts $SessionNameLogFid $TMPScatterPlotFileOutputXYbin

set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_PTOMDisplayX.txt"; set TMPPTOMDisplayFileOutputXtxt $TmpFile; puts $SessionNameLogFid $TMPPTOMDisplayFileOutputXtxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_PTOMDisplayX.bin"; set TMPPTOMDisplayFileOutputXbin $TmpFile; puts $SessionNameLogFid $TMPPTOMDisplayFileOutputXbin
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_PTOMDisplayXY.txt"; set TMPPTOMDisplayFileOutputXYtxt $TmpFile; puts $SessionNameLogFid $TMPPTOMDisplayFileOutputXYtxt
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_PTOMDisplayXY.bin"; set TMPPTOMDisplayFileOutputXYbin $TmpFile; puts $SessionNameLogFid $TMPPTOMDisplayFileOutputXYbin

set TMPPSPCalcDirResult1 "$TMPDir/$SessionName"; append TMPPSPCalcDirResult1 "/CalcResult1"
set TMPPSPCalcDirResult2 "$TMPDir/$SessionName"; append TMPPSPCalcDirResult2 "/CalcResult2"
set TMPPSPCalcDirResult3 "$TMPDir/$SessionName"; append TMPPSPCalcDirResult3 "/CalcResult3"
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_Create_MatSU.txt"; set TMPPSPCalcMatSU $TmpFile; puts $SessionNameLogFid $TMPPSPCalcMatSU
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_Create_MatX0.txt"; set TMPPSPCalcMatX0 $TmpFile; puts $SessionNameLogFid $TMPPSPCalcMatX0
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_Create_MatX1.txt"; set TMPPSPCalcMatX1 $TmpFile; puts $SessionNameLogFid $TMPPSPCalcMatX1
set TmpFile "$TMPDir/$SessionName"; append TmpFile "_TMP_Create_MatX2.txt"; set TMPPSPCalcMatX2 $TmpFile; puts $SessionNameLogFid $TMPPSPCalcMatX2

set TmpFile "$TMPDir/geocoding.cfg"; set TMPMapReadyGeocodingCfg $TmpFile
set TmpFile "$TMPDir/geocoding.meta"; set TMPMapReadyGeocodingMeta $TmpFile
set TmpFile "$TMPDir/geocoding.img"; set TMPMapReadyGeocodingImg $TmpFile
set TmpFile "$TMPDir/geocoding.hdr"; set TMPMapReadyGeocodingHdr $TmpFile
set TmpFile "$TMPDir/import.cfg"; set TMPMapReadyImportCfg $TmpFile
set TmpFile "$TMPDir/import.meta"; set TMPMapReadyImportMeta $TmpFile
set TmpFile "$TMPDir/import.img"; set TMPMapReadyImportImg $TmpFile
set TmpFile "$TMPDir/import.hdr"; set TMPMapReadyImportHdr $TmpFile
set TmpFile "$TMPDir/import_unscaled.cfg"; set TMPMapReadyImportUnscaledCfg $TmpFile
set TmpFile "$TMPDir/import_unscaled.meta"; set TMPMapReadyImportUnscaledMeta $TmpFile
set TmpFile "$TMPDir/import_unscaled.img"; set TMPMapReadyImportUnscaledImg $TmpFile
set TmpFile "$TMPDir/import_unscaled.hdr"; set TMPMapReadyImportUnscaledHdr $TmpFile
set TmpFile "$TMPDir/polarimetry.cfg"; set TMPMapReadyPolarimetryCfg $TmpFile
set TmpFile "$TMPDir/polarimetry.meta"; set TMPMapReadyPolarimetryMeta $TmpFile
set TmpFile "$TMPDir/polarimetry.img"; set TMPMapReadyPolarimetryImg $TmpFile
set TmpFile "$TMPDir/polarimetry.hdr"; set TMPMapReadyPolarimetryHdr $TmpFile

set TmpFile "$TMPDir/MemoryAllocError.txt"; set TMPMemoryAllocError $TmpFile
DeleteFile $TMPMemoryAllocError

#SVM
set TmpFile "$Tmp/$SessionName/"; append TmpFile "script_svm.bat"; set TMPScriptSVM $TmpFile
set TmpFile "$Tmp/$SessionName/"; append TmpFile "training.bin"; set TMPTrainingSet $TmpFile
set TmpFile "$Tmp/$SessionName/"; append TmpFile "training_norm.bin"; set TMPTrainingSetNorm $TmpFile
set TmpFile "$Tmp/$SessionName/"; append TmpFile "range.txt"; set TMPSVMRange $TmpFile
set TmpFile "$Tmp/$SessionName/"; append TmpFile "config.txt"; set TMPSVMConfig $TmpFile
set TmpFile "$Tmp/$SessionName/"; append TmpFile "best_CV_results.txt"; set TMPSVMBestCG $TmpFile
set TMPDirSession "$TMPDir/$SessionName"

set TMPDirectory "$TMPDir/$SessionName"
if [file isdirectory $TMPDirectory] {
    } else {
    if { [catch {file mkdir $TMPDirectory} ErrorCreateDir] } {
        set FatalErrorMessage $ErrorCreateDir
        Window show $widget(Toplevel236)
        }
    }
    
set TMPDirPolInSARMaster "$TMPDirectory/PolInSAR_Master"
puts $SessionNameLogFid $TMPDirPolInSARMaster
set TMPDirPolInSARSlave "$TMPDirectory/PolInSAR_Slave"
puts $SessionNameLogFid $TMPDirPolInSARSlave
set TMPDirPolInSARMasterSlave "$TMPDirectory/PolInSAR_Master_Slave"
puts $SessionNameLogFid $TMPDirPolInSARMasterSlave

puts $SessionNameLogFid "$TMPDirectory"

puts $SessionNameLogFid "********************************"

set Fonction "LOAD CONFIGURATION"
set Fonction2 "POLSARPRO v5.0"
set ProgressLine "0"
Window show $widget(Toplevel345); TextEditorRunTrace "Open Window Open PSP" "b"
update
set f [ open "| Soft/tools/load_config.exe" r]
OpenCloseProgressBar $f
TextEditorRunTrace "Load PolSARpro v5.0 Configuration" "r"
Window hide $widget(Toplevel345); TextEditorRunTrace "Close Window Open PSP" "b"
set Fonction ""; set Fonction2 ""

#PSP MAIN WINDOW
set geometrie $geowidth; append geometrie "x"; append geometrie $geoheight; append geometrie "+1+1"
wm geometry $widget(Toplevel2) $geometrie; update

#PSP Progress Bar
set PSPPB [expr $geowidth - (3 * $geoscreenborderw)]
$widget(ProgressbarPSP) configure -width $PSPPB; update

#PSP Run Trace
TextEditorRunTraceInit

MenuRAZ
Window show $widget(Toplevel2); TextEditorRunTrace "Open Window PolSARpro v5.0 Main Menu" "b"

set PSPTopLevel [winfo toplevel $widget(Toplevel2)]
WmTransient .top10 $PSPTopLevel
WmTransient .top44 $PSPTopLevel
WmTransient .top28 $PSPTopLevel
WmTransient .top45 $PSPTopLevel
WmTransient .top35 $PSPTopLevel
WmTransient .top32 $PSPTopLevel
WmTransient .top236 $PSPTopLevel
WmTransient .top242 $PSPTopLevel
WmTransient .top255 $PSPTopLevel
WmTransient .top336 $PSPTopLevel
WmTransient .top338 $PSPTopLevel
WmTransient .top64 $PSPTopLevel
WmTransient .top341 $PSPTopLevel
WmTransient .top345 $PSPTopLevel
WmTransient .top377 $PSPTopLevel
WmTransient .top387 $PSPTopLevel
WmTransient .top388 $PSPTopLevel
WmTransient .top399 $PSPTopLevel
WmTransient .top600 $PSPTopLevel
WmTransient .top448 $PSPTopLevel
WmTransient .top530 $PSPTopLevel

#LoadBMP
WidgetGeometryCenter .top336

#Processing
WidgetGeometryCenter .top399

#Warning
WidgetGeometryCenter .top32

#Advice
WidgetGeometryCenter .top242

#Advice1
WidgetGeometryLeft .top448

#Advice2
WidgetGeometryCenter .top377

#AdviceFunctionality
WidgetGeometryCenter .top387

#AdviceWarning
WidgetGeometryCenter .top388

#Error
WidgetGeometryCenter .top44

#Question
WidgetGeometryCenter .top45

#Under Construction
WidgetGeometryCenter .top35

#PSPMemory
WidgetGeometryCenter .top10

#FatalError
WidgetGeometryCenter .top236

#SetUpError
WidgetGeometryCenter .top255

#SearchingGoogle
WidgetGeometryCenter .top338

#OpenClosePSP
WidgetGeometryCenter .top345

#Configuration
WidgetGeometryCenter .top341

#Message: Processing the Function
WidgetGeometryRight .top28

#PSP Viewer
WidgetGeometryRight .top64

#PolSARap Menu
WidgetGeometryRight .top530

WmTransient .top214 $PSPTopLevel
WmTransient .top308 $PSPTopLevel
WmTransient .top213 $PSPTopLevel
WmTransient .top310 $PSPTopLevel

#Display Menu
WidgetGeometryLeft .top214
#Display Menu Dual
WidgetGeometryLeft .top308
#Tools Menu
WidgetGeometryLeft .top213
#Tools Menu Dual
WidgetGeometryLeft .top310

#Calculator
WidgetGeometryCenter .top600
Window hide .top600

#ViewBMP
WmTransient .top51 $PSPTopLevel
WmTransient .top339 $PSPTopLevel
WmTransient .top27 $PSPTopLevel
WmTransient .top73 $PSPTopLevel
WmTransient .top215 $PSPTopLevel
WmTransient .top207 $PSPTopLevel
WmTransient .top216 $PSPTopLevel
WmTransient .top78 $PSPTopLevel
WmTransient .top401 $PSPTopLevel
WmTransient .top402 $PSPTopLevel
WmTransient .top419 $PSPTopLevel
WmTransient .top420 $PSPTopLevel
WmTransient .top421 $PSPTopLevel
WmTransient .top422 $PSPTopLevel
WmTransient .top423 $PSPTopLevel
WmTransient .top424 $PSPTopLevel
WmTransient .top425 $PSPTopLevel
WmTransient .top401tomo $PSPTopLevel

WidgetGeometryLeft .top51
WidgetGeometryLeft .top27
#WidgetGeometryLeft .top73
#WidgetGeometryLeft .top215
WidgetGeometryLeft .top207
WidgetGeometryLeft .top216
WidgetGeometryLeft .top78
WidgetGeometryLeft .top401
WidgetGeometryLeft .top402
WidgetGeometryLeft .top419
WidgetGeometryLeft .top420
WidgetGeometryLeft .top421
WidgetGeometryLeft .top422
WidgetGeometryLeft .top423
WidgetGeometryLeft .top424
WidgetGeometryLeft .top425
WidgetGeometryLeft .top401tomo
 
#View BMP All
WidgetGeometryCenter .top339

#PDFReader Configuration
set PDFReaderFlag ""
if {$PDFReader == ""} {
    set PDFReaderFlag "null"
    } else {
    if [file exists $PDFReader] {
        set PDFReaderFlag "true"
        } else {
        set PDFReaderFlag "link"
        }
    }
if {$PDFReaderFlag != "true"} {
    set VarError ""
    if {$PDFReaderFlag == "null"} {
        set ErrorMessage "PDF READER APPLICATION NOT LINKED WITH PolSARpro"
        }
    if {$PDFReaderFlag == "link"} {
        set ErrorMessage "WRONG LINK BETWEEN PDF READER APPLICATION AND PolSARpro"
        }
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "PDF READER APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "PDF"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "acroread acrord32 acrobat xpdf kghostview ghostview gv"
        set ConfigFileNameList "acroread acrord32 acrobat xpdf kghostview ghostview gv"
        .top341.fra74.lab76 configure -text "PDF READER"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/adobe_pdf.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration PDF READER Software" "b"
        tkwait variable VarConfigFileName 
        }        
    }

#GoogleEarth Configuration
set GoogleEarthReaderFlag ""
if {$GoogleEarthReader == ""} {
    set GoogleEarthReaderFlag "null"
    } else {
    if [file exists $GoogleEarthReader] {
        set GoogleEarthReaderFlag "true"
        } else {
        set GoogleEarthReaderFlag "link"
        }
    }
if {$GoogleEarthReaderFlag != "true"} {
    set VarError ""
    if {$GoogleEarthReaderFlag == "null"} {
        set ErrorMessage "GOOGLE EARTH APPLICATION NOT LINKED WITH PolSARpro"
        }
    if {$GoogleEarthReaderFlag == "link"} {
        set ErrorMessage "WRONG LINK BETWEEN GOOGLE EARTH APPLICATION AND PolSARpro"
        }
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "GOOGLE EARTH APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "GOOGLEEARTH"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "googleearth gEarth gearth google-earth GEarth"
        set ConfigFileNameList "googleearth gEarth gearth google-earth GEarth"
        .top341.fra74.lab76 configure -text "GOOGLE EARTH"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/google_earth.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration GOOGLE EARTH" "b"
        tkwait variable VarConfigFileName 
        }        
    }

#Gimp Configuration
set GimpReaderFlag ""
if {$GimpReader == ""} {
    set GimpReaderFlag "null"
    } else {
    if [file exists $GimpReader] {
        set GimpReaderFlag "true"
        } else {
        set GimpReaderFlag "link"
        }
    }
if {$GimpReaderFlag != "true"} {
    set VarError ""
    if {$GimpReaderFlag == "null"} {
        set ErrorMessage "GIMP VIEWER APPLICATION NOT LINKED WITH PolSARpro"
        }
    if {$GimpReaderFlag == "link"} {
        set ErrorMessage "WRONG LINK BETWEEN GIMP VIEWER APPLICATION AND PolSARpro"
        }
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "GIMP VIEWER APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "GIMP"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "gimp-2.6"
        set ConfigFileNameList "gimp-2.6"
        .top341.fra74.lab76 configure -text "GIMP"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/GIMPshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration GIMP VIEWER Software" "b"
        tkwait variable VarConfigFileName 
        }        
    }

#ImageMagick Configuration
set ImageMagickMakerFlag ""
if {$ImageMagickMaker == ""} {
    set ImageMagickMakerFlag "null"
    } else {
    if [file exists $ImageMagickMaker] {
        set ImageMagickMakerFlag "true"
        } else {
        set ImageMagickMakerFlag "link"
        }
    }
if {$ImageMagickMakerFlag != "true"} {
    set VarError ""
    if {$ImageMagickMakerFlag == "null"} {
        set ErrorMessage "IMAGE-MAGICK APPLICATION NOT LINKED WITH PolSARpro"
        }
    if {$ImageMagickMakerFlag == "link"} {
        set ErrorMessage "WRONG LINK BETWEEN IMAGE-MAGICK APPLICATION AND PolSARpro"
        }
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "IMAGE-MAGICK APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "IMAGEMAGICK"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "convert"
        set ConfigFileNameList "convert"
        .top341.fra74.lab76 configure -text "IMAGE MAGICK"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/image_magick.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration IMAGE MAGICK Software" "b"
        tkwait variable VarConfigFileName 
        }        
    }

#MapReady Configuration
set MapReadyReaderFlag ""
if {$MapReadyReader == ""} {
    set MapReadyReaderFlag "null"
    } else {
    if [file exists $MapReadyReader] {
        set MapReadyReaderFlag "true"
        } else {
        set MapReadyReaderFlag "link"
        }
    }
if {$MapReadyReaderFlag != "true"} {
    set VarError ""
    if {$MapReadyReaderFlag == "null"} {
        set ErrorMessage "MAP READY APPLICATION NOT LINKED WITH PolSARpro"
        }
    if {$MapReadyReaderFlag == "link"} {
        set ErrorMessage "WRONG LINK BETWEEN MAP READY APPLICATION AND PolSARpro"
        }
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "MAP READY APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "MAPREADY"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "asf_mapready"
        set ConfigFileNameList "asf_mapready"
        .top341.fra74.lab76 configure -text "MAP READY"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/ASFshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration MAP READY Software" "b"
        tkwait variable VarConfigFileName 
        }
    }
if {$MapReadyReader != ""} {
    set MapReadyKmlReader [file dirname $MapReadyReader]
    append MapReadyKmlReader "/asf_kml_overlay.exe"
    }

#Snap Configuration
set SnapReaderFlag ""
if {$SnapReader == ""} {
    set SnapReaderFlag "null"
    } else {
    if [file exists $SnapReader] {
        set SnapReaderFlag "true"
        } else {
        set SnapReaderFlag "link"
        }
    }
if {$SnapReaderFlag != "true"} {
    set VarError ""
    if {$SnapReaderFlag == "null"} {
        set ErrorMessage "SNAP S1-TBX APPLICATION NOT LINKED WITH PolSARpro"
        }
    if {$SnapReaderFlag == "link"} {
        set ErrorMessage "WRONG LINK BETWEEN SNAP S1-TBX APPLICATION AND PolSARpro"
        }
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "SNAP S1-TBX APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "SNAP"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "s1tbx"
        set ConfigFileNameList "s1tbx"
        .top341.fra74.lab76 configure -text "SNAP S1-TBX"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/SNAPshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration SNAP Software" "b"
        tkwait variable VarConfigFileName 
        }        
    }

#GnuPlot Test
set ErrorCatch [catch {puts $GnuplotPipeFid "quit"}]
if { $ErrorCatch == "0" } { puts $GnuplotPipeFid "quit" }
set ErrorCatch [catch {flush $GnuplotPipeFid}]
if { $ErrorCatch == "0" } { flush $GnuplotPipeFid }
catch "close $GnuplotPipeFid"
set GnuplotPipeFid ""
} \
        -highlightthickness 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg222.gif]] \
        -padx 0 -pady 0 -relief flat -text Run -underline 0 
    vTcl:DefineAlias "$site_4_0.but93" "Button14" vTcl:WidgetProc "Toplevel1" 1
    bindtags $site_4_0.but93 "$site_4_0.but93 Button $top all _vTclBalloon"
    bind $site_4_0.but93 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Run PolSARpro v5.0}
    }
    label $site_4_0.lab67 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg223.gif]] \
        -padx 0 -pady 0 -text label -underline 0 
    vTcl:DefineAlias "$site_4_0.lab67" "Label5" vTcl:WidgetProc "Toplevel1" 1
    button $site_4_0.but57 \
        -background #7ae14c751736 -borderwidth 0 \
        -command {global VarQuestion QuestionMessage
global SessionNameLogFid

#UTIL
global Load_Question PSPTopLevel

if {$Load_Question == 0} {
    source "GUI/util/Question.tcl"
    set Load_Question 1
    WmTransient .top45 $PSPTopLevel
    }

set QuestionMessage "ARE YOU SURE YOU WANT TO QUIT ?"
set VarQuestion ""
Window show $widget(Toplevel45); TextEditorRunTrace "Open Window Question" "b"
tkwait variable VarQuestion
if {$VarQuestion == "ok"} {

#Close Log File
if {$SessionNameLogFid != ""} {
    catch "close $SessionNameLogFid"
    }

exit }} \
        -foreground #DE5800 -highlightthickness 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg224.gif]] \
        -padx 0 -pady 0 -relief flat -text Exit -underline 0 
    vTcl:DefineAlias "$site_4_0.but57" "Button17" vTcl:WidgetProc "Toplevel1" 1
    bindtags $site_4_0.but57 "$site_4_0.but57 Button $top all _vTclBalloon"
    bind $site_4_0.but57 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Exit PolSARpro v5.0}
    }
    label $site_4_0.lab68 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg225.gif]] \
        -padx 0 -pady 0 -text label -underline 0 
    vTcl:DefineAlias "$site_4_0.lab68" "Label6" vTcl:WidgetProc "Toplevel1" 1
    pack $site_4_0.lab66 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side top 
    pack $site_4_0.but93 \
        -in $site_4_0 -anchor center -expand 1 -fill none -side top 
    pack $site_4_0.lab67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side top 
    pack $site_4_0.but57 \
        -in $site_4_0 -anchor center -expand 1 -fill none -side top 
    pack $site_4_0.lab68 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side bottom 
    label $site_3_0.lab72 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg21.gif]] \
        -padx 0 -pady 0 -text label -underline 0 
    vTcl:DefineAlias "$site_3_0.lab72" "Label2" vTcl:WidgetProc "Toplevel1" 1
    pack $site_3_0.cpd70 \
        -in $site_3_0 -anchor center -expand 0 -fill none -side right 
    pack $site_3_0.cpd69 \
        -in $site_3_0 -anchor center -expand 1 -fill both -side right 
    pack $site_3_0.lab72 \
        -in $site_3_0 -anchor center -expand 0 -fill none -side left 
    label $top.lab67 \
        -borderwidth 0 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv5pdg3.gif]] \
        -padx 0 -pady 0 -text label -underline 0 
    vTcl:DefineAlias "$top.lab67" "Label3" vTcl:WidgetProc "Toplevel1" 1
    menu $top.m66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 1 
    ###################
    # SETTING GEOMETRY
    ###################
    pack $top.lab80 \
        -in $top -anchor center -expand 0 -fill none -side top 
    pack $top.fra66 \
        -in $top -anchor center -expand 0 -fill both -side top 
    pack $top.lab67 \
        -in $top -anchor center -expand 0 -fill none -side top 

    vTcl:FireEvent $base <<Ready>>
}

proc vTclWindow.top2 {base} {
    if {$base == ""} {
        set base .top2
    }
    if {[winfo exists $base]} {
        wm deiconify $base; return
    }
    set top $base
    ###################
    # CREATING WIDGETS
    ###################
    vTcl:toplevel $top -class Toplevel
    wm withdraw $top
    wm focusmodel $top passive
    wm geometry $top 1280x640+1+11; update
    wm maxsize $top 2000 1200
    wm minsize $top 136 1
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm title $top "Polarimetric SAR Data Processing and Educational Tool v5.0 - Menu"
    vTcl:DefineAlias "$top" "Toplevel2" vTcl:Toplevel:WidgetProc "" 1
    bindtags $top "$top Toplevel all _TopLevel"
    vTcl:FireEvent $top <<Create>>
    wm protocol $top WM_DELETE_WINDOW "vTcl:FireEvent $top <<>>"

    frame $top.fra71 \
        -borderwidth 2 -relief sunken -width 125 
    vTcl:DefineAlias "$top.fra71" "Frame5" vTcl:WidgetProc "Toplevel2" 1
    set site_3_0 $top.fra71
    frame $site_3_0.fra72 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra72" "Frame6" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra72
    button $site_4_0.cpd75 \
        -background #ff8000 \
        -command {HelpPdfEdit "Help/util/PolSARpro_MainMenu.pdf"} \
        -image [vTcl:image:get_image [file join . GUI Images help.gif]] \
        -pady 0 -width 20 
    vTcl:DefineAlias "$site_4_0.cpd75" "Button6" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd75 "$site_4_0.cpd75 Button $top all _vTclBalloon"
    bind $site_4_0.cpd75 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Help}
    }
    button $site_4_0.cpd74 \
        \
        -command {global PVShortcut

if {$PVShortcut == 0} {
    set PVShortcut 1
    LoadPSPViewer
    Window show $widget(Toplevel64); TextEditorRunTrace "Open Window PolSARpro Viewer" "b"
    } else {
    set PVShortcut 0
    ClosePSPViewer
    Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
    }} \
        -image [vTcl:image:get_image [file join . GUI Images PVv3shortcut.gif]] \
        -padx 5 -pady 4 
    vTcl:DefineAlias "$site_4_0.cpd74" "Button5" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd74 "$site_4_0.cpd74 Button $top all _vTclBalloon"
    bind $site_4_0.cpd74 <<SetBalloon>> {
        set ::vTcl::balloon::%W {PSP Viewer v3.0}
    }
    menubutton $site_4_0.men71 \
        \
        -image [vTcl:image:get_image [file join . GUI Images GIMPshortcut.gif]] \
        -menu "$site_4_0.men71.m" -padx 5 -pady 4 -relief raised 
    vTcl:DefineAlias "$site_4_0.men71" "Menubutton3" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men71 "$site_4_0.men71 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men71 <<SetBalloon>> {
        set ::vTcl::balloon::%W {GIMP}
    }
    menu $site_4_0.men71.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men71.m add command \
        \
        -command {global wshGimp GimpReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage GimpReaderFlag 

set GimpReaderFlag ""
if {$GimpReader == ""} {
    set GimpReaderFlag "null"
    } else {
    if [file exists $GimpReader] {
        set GimpReaderFlag "true"
        } else {
        set GimpReaderFlag "link"
        }
    }
if {$GimpReaderFlag == "true"} {
    set WarningMessage "GIMP VIEWER APPLICATION IS"
    set WarningMessage2 "ALREADY LINKED WITH PolSARpro"
    set VarAdvice ""
    Window show .top242; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
    } else {
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "GIMP VIEWER APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "GIMP"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "gimp-2.6"
        set ConfigFileNameList "gimp-2.6"
        .top341.fra74.lab76 configure -text "GIMP"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/GIMPshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration GIMP VIEWER Software" "b"
        tkwait variable VarConfigFileName
        }
    }} \
        -label {Config GIMP} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add command \
        \
        -command {global DataDirInit CONFIGDir

Gimp "$CONFIGDir/Gimp_Test.bmp"} \
        -label {Test GIMP} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add command \
        \
        -command {global FileName ActiveProgram
global DataDir DataDirChannel1 DataDirMult

set types {
{{BMP Files}        {.bmp}        }
}
set FileName ""

if {$ActiveProgram == "POLINSAR"} { 
    OpenFile $DataDirChannel1 $types "IMAGE FILE"
    } else {
    if {$ActiveProgram == "POLMULT"} { 
        OpenFile $DataDirMult(1) $types "IMAGE FILE"
        } else {
        OpenFile $DataDir $types "IMAGE FILE"
        }
    }
    
if {$FileName != ""} {
    Gimp $FileName
    }} \
        -label {Open BMP File} 
    $site_4_0.men71.m add command \
        \
        -command {global FileName ActiveProgram
global DataDir DataDirChannel1 DataDirMult

set types {
{{GIF Files}        {.gif}        }
}
set FileName ""

if {$ActiveProgram == "POLINSAR"} { 
    OpenFile $DataDirChannel1 $types "IMAGE FILE"
    } else {
    if {$ActiveProgram == "POLMULT"} { 
        OpenFile $DataDirMult(1) $types "IMAGE FILE"
        } else {
        OpenFile $DataDir $types "IMAGE FILE"
        }
    }
    
if {$FileName != ""} {
    Gimp $FileName
    }} \
        -label {Open GIF File} 
    menubutton $site_4_0.men75 \
        -height 20 \
        -image [vTcl:image:get_image [file join . GUI Images Displayshortcut.gif]] \
        -menu "$site_4_0.men75.m" -padx 5 -pady 4 -relief raised -width 20 
    vTcl:DefineAlias "$site_4_0.men75" "Menubutton11" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men75 "$site_4_0.men75 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men75 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Display}
    }
    menu $site_4_0.men75.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men75.m add command \
        \
        -command {global DisplayMainMenu DataDir PSPTopLevel ColorMapFile ColorMap CONFIGDir ValidMaskFile ValidMaskColor
#BMP PROCESS
global Load_CreateBMPFile 
 
if {$Load_CreateBMPFile == 0} {
    source "GUI/bmp_process/CreateBMPFile.tcl"
    set Load_CreateBMPFile 1
    WmTransient $widget(Toplevel43) $PSPTopLevel
    }

set config "false"

set DisplayMainMenu 1
        
set BMPDirInput $DataDir
set BMPDirOutput $DataDir
set NligInit 0
set NligEnd 0
set NcolInit 0
set NcolEnd 0
set NcolFullSize 0
set InputFormat "float"
set OutputFormat "real"
set BMPOutputFormat "bmp8"
set BMPFileInput ""
set BMPFileOutput ""
set BMPFileOutputTmp ""
set ValidMaskFile ""; set ValidMaskColor "black"
$widget(Entry43_5) configure -state disable
$widget(Entry43_5) configure -disabledbackground #FFFFFF
$widget(Button43_5) configure -state normal
set ColorMapFile "$CONFIGDir/ColorMapJET.pal"
set ColorMap "jet"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label43_1) configure -state disable
$widget(Entry43_1) configure -state disable
$widget(Label43_2) configure -state disable
$widget(Entry43_2) configure -state disable
$widget(Label43_3) configure -state disable
$widget(Entry43_3) configure -state disable
$widget(Entry43_3) configure -disabledbackground $PSPBackgroundColor
$widget(Label43_4) configure -state disable
$widget(Entry43_4) configure -state disable
$widget(Entry43_4) configure -disabledbackground $PSPBackgroundColor
$widget(Button43_1) configure -state disable
set MinBMP "Auto"; set MaxBMP "Auto"
set MinCBMP "Auto"; set MaxCBMP "Auto"
WidgetShow $widget(Toplevel43); TextEditorRunTrace "Open Window Create BMP File" "b"} \
        -label {Create BMP File} 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add command \
        \
        -command {global DisplayMainMenu DataDir PSPTopLevel
global RGBMinBlue RGBMaxBlue RGBMinRed RGBMaxRed RGBMinGreen RGBMaxGreen
global MinMaxAutoRGB
#BMP PROCESS
global Load_CreateRGBFile PSPTopLevel
 
if {$Load_CreateRGBFile == 0} {
    source "GUI/bmp_process/CreateRGBFile.tcl"
    set Load_CreateRGBFile 1
    WmTransient $widget(Toplevel39) $PSPTopLevel
    }

set config "false"
    
set DisplayMainMenu 1

set RGBDirInput $DataDir
set RGBDirOutput $DataDir
set NligInit 0
set NligEnd 0
set NcolInit 0
set NcolEnd 0
set RGBFileInput ""
set RGBFileOutput ""
set FileInputBlue ""
set FileInputGreen ""
set FileInputRed ""
set FileOutput ""
set RGBFormat "combine"
set RGBCCCE "independant"

set MinMaxAutoRGB "1"
$widget(TitleFrame39_1) configure -state disable
$widget(TitleFrame39_2) configure -state disable
$widget(TitleFrame39_3) configure -state disable
$widget(Label39_1) configure -state disable
$widget(Entry39_1) configure -state disable
$widget(Label39_2) configure -state disable
$widget(Entry39_2) configure -state disable
$widget(Label39_3) configure -state disable
$widget(Entry39_3) configure -state disable
$widget(Label39_4) configure -state disable
$widget(Entry39_4) configure -state disable
$widget(Label39_5) configure -state disable
$widget(Entry39_5) configure -state disable
$widget(Label39_6) configure -state disable
$widget(Entry39_6) configure -state disable
$widget(Button39_1) configure -state disable
set RGBMinBlue "Auto"; set RGBMaxBlue "Auto"
set RGBMinRed "Auto"; set RGBMaxRed "Auto"
set RGBMinGreen "Auto"; set RGBMaxGreen "Auto"
WidgetShow $widget(Toplevel39); TextEditorRunTrace "Open Window Create RGB File" "b"} \
        -label {Create RGB File} 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add command \
        \
        -command {global DisplayMainMenu DataDir PSPTopLevel
#BMP PROCESS
global Load_CreateHSLFile 
 
if {$Load_CreateHSLFile == 0} {
    source "GUI/bmp_process/CreateHSLFile.tcl"
    set Load_CreateHSLFile 1
    WmTransient $widget(Toplevel69) $PSPTopLevel
    }

set DisplayMainMenu 1
        
set HSVDirInput $DataDir
set HSVDirOutput $DataDir
set NligInit 0
set NligEnd 0
set NcolInit 0
set NcolEnd 0
set HSVFileInput ""
set HSVFileOutput ""
set FileInputHue ""
set FileInputSat ""
set FileInputVal ""
set FileOutput ""
set HSVFormat "combine"
set HSVCCCE "independant"
WidgetShow $widget(Toplevel69); TextEditorRunTrace "Open Window Create HSL File" "b"
} \
        -label {Create HSL File} 
    button $site_4_0.cpd76 \
        \
        -command {global DataDir DataDirActive ConfigFile ErrorMessage PSPTopLevel
global PolarType PolarCase ActiveProgram
global DataDirChannel1 DataDirChannel2
#BMP PROCESS
global Load_ToolsMenu Load_ToolsMenuDual

set ConfigTools "SNGL"
if {$ActiveProgram == "POLINSAR"} { set ConfigTools "DUAL" }
if {$ActiveProgram == "POLMULT"} { set ConfigTools "MULT" }

if {$ConfigTools == "SNGL" } {
    if {$Load_ToolsMenu == 0} {
        source "GUI/tools/ToolsMenu.tcl"
        set Load_ToolsMenu 1
        WmTransient $widget(Toplevel213) $PSPTopLevel
        }
    Window show $widget(Toplevel213); TextEditorRunTrace "Open Window Tools Menu" "b"
    }

if {$ConfigTools == "DUAL" } {
    if {$Load_ToolsMenuDual == 0} {
        source "GUI/tools/ToolsMenuDual.tcl"
        set Load_ToolsMenuDual 1
        WmTransient $widget(Toplevel310) $PSPTopLevel
        }
    if {$DataDirChannel1 == $DataDirChannel2} {
        if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
            $widget(Menubutton310_1) configure -state disable
            $widget(Menubutton310_2) configure -state disable
            $widget(Menubutton310_3) configure -state normal
            $widget(Menubutton310_4) configure -state disable
            $widget(Menubutton310_5) configure -state disable
            $widget(Menubutton310_6) configure -state disable
            }
        if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
            $widget(Menubutton310_1) configure -state disable
            $widget(Menubutton310_2) configure -state disable
            $widget(Menubutton310_3) configure -state disable
            $widget(Menubutton310_4) configure -state disable
            $widget(Menubutton310_5) configure -state disable
            $widget(Menubutton310_6) configure -state normal
            }
        } else {
        if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
            $widget(Menubutton310_1) configure -state normal
            $widget(Menubutton310_2) configure -state normal
            $widget(Menubutton310_3) configure -state disable
            $widget(Menubutton310_4) configure -state disable
            $widget(Menubutton310_5) configure -state disable
            $widget(Menubutton310_6) configure -state disable
            }
        if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
            $widget(Menubutton310_1) configure -state disable
            $widget(Menubutton310_2) configure -state disable
            $widget(Menubutton310_3) configure -state disable
            $widget(Menubutton310_4) configure -state normal
            $widget(Menubutton310_5) configure -state normal
            $widget(Menubutton310_6) configure -state disable
            }
        }
    Window show $widget(Toplevel310); TextEditorRunTrace "Open Window Tools Dual Menu" "b"
    }

if {$ConfigTools == "MULT" } {
    if {$Load_ToolsMenu == 0} {
        source "GUI/tools/ToolsMenu.tcl"
        set Load_ToolsMenu 1
        WmTransient $widget(Toplevel213) $PSPTopLevel
        }
    Window show $widget(Toplevel213); TextEditorRunTrace "Open Window Tools Menu" "b"
    }} \
        -image [vTcl:image:get_image [file join . GUI Images Toolsshortcut.gif]] \
        -padx 5 -pady 4 
    vTcl:DefineAlias "$site_4_0.cpd76" "Button7" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd76 "$site_4_0.cpd76 Button $top all _vTclBalloon"
    bind $site_4_0.cpd76 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Tools}
    }
    menubutton $site_4_0.men66 \
        -image [vTcl:image:get_image [file join . GUI Images adobe_pdf2.gif]] \
        -menu "$site_4_0.men66.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men66" "Menubutton1" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men66 "$site_4_0.men66 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {PDF}
    }
    menu $site_4_0.men66.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men66.m add command \
        \
        -command {global wshHelp PDFReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage PDFReaderFlag 

set PDFReaderFlag ""
if {$PDFReader == ""} {
    set PDFReaderFlag "null"
    } else {
    if [file exists $PDFReader] {
        set PDFReaderFlag "true"
        } else {
        set PDFReaderFlag "link"
        }
    }
if {$PDFReaderFlag == "true"} {
    set WarningMessage "PDF READER APPLICATION IS"
    set WarningMessage2 "ALREADY LINKED WITH PolSARpro"
    set VarAdvice ""
    Window show .top242; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
    } else {
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "PDF READER APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "PDF"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "acroread acrord32 acrobat xpdf kghostview ghostview gv"
        set ConfigFileNameList "acroread acrord32 acrobat xpdf kghostview ghostview gv"
        .top341.fra74.lab76 configure -text "PDF READER"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/adobe_pdf.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration PDF READER Software" "b"
        tkwait variable VarConfigFileName
        }
    }} \
        -label {Config PDF Reader} 
    $site_4_0.men66.m add separator \
        
    $site_4_0.men66.m add command \
        \
        -command {global DataDirInit

HelpPdfEdit "$DataDirInit/Help/util/HelpFrontPage.pdf"} \
        -label {Test PDF Reader} 
    menubutton $site_4_0.men67 \
        \
        -image [vTcl:image:get_image [file join . GUI Images google_earth.gif]] \
        -menu "$site_4_0.men67.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men67" "Menubutton2" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men67 "$site_4_0.men67 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Google Earth}
    }
    menu $site_4_0.men67.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men67.m add command \
        \
        -command {global wshGoogleEarth GoogleEarthReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName  
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage GoogleEarthReaderFlag 

set GoogleEarthReaderFlag ""
if {$GoogleEarthReader == ""} {
    set GoogleEarthReaderFlag "null"
    } else {
    if [file exists $GoogleEarthReader] {
        set GoogleEarthReaderFlag "true"
        } else {
        set GoogleEarthReaderFlag "link"
        }
    }
if {$GoogleEarthReaderFlag == "true"} {
    set WarningMessage "GOOGLE EARTH APPLICATION IS"
    set WarningMessage2 "ALREADY LINKED WITH PolSARpro"
    set VarAdvice ""
    Window show .top242; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
    } else {
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "GOOGLE EARTH APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "GOOGLEEARTH"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "googleearth gEarth gearth google-earth GEarth"
        set ConfigFileNameList "googleearth gEarth gearth google-earth GEarth"
        .top341.fra74.lab76 configure -text "GOOGLE EARTH"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/google_earth.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration GOOGLE EARTH" "b"
        tkwait variable VarConfigFileName 
        }
    }} \
        -label {Config GOOGLE EARTH} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global DataDirInit CONFIGDir

GoogleEarth "$CONFIGDir/GoogleEarth_Test.kml"} \
        -label {Test GOOGLE EARTH} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global OpenDirFile GoogleLatLong
global GoogleLatCenter GoogleLongCenter GoogleLat00 GoogleLong00 GoogleLat0N GoogleLong0N
global GoogleLatN0 GoogleLongN0 GoogleLatNN GoogleLongNN GoogleInputFile
#DATA IMPORT
global Load_ReadGEARTH_POLY PSPTopLevel

if {$Load_ReadGEARTH_POLY == 0} {
    source "GUI/data_import/ReadGEARTH_POLY.tcl"
    set Load_ReadGEARTH_POLY 1
    WmTransient $widget(Toplevel359) $PSPTopLevel
    }

if {$OpenDirFile == 0} {
set GoogleLatLong ""
set GoogleLatCenter "?"
set GoogleLongCenter "?"
set GoogleLat00 "?"
set GoogleLong00 "?"
set GoogleLat0N "?"
set GoogleLong0N "?"
set GoogleLatN0 "?"
set GoogleLongN0 "?"
set GoogleLatNN "?"
set GoogleLongNN "?"
set GoogleInputFile ""
$widget(Button359_1) configure -state disable
WidgetShow $widget(Toplevel359); TextEditorRunTrace "Open Window Read GEARTH_POLY File" "b"
}} \
        -label {Read GEARTH_POLY File} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global OpenDirFile KMLoutputDir KMLoutputFile
global GoogleLatCenter GoogleLongCenter GoogleLat00 GoogleLong00 GoogleLat0N GoogleLong0N
global GoogleLatN0 GoogleLongN0 GoogleLatNN GoogleLongNN
#BMP PROCESS
global Load_CreateGEARTH_POLY PSPTopLevel

if {$Load_CreateGEARTH_POLY == 0} {
    source "GUI/data_import/CreateGEARTH_POLY.tcl"
    set Load_CreateGEARTH_POLY 1
    WmTransient $widget(Toplevel360) $PSPTopLevel
    }

if {$OpenDirFile == 0} {
set KMLoutputDir ""
set KMLoutputFile ""
WidgetShow $widget(Toplevel360); TextEditorRunTrace "Open Window Create GEARTH_POLY File" "b"
}} \
        -label {Create GEARTH_POLY File} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global DataDir FileName GoogleInputFile OpenDirFile
global VarError ErrorMessage

if {$OpenDirFile == 0} {

set GoogleInputFile ""

set types {
    {{KML Files}        {.kml}        }
    }
set FileName ""
OpenFile $DataDir $types "INPUT KML FILE"

if {$FileName != ""} {
    set GoogleInputFile [file tail $FileName]
    if {$GoogleInputFile != "GEARTH_POLY.kml"} {
        set VarError ""
        set ErrorMessage "INVALID INPUT GEARTH_POLY FILE"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set GoogleInputFile ""
        } else {
        GoogleEarth $FileName
        }
    }
}} \
        -label {Open GEARTH_POLY File} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global FileName DataDir

set types {
{{KML Files}        {.kml}        }
}
set FileName ""
OpenFile $DataDir $types "INPUT KML FILE"
    
if {$FileName != ""} {
    GoogleEarth $FileName
    }} \
        -label {Open KML File} 
    button $site_4_0.cpd66 \
        \
        -command {global wshGimp GimpReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage ImageMagickMakerFlag 

set ImageMagickMakerFlag ""
if {$ImageMagickMaker == ""} {
    set ImageMagickMakerFlag "null"
    } else {
    if [file exists $ImageMagickMaker] {
        set ImageMagickMakerFlag "true"
        } else {
        set ImageMagickMakerFlag "link"
        }
    }
if {$ImageMagickMakerFlag == "true"} {
    set WarningMessage "IMAGE-MAGICK APPLICATION IS"
    set WarningMessage2 "ALREADY LINKED WITH PolSARpro"
    set VarAdvice ""
    Window show .top242; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
    } else {
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "IMAGE-MAGICK APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "IMAGEMAGICK"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "convert"
        set ConfigFileNameList "convert"
        .top341.fra74.lab76 configure -text "IMAGE MAGICK"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/image_magick.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration IMAGE MAGICK Software" "b"
        tkwait variable VarConfigFileName
        }
    }} \
        -image [vTcl:image:get_image [file join . GUI Images image_magick_shortcut.gif]] \
        -padx 5 -pady 4 
    vTcl:DefineAlias "$site_4_0.cpd66" "Button8" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd66 "$site_4_0.cpd66 Button $top all _vTclBalloon"
    bind $site_4_0.cpd66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Image Magick}
    }
    button $site_4_0.but67 \
        \
        -command {global WidgetPosition

image create photo ImageButtonWidget
ImageButtonWidget blank
image delete ImageButtonWidget

if {$WidgetPosition == 0} {
    set WidgetPosition 1
    image create photo ImageButtonWidget -file "GUI/Images/WidgetCenter.gif"
    } else {
    set WidgetPosition 0
    image create photo ImageButtonWidget -file "GUI/Images/WidgetCorner.gif"
    }
.top2.fra71.fra72.but67 configure -image ImageButtonWidget} \
        -image [vTcl:image:get_image [file join . GUI Images WidgetCenter.gif]] \
        -pady 0 -relief sunken -text button 
    vTcl:DefineAlias "$site_4_0.but67" "Button2_0" vTcl:WidgetProc "Toplevel2" 1
    button $site_4_0.cpd73 \
        -background #ffff00 \
        -command {global VarQuestion QuestionMessage
global SessionNameLogFid
global wshTutorial wshHelp

set QuestionMessage "ARE YOU SURE YOU WANT TO QUIT ?"
set VarQuestion ""
Window show $widget(Toplevel45); TextEditorRunTrace "Open Window Question" "b"
tkwait variable VarQuestion
if {$VarQuestion == "ok"} {
Window hide $widget(Toplevel2); TextEditorRunTrace "Close Window PolSARpro v5.0 Main Menu" "b"
set Fonction "UNLOAD CONFIGURATION"
set Fonction2 "POLSARPRO v5.0"
set ProgressLine "100"
TextEditorRunTrace "Unload PolSARpro v5.0 Configuration" "r"
Window show $widget(Toplevel345); TextEditorRunTrace "Open Window Close PSP" "b"
update
set f [ open "| Soft/tools/unload_config.exe" r]
OpenCloseProgressBar $f
Window hide $widget(Toplevel345); TextEditorRunTrace "Close Window Close PSP" "b"
set Fonction ""; set Fonction2 ""

CleanTMPDirectory

#Close Log File
TextEditorRunTrace "Close Log File" "k"
catch "close $SessionNameLogFid"

Window hide $widget(Toplevel2); TextEditorRunTrace "Close Window PolSARpro v5.0 Main Menu" "b"
exit
}} \
        -padx 4 -pady 2 -text Quit -width 4 
    vTcl:DefineAlias "$site_4_0.cpd73" "Button37" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd73 "$site_4_0.cpd73 Button $top all _vTclBalloon"
    bind $site_4_0.cpd73 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Quit PolSARpro v5.0}
    }
    button $site_4_0.but66 \
        -borderwidth 0 \
        -command {#UTIL
global Load_TrackVar PSPTopLevel

if {$Load_TrackVar == 0} {
    source "GUI/util/TrackVar.tcl"
    set Load_TrackVar 1
    WmTransient $widget(Toplevel999) $PSPTopLevel
    }

WidgetShow $widget(Toplevel999); TextEditorRunTrace "Open Window Track Variable" "b"} \
        -pady 0 -relief flat -text . 
    vTcl:DefineAlias "$site_4_0.but66" "Button1" vTcl:WidgetProc "Toplevel2" 1
    menubutton $site_4_0.men77 \
        -menu "$site_4_0.men77.m" -padx 5 -pady 4 -relief ridge -text About 
    vTcl:DefineAlias "$site_4_0.men77" "Menubutton13" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men77 "$site_4_0.men77 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men77 <<SetBalloon>> {
        set ::vTcl::balloon::%W {About PolSARpro v5.0}
    }
    menu $site_4_0.men77.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men77.m add command \
        \
        -command {global PSPVersionNumDate CONFIGDir
#UTIL
global Load_AboutPSP PSPTopLevel
if {$Load_AboutPSP == 0} {
    source "GUI/util/AboutPSP.tcl"
    set Load_AboutPSP 1
    WmTransient $widget(Toplevel85) $PSPTopLevel
    }

set PSPVersionNumDate ""
if [file exists "$CONFIGDir/Version.txt"] {
    set f [open "$CONFIGDir/Version.txt" r]
    gets $f PSPVersionNum
    gets $f PSPVersionDate
    close $f
    }
set PSPVersionNumDate $PSPVersionNum
append PSPVersionNumDate " $PSPVersionDate "

WidgetShow $widget(Toplevel85); TextEditorRunTrace "Open Window About PolSARpro" "b"} \
        -image {} -label {About PolSARpro} 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add command \
        \
        -command {#UTIL
global Load_Warranty PSPTopLevel CONFIGDir
if {$Load_Warranty == 0} {
    source "GUI/util/Warranty.tcl"
    set Load_Warranty 1
    WmTransient $widget(Toplevel88) $PSPTopLevel
    }

set OpenTextFile [open "$CONFIGDir/gplpsp.txt"]
set ReadTextFile [read $OpenTextFile]
.top88.fra90.cpd85.tex87 delete 1.0 end
.top88.fra90.cpd85.tex87 insert end $ReadTextFile
.top88.fra90.cpd85.tex87 configure -wrap word
close $OpenTextFile
        
WidgetShow $widget(Toplevel88); TextEditorRunTrace "Open Window Warranty" "b"} \
        -image {} -label Disclaimer 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add command \
        \
        -command {#UTIL
global Load_WarrantyPSP PSPTopLevel
if {$Load_WarrantyPSP == 0} {
    source "GUI/util/WarrantyPSP.tcl"
    set Load_WarrantyPSP 1
    WmTransient $widget(Toplevel199) $PSPTopLevel
    }

WidgetShow $widget(Toplevel199); TextEditorRunTrace "Open Window Warranty PolSARpro" "b"} \
        -image {} -label { } 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add command \
        \
        -command {#UTIL
global Load_PSPConfiguration PSPTopLevel
if {$Load_PSPConfiguration == 0} {
    source "GUI/util/PSPConfiguration.tcl"
    set Load_PSPConfiguration 1
    WmTransient $widget(Toplevel11) $PSPTopLevel
    }
       
WidgetShow $widget(Toplevel11); TextEditorRunTrace "Open Window PolSARpro Configuration" "b"} \
        -image {} -label Configuration 
    $site_4_0.men77.m add separator \
        
    button $site_4_0.but68 \
        -command CloseAllWidget \
        -image [vTcl:image:get_image [file join . GUI Images balai.gif]] \
        -pady 0 -text button 
    vTcl:DefineAlias "$site_4_0.but68" "Button4" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.but68 "$site_4_0.but68 Button $top all _vTclBalloon"
    bind $site_4_0.but68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Clear Screen}
    }
    pack $site_4_0.cpd75 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.cpd74 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.men71 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.men75 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.cpd76 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.men66 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.men67 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.cpd66 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.but67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 2 -side right 
    pack $site_4_0.cpd73 \
        -in $site_4_0 -anchor center -expand 1 -fill y -padx 5 -side left 
    pack $site_4_0.but66 \
        -in $site_4_0 -anchor center -expand 1 -fill none -side left 
    pack $site_4_0.men77 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.but68 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 2 -side left 
    frame $site_3_0.fra70 \
        -borderwidth 2 -relief ridge -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra70" "Frame8" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra70
    button $site_4_0.cpd68 \
        \
        -command {global ActiveProgram VarWarning WarningMessage WarningMessage2
global Load_DataFormat Load_DataFormatDual Load_DataFormatMult PSPTopLevel
global WindowShowDataFormatPSP WindowShowDataFormatDual WindowShowDataFormatMult

CloseAllWidget

set config "false"
if {$ActiveProgram == "ALOS"} { set config "true"}
if {$ActiveProgram == "ALOS2"} { set config "true"}
if {$ActiveProgram == "CSK"} { set config "true"}
if {$ActiveProgram == "RADARSAT2"} { set config "true"}
if {$ActiveProgram == "RISAT"} { set config "true"}
if {$ActiveProgram == "SENTINEL1"} { set config "true"}
if {$ActiveProgram == "TERRASARX"} { set config "true"}
if {$ActiveProgram == "SIRC"} { set config "true"}
if {$ActiveProgram == "AIRSAR"} { set config "true"}
if {$ActiveProgram == "CONVAIR"} { set config "true"}
if {$ActiveProgram == "EMISAR"} { set config "true"}
if {$ActiveProgram == "ESAR"} { set config "true"}
if {$ActiveProgram == "FSAR"} { set config "true"}
if {$ActiveProgram == "PISAR"} { set config "true"}
if {$ActiveProgram == "SETHI"} { set config "true"}
if {$ActiveProgram == "UAVSAR"} { set config "true"}
if {$config == "true"} {
    set WarningMessage "INPUT POLARIMETRIC DATA FORMAT IS SET AND"
    set WarningMessage2 "FIXED TO C2 (Dual-Pol) AND T3 (Quad-Pol)"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    }
if {$ActiveProgram == "ASAR"} {
    set WarningMessage "INPUT POLARIMETRIC DATA FORMAT IS SET AND"
    set WarningMessage2 "FIXED TO C2 (APS mode) AND IPP (APP Mode)"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    }
if {$ActiveProgram == "POLSARPRO"} {
    if {$Load_DataFormat == 0} {
        source "GUI/util/DataFormat.tcl"
        set Load_DataFormat 1
        WmTransient $widget(Toplevel001) $PSPTopLevel
        }
    if {$WindowShowDataFormatPSP == 0} {
        Window show $widget(Toplevel001); TextEditorRunTrace "Open Window Polarimetric Data Format" "b"
        set WindowShowDataFormatPSP 1
        } else {
        Window hide $widget(Toplevel001); TextEditorRunTrace "Close Window Polarimetric Data Format" "b"
        set WindowShowDataFormatPSP 0
        }
    }
if {$ActiveProgram == "POLINSAR"} {
    if {$Load_DataFormatDual == 0} {
        source "GUI/util/DataFormatDual.tcl"
        set Load_DataFormatDual 1
        WmTransient $widget(Toplevel002) $PSPTopLevel
        }
    if {$WindowShowDataFormatDual == 0} {
        Window show $widget(Toplevel002); TextEditorRunTrace "Open Window Polarimetric Data Format" "b"
        set WindowShowDataFormatDual 1
        } else {
        Window hide $widget(Toplevel002); TextEditorRunTrace "Close Window Polarimetric Data Format" "b"
        set WindowShowDataFormatDual 0
        }
    }
if {$ActiveProgram == "POLMULT"} {
    if {$Load_DataFormatMult == 0} {
        source "GUI/util/DataFormatMult.tcl"
        set Load_DataFormatMult 1
        WmTransient $widget(Toplevel003) $PSPTopLevel
        }
    if {$WindowShowDataFormatMult == 0} {
        Window show $widget(Toplevel003); TextEditorRunTrace "Open Window Polarimetric Data Format" "b"
        set WindowShowDataFormatMult 1
        } else {
        Window hide $widget(Toplevel003); TextEditorRunTrace "Close Window Polarimetric Data Format" "b"
        set WindowShowDataFormatMult 0
        }
    }} \
        -image [vTcl:image:get_image [file join . GUI Images down.gif]] \
        -pady 0 -relief flat -text button 
    vTcl:DefineAlias "$site_4_0.cpd68" "Button3" vTcl:WidgetProc "Toplevel2" 1
    entry $site_4_0.ent72 \
        -background white -disabledbackground #ffffff \
        -disabledforeground #0000ff -justify center -state disabled \
        -textvariable DataFormatActive -width 4 
    vTcl:DefineAlias "$site_4_0.ent72" "Entry1" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.ent72 "$site_4_0.ent72 Entry $top all _vTclBalloon"
    bind $site_4_0.ent72 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Polarimetric Data Format}
    }
    pack $site_4_0.cpd68 \
        -in $site_4_0 -anchor center -expand 1 -fill none -side left 
    pack $site_4_0.ent72 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra75 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra75" "FrameEnvironnement" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra75
    button $site_4_0.cpd74 \
        -borderwidth 0 \
        -command {global ActiveProgram
global AlosQuickLook AsarQuickLook Radarsat2QuickLook TerrasarxQuickLook SircQuickLook CSKQuickLook RisatQuickLook
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook Sentinel1QuickLook 
global ALOSFileInputFlag ASARFileInputFlag RADARSAT2FileInputFlag TERRASARXFileInputFlag SIRCFileInputFlag CSKFileInputFlag RISATFileInputFlag
global AIRSARFileInputFlag CONVAIRFileInputFlag EMISARFileInputFlag ESARFileInputFlag PISARFileInputFlag SETHIFileInputFlag UAVSARFileInputFlag SENTINEL1FileInputFlag
global FileInputHH FileInputHV FileInputVH FileInputVV FileInputASAR FileInputSTK FileInputPISAR
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput4 FileInput6
#UTIL
global Load_Environment PSPTopLevel

if {$Load_Environment == 0} {
    source "GUI/util/Environment.tcl"
    set Load_Environment 1
    WmTransient $widget(Toplevel31) $PSPTopLevel
    }

set ConfigFile ""

set AlosQuickLook 0; set AsarQuickLook 0; set Radarsat2QuickLook 0; set TerrasarxQuickLook 0; set SircQuickLook 0; set CSKQuickLook 0; set RisatQuickLook 0
set AirsarQuickLook 0; set ConvairQuickLook 0; set EmisarQuickLook 0; set EsarQuickLook 0; set PisarQuickLook 0; set SethiQuickLook 0; set UavsarQuickLook 0; set Sentinel1QuickLook 0
set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""
set FileInputASAR ""; set FileInputSTK ""; set FileInputPISAR ""
set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; set FileInput4 ""; set FileInput6 ""
set ALOSFileInputFlag 0; set ASARFileInputFlag 0; set RADARSAT2FileInputFlag 0; set TERRASARXFileInputFlag 0; set SIRCFileInputFlag 0; set CSKFileInputFlag 0; set RISATFileInputFlag 0
set AIRSARFileInputFlag 0; set CONVAIRFileInputFlag 0; set EMISARFileInputFlag 0; set ESARFileInputFlag 0; set PISARFileInputFlag 0; set SENTINEL1FileInputFlag 0
set SETHIFileInputFlag 0; set UAVSARFileInputFlag 0;

WidgetShow $widget(Toplevel31); TextEditorRunTrace "Open Window Environment" "b"} \
        -highlightthickness 0 -padx 0 -pady 0 -relief flat -state disabled \
        -text Environment 
    vTcl:DefineAlias "$site_4_0.cpd74" "ENVSNGL" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd74 "$site_4_0.cpd74 Button $top all _vTclBalloon"
    bind $site_4_0.cpd74 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Environment}
    }
    button $site_4_0.cpd73 \
        -borderwidth 0 \
        -command {#UTIL
global Load_EnvironmentDual PSPTopLevel

if {$Load_EnvironmentDual == 0} {
    source "GUI/util/EnvironmentDual.tcl"
    set Load_EnvironmentDual 1
    WmTransient $widget(Toplevel300) $PSPTopLevel
    }

set ConfigFile ""

$widget(TitleFrame300_1) configure -text "Main Input Master Directory"    
$widget(TitleFrame300_2) configure -text "Main Input Slave Directory"    
WidgetShow $widget(Toplevel300); TextEditorRunTrace "Open Window Environment Dual" "b"} \
        -highlightthickness 0 -padx 0 -pady 0 -relief flat -state disabled 
    vTcl:DefineAlias "$site_4_0.cpd73" "ENVDUAL" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd73 "$site_4_0.cpd73 Button $top all _vTclBalloon"
    bind $site_4_0.cpd73 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Environment}
    }
    button $site_4_0.cpd67 \
        -borderwidth 0 \
        -command {global DataDirMult DataDirInit DataDirMultActive
global NDataDirMult NDataDirMultActive 
global LoadDataDirMult SaveDataDirMult TestDataDirMult
#UTIL
global Load_EnvironmentMult PSPTopLevel

if {$Load_EnvironmentMult == 0} {
    source "GUI/util/EnvironmentMult.tcl"
    set Load_EnvironmentMult 1
    WmTransient $widget(Toplevel376) $PSPTopLevel
    }

set ConfigFile ""
#CheckBinaryData
for {set i 0} {$i <= 100} {incr i} {set DataDirMult($i) $DataDirInit}
set DataDirMultActive $DataDirMult(1) 
set NDataDirMult 1
set NDataDirMultActive 1
set LoadDataDirMult 0
set SaveDataDirMult 0
set TestDataDirMult "ok"
set FormatDataDirMult ""

$widget(Button376_1) configure -state disable
$widget(Button376_2) configure -state disable
$widget(Button376_3) configure -state disable
$widget(Button376_4) configure -state disable
$widget(Button376_5) configure -state disable
$widget(Button376_6) configure -state disable

WidgetShow $widget(Toplevel376); TextEditorRunTrace "Open Window Environment Mult" "b"} \
        -highlightthickness 0 -padx 0 -pady 0 -relief flat -state disabled 
    vTcl:DefineAlias "$site_4_0.cpd67" "ENVMULT" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd67 "$site_4_0.cpd67 Button $top all _vTclBalloon"
    bind $site_4_0.cpd67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Environment}
    }
    pack $site_4_0.cpd74 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.cpd73 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.cpd67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side top 
    frame $site_3_0.fra76 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra76" "FrameImport" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra76
    menubutton $site_4_0.men69 \
        -borderwidth 0 -menu "$site_4_0.men69.m" -padx 0 -pady 0 \
        -state disabled -text Import 
    vTcl:DefineAlias "$site_4_0.men69" "IMPPSP" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men69 "$site_4_0.men69 Menubutton .top2.fra71.fra76 all _vTclBalloon"
    bind $site_4_0.men69 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Import Data}
    }
    menu $site_4_0.men69.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men69.m add command \
        \
        -command {global ActiveProgram DataDir ActiveImportData IEEEFormat
global RawBinaryDirInput RawBinaryDirOutput RawBinaryDataType RawBinaryDataFormat RawBinaryDataFormatPP
global RawBinaryDataInput RawBinaryFileInputFlag
global RawBinaryDataPage RawBinaryDataPageMax RawBinaryDataPageCurrent
global FileInputRawData1 FileInputRawData2 FileInputRawData3 FileInputRawData4
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6 FileInput7 FileInput8
global FileInput9 FileInput10 FileInput11 FileInput12 FileInput13 FileInput14 FileInput15 FileInput16
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_RawBinaryData PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    if {$Load_RawBinaryData == 0} {
        source "GUI/data_import/RawBinaryData.tcl"
        set Load_RawBinaryData 1
        WmTransient $widget(Toplevel231) $PSPTopLevel
        }
    set ActiveImportData "RAWBINARYDATA"
    set RawBinaryDirInput $DataDir; set RawBinaryDirOutput $DataDir; set RawBinaryFileInputFlag 0
    set RawBinaryDataType ""; set RawBinaryDataFormat ""; set RawBinaryDataFormatPP ""; set RawBinaryDataInput ""
    set RawBinaryDataPage 1; set RawBinaryDataPageMax 1; set RawBinaryDataPageCurrent "1 / 1"
    set FileInputRawData1 ""; set FileInputRawData2 ""; set FileInputRawData3 ""; set FileInputRawData4 ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; set FileInput5 ""; set FileInput6 ""; set FileInput7 ""; set FileInput8 ""
    set FileInput9 ""; set FileInput10 ""; set FileInput11 ""; set FileInput12 ""; set FileInput13 ""; set FileInput14 ""; set FileInput15 ""; set FileInput16 ""
    set NligFullSize "?"; set NcolFullSize "?"
    $widget(Button231_1) configure -state disable
    $widget(Radiobutton231_3) configure -state disable
    $widget(Radiobutton231_4) configure -state disable
    $widget(Radiobutton231_5) configure -state disable
    $widget(Radiobutton231_6) configure -state disable
    $widget(Radiobutton231_7) configure -state disable
    $widget(Radiobutton231_8) configure -state disable
    $widget(Radiobutton231_9) configure -state disable
    $widget(Radiobutton231_10) configure -state disable
    $widget(Radiobutton231_11) configure -state disable
    $widget(Radiobutton231_12) configure -state disable
    $widget(Radiobutton231_13) configure -state disable
    $widget(Radiobutton231_14) configure -state disable
    $widget(Radiobutton231_15) configure -state disable
    $widget(Radiobutton231_16) configure -state disable
    $widget(Radiobutton231_17) configure -state disable
    $widget(Radiobutton231_18) configure -state disable
    $widget(Radiobutton231_19) configure -state disable
    WidgetShow $widget(Toplevel231); TextEditorRunTrace "Open Window Raw Binary Input Data" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Raw Binary Data} 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add cascade \
        -menu "$site_4_0.men69.m.men70" -command {} -label {Airborne Sensors} 
    set site_6_0 $site_4_0.men69.m
    menu $site_6_0.men70 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag AirsarHeader AIRSARDataFormat AIRSARProcessor
global IEEEFormat FileInputSTK FileInputSTK1 FileInputSTK2 FileInputSTK3 FileInputSTK4 FileInputSTK5
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_AIRSAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "AIRSAR"
    if {$Load_AIRSAR_Input_File == 0} {
        source "GUI/data_import/AIRSAR_Input_File.tcl"
        set Load_AIRSAR_Input_File 1
        WmTransient $widget(Toplevel223) $PSPTopLevel
        }
    set AIRSARDirInput $DataDir; set AIRSARDirOutput $DataDir; set AIRSARFileInputFlag 0
    set AirsarHeader 1; set AIRSARDataFormat ""; set AIRSARProcessor ""
    set FileInputSTK1 ""; set FileInputSTK2 ""; set FileInputSTK3 ""
    set FileInputSTK4 ""; set FileInputSTK5 ""; set FileInputSTK ""
    $widget(Menubutton223_1) configure -state disable; $widget(Button223_9) configure -state disable; $widget(Button223_10) configure -state disable
    $widget(TitleFrame223_2) configure -state disable; $widget(Radiobutton223_1) configure -state disable; $widget(Radiobutton223_2) configure -state disable        
    $widget(TitleFrame223_3) configure -state disable; $widget(TitleFrame223_3) configure -text ""
    $widget(Entry223_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_3) configure -state disable 
    $widget(TitleFrame223_4) configure -state disable; $widget(TitleFrame223_4) configure -text ""
    $widget(Entry223_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_4) configure -state disable 
    $widget(TitleFrame223_5) configure -state disable; $widget(TitleFrame223_5) configure -text ""
    $widget(Entry223_5) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_5) configure -state disable 
    $widget(TitleFrame223_6) configure -state disable; $widget(TitleFrame223_6) configure -text ""
    $widget(Entry223_6) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_6) configure -state disable 
    $widget(TitleFrame223_7) configure -state disable; $widget(TitleFrame223_7) configure -text ""
    $widget(Entry223_7) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_7) configure -state disable 
    $widget(TitleFrame223_8) configure -state disable; $widget(TitleFrame223_8) configure -text ""
    $widget(Entry223_8) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_8) configure -state disable
    $widget(Label223_1) configure -state disable; $widget(Entry223_1) configure -state disable
    $widget(Label223_2) configure -state disable; $widget(Entry223_2) configure -state disable
    $widget(Checkbutton223_1) configure -state disable 
    WidgetShow $widget(Toplevel223); TextEditorRunTrace "Open Window AIRSAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Airsar 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_CONVAIR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "CONVAIR"
    if {$Load_CONVAIR_Input_File == 0} {
        source "GUI/data_import/CONVAIR_Input_File.tcl"
        set Load_CONVAIR_Input_File 1
        WmTransient $widget(Toplevel224) $PSPTopLevel
        }
    set CONVAIRDirInput $DataDir; set CONVAIRDirOutput $DataDir; set CONVAIRFileInputFlag 0
    set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""
    set NligFullSize "?"; set NcolFullSize "?"
    WidgetShow $widget(Toplevel224); TextEditorRunTrace "Open Window CONVAIR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Convair 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag EMISARDataFormat EMISARFormatS2 EMISARFormatC3
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_EMISAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "EMISAR"
    if {$Load_EMISAR_Input_File == 0} {
        source "GUI/data_import/EMISAR_Input_File.tcl"
        set Load_EMISAR_Input_File 1
        WmTransient $widget(Toplevel225) $PSPTopLevel
        }
    set EMISARDirInput $DataDir; set EMISARDirOutput $DataDir; set EMISARFileInputFlag 0
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; set FileInput5 ""; set FileInput6 ""
    set NligFullSize "?"; set NcolFullSize "?"; set EMISARDataFormat ""; set EMISARFormatS2 0; set EMISARFormatC3 0
    $widget(Entry225_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_1) configure -state disable; $widget(TitleFrame225_1) configure -text ""
    $widget(Entry225_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_2) configure -state disable; $widget(TitleFrame225_2) configure -text ""
    $widget(Entry225_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_3) configure -state disable; $widget(TitleFrame225_3) configure -text ""
    $widget(Entry225_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_4) configure -state disable; $widget(TitleFrame225_4) configure -text ""
    $widget(Entry225_5) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_5) configure -state disable; $widget(TitleFrame225_5) configure -text ""
    $widget(Entry225_6) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_6) configure -state disable; $widget(TitleFrame225_6) configure -text ""
    WidgetShow $widget(Toplevel225); TextEditorRunTrace "Open Window EMISAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Emisar 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global ESARDirInput ESARDirOutput ESARFileInputFlag EsarHeader ESARDataFormat
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ESAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ESAR"
    if {$Load_ESAR_Input_File == 0} {
        source "GUI/data_import/ESAR_Input_File.tcl"
        set Load_ESAR_Input_File 1
        WmTransient $widget(Toplevel226) $PSPTopLevel
        }
    set ESARDirInput $DataDir; set ESARDirOutput $DataDir; set ESARFileInputFlag 0; set ESARDataFormat "RGI"
    set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""; set EsarHeader 1
    $widget(Label226_1) configure -state disable; $widget(Entry226_1) configure -state disable
    $widget(Label226_2) configure -state disable; $widget(Entry226_2) configure -state disable
    WidgetShow $widget(Toplevel226); TextEditorRunTrace "Open Window ESAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label E-Sar 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global FSARDirInput FSARDirOutput FSARFileInputFlag FsarHeader FSARDataFormat FSARRGIDir
global FSARProductFileHH FSARProductFileHV FSARProductFileVH FSARProductFileVV
global FSARFreq FSARCalib FSARResolRg FSARResolAz FSARPixRg FSARPixAz
global FileInputHH FileInputHV FileInputVH FileInputVV FSARMaskFile FSARIncAngFile
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_FSAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "FSAR"
    if {$Load_FSAR_Input_File == 0} {
        source "GUI/data_import/FSAR_Input_File.tcl"
        set Load_FSAR_Input_File 1
        WmTransient $widget(Toplevel431) $PSPTopLevel
        }
    set FSARDirInput $DataDir; set FSARDirOutput $DataDir; set FSARFileInputFlag 0; set FSARDataFormat "quad"
    set FSARProductFileHH ""; set FSARProductFileHV ""; set FSARProductFileVH ""; set FSARProductFileVV "";
    set FSARFreq ""; set FSARCalib ""; set FSARResolRg ""; set FSARResolAz ""; set FSARPixRg ""; set FSARPixAz ""
    set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""; set FsarHeader ""; set FSARRGIDir ""
    set FSARMaskFile ""; set FSARIncAngFile ""
    $widget(TitleFrame431_01) configure -state disable
    $widget(Entry431_01) configure -disabledbackground $PSPBackgroundColor
    $widget(Button431_01) configure -state disable;
    $widget(TitleFrame431_02) configure -state disable
    $widget(Entry431_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Button431_02) configure -state disable;
    $widget(TitleFrame431_03) configure -state disable
    $widget(Entry431_03) configure -disabledbackground $PSPBackgroundColor
    $widget(Button431_03) configure -state disable;
    $widget(TitleFrame431_04) configure -state disable
    $widget(Entry431_04) configure -disabledbackground $PSPBackgroundColor
    $widget(Button431_04) configure -state disable;
    $widget(Button431_00) configure -state disable; $widget(Button431_7) configure -state disable; $widget(Button431_8) configure -state disable; $widget(Button431_9) configure -state disable
    $widget(Label431_001) configure -state disable; $widget(Entry431_001) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_002) configure -state disable; $widget(Entry431_002) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_003) configure -state disable; $widget(Entry431_003) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_004) configure -state disable; $widget(Entry431_004) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_005) configure -state disable; $widget(Entry431_005) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_006) configure -state disable; $widget(Entry431_006) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame431_5) configure -state disable; $widget(Entry431_5) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame431_6) configure -state disable; $widget(Entry431_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_1) configure -state disable; $widget(Entry431_7) configure -disabledbackground $PSPBackgroundColor
    $widget(Label431_2) configure -state disable; $widget(Entry431_8) configure -disabledbackground $PSPBackgroundColor
    WidgetShow $widget(Toplevel431); TextEditorRunTrace "Open Window FSAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label F-Sar 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat PISAR_MGPC PISAR_MGPSSC PISAROffset
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV FileInputPISAR
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_PISAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "PISAR"
    if {$Load_PISAR_Input_File == 0} {
        source "GUI/data_import/PISAR_Input_File.tcl"
        set Load_PISAR_Input_File 1
        WmTransient $widget(Toplevel227) $PSPTopLevel
        }
    set PISARDirInput $DataDir; set PISARDirOutput $DataDir; set PISARFileInputFlag 0
    set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""; set FileInputPISAR ""
    set PISARDataFormat ""; set PISAR_MGPC 0; set PISAR_MGPSSC 0; set PISAROffset 0
    $widget(Entry227_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_1) configure -state disable
    $widget(Entry227_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_2) configure -state disable
    $widget(Entry227_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_3) configure -state disable
    $widget(Entry227_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_4) configure -state disable
    $widget(Entry227_5) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_5) configure -state disable
    WidgetShow $widget(Toplevel227); TextEditorRunTrace "Open Window PISAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Pisar 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag FileHeaderSethi
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_SETHI_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "SETHI"
    if {$Load_SETHI_Input_File == 0} {
        source "GUI/data_import/SETHI_Input_File.tcl"
        set Load_SETHI_Input_File 1
        WmTransient $widget(Toplevel228) $PSPTopLevel
        }
    set SETHIDirInput $DataDir; set SETHIDirOutput $DataDir; set SETHIFileInputFlag 0
    set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""
    set NligFullSize "?"; set NcolFullSize "?"; set FileHeaderSethi ""
    $widget(TitleFrame228_1) configure -state disable;
    $widget(Entry228_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_1) configure -state disable
    $widget(TitleFrame228_2) configure -state disable;
    $widget(Entry228_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_2) configure -state disable
    $widget(TitleFrame228_3) configure -state disable;
    $widget(Entry228_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_3) configure -state disable
    $widget(TitleFrame228_4) configure -state disable;
    $widget(Entry228_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_4) configure -state disable
    $widget(Button228_10) configure -state disable
    WidgetShow $widget(Toplevel228); TextEditorRunTrace "Open Window SETHI Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Sethi 
    $site_6_0.men70 add command \
        \
        -command {global ActiveImportData DataDir
global UAVSARDirInput UAVSARDirOutput UAVSARDataFormat UAVSARAnnotationFile UAVSARFileInputFlag
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_UAVSAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "UAVSAR"
    if {$Load_UAVSAR_Input_File == 0} {
        source "GUI/data_import/UAVSAR_Input_File.tcl"
        set Load_UAVSAR_Input_File 1
        WmTransient $widget(Toplevel386) $PSPTopLevel
        }
    set UAVSARDirInput $DataDir; set UAVSARDirOutput $DataDir; 
    set UAVSARDataFormat ""; set UAVSARAnnotationFile ""; set UAVSARFileInputFlag 0
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""
    set FileInput4 ""; set FileInput5 ""; set FileInput6 ""
    $widget(TitleFrame386_3) configure -state disable; $widget(TitleFrame386_3) configure -text ""
    $widget(Entry386_3) configure -disabledbackground $PSPBackgroundColor
    $widget(Button386_3) configure -state disable 
    $widget(TitleFrame386_4) configure -state disable; $widget(TitleFrame386_4) configure -text ""
    $widget(Entry386_4) configure -disabledbackground $PSPBackgroundColor
    $widget(Button386_4) configure -state disable 
    $widget(TitleFrame386_5) configure -state disable; $widget(TitleFrame386_5) configure -text ""
    $widget(Entry386_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Button386_5) configure -state disable 
    $widget(TitleFrame386_6) configure -state disable; $widget(TitleFrame386_6) configure -text ""
    $widget(Entry386_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button386_6) configure -state disable 
    $widget(TitleFrame386_7) configure -state disable; $widget(TitleFrame386_7) configure -text ""
    $widget(Entry386_7) configure -disabledbackground $PSPBackgroundColor
    $widget(Button386_7) configure -state disable 
    $widget(TitleFrame386_8) configure -state disable; $widget(TitleFrame386_8) configure -text ""
    $widget(Entry386_8) configure -disabledbackground $PSPBackgroundColor
    $widget(Button386_8) configure -state disable 

    $widget(Button386_1) configure -state disable 
    $widget(Button386_2) configure -state disable 
    $widget(Button386_10) configure -state disable
    WidgetShow $widget(Toplevel386); TextEditorRunTrace "Open Window UAVSAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Uavsar 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add cascade \
        -menu "$site_4_0.men69.m.men71" -command {} \
        -label {Spaceborne Sensors} 
    set site_6_0 $site_4_0.men69.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men72" -command {} -label {Alos-1 - Palsar} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men72 add cascade \
        -menu "$site_7_0.men72.men77" -label {Data Processing Level 1.1} 
    set site_8_0 $site_7_0.men72
    menu $site_8_0.men77 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_8_0.men77 add cascade \
        -menu "$site_8_0.men77.men79" -label {Dual - Pol} 
    set site_9_0 $site_8_0.men77
    menu $site_9_0.men79 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_9_0.men79 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS"
    if {$Load_ALOS_Input_File == 0} {
        source "GUI/data_import/ALOS_Input_File.tcl"
        set Load_ALOS_Input_File 1
        WmTransient $widget(Toplevel218) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
    set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "dual1.1"; set ALOSUnCalibration 0
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
    $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
    $widget(Checkbutton218_1) configure -state disable
    $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
    WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {JAXA - CEOS Format} 
    $site_9_0.men79 add separator \
        
    $site_9_0.men79 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSProductFile
global ALOSLeaderFile ALOSDataLevel ALOSDataType ALOSDataFormat
global FileInput1 FileInput2 FileInput3 FileInput4 PolarType
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage IEEEFormat
#DATA CONVERT
global Load_ALOS_Vex_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS"
    if {$Load_ALOS_Vex_Input_File == 0} {
        source "GUI/data_import/ALOS_Vex_Input_File.tcl"
        set Load_ALOS_Vex_Input_File 1
        WmTransient $widget(Toplevel350) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "dual1.1vex"
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    set PolarType ""; set ALOSProductFile ""; set IEEEFormat 1
    $widget(Button350_5) configure -state disable;
    $widget(Button350_6) configure -state disable; 
    $widget(Button350_7) configure -state disable; 
    $widget(Entry350_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label350_10) configure -state disable
    $widget(Label350_5) configure -state disable; $widget(Entry350_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_6) configure -state disable; $widget(Entry350_6) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame350_1) configure -state disable
    $widget(Label350_1) configure -state disable; $widget(Entry350_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_2) configure -state disable; $widget(Entry350_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_3) configure -state disable; $widget(Entry350_3) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_4) configure -state disable; $widget(Entry350_4) configure -disabledbackground $PSPBackgroundColor
    WidgetShow $widget(Toplevel350); TextEditorRunTrace "Open Window ALOS Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {ERSDAC - Vexcel Format} 
    $site_8_0.men77 add separator \
        
    $site_8_0.men77 add cascade \
        -menu "$site_8_0.men77.men80" -label {Quad - Pol} 
    set site_9_0 $site_8_0.men77
    menu $site_9_0.men80 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_9_0.men80 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS"
    if {$Load_ALOS_Input_File == 0} {
        source "GUI/data_import/ALOS_Input_File.tcl"
        set Load_ALOS_Input_File 1
        WmTransient $widget(Toplevel218) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
    set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "quad1.1"; set ALOSUnCalibration 0
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
    $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
    $widget(Checkbutton218_1) configure -state disable
    $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
    WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {JAXA - CEOS Format} 
    $site_9_0.men80 add separator \
        
    $site_9_0.men80 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSProductFile
global ALOSLeaderFile ALOSDataLevel ALOSDataType ALOSDataFormat
global FileInput1 FileInput2 FileInput3 FileInput4 PolarType
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage IEEEFormat
#DATA CONVERT
global Load_ALOS_Vex_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS"
    if {$Load_ALOS_Vex_Input_File == 0} {
        source "GUI/data_import/ALOS_Vex_Input_File.tcl"
        set Load_ALOS_Vex_Input_File 1
        WmTransient $widget(Toplevel350) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "quad1.1vex"
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    set PolarType ""; set ALOSProductFile ""; set IEEEFormat 1
    $widget(Button350_5) configure -state disable;
    $widget(Button350_6) configure -state disable; 
    $widget(Button350_7) configure -state disable; 
    $widget(Entry350_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label350_10) configure -state disable
    $widget(Label350_5) configure -state disable; $widget(Entry350_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_6) configure -state disable; $widget(Entry350_6) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame350_1) configure -state disable
    $widget(Label350_1) configure -state disable; $widget(Entry350_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_2) configure -state disable; $widget(Entry350_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_3) configure -state disable; $widget(Entry350_3) configure -disabledbackground $PSPBackgroundColor
    $widget(Label350_4) configure -state disable; $widget(Entry350_4) configure -disabledbackground $PSPBackgroundColor
    WidgetShow $widget(Toplevel350); TextEditorRunTrace "Open Window ALOS Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {ERSDAC - Vexcel Format} 
    $site_7_0.men72 add separator \
        
    $site_7_0.men72 add cascade \
        -menu "$site_7_0.men72.men78" -label {Data Processing Level 1.5} 
    set site_8_0 $site_7_0.men72
    menu $site_8_0.men78 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_8_0.men78 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS"
    if {$Load_ALOS_Input_File == 0} {
        source "GUI/data_import/ALOS_Input_File.tcl"
        set Load_ALOS_Input_File 1
        WmTransient $widget(Toplevel218) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
    set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "dual1.5"; set ALOSUnCalibration 0
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
    $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
    $widget(Checkbutton218_1) configure -state disable
    $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
    WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Dual-Pol 
    $site_8_0.men78 add separator \
        
    $site_8_0.men78 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS"
    if {$Load_ALOS_Input_File == 0} {
        source "GUI/data_import/ALOS_Input_File.tcl"
        set Load_ALOS_Input_File 1
        WmTransient $widget(Toplevel218) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
    set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "quad1.5"; set ALOSUnCalibration 0
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
    $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
    $widget(Checkbutton218_1) configure -state disable
    $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
    WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Quad-Pol 
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men66" -command {} -label {Alos-2 - Palsar} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men66 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile
global ALOSScene ALOSDate ALOSOrbit ALOSDirection ALOSMode ALOSNode ALOSDataLevel
global ALOSDataType ALOSDataFormat ALOSUnCalibration ALOSPixRow ALOSPixCol
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS2_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS2"
    if {$Load_ALOS2_Input_File == 0} {
        source "GUI/data_import/ALOS2_Input_File.tcl"
        set Load_ALOS2_Input_File 1
        WmTransient $widget(Toplevel454) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSTrailerFile ""
    set ALOSScene ""; set ALOSDate ""; set ALOSOrbit ""; set ALOSDirection ""; set ALOSMode ""; set ALOSNode ""
    set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "dual1.1"; set ALOSUnCalibration 0; set ALOSPixRow ""; set ALOSPixCol ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    $widget(Label454_8) configure -state disable; $widget(Entry454_8) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_9) configure -state disable; $widget(Entry454_9) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_10) configure -state disable; $widget(Entry454_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_11) configure -state disable; $widget(Entry454_11) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_17) configure -state disable; $widget(Entry454_17) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_18) configure -state disable; $widget(Entry454_18) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_19) configure -state disable; $widget(Entry454_19) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame454_1) configure -state disable; $widget(TitleFrame454_2) configure -state disable
    $widget(Entry454_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_13) configure -state disable; $widget(Entry454_13) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_14) configure -state disable; $widget(Entry454_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_15) configure -state disable; $widget(Entry454_15) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Button454_9) configure -state disable; $widget(Menubutton454_1) configure -state disable
    $widget(Checkbutton454_1) configure -state disable
    $widget(Label454_1) configure -state disable; $widget(Entry454_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_2) configure -state disable; $widget(Entry454_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_3) configure -state disable; $widget(Entry454_3) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_4) configure -state disable; $widget(Entry454_4) configure -disabledbackground $PSPBackgroundColor
    $widget(Button454_10) configure -state disable
    WidgetShow $widget(Toplevel454); TextEditorRunTrace "Open Window ALOS2 Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Dual - Pol} 
    $site_7_0.men66 add separator \
        
    $site_7_0.men66 add command \
        \
        -command {global ActiveImportData DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile
global ALOSScene ALOSDate ALOSOrbit ALOSDirection ALOSMode ALOSNode ALOSDataLevel
global ALOSDataType ALOSDataFormat ALOSUnCalibration ALOSPixRow ALOSPixCol
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS2_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ALOS2"
    if {$Load_ALOS2_Input_File == 0} {
        source "GUI/data_import/ALOS2_Input_File.tcl"
        set Load_ALOS2_Input_File 1
        WmTransient $widget(Toplevel454) $PSPTopLevel
        }
    set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
    set ALOSLeaderFile ""; set ALOSTrailerFile ""
    set ALOSScene ""; set ALOSDate ""; set ALOSOrbit ""; set ALOSDirection ""; set ALOSMode ""; set ALOSNode ""
    set ALOSDataLevel ""; set ALOSDataType ""; set ALOSDataFormat "quad1.1"; set ALOSUnCalibration 0; set ALOSPixRow ""; set ALOSPixCol ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    $widget(Label454_8) configure -state disable; $widget(Entry454_8) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_9) configure -state disable; $widget(Entry454_9) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_10) configure -state disable; $widget(Entry454_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_11) configure -state disable; $widget(Entry454_11) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_17) configure -state disable; $widget(Entry454_17) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_18) configure -state disable; $widget(Entry454_18) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_19) configure -state disable; $widget(Entry454_19) configure -disabledbackground $PSPBackgroundColor
    $widget(TitleFrame454_1) configure -state disable; $widget(TitleFrame454_2) configure -state disable
    $widget(Entry454_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_13) configure -state disable; $widget(Entry454_13) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_14) configure -state disable; $widget(Entry454_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_15) configure -state disable; $widget(Entry454_15) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Button454_9) configure -state disable; $widget(Menubutton454_1) configure -state disable
    $widget(Checkbutton454_1) configure -state disable
    $widget(Label454_1) configure -state disable; $widget(Entry454_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_2) configure -state disable; $widget(Entry454_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_3) configure -state disable; $widget(Entry454_3) configure -disabledbackground $PSPBackgroundColor
    $widget(Label454_4) configure -state disable; $widget(Entry454_4) configure -disabledbackground $PSPBackgroundColor
    $widget(Button454_10) configure -state disable
    WidgetShow $widget(Toplevel454); TextEditorRunTrace "Open Window ALOS2 Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Quad - Pol} 
    $site_6_0.men71 add command \
        \
        -command {global ActiveImportData DataDir
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
global CSKDirInput CSKDirOutput CSKDataFormat 
global CSKFileInput IEEEFormat CSKFileInputFlag PolarType
global CSKSatelliteID CSKStationID CSKFrequency CSKIncAngle CSKLookSide CSKOrbit
global CSKSceneStart CSKSceneStop CSKPolar1 CSKPolar2 CSKColumn CSKLine CSKNcol CSKNlig CSKMessage
global FileInput1 FileInput2 FileInput3 FileInput4

#DATA CONVERT
global Load_CSK_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "CSK"
    if {$Load_CSK_Input_File == 0} {
        source "GUI/data_import/CSK_Input_File.tcl"
        set Load_CSK_Input_File 1
        WmTransient $widget(Toplevel430) $PSPTopLevel
        }
    set CSKDirInput $DataDir
    set CSKDirOutput $DataDir
    set CSKFileInput ""
    set CSKSatelliteID ""
    set CSKStationID ""
    set CSKFrequency ""
    set CSKIncAngle ""
    set CSKLookSide ""
    set CSKOrbit ""
    set CSKSceneStart ""
    set CSKSceneStop ""
    set CSKPolar1 ""
    set CSKPolar2 ""
    set CSKColumn ""
    set CSKLine ""
    set CSKNcol ""
    set CSKNlig ""
    set CSKMessage ""
    set IEEEFormat "0"
    set CSKDataFormat "dual"
    set CSKFileInputFlag 0
    set PolarType ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button430_1) configure -state disable; $widget(Button430_2) configure -state disable; $widget(Button430_3) configure -state disable
    WidgetShow $widget(Toplevel430); TextEditorRunTrace "Open Window COSMO - SKYMED Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Cosmo - Skymed} 
    $site_6_0.men71 add command \
        \
        -command {global ActiveImportData DataDir
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
global AsarDirInput AsarDirOutput AsarDataFormat 
global FileInputASAR IEEEFormat ASARFileInputFlag
#DATA CONVERT
global Load_ASAR_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "ASAR"
    if {$Load_ASAR_Input_File == 0} {
        source "GUI/data_import/ASAR_Input_File.tcl"
        set Load_ASAR_Input_File 1
        WmTransient $widget(Toplevel200) $PSPTopLevel
        }
    set AsarDirInput $DataDir
    set AsarDirOutput $DataDir
    set FileInputASAR ""
    set IEEEFormat "0"
    set AsarDataFormat ""
    set ASARFileInputFlag 0
    WidgetShow $widget(Toplevel200); TextEditorRunTrace "Open Window ASAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Envisat - Asar} 
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men71" -command {} -label Radarsat2 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men71 add command \
        \
        -command {global ActiveProgram DataDir
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_RADARSAT2_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "RADARSAT2"
    if {$Load_RADARSAT2_Input_File == 0} {
        source "GUI/data_import/RADARSAT2_Input_File.tcl"
        set Load_RADARSAT2_Input_File 1
        WmTransient $widget(Toplevel219) $PSPTopLevel
        }
    
    set RADARSAT2DirInput $DataDir; set RADARSAT2DirOutput $DataDir; set RADARSAT2FileInputFlag 0
    set RADARSAT2DataFormat "dual"; set RADARSAT2DataLevel ""; set RADARSAT2ProductFile ""
    set RADARSAT2Lut "sigma"; set RADARSAT2LutFile ""
    set PolarType ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button219_5) configure -state disable;
    $widget(Entry219_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label219_10) configure -state disable
    $widget(Entry219_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_1) configure -state disable
    $widget(TitleFrame219_1) configure -text " "
    $widget(Entry219_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_2) configure -state disable
    $widget(TitleFrame219_2) configure -text " "
    $widget(Entry219_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_3) configure -state disable
    $widget(TitleFrame219_3) configure -text " "
    $widget(Entry219_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_4) configure -state disable
    $widget(TitleFrame219_4) configure -text " "
    $widget(Label219_1) configure -state disable; $widget(Entry219_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label219_2) configure -state disable; $widget(Entry219_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button219_6) configure -state disable; 
    $widget(Button219_7) configure -state disable; 
    WidgetShow $widget(Toplevel219); TextEditorRunTrace "Open Window RADARSAT2 Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Dual - Pol} 
    $site_7_0.men71 add separator \
        
    $site_7_0.men71 add command \
        \
        -command {global ActiveImportData DataDir
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_RADARSAT2_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "RADARSAT2"
    if {$Load_RADARSAT2_Input_File == 0} {
        source "GUI/data_import/RADARSAT2_Input_File.tcl"
        set Load_RADARSAT2_Input_File 1
        WmTransient $widget(Toplevel219) $PSPTopLevel
        }
    set RADARSAT2DirInput $DataDir; set RADARSAT2DirOutput $DataDir; set RADARSAT2FileInputFlag 0
    set RADARSAT2Lut "sigma"; set RADARSAT2LutFile ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    set NligFullSize ""; set NcolFullSize ""; set PolarType ""
    set RADARSAT2DataFormat "quad"; set RADARSAT2DataLevel ""; set RADARSAT2ProductFile ""
    $widget(Button219_5) configure -state disable;
    $widget(Entry219_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label219_10) configure -state disable
    $widget(Entry219_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_1) configure -state disable
    $widget(TitleFrame219_1) configure -text " "
    $widget(Entry219_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_2) configure -state disable
    $widget(TitleFrame219_2) configure -text " "
    $widget(Entry219_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_3) configure -state disable
    $widget(TitleFrame219_3) configure -text " "
    $widget(Entry219_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_4) configure -state disable
    $widget(TitleFrame219_4) configure -text " "
    $widget(Label219_1) configure -state disable; $widget(Entry219_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label219_2) configure -state disable; $widget(Entry219_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button219_6) configure -state disable; 
    $widget(Button219_7) configure -state disable; 
    WidgetShow $widget(Toplevel219); TextEditorRunTrace "Open Window RADARSAT2 Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Quad - Pol} 
    $site_6_0.men71 add command \
        \
        -command {global ActiveImportData DataDir
global RISATDirInput RISATDirOutput RISATFileInputFlag
global RISATLeaderFile RISATBandMetaFile RISATGridFile RISATMode RISATDataFormat RISATProductFile
global RISATSceneID RISATResRg RISATResAz RISATPixAz RISATPixRg
global RISATImgFormat RISATProcLevel RISATincang RISATImgMode
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_RISAT_Input_File PSPTopLevel

if {$DataDir != ""} {
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set RISATBandMetaFile "$DataDir/BAND_META.txt"
    if [file exists $RISATBandMetaFile] {
        set ActiveImportData "RISAT"
        if {$Load_RISAT_Input_File == 0} {
            source "GUI/data_import/RISAT_Input_File.tcl"
            set Load_RISAT_Input_File 1
            WmTransient $widget(Toplevel449) $PSPTopLevel
            }
        set RISATDirInput $DataDir; set RISATDirOutput $DataDir; set RISATFileInputFlag 0
        set RISATLeaderFile ""; set RISATMode ""; set RISATProductFile ""; set RISATDataFormat "dual1.1";
        set RISATSceneID ""; set RISATResRg ""; set RISATResAz ""; set RISATPixAz ""; set RISATPixRg ""
        set RISATImgFormat ""; set RISATProcLevel ""; set RISATincang ""; set RISATImgMode ""; set RISATGridFile  ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
        $widget(Label449_10) configure -state disable; $widget(Entry449_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_11) configure -state disable; $widget(Entry449_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_17) configure -state disable; $widget(Entry449_17) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_18) configure -state disable; $widget(Entry449_18) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_19) configure -state disable; $widget(Entry449_19) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_20) configure -state disable; $widget(Entry449_20) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_21) configure -state disable; $widget(Entry449_21) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_22) configure -state disable; $widget(Entry449_22) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_23) configure -state disable; $widget(Entry449_23) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_24) configure -state disable; $widget(Entry449_24) configure -disabledbackground $PSPBackgroundColor
        $widget(TitleFrame449_1) configure -state disable; $widget(TitleFrame449_2) configure -state disable; $widget(TitleFrame449_3) configure -state disable
        $widget(Entry449_12) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_13) configure -state disable; $widget(Entry449_13) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_14) configure -state disable; $widget(Entry449_14) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_15) configure -state disable; $widget(Entry449_15) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_16) configure -state disable; $widget(Entry449_16) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry449_20) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry449_25) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_1) configure -state disable; $widget(Entry449_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Label449_2) configure -state disable; $widget(Entry449_2) configure -disabledbackground $PSPBackgroundColor
        $widget(Button449_10) configure -state disable; $widget(Button449_20) configure -state disable
        WidgetShow $widget(Toplevel449); TextEditorRunTrace "Open Window RISAT Input File" "b"
        } else {
        set VarError ""
        set ErrorMessage "THE RISAT BAND-META.txt FILE DOES NOT EXIST"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Risat 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram DataDir
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1ProductFile TMPSentinel1Config
global SENTINEL1Mission SENTINEL1Level SENTINEL1Product SENTINEL1Mode
global SENTINEL1Swath SENTINEL1SwathMax SENTINEL1Burst SENTINEL1BurstMax
global SENTINEL1PixAz SENTINEL1PixRg SENTINEL1IncAngle SENTINEL1FUD SENTINEL1Acq
global SENTINEL1NligInit SENTINEL1NcolInit SENTINEL1NligFinal SENTINEL1NcolFinal
global FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_SENTINEL1_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "SENTINEL1"
    if {$Load_SENTINEL1_Input_File == 0} {
        source "GUI/data_import/SENTINEL1_Input_File.tcl"
        set Load_SENTINEL1_Input_File 1
        WmTransient $widget(Toplevel453) $PSPTopLevel
        }
    
    set SENTINEL1DirInput $DataDir; set SENTINEL1DirOutput $DataDir; set SENTINEL1FileInputFlag 0
    set SENTINEL1DataFormat "dual"; for {set i 0} {$i <= 10} {incr i} { set SENTINEL1ProductFile($i) "" }
    set SENTINEL1Mission ""; set SENTINEL1Level ""; set SENTINEL1Product ""; set SENTINEL1Mode ""
    set SENTINEL1Swath ""; set SENTINEL1SwathMax ""; set SENTINEL1Burst ""; set SENTINEL1BurstMax ""
    set SENTINEL1PixAz ""; set SENTINEL1PixRg ""; set SENTINEL1IncAngle ""
    set SENTINEL1NligInit ""; set SENTINEL1NcolInit ""; set SENTINEL1NligFinal ""; set SENTINEL1NcolFinal ""
    set PolarType ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""

    $widget(TitleFrame453_1) configure  -state disable
    $widget(Entry453_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button453_1) configure -state disable
    $widget(TitleFrame453_2) configure  -state disable
    $widget(Entry453_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button453_2) configure -state disable
    $widget(TitleFrame453_01) configure  -state disable
    $widget(Entry453_01) configure -disabledbackground $PSPBackgroundColor
    $widget(Button453_01) configure -state disable; $widget(Button453_02) configure -state disable; $widget(Button453_03) configure -state disable
    $widget(Button453_04) configure -state disable
    $widget(Checkbutton453_01) configure -state disable; set SENTINEL1FUD 0
    $widget(Entry453_09) configure -disabledbackground $PSPBackgroundColor; set SENTINEL1Acq ""
    $widget(Entry453_02) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_02) configure -state disable
    $widget(Entry453_03) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_03) configure -state disable
    $widget(Entry453_04) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_04) configure -state disable
    $widget(Entry453_05) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_05) configure -state disable
    $widget(Entry453_06) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_06) configure -state disable
    $widget(Entry453_07) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_07) configure -state disable
    $widget(Entry453_08) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_08) configure -state disable
    $widget(Button453_6) configure -state disable
    DeleteFile $TMPSentinel1Config
    set SentinelPreview "$SENTINEL1DirInput/preview/product-preview.html"
    TextEditorRunTrace "Process The Function Soft/data_import/sentinel1_product_preview.exe" "k"
    TextEditorRunTrace "Arguments: -if \x22$SentinelPreview\x22 -of \x22$TMPSentinel1Config\x22" "k"
    set f [ open "| Soft/data_import/sentinel1_product_preview.exe -if \x22$SentinelPreview\x22 -of \x22$TMPSentinel1Config\x22" r]
    PsPprogressBar $f
    TextEditorRunTrace "Check RunTime Errors" "r"
    CheckRunTimeError
    WaitUntilCreated $TMPSentinel1Config
    if [file exists $TMPSentinel1Config] {
        set f [open $TMPSentinel1Config r]
        gets $f SENTINEL1Mission
        gets $f SENTINEL1Product
        if {$SENTINEL1Product == "SLC"} {
            gets $f SENTINEL1Mode
            gets $f SENTINEL1Level
            gets $f PolarType
            gets $f SENTINEL1Number
            for {set i 1} {$i <= $SENTINEL1Number} {incr i} { gets $f SENTINEL1ProductFile($i) }
            if {$SENTINEL1Mode == "IW"} { set SENTINEL1SwathMax 3}
            if {$SENTINEL1Mode == "EW"} { set SENTINEL1SwathMax 5}
            set SENTINEL1Swath 1
            WidgetShow $widget(Toplevel453); TextEditorRunTrace "Open Window SENTINEL1 Input File" "b"
            } else {
            set ErrorMessage "ERROR IN THE SENTINEL1 PRODUCT : MUST BE SLC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        close $f
        }
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label Sentinel1 
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men73" -command {} -label {TerraSAR X} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men73 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men73 add cascade \
        -menu "$site_7_0.men73.men74" -label {Dual - Pol} 
    set site_8_0 $site_7_0.men73
    menu $site_8_0.men74 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_8_0.men74 add command \
        \
        -command {global ActiveImportData DataDir
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_TERRASARX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "TERRASARX"
    if {$Load_TERRASARX_Input_File == 0} {
        source "GUI/data_import/TERRASARX_Input_File.tcl"
        set Load_TERRASARX_Input_File 1
        WmTransient $widget(Toplevel221) $PSPTopLevel
        }
    set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
    set TERRASARXProductFile ""; set PolarType ""
    set TERRASARXDataFormat "dual"
    set TERRASARXDataLevel "SSC"
    set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button221_5) configure -state disable;
    $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
    $widget(TitleFrame221_1) configure -text " "
    $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
    $widget(TitleFrame221_2) configure -text " "
    $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
    $widget(TitleFrame221_3) configure -text " "
    $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
    $widget(TitleFrame221_4) configure -text " "
    $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
    WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {SSC : Single Look Slant Range Complex} 
    $site_8_0.men74 add separator \
        
    $site_8_0.men74 add separator \
        
    $site_8_0.men74 add command \
        \
        -command {global ActiveImportData DataDir
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_TERRASARX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "TERRASARX"
    if {$Load_TERRASARX_Input_File == 0} {
        source "GUI/data_import/TERRASARX_Input_File.tcl"
        set Load_TERRASARX_Input_File 1
        WmTransient $widget(Toplevel221) $PSPTopLevel
        }
    set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
    set TERRASARXProductFile ""; set PolarType ""
    set TERRASARXDataFormat "dual"
    set TERRASARXDataLevel "EEC"
    set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button221_5) configure -state disable;
    $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
    $widget(TitleFrame221_1) configure -text " "
    $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
    $widget(TitleFrame221_2) configure -text " "
    $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
    $widget(TitleFrame221_3) configure -text " "
    $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
    $widget(TitleFrame221_4) configure -text " "
    $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
    WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {EEC : Enhanced Ellipsoid Corrected} 
    $site_8_0.men74 add separator \
        
    $site_8_0.men74 add command \
        \
        -command {global ActiveImportData DataDir
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_TERRASARX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "TERRASARX"
    if {$Load_TERRASARX_Input_File == 0} {
        source "GUI/data_import/TERRASARX_Input_File.tcl"
        set Load_TERRASARX_Input_File 1
        WmTransient $widget(Toplevel221) $PSPTopLevel
        }
    set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
    set TERRASARXProductFile ""; set PolarType ""
    set TERRASARXDataFormat "dual"
    set TERRASARXDataLevel "GEC"
    set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button221_5) configure -state disable;
    $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
    $widget(TitleFrame221_1) configure -text " "
    $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
    $widget(TitleFrame221_2) configure -text " "
    $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
    $widget(TitleFrame221_3) configure -text " "
    $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
    $widget(TitleFrame221_4) configure -text " "
    $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
    WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {GEC : Geocoded Ellipsoid Corrected} 
    $site_8_0.men74 add separator \
        
    $site_8_0.men74 add command \
        \
        -command {global ActiveImportData DataDir
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_TERRASARX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "TERRASARX"
    if {$Load_TERRASARX_Input_File == 0} {
        source "GUI/data_import/TERRASARX_Input_File.tcl"
        set Load_TERRASARX_Input_File 1
        WmTransient $widget(Toplevel221) $PSPTopLevel
        }
    set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
    set TERRASARXProductFile ""; set PolarType ""
    set TERRASARXDataFormat "dual"
    set TERRASARXDataLevel "MGD"
    set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button221_5) configure -state disable;
    $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
    $widget(TitleFrame221_1) configure -text " "
    $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
    $widget(TitleFrame221_2) configure -text " "
    $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
    $widget(TitleFrame221_3) configure -text " "
    $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
    $widget(TitleFrame221_4) configure -text " "
    $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
    WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {MGD : Multi Look Ground Range} 
    $site_7_0.men73 add cascade \
        -menu "$site_7_0.men73.men67" -label {Quad - Pol} 
    set site_8_0 $site_7_0.men73
    menu $site_8_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_8_0.men67 add command \
        \
        -command {global ActiveImportData DataDir
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_TERRASARX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "TERRASARX"
    if {$Load_TERRASARX_Input_File == 0} {
        source "GUI/data_import/TERRASARX_Input_File.tcl"
        set Load_TERRASARX_Input_File 1
        WmTransient $widget(Toplevel221) $PSPTopLevel
        }
    set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
    set TERRASARXProductFile ""; set PolarType ""
    set TERRASARXDataFormat "quad"
    set TERRASARXDataLevel "SSC"
    set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button221_5) configure -state disable;
    $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
    $widget(TitleFrame221_1) configure -text " "
    $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
    $widget(TitleFrame221_2) configure -text " "
    $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
    $widget(TitleFrame221_3) configure -text " "
    $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
    $widget(TitleFrame221_4) configure -text " "
    $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
    $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
    WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {SSC : Single Look Slant Range Complex} 
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men74" -command {} -label SIR-C 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men74 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men74 add command \
        \
        -command {global ActiveImportData DataDir
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCDataFormat SIRCRunNumber
global SIRCFileType SIRCPolMode SIRCFormat FileInputSIRC SIRCDataFormatPol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_SIRC_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "SIRC"
    if {$Load_SIRC_Input_File == 0} {
        source "GUI/data_import/SIRC_Input_File.tcl"
        set Load_SIRC_Input_File 1
        WmTransient $widget(Toplevel222) $PSPTopLevel
        }
    set SIRCDirInput $DataDir; set SIRCDirOutput $DataDir; set SIRCFileInputFlag 0
    set SIRCDataFormat ""; set SIRCDataFormatPol "dual"
    set SIRCRunNumber "?????"
    set SIRCFileType ""; set SIRCPolMode ""; set SIRCFormat ""
    $widget(Menubutton222_1) configure -state disable; $widget(Button222_10) configure -state disable
    WidgetShow $widget(Toplevel222); TextEditorRunTrace "Open Window SIRC Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Dual - Pol} 
    $site_7_0.men74 add separator \
        
    $site_7_0.men74 add command \
        \
        -command {global ActiveImportData DataDir
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCDataFormat SIRCRunNumber
global SIRCFileType SIRCPolMode SIRCFormat FileInputSIRC SIRCDataFormatPol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_SIRC_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "SIRC"
    if {$Load_SIRC_Input_File == 0} {
        source "GUI/data_import/SIRC_Input_File.tcl"
        set Load_SIRC_Input_File 1
        WmTransient $widget(Toplevel222) $PSPTopLevel
        }
    set SIRCDirInput $DataDir; set SIRCDirOutput $DataDir; set SIRCFileInputFlag 0
    set SIRCDataFormat ""; set SIRCDataFormatPol "quad"
    set SIRCRunNumber "?????"
    set SIRCFileType ""; set SIRCPolMode ""; set SIRCFormat ""
    $widget(Menubutton222_1) configure -state disable; $widget(Button222_10) configure -state disable
    WidgetShow $widget(Toplevel222); TextEditorRunTrace "Open Window SIRC Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Quad - Pol} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global ActiveImportData DataDir
global TANDEMXDirInput TANDEMXDirInputMaster TANDEMXDirOutputMaster
global TANDEMXDirInputSlave TANDEMXDirOutputSlave TANDEMXFileInputFlag
global TANDEMXProductFile TDXProduct TDXResolution TDXImaging TDXPolar
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
global VarAdvice WarningMessage WarningMessage2 WarningMessage3 WarningMessage4

#DATA CONVERT
global Load_TANDEMX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set ActiveImportData "TANDEMX"
    if {$Load_TANDEMX_Input_File == 0} {
        source "GUI/data_import/TANDEMX_Input_File.tcl"
        set Load_TANDEMX_Input_File 1
        WmTransient $widget(Toplevel436) $PSPTopLevel
        }
    set TANDEMXDirInput $DataDir; set TANDEMXFileInputFlag 0
    set TANDEMXDirInputMaster ""; set TANDEMXDirOutputMaster ""; 
    set TANDEMXDirInputSlave ""; set TANDEMXDirOutputSlave ""; 
    set TANDEMXProductFile ""; set PolarType ""
    set TDXProduct ""; set TDXResolution ""; set TDXImaging ""; set TDXPolar ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
    $widget(Button436_01) configure -state disable; $widget(Button436_02) configure -state disable;
    $widget(Button436_03) configure -state disable; $widget(Button436_04) configure -state disable;
    $widget(Button436_05) configure -state disable; $widget(Button436_06) configure -state disable;
    $widget(Entry436_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_1) configure -state disable
    $widget(TitleFrame436_1) configure -text " "
    $widget(Entry436_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_2) configure -state disable
    $widget(TitleFrame436_2) configure -text " "
    $widget(Entry436_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_3) configure -state disable
    $widget(TitleFrame436_3) configure -text " "
    $widget(Entry436_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_4) configure -state disable
    $widget(TitleFrame436_4) configure -text " "
    $widget(Button436_6) configure -state disable 

    set WarningMessage "DUE TO THE LENGTH OF THE FULL PATH FILE"
    set WarningMessage2 "WinRAR and WinZIP COULD NOT EXTRACT THE"
    set WarningMessage3 "ENTIRE CONTENTS OF THE .rar.gz TDMX FILE"
    set WarningMessage4 "CHECK IF ALL THE xml FILES ARE EXTRACTED"
    set VarAdvice ""
    Window show $widget(Toplevel377); TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice

    WidgetShow $widget(Toplevel436); TextEditorRunTrace "Open Window TANDEMX Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label TanDEM-X 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add command \
        \
        -command {global ActiveImportData VarError ErrorMessage PSPViewGimpBMP
global ImportDataDirInput ImportDataFileInputFlag
global RawBinaryDirInput RawBinaryDirOutput 
global RawBinaryDataType RawBinaryDataFormat RawBinaryDataFormatPP
global RawBinaryDataInput RawBinaryFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration 
global ASARFileInputFlag AsarDataFormat AsarDirInput FileInputASAR AsarQuickLook Mds1Offset Mds2Offset
global CSKFileInputFlag CSKDataFormat CSKDirInput CSKDirOutput CSKFileInput CSKQuickLook
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global SENTINEL1Burst SENTINEL1LigInit SENTINEL1ColInit SENTINEL1LigFinal SENTINEL1ColFinal
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat 
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel
global TANDEMXDirInputMaster TANDEMXDirOutputMaster TANDEMXFileInputFlag
global TANDEMXDataFormat TANDEMXDataLevel
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCDataFormat 
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag AirsarHeader AIRSARDataFormat AIRSARProcessor
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag EMISARDataFormat
global ESARDirInput ESARDirOutput ESARFileInputFlag EsarHeader ESARDataFormat
global FSARDirInput FSARDirOutput FSARFileInputFlag FsarHeader FSARDataFormat
global FSARMaskFile FSARIncAngFile 
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat PISAR_MGPC PISAR_MGPSSC PISAROffset
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag 
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag UAVSARDataFormat UAVSARAnnotationFile
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV FileInputPISAR FileInputSIRC
global FileInputSTK FileInputSTK1 FileInputSTK2 FileInputSTK3
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6 FileInput7 FileInput8
global FileInput9 FileInput10 FileInput11 FileInput12 FileInput13 FileInput14 FileInput15 FileInput16
global RawBinaryQuickLook AlosQuickLook Radarsat2QuickLook TerrasarxQuickLook TandemxQuickLook  SircQuickLook CSKQuickLook RisatQuickLook
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook Sentinel1QuickLook
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput
global SourceWidth SourceHeight WidthBMP HeightBMP WidthBMPQL HeightBMPQL
global ImageSource BMPDirInput BMPImage
global BMPWidth BMPHeight ZoomBMP BMPView BMPCanvas
global BMPViewFileInput BMPDropperFlag BMPMouseX BMPMouseY BMPChange ColorNumber
global QLBMPImageOpen QLZoomBMP QLZoom PVShortcut
global TMPQuickLookRawbin TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookTandemrX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC TMPQuickLookSentinel1
global TMPQuickLookSethi TMPQuickLookUavsar TMPQuickLookDir
global TMPAirsarConfig TMPEsarConfig TMPFsarConfig TMPPisarConfig TMPTopsarConfig TMPSIRCConfig TMPALOSConfig TMPCSKConfig
global TMPRadarsat2Config TMPTerrasarxConfig TMPUavsarConfig TMPTANDEMXConfigMaster TMPTANDEMXConfigSlave TMPSentinel1Config
global TMPQuickLookDir MultiLookSubSamp PSPMemory TMPMemoryAllocError

set Symmetrie 1

set ImportDataFileInputFlag 0
if {$ActiveImportData == "RAWBINARYDATA"} {
    if {$RawBinaryFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ASAR"} {
    if {$ASARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "CSK"} {
    if {$CSKFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "TANDEMX"} {
    if {$TANDEMXFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "AIRSAR"} {
    if {$AIRSARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "CONVAIR"} {
    if {$CONVAIRFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "EMISAR"} {
    if {$EMISARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ESAR"} {
    if {$ESARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "FSAR"} {
    if {$FSARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "PISAR"} {
    if {$PISARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "SETHI"} {
    if {$SETHIFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "UAVSAR"} {
    if {$UAVSARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }

if {$ImportDataFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    #BMP PROCESS
    global Load_Save Load_ViewBMPQL PSPTopLevel
 
    if {$PVShortcut == 1} {
        set PVShortcut 0
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }
    if {$Load_ViewBMPQL == 0} {
        source "GUI/bmp_process/ViewBMPQL.tcl"
        set Load_ViewBMPQL 1
        $widget(CANVASBMPQL) configure -cursor arrow
        WmTransient $widget(Toplevel207) $PSPTopLevel
        }

    set WidthBMPQL $WidthBMP
    set HeightBMPQL [expr $HeightBMP - 50]

    set NligFullSize $NligFullSizeInput
    set NcolFullSize $NcolFullSizeInput
    set SourceWidth $NcolFullSizeInput
    set SourceHeight $NligFullSizeInput

    if {$ActiveImportData == "SENTINEL1"} {
        if {$SENTINEL1Burst != "ALL" } {
            set NligInit [expr $SENTINEL1LigInit - 1]
            set NligFullSize $SENTINEL1NligFinal
            set SourceHeight $SENTINEL1NligFinal
            set NcolInit [expr $SENTINEL1ColInit - 1]
            set NcolFullSize $SENTINEL1NcolFinal
            set SourceWidth $SENTINEL1NcolFinal
            } else {
            set NligInit 0
            set NcolInit 0
            }
        }

    set subsample 0
    if {$SourceWidth > $WidthBMPQL} {set subsample 1}
    if {$SourceHeight > $HeightBMPQL} {set subsample 1}
    set BMPSample 1
    if {$subsample == 0} {
        set ZoomBMP "1:$BMPSample"
        set BMPWidth $SourceWidth
        set BMPHeight $SourceHeight
        } else {
        if {$SourceWidth >= $SourceHeight} {
            while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
            } else {
            while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
            } 
        set ZoomBMP "1:$BMPSample"
        set BMPWidth [expr round($SourceWidth / $BMPSample)]
        set BMPHeight [expr round($SourceHeight / $BMPSample)]
        } 
    set QLZoomBMP $ZoomBMP    
    set QLZoom $BMPSample
   
    set MultiLookSubSamp " -ssr 1 -ssc 1 -nlr $BMPSample -nlc $BMPSample "
    append MultiLookSubSamp "-mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 "

    DeleteMatrixT $TMPQuickLookDir
    DeleteMatrixC $TMPQuickLookDir
    DeleteMatrixS $TMPQuickLookDir
    DeleteMatrixI $TMPQuickLookDir

    if {$ActiveImportData == "RAWBINARYDATA"} {
        set BMPViewFileInput $TMPQuickLookRawbin
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RawBinaryDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$RawBinaryDataFormat == "S2"} {
            if {$RawBinaryDataInput == "Cmplx"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_S2_Cmplx.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_S2_Cmplx.exe \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "RealImag"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_S2_RealImag.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput7\x22 \x22$FileInput8\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_S2_RealImag.exe \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput7\x22 \x22$FileInput8\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "ModPha"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_S2_ModPha.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput7\x22 \x22$FileInput8\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_S2_ModPha.exe \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput7\x22 \x22$FileInput8\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            }
        if {$RawBinaryDataFormat == "SPP"} {
            if {$RawBinaryDataInput == "Cmplx"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_SPP_Cmplx.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_SPP_Cmplx.exe \x22$FileInput1\x22 \x22$FileInput2\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "RealImag"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_SPP_RealImag.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_SPP_RealImag.exe \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "ModPha"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_SPP_ModPha.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_SPP_ModPha.exe \x22$FileInput1\x22 \x22$FileInput2\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            }
        if {$RawBinaryDataFormat == "IPP"} {
            TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_IPP.exe" "k"
            TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput2\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
            set f [ open "| Soft/bmp_process/quicklook_rawbinary_IPP.exe \x22$FileInput1\x22 \x22$FileInput2\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
            }
        if {$RawBinaryDataFormat == "T3"} {
            if {$RawBinaryDataInput == "Cmplx"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_T3_T4.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput6\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_T3_T4.exe \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput6\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "RealImag"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_T3_T4.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_T3_T4.exe \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "ModPha"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_T3_T4.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_T3_T4.exe \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            }
        if {$RawBinaryDataFormat == "T4"} {
            if {$RawBinaryDataInput == "Cmplx"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_T3_T4.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput5\x22 \x22$FileInput8\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_T3_T4.exe \x22$FileInput1\x22 \x22$FileInput5\x22 \x22$FileInput8\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "RealImag"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_T3_T4.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput8\x22 \x22$FileInput13\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_T3_T4.exe \x22$FileInput1\x22 \x22$FileInput8\x22 \x22$FileInput13\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "ModPha"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_T3_T4.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput8\x22 \x22$FileInput13\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_T3_T4.exe \x22$FileInput1\x22 \x22$FileInput8\x22 \x22$FileInput13\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            }
        if {$RawBinaryDataFormat == "C3"} {
            if {$RawBinaryDataInput == "Cmplx"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_C3_Cmplx.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 \x22$FileInput6\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_C3_Cmplx.exe \x22$FileInput1\x22 \x22$FileInput3\x22 \x22$FileInput4\x22 \x22$FileInput6\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "RealImag"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_C3_RealImag.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_C3_RealImag.exe \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "ModPha"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_C3_ModPha.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_C3_ModPha.exe \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput9\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            }
        if {$RawBinaryDataFormat == "C4"} {
            if {$RawBinaryDataInput == "Cmplx"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_C4_Cmplx.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput8\x22 \x22$FileInput10\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_C4_Cmplx.exe \x22$FileInput1\x22 \x22$FileInput4\x22 \x22$FileInput5\x22 \x22$FileInput6\x22 \x22$FileInput8\x22 \x22$FileInput10\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "RealImag"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_C4_RealImag.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput8\x22 \x22$FileInput9\x22 \x22$FileInput13\x22 \x22$FileInput16\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_C4_RealImag.exe \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput8\x22 \x22$FileInput9\x22 \x22$FileInput13\x22 \x22$FileInput16\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            if {$RawBinaryDataInput == "ModPha"} {
                TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_rawbinary_C4_ModPha.exe" "k"
                TextEditorRunTrace "Arguments: \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput7\x22 \x22$FileInput8\x22 \x22$FileInput9\x22 \x22$FileInput10\x22 \x22$FileInput13\x22 \x22$FileInput16\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" "k"
                set f [ open "| Soft/bmp_process/quicklook_rawbinary_C4_ModPha.exe \x22$FileInput1\x22 \x22$FileInput6\x22 \x22$FileInput7\x22 \x22$FileInput8\x22 \x22$FileInput9\x22 \x22$FileInput10\x22 \x22$FileInput13\x22 \x22$FileInput16\x22 $NcolFullSizeInput $BMPHeight $BMPWidth $IEEEFormat $BMPSample \x22$TMPQuickLookRawbin\x22" r]
                }
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RAW BINARY DATA

     if {$ActiveImportData == "ALOS"} {
        set BMPViewFileInput $TMPQuickLookAlos
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ALOSDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ALOSDataFormat == "dual1.1"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_convert_11_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_convert_11_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "dual1.5"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_convert_15_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_convert_15_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "quad1.1"} {
            set ALOSFonction "Soft/data_import/alos_convert_11.exe"
            if {$ALOSUnCalibration == 1} { set ALOSFonction "Soft/data_import/alos_convert_11_uncal.exe" }
            TextEditorRunTrace "Process The Function $ALOSFonction" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| $ALOSFonction -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "quad1.5"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_convert_15.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_convert_15.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "dual1.1vex"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_vex_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_vex_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "quad1.1vex"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_vex_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_vex_convert.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ALOS

     if {$ActiveImportData == "ALOS2"} {
        set BMPViewFileInput $TMPQuickLookAlos
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ALOSDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ALOSDataFormat == "dual1.1"} {
            }
        if {$ALOSDataFormat == "quad1.1"} {
            set ALOSFonction "Soft/data_import/alos_convert_11.exe"
            TextEditorRunTrace "Process The Function $ALOSFonction" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| $ALOSFonction -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ALOS2

    if {$ActiveImportData == "ASAR"} {
        set BMPViewFileInput $TMPQuickLookAsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $AsarDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 $FileInputASAR
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$AsarDataFormat == "APS"} {
            TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_asar_aps.exe" "k"
            TextEditorRunTrace "Arguments: \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" "k"
            set f [ open "| Soft/bmp_process/quicklook_asar_aps.exe \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" r]
            PsPprogressBar $f
            } else {
            TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_asar_app_apg.exe" "k"
            TextEditorRunTrace "Arguments: \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" "k"
            set f [ open "| Soft/bmp_process/quicklook_asar_app_apg.exe \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" r]
            PsPprogressBar $f
            }
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ASAR

    if {$ActiveImportData == "CSK"} {
        set BMPViewFileInput $TMPQuickLookCSK
        DeleteFile $BMPViewFileInput
        set BMPDirInput $CSKDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/csk_convert_dual.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/csk_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End CSK

    if {$ActiveImportData == "RADARSAT2"} {
        set BMPViewFileInput $TMPQuickLookRadarsat2
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RADARSAT2DirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$RADARSAT2DataFormat == "dual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/radarsat2_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/radarsat2_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" r]
            }
        if {$RADARSAT2DataFormat == "quad"} {
            TextEditorRunTrace "Process The Function Soft/data_import/radarsat2_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/radarsat2_convert.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RADARSAT2

     if {$ActiveImportData == "RISAT"} {
        set BMPViewFileInput $TMPQuickLookRISAT
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RISATDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$RISATDataFormat == "dual1.1"} {
            TextEditorRunTrace "Process The Function Soft/data_import/RISAT_convert_11_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPRISATConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/RISAT_convert_11_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPRISATConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        if {$RISATDataFormat == "quad1.1"} {
            TextEditorRunTrace "Process The Function Soft/data_import/RISAT_convert_11.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPRISATConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/RISAT_convert_11.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPRISATConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RISAT

    if {$ActiveImportData == "SENTINEL1"} {
        set BMPViewFileInput $TMPQuickLookSentinel1
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SENTINEL1DirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$SENTINEL1Burst == "ALL" } {
            set SENTINEL1MaskFile "$TMPQuickLookDir/mask_valid_pixels.bin"
            set SENTINEL1File "$SENTINEL1DirInput/product_header.txt"
            DeleteFile $SENTINEL1MaskFile
            TextEditorRunTrace "Process The Function Soft/data_import/sentinel1_mask_all.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$SENTINEL1File\x22 -of \x22$SENTINEL1MaskFile\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sentinel1_mask_all.exe -if \x22$SENTINEL1File\x22 -of \x22$SENTINEL1MaskFile\x22 $MultiLookSubSamp" r]
            WaitUntilCreated $SENTINEL1MaskFile
            }
        TextEditorRunTrace "Process The Function Soft/data_import/sentinel1_convert_dual.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSizeInput -nc $NcolFullSizeInput -ofr $NligInit -ofc $NcolInit -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/sentinel1_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSizeInput -nc $NcolFullSizeInput -ofr $NligInit -ofc $NcolInit -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SENTINEL1

    if {$ActiveImportData == "TERRASARX"} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        DeleteFile $BMPViewFileInput
        set BMPDirInput $TERRASARXDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$TERRASARXDataFormat == "dual"} {
            if {$TERRASARXDataLevel == "SSC"} {
                TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_ssc_dual.exe" "k"
                TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/terrasarx_convert_ssc_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
                } else {
                TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_mgd_gec_eec_dual.exe" "k"
                TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/terrasarx_convert_mgd_gec_eec_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
                }
            }
        if {$TERRASARXDataFormat == "quad"} {
            if {$TERRASARXDataLevel == "SSC"} {
                TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_ssc_quad.exe" "k"
                TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPTerrasarxConfig\x22 $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/terrasarx_convert_ssc_quad.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPTerrasarxConfig\x22 $MultiLookSubSamp" r]
                }
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End TERRASAR X

    if {$ActiveImportData == "TANDEMX"} {
        set BMPViewFileInput $TMPQuickLookTandemX
        DeleteFile $BMPViewFileInput
        set BMPDirInput $TANDEMXDirInputMaster
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_ssc_dual.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTANDEMXConfigMaster\x22 -pp $PolarType $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/terrasarx_convert_ssc_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTANDEMXConfigMaster\x22 -pp $PolarType $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End TANDEM X

    if {$ActiveImportData == "SIRC"} {
        set BMPViewFileInput $TMPQuickLookSirc
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SIRCDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$SIRCDataFormat == "SLCdual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert_SLC_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert_SLC_dual.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        if {$SIRCDataFormat == "MLCdual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf C2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert_dual.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf C2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        if {$SIRCDataFormat == "SLCquad"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert_SLC.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert_SLC.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        if {$SIRCDataFormat == "MLCquad"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SIR C

    if {$ActiveImportData == "AIRSAR"} {
        set BMPViewFileInput $TMPQuickLookAirsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $AIRSARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$AIRSARDataFormat == "SLC"} {
            if {$AIRSARProcessor == "old"} {
                TextEditorRunTrace "Process The Function Soft/data_import/airsar_convert_SLC.exe" "k"
                TextEditorRunTrace "Arguments: -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/airsar_convert_SLC.exe -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" r]
                }
            if {$AIRSARProcessor == "new"} {
                TextEditorRunTrace "Process The Function Soft/data_import/airsar_convert_V6_SLC.exe" "k"
                TextEditorRunTrace "Arguments: -if1 \x22$FileInputSTK\x22 -if2 \x22$FileInputSTK1\x22 -if3 \x22$FileInputSTK2\x22 -if4 \x22$FileInputSTK3\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/airsar_convert_V6_SLC.exe -if1 \x22$FileInputSTK\x22 -if2 \x22$FileInputSTK1\x22 -if3 \x22$FileInputSTK2\x22 -if4 \x22$FileInputSTK3\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" r]
                }
            }
        if {$AIRSARDataFormat == "MLC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/airsar_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/airsar_convert.exe -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End AIRSAR

    if {$ActiveImportData == "CONVAIR"} {
        set BMPViewFileInput $TMPQuickLookConvair
        DeleteFile $BMPViewFileInput
        set BMPDirInput $CONVAIRDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/convair_convert.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/convair_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End CONVAIR

    if {$ActiveImportData == "EMISAR"} {
        set BMPViewFileInput $TMPQuickLookEmisar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $EMISARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$EMISARDataFormat == "S2"} {
            TextEditorRunTrace "Process The Function Soft/data_import/emisar_convert_SLC.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/emisar_convert_SLC.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" r]
            }
        if {$EMISARDataFormat == "C3"} {
            TextEditorRunTrace "Process The Function Soft/data_import/emisar_convert_MLK.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/emisar_convert_MLK.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End EMISAR

    if {$ActiveImportData == "ESAR"} {
        set BMPViewFileInput $TMPQuickLookEsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ESARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ESARDataFormat == "RGI"} {
            TextEditorRunTrace "Process The Function Soft/data_import/esar_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -hdr $EsarHeader $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/esar_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -hdr $EsarHeader $MultiLookSubSamp" r]
            }
        if {$ESARDataFormat == "GTC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/esar_convert_gtc.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -hdr $EsarHeader $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/esar_convert_gtc.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -hdr $EsarHeader $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ESAR

    if {$ActiveImportData == "FSAR"} {
        set BMPViewFileInput $TMPQuickLookFsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $FSARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/fsar_convert.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -msk \x22$FSARMaskFile\x22 -inc \x22$FSARIncAngFile\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -hdr $FsarHeader $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/fsar_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -msk \x22$FSARMaskFile\x22 -inc \x22$FSARIncAngFile\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -hdr $FsarHeader $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End FSAR

    if {$ActiveImportData == "PISAR"} {
        if {$PISARDataFormat == "MGPC"} { set BMPViewFileInput $TMPQuickLookPisarMGPC}
        if {$PISARDataFormat == "MGPSSC"} { set BMPViewFileInput $TMPQuickLookPisarMGPSSC}
        DeleteFile $BMPViewFileInput
        set BMPDirInput $PISARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$PISARDataFormat == "MGPC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/pisar_convert_MGPC.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputPISAR\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/pisar_convert_MGPC.exe -if \x22$FileInputPISAR\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" r]
            }
        if {$PISARDataFormat == "MGPSSC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/pisar_convert_MGPSSC.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -off $PISAROffset $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/pisar_convert_MGPSSC.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie -off $PISAROffset $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End PISAR

    if {$ActiveImportData == "SETHI"} {
        set BMPViewFileInput $TMPQuickLookSethi
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SETHIDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/sethi_convert.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/sethi_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym $Symmetrie $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SETHI

    if {$ActiveImportData == "UAVSAR"} {
        set BMPViewFileInput $TMPQuickLookUavsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $UAVSARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$UAVSARDataFormat == "SLC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/uavsar_convert_SLC.exe" "k"
            TextEditorRunTrace "Arguments: -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/uavsar_convert_SLC.exe -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie $MultiLookSubSamp" r]
            } else {
            TextEditorRunTrace "Process The Function Soft/data_import/uavsar_convert_MLC.exe" "k"
            TextEditorRunTrace "Arguments: -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -inr $NligFullSize -inc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/uavsar_convert_MLC.exe -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -inr $NligFullSize -inc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End UAVSAR

#######################################################################################
    #Create Pauli BMP Image

    set ConfigFile "$TMPQuickLookDir/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {

        set EOSI_RGB "ALL"

        if {$ActiveImportData == "ASAR"} { set EOSI_RGB "NO" }
        if {$ActiveImportData == "RAWBINARYDATA"} { set EOSI_RGB "NO" }

        if {$ActiveImportData == "ALOS"} {
            if {$ALOSDataFormat == "dual1.1"} { set EOSI_RGB "Dual" }
            if {$ALOSDataFormat == "dual1.5"} { set EOSI_RGB "Dual_I" }
            if {$ALOSDataFormat == "quad1.5"} { set EOSI_RGB "Quad_I" }
            if {$ALOSDataFormat == "dual1.1vex"} { set EOSI_RGB "Dual" }
            }
        if {$ActiveImportData == "ALOS2"} {
            if {$ALOSDataFormat == "dual1.1"} { set EOSI_RGB "Dual" }
            if {$ALOSDataFormat == "dual1.5"} { set EOSI_RGB "Dual_I" }
            if {$ALOSDataFormat == "quad1.5"} { set EOSI_RGB "Quad_I" }
            }
        if {$ActiveImportData == "CSK"} {
            if {$CSKDataFormat == "dual"} { set EOSI_RGB "Dual" }
            }
        if {$ActiveImportData == "RADARSAT2"} {
            if {$RADARSAT2DataFormat == "dual"} { set EOSI_RGB "Dual" }
            }
        if {$ActiveImportData == "RISAT"} {
            if {$RISATDataFormat == "dual1.1"} { set EOSI_RGB "Dual" }
            }
        if {$ActiveImportData == "SENTINEL1"} {
            if {$SENTINEL1DataFormat == "dual"} { set EOSI_RGB "Dual" }
            }
        if {$ActiveImportData == "TERRASARX"} {
            if {$TERRASARXDataFormat == "dual"} {
                if {$TERRASARXDataLevel == "SSC"} { 
                    set EOSI_RGB "Dual"
                    } else {
                    set EOSI_RGB "Dual_I"
                    }
                }
            }
        if {$ActiveImportData == "TANDEMX"} {
            set EOSI_RGB "Dual"
            }
        if {$ActiveImportData == "SIRC"} {
            if {$SIRCDataFormat == "SLCdual"} { set EOSI_RGB "Dual" }
            if {$SIRCDataFormat == "MLCdual"} { set EOSI_RGB "Dual" }
            }

        if {$EOSI_RGB == "ALL"} {
            EnviWriteConfigT $TMPQuickLookDir $NligFullSize $NcolFullSize
            }
        if {$EOSI_RGB == "Dual_I"} {
            EnviWriteConfigI $TMPQuickLookDir $NligFullSize $NcolFullSize
            }
        if {$EOSI_RGB == "Quad_I"} {
            EnviWriteConfigI $TMPQuickLookDir $NligFullSize $NcolFullSize
            }
        if {$EOSI_RGB == "Dual"} {
            EnviWriteConfigC $TMPQuickLookDir $NligFullSize $NcolFullSize
            }

        set MaskCmd ""
        set MaskFile "$TMPQuickLookDir/mask_valid_pixels.bin"
        if [file exists $MaskFile] { set MaskCmd "-mask \x22$MaskFile\x22" }

        set RGBDirInput $TMPQuickLookDir
        if {$EOSI_RGB == "ALL"} {
            set config "true"
            set fichier "$RGBDirInput/T11.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE T11.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/T22.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE T22.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/T33.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE T33.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_pauli_rgb_file.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf T3 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_pauli_rgb_file.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf T3 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                }
            }

        if {$EOSI_RGB == "Dual_I"} {
            set config "true"
            if {$PolarType == "pp5"} {
                set Channel1 "I11"
                set Channel2 "I21"
                }
            if {$PolarType == "pp6"} {
                set Channel1 "I12"
                set Channel2 "I22"
                }
           if {$PolarType == "pp7"} {
                set Channel1 "I11"
                set Channel2 "I22"
                }
            set fichier "$RGBDirInput/"; append fichier "$Channel1.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                }
            set fichier "$RGBDirInput/"; append fichier "$Channel2.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_rgb_file_SPPIPPC2.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_rgb_file_SPPIPPC2.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                } else {
                set VarError ""
                set ErrorMessage "THE FILES $Channel1 AND $Channel2 MUST BE CREATED FIRST"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            }

        if {$EOSI_RGB == "Quad_I"} {
             set config "true"
             set fichier "$RGBDirInput/I11.bin"
             if [file exists $fichier] {
                 } else {
                 set config "false"
                 set VarError ""
                 set ErrorMessage "THE FILE I11.bin HAS NOT BEEN CREATED"
                 Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                 tkwait variable VarError
                 }
            set fichier "$RGBDirInput/I12.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE I12.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/I21.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE I21.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/I22.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE I22.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_rgb_file_SPPIPPC2.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_rgb_file_SPPIPPC2.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                }
            }

        if {$EOSI_RGB == "Dual"} {
            set config "true"
            set fichier "$RGBDirInput/C11.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE C11.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/C22.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE C22.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/C12_real.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE C12_real.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_rgb_file_SPPIPPC2.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf C2 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_rgb_file_SPPIPPC2.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf C2 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                }
            }
        }

#######################################################################################
    #Display Window and show image
    if [file exists $BMPViewFileInput] {
        if {$ActiveImportData == "RAWBINARYDATA"} {set RawBinaryQuickLook 1}
        if {$ActiveImportData == "ALOS"} {set AlosQuickLook 1}
        if {$ActiveImportData == "ALOS2"} {set AlosQuickLook 1}
        if {$ActiveImportData == "ASAR"} {set AsarQuickLook 1}
        if {$ActiveImportData == "CSK"} {set CSKQuickLook 1}
        if {$ActiveImportData == "RADARSAT2"} {set Radarsat2QuickLook 1}
        if {$ActiveImportData == "RISAT"} {set RisatQuickLook 1}
        if {$ActiveImportData == "SENTINEL1"} {set Sentinel1QuickLook 1}
        if {$ActiveImportData == "TERRASARX"} {set TerrasarxQuickLook 1}
        if {$ActiveImportData == "TANDEMX"} {set TandemxQuickLook 1}
        if {$ActiveImportData == "SIRC"} {set SircQuickLook 1}
        if {$ActiveImportData == "AIRSAR"} {set AirsarQuickLook 1}
        if {$ActiveImportData == "CONVAIR"} {set ConvairQuickLook 1}
        if {$ActiveImportData == "EMISAR"} {set EmisarQuickLook 1}
        if {$ActiveImportData == "ESAR"} {set EsarQuickLook 1}
        if {$ActiveImportData == "FSAR"} {set FsarQuickLook 1}
        if {$ActiveImportData == "PISAR"} {set PisarQuickLook 1}
        if {$ActiveImportData == "SETHI"} {set SethiQuickLook 1}
        if {$ActiveImportData == "UAVSAR"} {set UavsarQuickLook 1}

        set WidthBMPQL $WidthBMP
        set HeightBMPQL [expr $HeightBMP - 50]

        image create photo BMPImage
        image create photo ImageSource -file $BMPViewFileInput
        set SourceWidth [image width ImageSource]
        set SourceHeight [image height ImageSource]

        set subsample 0
        if {$SourceWidth > $WidthBMPQL} {set subsample 1}
        if {$SourceHeight > $HeightBMPQL} {set subsample 1}

        set BMPSample 1
        if {$subsample == 0} {
            set BMPWidth $SourceWidth
            set BMPHeight $SourceHeight
            } else {
            if {$SourceWidth >= $SourceHeight} {
                while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
                } else {
                while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
                } 
            set BMPWidth [expr round($SourceWidth / $BMPSample)]
            set BMPHeight [expr round($SourceHeight / $BMPSample)]
            } 
        set QLBMPImageOpen "1"
        set BMPDropperFlag "0"
        set BMPChange "0"
        set ColorNumber "BMP 24 Bits"
        set BMPMouseX ""
        set BMPMouseY ""
        if {$Load_ViewBMPQL == 1} {Window hide $widget(VIEWBMPQL)}
        BMPImage blank
        BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample

        $widget(CANVASBMPQL) configure -width $BMPWidth -height $BMPHeight
        $widget(CANVASBMPQL) create image 0 0 -anchor nw -image BMPImage
        wm title $widget(VIEWBMPQL) [file tail $BMPViewFileInput]

        set x [winfo x $widget(VIEWBMPQL)]
        set y [winfo y $widget(VIEWBMPQL)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget(VIEWBMPQL) $geometrie; update
        WidgetGeometryLeft $widget(VIEWBMPQL)
        catch {wm geometry $widget(VIEWBMPQL) {}} 
        Window show $widget(VIEWBMPQL); TextEditorRunTrace "Open Window View BMP Quick Look" "b"        
        } else {
        if {$ActiveImportData == "RAWBINARYDATA"} {set RawBinaryQuickLook 0}
        if {$ActiveImportData == "ALOS"} {set AlosQuickLook 0}
        if {$ActiveImportData == "ALOS2"} {set AlosQuickLook 0}
        if {$ActiveImportData == "ASAR"} {set AsarQuickLook 0}
        if {$ActiveImportData == "CSK"} {set CSKQuickLook 0}
        if {$ActiveImportData == "RADARSAT2"} {set Radarsat2QuickLook 0}
        if {$ActiveImportData == "RISAT"} {set RisatQuickLook 0}
        if {$ActiveImportData == "SENTINEL1"} {set Sentinel1QuickLook 0}
        if {$ActiveImportData == "TERRASARX"} {set TerrasarxQuickLook 0}
        if {$ActiveImportData == "TANDEMX"} {set TandemxQuickLook 0}
        if {$ActiveImportData == "SIRC"} {set SircQuickLook 0}
        if {$ActiveImportData == "AIRSAR"} {set AirsarQuickLook 0}
        if {$ActiveImportData == "CONVAIR"} {set ConvairQuickLook 0}
        if {$ActiveImportData == "EMISAR"} {set EmisarQuickLook 0}
        if {$ActiveImportData == "ESAR"} {set EsarQuickLook 0}
        if {$ActiveImportData == "FSAR"} {set FsarQuickLook 0}
        if {$ActiveImportData == "PISAR"} {set PisarQuickLook 0}
        if {$ActiveImportData == "SETHI"} {set SethiQuickLook 0}
        if {$ActiveImportData == "UAVSAR"} {set UavsarQuickLook 0}
        set ErrorMessage "QUICKLOOK IMAGE NOT CREATED"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }} \
        -label QuickLook 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add cascade \
        -menu "$site_4_0.men69.m.men72" -command {} -label Extract 
    set site_6_0 $site_4_0.men69.m
    menu $site_6_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men72 add command \
        \
        -command {global PSPImportDirInput PSPImportOutputDir PSPImportOutputSubDir
global PSPSymmetrisation
global ImageImportDataExtractMenu
global RawBinaryDirInput RawBinaryDirOutput 
global RawBinaryDataType RawBinaryDataFormat RawBinaryDataFormatPP
global RawBinaryDataInput RawBinaryFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global ASARFileInputFlag FileInputASAR AsarDataFormat AsarDirOutput AsarExtractFonction
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global SENTINEL1Burst SENTINEL1LigInit SENTINEL1ColInit SENTINEL1LigFinal SENTINEL1ColFinal
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TANDEMXDirInputMaster TANDEMXDirOutputMaster TANDEMXDirInputSlave TANDEMXDirOutputSlave TANDEMXFileInputFlag
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCFileType
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag AIRSARProcessor AIRSARDataFormat TOPSAROutputFormat
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag EMISARDataFormat
global ESARDirInput ESARDirOutput ESARFileInputFlag
global FSARDirInput FSARDirOutput FSARFileInputFlag
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag UAVSARDataFormat
global FileInputSTK1 FileInputSTK2 FileInputSTK3 FileInputSTK4 FileInputSTK5
global FlagFileInputSTK1 FlagFileInputSTK2 FlagFileInputSTK3 FlagFileInputSTK4 FlagFileInputSTK5
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6 FileInput7 FileInput8
global FileInput9 FileInput10 FileInput11 FileInput12 FileInput13 FileInput14 FileInput15 FileInput16
global MultiLookRow MultiLookCol SubSampRow SubSampCol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global EOSIFileInputFlag EOSIDirInput EOSIOutputDir EOSIOutputSubDir EOSIExtractFonction
global EOSIDirInputMaster EOSIOutputDirMaster EOSIDirInputSlave EOSIOutputDirSlave
global PSPTopLevel


#DATA IMPORT
global Load_PSP_Extract_Data Load_TOPSAR_Extract_Data Load_ASAR_Extract_Data Load_EOSI_TDX_Extract_Data

set PSPImportFileInputFlag 0
if {$ActiveImportData == "RAWBINARYDATA"} {
    if {$RawBinaryFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "ASAR"} {
    if {$ASARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "CSK"} {
    if {$CSKFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "TANDEMX"} {
    if {$TANDEMXFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "AIRSAR"} {
    if {$AIRSARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "CONVAIR"} {
    if {$CONVAIRFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "EMISAR"} {
    if {$EMISARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "ESAR"} {
    if {$ESARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "FSAR"} {
    if {$FSARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "PISAR"} {
    if {$PISARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "SETHI"} {
    if {$SETHIFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }
if {$ActiveImportData == "UAVSAR"} {
    if {$UAVSARFileInputFlag == 1} { set PSPImportFileInputFlag 1 }
    }

if {$PSPImportFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {

    set LoadWidget "psp"
    if {$ActiveImportData == "AIRSAR"} {
        if {$AIRSARProcessor == "TOPSAR"} {set LoadWidget "topsar"}
        }
    if {$ActiveImportData == "ASAR"} {set LoadWidget "asar"}
    if {$ActiveImportData == "TANDEMX"} {set LoadWidget "tandemx"}

    if {$LoadWidget == "asar"} {  
        if {$Load_ASAR_Extract_Data == 0} {
            source "GUI/data_import/ASAR_Extract_Data.tcl"
            set Load_ASAR_Extract_Data 1
            WmTransient $widget(Toplevel203) $PSPTopLevel
            }
        }
    if {$LoadWidget == "topsar"} {  
        if {$Load_TOPSAR_Extract_Data == 0} {
            source "GUI/data_import/TOPSAR_Extract_Data.tcl"
            set Load_TOPSAR_Extract_Data 1
            WmTransient $widget(Toplevel251) $PSPTopLevel
            }
        }
    if {$LoadWidget == "tandemx"} {  
        if {$Load_EOSI_TDX_Extract_Data == 0} {
            source "GUI/data_import/EOSI_TDX_Extract_Data.tcl"
            set Load_EOSI_TDX_Extract_Data 1
            WmTransient $widget(Toplevel437) $PSPTopLevel
            }
        }
    if {$LoadWidget == "psp"} {  
        if {$Load_PSP_Extract_Data == 0} {
            source "GUI/data_import/PSP_Extract_Data.tcl"
            set Load_PSP_Extract_Data 1
            WmTransient $widget(Toplevel233) $PSPTopLevel
            }
        }

    if {$ActiveImportData == "RAWBINARYDATA"} {set PSPImportDirInput $RawBinaryDirInput; set PSPImportOutputDir $RawBinaryDirOutput }
    if {$ActiveImportData == "ALOS"} {set PSPImportDirInput $ALOSDirInput; set PSPImportOutputDir $ALOSDirOutput }
    if {$ActiveImportData == "ALOS2"} {set PSPImportDirInput $ALOSDirInput; set PSPImportOutputDir $ALOSDirOutput }
    if {$ActiveImportData == "CSK"} {set PSPImportDirInput $CSKDirInput; set PSPImportOutputDir $CSKDirOutput }
    if {$ActiveImportData == "RADARSAT2"} {set PSPImportDirInput $RADARSAT2DirInput; set PSPImportOutputDir $RADARSAT2DirOutput }
    if {$ActiveImportData == "RISAT"} {set PSPImportDirInput $RISATDirInput; set PSPImportOutputDir $RISATDirOutput }
    if {$ActiveImportData == "SENTINEL1"} {set PSPImportDirInput $SENTINEL1DirInput; set PSPImportOutputDir $SENTINEL1DirOutput }
    if {$ActiveImportData == "TERRASARX"} {set PSPImportDirInput $TERRASARXDirInput; set PSPImportOutputDir $TERRASARXDirOutput }
    if {$ActiveImportData == "SIRC"} {set PSPImportDirInput $SIRCDirInput; set PSPImportOutputDir $SIRCDirOutput }
    if {$ActiveImportData == "AIRSAR"} {
        if {$LoadWidget == "topsar"} {  
            set EOSIDirInput $AIRSARDirInput; set EOSIOutputDir $AIRSARDirOutput
            set EOSIFileInputFlag 1; set EOSIOutputSubDir "T3"; set EOSIExtractFonction "Full"
            } else {
            set PSPImportDirInput $AIRSARDirInput; set PSPImportOutputDir $AIRSARDirOutput
            }
        }
    if {$ActiveImportData == "CONVAIR"} {set PSPImportDirInput $CONVAIRDirInput; set PSPImportOutputDir $CONVAIRDirOutput }
    if {$ActiveImportData == "EMISAR"} {set PSPImportDirInput $EMISARDirInput; set PSPImportOutputDir $EMISARDirOutput }
    if {$ActiveImportData == "ESAR"} {set PSPImportDirInput $ESARDirInput; set PSPImportOutputDir $ESARDirOutput }
    if {$ActiveImportData == "FSAR"} {set PSPImportDirInput $FSARDirInput; set PSPImportOutputDir $FSARDirOutput }
    if {$ActiveImportData == "PISAR"} {set PSPImportDirInput $PISARDirInput; set PSPImportOutputDir $PISARDirOutput }
    if {$ActiveImportData == "SETHI"} {set PSPImportDirInput $SETHIDirInput; set PSPImportOutputDir $SETHIDirOutput }
    if {$ActiveImportData == "UAVSAR"} {set PSPImportDirInput $UAVSARDirInput; set PSPImportOutputDir $UAVSARDirOutput }
    set PSPImportExtractFonction ""
    set PSPImportOutputFormat ""
    set PSPImportOutputSubDir ""
    set MultiLookRow ""
    set MultiLookCol ""
    set SubSampRow ""
    set SubSampCol ""
    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize

    if {$ActiveImportData == "SENTINEL1"} {
        if {$SENTINEL1Burst != "ALL" } {
            set NligInit $SENTINEL1LigInit
            set NligEnd $SENTINEL1LigFinal
            set NcolInit $SENTINEL1ColInit
            set NcolEnd $SENTINEL1ColFinal
            }
        }

    if {$LoadWidget == "asar"} {  
        set AsarExtractFonction "Full"
        $widget(Label203_1) configure -state disable
        $widget(Label203_2) configure -state disable
        $widget(Label203_3) configure -state disable
        $widget(Label203_4) configure -state disable
        $widget(Entry203_1) configure -state disable
        $widget(Entry203_2) configure -state disable
        $widget(Entry203_3) configure -state disable
        $widget(Entry203_4) configure -state disable
        WidgetShow $widget(Toplevel203); TextEditorRunTrace "Open Window ASAR Extract Data" "b"
        }
    if {$LoadWidget == "psp"} {  
        $widget(Label233_1) configure -state disable
        $widget(Label233_2) configure -state disable
        $widget(Label233_3) configure -state disable
        $widget(Label233_4) configure -state disable
        $widget(Entry233_1) configure -state disable
        $widget(Entry233_2) configure -state disable
        $widget(Entry233_3) configure -state disable
        $widget(Entry233_4) configure -state disable
    
        set PSPSymmetrisation 0; $widget(Checkbutton233_1) configure -state disable
    
        $widget(Radiobutton233_1) configure -state disable; $widget(Radiobutton233_2) configure -state disable; $widget(Radiobutton233_3) configure -state disable
        $widget(Radiobutton233_4) configure -state disable; $widget(Radiobutton233_5) configure -state disable
        $widget(Radiobutton233_6) configure -state disable; $widget(Radiobutton233_7) configure -state disable; $widget(Radiobutton233_8) configure -state disable
    
        if {$ActiveImportData == "RAWBINARYDATA"} {
            if {$RawBinaryDataFormat == "S2"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            if {$RawBinaryDataFormat == "SPP"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            if {$RawBinaryDataFormat == "IPP"} { set PSPImportInputFormat "Intensities Elements" }
            if {$RawBinaryDataFormat == "T3"} { set PSPImportInputFormat "3x3 Complex Coherency Matrix T3" }
            if {$RawBinaryDataFormat == "T4"} { set PSPImportInputFormat "4x4 Complex Coherency Matrix T4" }
            if {$RawBinaryDataFormat == "C3"} { set PSPImportInputFormat "3x3 Complex Covariance Matrix C3" }
            if {$RawBinaryDataFormat == "C4"} { set PSPImportInputFormat "4x4 Complex Covariance Matrix C4" }
            }
        if {$ActiveImportData == "ALOS"} {
            if {$ALOSDataFormat == "dual1.1"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            if {$ALOSDataFormat == "dual1.5"} { set PSPImportInputFormat "Intensities Elements" }
            if {$ALOSDataFormat == "quad1.1"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            if {$ALOSDataFormat == "quad1.5"} { set PSPImportInputFormat "Intensities Elements" }
            }
        if {$ActiveImportData == "ALOS2"} {
            if {$ALOSDataFormat == "dual1.1"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            if {$ALOSDataFormat == "quad1.1"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            }
        if {$ActiveImportData == "CSK"} {
            if {$CSKDataFormat == "dual"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            }
        if {$ActiveImportData == "RADARSAT2"} {
            if {$RADARSAT2DataFormat == "quad"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            if {$RADARSAT2DataFormat == "dual"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            }
        if {$ActiveImportData == "RISAT"} {
            if {$RISATDataFormat == "dual1.1"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            }
        if {$ActiveImportData == "SENTINEL1"} {
            if {$SENTINEL1DataFormat == "dual"} { set PSPImportInputFormat "Dual Polarisation Elements" }
            }
        if {$ActiveImportData == "TERRASARX"} {
            if {$TERRASARXDataFormat == "dual"} {
                if {$TERRASARXDataLevel == "SSC"} {
                   set PSPImportInputFormat "Dual Polarisation Elements"
                   } else {
                   set PSPImportInputFormat "Intensities Elements"
                   }
                }
            if {$TERRASARXDataFormat == "quad"} {
                if {$TERRASARXDataLevel == "SSC"} {
                   set PSPImportInputFormat "2x2 Complex Scattering Matrix S2"
                   } else {
                   }
                }
            }
        if {$ActiveImportData == "SIRC"} { 
            set PSPImportInputFormat $SIRCFileType
            }
        if {$ActiveImportData == "AIRSAR"} { 
            set PSPImportInputFormat "Coded Stokes Elements"
            if {$AIRSARDataFormat == "SLC"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2"}
            }
        if {$ActiveImportData == "CONVAIR"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
        if {$ActiveImportData == "EMISAR"} {
            if {$EMISARDataFormat == "S2"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            if {$EMISARDataFormat == "C3"} { set PSPImportInputFormat "3x3 Complex Covariance Matrix C3" }
            }
        if {$ActiveImportData == "ESAR"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
        if {$ActiveImportData == "FSAR"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
        if {$ActiveImportData == "PISAR"} {
            if {$PISARDataFormat == "MGPC"} { set PSPImportInputFormat "Coded Stokes Elements" }
            if {$PISARDataFormat == "MGPSSC"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            }
        if {$ActiveImportData == "SETHI"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
        if {$ActiveImportData == "UAVSAR"} {
            if {$UAVSARDataFormat == "SLC"} { set PSPImportInputFormat "2x2 Complex Scattering Matrix S2" }
            if {$UAVSARDataFormat == "MLC"} { set PSPImportInputFormat "3x3 Complex Covariance Matrix C3" }
            if {$UAVSARDataFormat == "GRD"} { set PSPImportInputFormat "3x3 Complex Covariance Matrix C3" }
            }
    
        package require Img
        image create photo ImagePSPImportExtractMenu
        ImagePSPImportExtractMenu blank
        $widget(CANVASPSPImportEXTRACTMENU) create image 0 0 -anchor nw -image ImagePSPImportExtractMenu
        image delete ImagePSPImportExtractMenu
        if {$ActiveImportData == "RAWBINARYDATA"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/PSPv2RawData.gif"}
        if {$ActiveImportData == "ALOS"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/ALOS.gif"}
        if {$ActiveImportData == "ALOS2"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/ALOS2.gif"}
        if {$ActiveImportData == "CSK"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/CSK.gif"}
        if {$ActiveImportData == "RADARSAT2"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/RADARSAT2.gif"}
        if {$ActiveImportData == "RISAT"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/RISAT.gif"}
        if {$ActiveImportData == "SENTINEL1"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/SENTINEL1.gif"}
        if {$ActiveImportData == "TERRASARX"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/TERRASARX.gif"}
        if {$ActiveImportData == "SIRC"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/SIRC.gif"}
        if {$ActiveImportData == "AIRSAR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/AIRSAR.gif"}
        if {$ActiveImportData == "CONVAIR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/CONVAIR.gif"}
        if {$ActiveImportData == "EMISAR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/EMISAR.gif"}
        if {$ActiveImportData == "ESAR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/ESAR.gif"}
        if {$ActiveImportData == "FSAR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/FSAR.gif"}
        if {$ActiveImportData == "PISAR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/PISAR.gif"}
        if {$ActiveImportData == "SETHI"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/SETHI.gif"} 
        if {$ActiveImportData == "UAVSAR"} {image create photo ImagePSPImportExtractMenu -file "GUI/Images/UAVSAR.gif"}
        $widget(CANVASPSPImportEXTRACTMENU) create image 0 0 -anchor nw -image ImagePSPImportExtractMenu
        WidgetShow $widget(Toplevel233); TextEditorRunTrace "Open Window Extract Data" "b"
        wm title $widget(Toplevel233) [file tail "$ActiveProgram Extract Data"]
        }
    if {$LoadWidget == "topsar"} {  
        $widget(Label251_1) configure -state disable; $widget(Label251_2) configure -state disable
        $widget(Label251_3) configure -state disable; $widget(Label251_4) configure -state disable
        $widget(Entry251_1) configure -state disable; $widget(Entry251_2) configure -state disable
        $widget(Entry251_3) configure -state disable; $widget(Entry251_4) configure -state disable
        set FlagFileInputSTK1 "0"; set FlagFileInputSTK2 "0"; set FlagFileInputSTK3 "0"; set FlagFileInputSTK4 "0"; set FlagFileInputSTK5 "0"
        $widget(Checkbutton251_1) configure -state disable; $widget(Checkbutton251_2) configure -state disable; $widget(Checkbutton251_3) configure -state disable
        $widget(Checkbutton251_4) configure -state disable; $widget(Checkbutton251_5) configure -state disable
        $widget(Radiobutton251_1) configure -state normal; $widget(Radiobutton251_2) configure -state normal; set TOPSAROutputFormat "T3"
        if {$FileInputSTK1 != ""} { $widget(Checkbutton251_1) configure -state normal }
        if {$FileInputSTK2 != ""} { $widget(Checkbutton251_2) configure -state normal }
        if {$FileInputSTK3 != ""} { $widget(Checkbutton251_3) configure -state normal }
        if {$FileInputSTK4 != ""} { $widget(Checkbutton251_4) configure -state normal }
        if {$FileInputSTK5 != ""} { $widget(Checkbutton251_5) configure -state normal }
        WidgetShow $widget(Toplevel251); TextEditorRunTrace "Open Window TOPSAR Extract Data" "b"
        }
    if {$LoadWidget == "tandemx"} {  
        set EOSIDirInputMaster $TANDEMXDirInputMaster; set EOSIOutputDirMaster $TANDEMXDirOutputMaster
        set EOSIDirInputSlave $TANDEMXDirInputSlave; set EOSIOutputDirSlave $TANDEMXDirOutputSlave
        set EOSIOutputSubDir ""
        set EOSIExtractFonction "Full"
        set TANDEMXBistaticCorrection 0
        $widget(Label437_1) configure -state disable; $widget(Label437_2) configure -state disable
        $widget(Entry437_1) configure -state disable; $widget(Entry437_2) configure -state disable
        WidgetShow $widget(Toplevel437); TextEditorRunTrace "Open Window $ActiveProgram Extract Data" "b"
        wm title $widget(Toplevel437) [file tail "$ActiveProgram Extract Data"]
        }
    }} \
        -label {Full Resolution} 
    $site_6_0.men72 add command \
        \
        -command {global ActiveImportData VarError ErrorMessage
global ImportDataDirInput ImportDataFileInputFlag
global RawBinaryDirInput RawBinaryDirOutput 
global RawBinaryDataType RawBinaryDataFormat RawBinaryDataFormatPP
global RawBinaryDataInput RawBinaryFileInputFlag
global ASARFileInputFlag FileInputASAR AsarDataFormat
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global SENTINEL1Burst SENTINEL1LigInit SENTINEL1ColInit SENTINEL1LigFinal SENTINEL1ColFinal
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TANDEMXDirInputMaster TANDEMXDirOutputMaster TANDEMXDirInputSlave TANDEMXDirOutputSlave TANDEMXFileInputFlag
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag
global ESARDirInput ESARDirOutput ESARFileInputFlag
global FSARDirInput FSARDirOutput FSARFileInputFlag
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag
global RawBinaryQuickLook AlosQuickLook AsarQuickLook Radarsat2QuickLook TerrasarxQuickLook TandemxQuickLook SircQuickLook CSKQuickLook RisatQuickLook
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook Sentinel1QuickLook

global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput

global QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol QLBMPMouseX QLBMPMouseY
global MouseActiveButton TrainingAreaTool

global QLBMPImageOpen QLZoomBMP QLZoom QLZoomBMP ZoomBMPQL

global DataDir FileName BMPChange BMPImageOpen BMPDirInput BMPViewFileInput SourceWidth SourceHeight 
global BMPWidth BMPHeight WidthBMP HeightBMP
global BMPImage BMPImageLens ImageSource BMPView BMPCanvas
global ColorNumber ColorNumberUtil ColorMapBMP RedPalette GreenPalette BluePalette
global BMPLensFlag RectLensCenter BMPWidthSource BMPHeightSource BMPSampleSource ZoomBMPSource
global BMPColorMapDisplay BMPColorMapGrayJetHsv BMPTrainingRect
global BMPMax BMPMin BMPValue BMPDropperFlag BMPSubAreaFlag

global TMPQuickLookRawbin TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookTandemX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat TMPQuickLookSentinel1
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC TMPQuickLookSethi TMPQuickLookUavsar

package require Img

#BMP PROCESS
global Load_Save Load_ViewBMPFile Load_ViewBMP1 Load_ViewBMPLens Load_Zoom
global Load_colormap256 Load_colormap32 Load_colormap16 Load_colormap8
global Load_Display Load_ColorMapGrayJetHsv PSPTopLevel

#DATA IMPORT
global Load_SubArea_GraphicEditor 

set ImportDataFileInputFlag 0
if {$ActiveImportData == "RAWBINARYDATA"} {
    if {$RawBinaryFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ASAR"} {
    if {$ASARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "CSK"} {
    if {$CSKFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "TANDEMX"} {
    if {$TANDEMXFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "AIRSAR"} {
    if {$AIRSARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "CONVAIR"} {
    if {$CONVAIRFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "EMISAR"} {
    if {$EMISARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "ESAR"} {
    if {$ESARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "FSAR"} {
    if {$FSARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "PISAR"} {
    if {$PISARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "SETHI"} {
    if {$SETHIFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }
if {$ActiveImportData == "UAVSAR"} {
    if {$AIRSARFileInputFlag == 1} { set ImportDataFileInputFlag 1 }
    }

if {$ImportDataFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
   
############################################################################
set QuickLookFlag 0
if {$ActiveImportData == "RAWBINARYDATA"} {
    if {$RawBinaryQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRawbin
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "ALOS"} {
    if {$AlosQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAlos
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "ALOS2"} {
    if {$AlosQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAlos
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "ASAR"} {
    if {$AsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "CSK"} {
    if {$CSKQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookCSK
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "RADARSAT2"} {
    if {$Radarsat2QuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRadarsat2
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "RISAT"} {
    if {$RisatQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRisat
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "SENTINEL1"} {
    if {$Sentinel1QuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSentinel1
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "TERRASARX"} {
    if {$TerrasarxQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "TANDEMX"} {
    if {$TandemxQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookTandemX
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "SIRC"} {
    if {$SircQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSirc
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "AIRSAR"} {
    if {$AirsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAirsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "CONVAIR"} {
    if {$ConvairQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookConvair
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "EMISAR"} {
    if {$EmisarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookEmisar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "ESAR"} {
    if {$EsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookEsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "FSAR"} {
    if {$FsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookFsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "PISAR"} {
    if {$PisarQuickLook == 1} {
        if {$PISARDataFormat == "MGPC"} { set BMPViewFileInput $TMPQuickLookPisarMGPC}
        if {$PISARDataFormat == "MGPSSC"} { set BMPViewFileInput $TMPQuickLookPisarMGPSSC}
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "SETHI"} {
    if {$SethiQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSethi
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveImportData == "UAVSAR"} {
    if {$AirsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookUavsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }

if {$QuickLookFlag == 1} {
    if {$Load_SubArea_GraphicEditor == 0} {
        source "GUI/data_import/SubArea_GraphicEditor.tcl"
        set Load_SubArea_GraphicEditor 1
        WmTransient $widget(Toplevel202) $PSPTopLevel
        }
      
    if {$Load_ViewBMP1 == 0} {
        source "GUI/bmp_process/ViewBMP1.tcl"
        set Load_ViewBMP1 1
        WmTransient $widget(Toplevel51) $PSPTopLevel
        }
    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }

    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize

    if {$ActiveImportData == "SENTINEL1"} {
        if {$SENTINEL1Burst != "ALL" } {
            set NligFullSize $SENTINEL1NligFinal
            set NligInit $SENTINEL1LigInit
            set NligEnd $SENTINEL1LigFinal
            set NcolFullSize $SENTINEL1NcolFinal
            set NcolInit $SENTINEL1ColInit
            set NcolEnd $SENTINEL1ColFinal
            }
        }

    if {$BMPImageOpen == 1} {
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    LoadPSPViewer
    load_bmp_caracteristics $BMPViewFileInput
    load_bmp_file $BMPViewFileInput    

    $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
    $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
    wm title $widget($BMPView) [file tail $BMPViewFileInput]

    set x [winfo x $widget($BMPView)]
    set y [winfo y $widget($BMPView)]
    set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
    append geometrie $x; append geometrie "+"; append geometrie $y
    wm geometry $widget($BMPView) $geometrie; update
    WidgetGeometryLeft $widget($BMPView)
    catch {wm geometry $widget($BMPView) {}} 
    Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"

    set BMPImageOpen "1"
    set QLMouseInitX ""
    set QLMouseInitY ""
    set QLMouseEndX ""
    set QLMouseEndY ""
    set QLMouseNlig ""
    set QLMouseNcol ""
    set QLBMPMouseX ""
    set QLBMPMouseY ""
    set BMPSubAreaFlag "1"
    set MouseActiveFunction ""
    set TrainingAreaTool "rect"
    set rect_color "white"
    set c0 .top202.fra69.cpd73
    $c0 configure -background $rect_color
    WidgetShowFromWidget $widget($BMPView) $widget(Toplevel202)
    TextEditorRunTrace "Open Window Sub Area Graphic Editor" "b"
    } else {
    set ErrorMessage "CREATE A QUICKLOOK IMAGE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set QuickLookSubAreaFlag 0
    }

############################################################################
}} \
        -label {Sub Area} 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add command \
        \
        -command {global FileName DataDir ConfigFile VarError ErrorMessage PSPTopLevel
#UTIL
global Load_TextEdit
if {$Load_TextEdit == 0} {
    source "GUI/util/TextEdit.tcl"
    set Load_TextEdit 1
    WmTransient $widget(Toplevel95) $PSPTopLevel
    }

set ConfigFile "$DataDir/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    TextEditorRunTrace "Open Window Text Editor" "b"
    TextEditor $ConfigFile
    } else {
    append ErrorMessage " - CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Edit Config File} 
    menubutton $site_4_0.men98 \
        -borderwidth 0 -menu "$site_4_0.men98.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men98" "IMPEOSI" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men98 "$site_4_0.men98 Menubutton .top2.fra71.fra76 all _vTclBalloon"
    bind $site_4_0.men98 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Import Data}
    }
    menu $site_4_0.men98.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men98.m add command \
        \
        -command {global ActiveProgram DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSInfoXMLFile
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap 
global ALOSScene ALOSDate ALOSOrbit ALOSDirection ALOSPixRow ALOSPixCol
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration ALOSProductFile
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag
global RISATLeaderFile RISATBandMetaFile RISATGridFile RISATMode RISATDataFormat RISATProductFile
global RISATSceneID RISATResRg RISATResAz RISATPixAz RISATPixRg
global RISATImgFormat RISATProcLevel RISATincang RISATImgMode
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXProductFile TSXProduct TSXResolution TSXImaging TSXPolar
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCRunNumber
global SIRCFileType SIRCPolMode SIRCFormat SIRCDataFormat SIRCDataFormatPol
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag AirsarHeader AIRSARDataFormat AIRSARProcessor
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag EMISARDataFormat EMISARFormatS2 EMISARFormatC3
global ESARDirInput ESARDirOutput ESARFileInputFlag EsarHeader ESARDataFormat
global FSARDirInput FSARDirOutput FSARFileInputFlag FsarHeader FSARDataFormat FSARRGIDir
global FSARProductFileHH FSARProductFileHV FSARProductFileVH FSARProductFileVV
global FSARFreq FSARCalib FSARResolRg FSARResolAz FSARPixRg FSARPixAz FSARMaskFile FSARIncAngFile
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat PISAR_MGPC PISAR_MGPSSC PISAROffset
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag FileHeaderSethi
global UAVSARDirInput UAVSARDirOutput UAVSARDataFormat UAVSARAnnotationFile UAVSARFileInputFlag
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV FileInputPISAR FileInputSIRC
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global FileInputSTK FileInputSTK1 FileInputSTK2 FileInputSTK3 FileInputSTK4 FileInputSTK5
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage PSPTopLevel PolarType
#DATA CONVERT
global Load_ALOS_Input_File Load_ALOS2_Input_File Load_RADARSAT2_Input_File Load_TERRASARX_Input_File Load_SIRC_Input_File Load_CSK_Input_File
global Load_AIRSAR_Input_File Load_CONVAIR_Input_File Load_EMISAR_Input_File Load_ESAR_Input_File Load_FSAR_Input_File
global Load_PISAR_Input_File Load_SETHI_Input_File Load_RISAT_Input_File Load_SENTINEL1_Input_File 
global Load_ALOS_Vex_Input_File Load_UAVSAR_Input_File Load_ALOS2_Input_File

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    if {$ActiveProgram == "ALOS"} {
        if {$ALOSDataFormat == "quad1.1"} {
            if {$Load_ALOS_Input_File == 0} {
                source "GUI/data_import/ALOS_Input_File.tcl"
                set Load_ALOS_Input_File 1
                WmTransient $widget(Toplevel218) $PSPTopLevel
                }
            set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
            set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
            set ALOSDataLevel ""; set ALOSDataType ""; set ALOSUnCalibration 0
            set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
            $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
            $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
            $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
            $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
            $widget(Checkbutton218_1) configure -state disable
            $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
            $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
            WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
            }
        if {$ALOSDataFormat == "quad1.1vex"} {
            if {$Load_ALOS_Vex_Input_File == 0} {
                source "GUI/data_import/ALOS_Vex_Input_File.tcl"
                set Load_ALOS_Vex_Input_File 1
                WmTransient $widget(Toplevel350) $PSPTopLevel
                }
            set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
            set ALOSLeaderFile ""; set ALOSDataLevel ""; set ALOSDataType ""
            set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
            set PolarType ""; set ALOSProductFile ""; set IEEEFormat 1
            $widget(Button350_5) configure -state disable;
            $widget(Button350_6) configure -state disable; 
            $widget(Button350_7) configure -state disable; 
            $widget(Entry350_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label350_10) configure -state disable
            $widget(Label350_5) configure -state disable; $widget(Entry350_5) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_6) configure -state disable; $widget(Entry350_6) configure -disabledbackground $PSPBackgroundColor
            $widget(TitleFrame350_1) configure -state disable
            $widget(Label350_1) configure -state disable; $widget(Entry350_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_2) configure -state disable; $widget(Entry350_2) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_3) configure -state disable; $widget(Entry350_3) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_4) configure -state disable; $widget(Entry350_4) configure -disabledbackground $PSPBackgroundColor
            WidgetShow $widget(Toplevel350); TextEditorRunTrace "Open Window ALOS Input File" "b"
            }
        }
    if {$ActiveProgram == "ALOS2"} {
        if {$ALOSDataFormat == "quad1.1"} {
            if {$Load_ALOS2_Input_File == 0} {
                source "GUI/data_import/ALOS2_Input_File.tcl"
                set Load_ALOS2_Input_File 1
                WmTransient $widget(Toplevel454) $PSPTopLevel
                }
            set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
            set ALOSLeaderFile ""; set ALOSTrailerFile ""
            set ALOSScene ""; set ALOSDate ""; set ALOSOrbit ""; set ALOSDirection ""; set ALOSMode ""; set ALOSNode ""
            set ALOSDataLevel ""; set ALOSDataType ""; set ALOSUnCalibration 0; set ALOSPixRow ""; set ALOSPixCol ""
            set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
            $widget(Label454_8) configure -state disable; $widget(Entry454_8) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_9) configure -state disable; $widget(Entry454_9) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_10) configure -state disable; $widget(Entry454_10) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_11) configure -state disable; $widget(Entry454_11) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_17) configure -state disable; $widget(Entry454_17) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_18) configure -state disable; $widget(Entry454_18) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_19) configure -state disable; $widget(Entry454_19) configure -disabledbackground $PSPBackgroundColor
            $widget(TitleFrame454_1) configure -state disable; $widget(TitleFrame454_2) configure -state disable
            $widget(Entry454_12) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_13) configure -state disable; $widget(Entry454_13) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_14) configure -state disable; $widget(Entry454_14) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_15) configure -state disable; $widget(Entry454_15) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
            $widget(Button454_9) configure -state disable; $widget(Menubutton454_1) configure -state disable
            $widget(Checkbutton454_1) configure -state disable
            $widget(Label454_1) configure -state disable; $widget(Entry454_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_2) configure -state disable; $widget(Entry454_2) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_3) configure -state disable; $widget(Entry454_3) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_4) configure -state disable; $widget(Entry454_4) configure -disabledbackground $PSPBackgroundColor
            $widget(Button454_10) configure -state disable
            WidgetShow $widget(Toplevel454); TextEditorRunTrace "Open Window ALOS2 Input File" "b"
            }
        }
    if {$ActiveProgram == "RADARSAT2"} {
        if {$Load_RADARSAT2_Input_File == 0} {
            source "GUI/data_import/RADARSAT2_Input_File.tcl"
            set Load_RADARSAT2_Input_File 1
            WmTransient $widget(Toplevel219) $PSPTopLevel
            }
        set RADARSAT2DirInput $DataDir; set RADARSAT2DirOutput $DataDir; set RADARSAT2FileInputFlag 0
        set RADARSAT2DataFormat "quad"; set RADARSAT2DataLevel ""; set RADARSAT2ProductFile ""
        set RADARSAT2Lut "sigma"; set RADARSAT2LutFile ""
        set PolarType ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button219_5) configure -state disable;
        $widget(Entry219_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label219_10) configure -state disable
        $widget(Entry219_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_1) configure -state disable
        $widget(TitleFrame219_1) configure -text " "
        $widget(Entry219_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_2) configure -state disable
        $widget(TitleFrame219_2) configure -text " "
        $widget(Entry219_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_3) configure -state disable
        $widget(TitleFrame219_3) configure -text " "
        $widget(Entry219_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_4) configure -state disable
        $widget(TitleFrame219_4) configure -text " "
        $widget(Label219_1) configure -state disable; $widget(Entry219_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Label219_2) configure -state disable; $widget(Entry219_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Button219_6) configure -state disable; 
        $widget(Button219_7) configure -state disable; 
        WidgetShow $widget(Toplevel219); TextEditorRunTrace "Open Window RADARSAT2 Input File" "b"
        }
    if {$ActiveProgram == "RISAT"} {
        set RISATBandMetaFile "$DataDir/BAND_META.txt"
        if [file exists $RISATBandMetaFile] {
            if {$RISATDataFormat == "quad1.1"} {
                if {$Load_RISAT_Input_File == 0} {
                    source "GUI/data_import/RISAT_Input_File.tcl"
                    set Load_RISAT_Input_File 1
                    WmTransient $widget(Toplevel449) $PSPTopLevel
                    }
                set RISATDirInput $DataDir; set RISATDirOutput $DataDir; set RISATFileInputFlag 0
                set RISATLeaderFile ""; set RISATMode ""; set RISATProductFile ""
                set RISATSceneID ""; set RISATResRg ""; set RISATResAz ""; set RISATPixAz ""; set RISATPixRg ""
                set RISATImgFormat ""; set RISATProcLevel ""; set RISATincang ""; set RISATImgMode ""; set RISATGridFile  ""
                set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
                $widget(Label449_10) configure -state disable; $widget(Entry449_10) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_11) configure -state disable; $widget(Entry449_11) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_17) configure -state disable; $widget(Entry449_17) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_18) configure -state disable; $widget(Entry449_18) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_19) configure -state disable; $widget(Entry449_19) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_20) configure -state disable; $widget(Entry449_20) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_21) configure -state disable; $widget(Entry449_21) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_22) configure -state disable; $widget(Entry449_22) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_23) configure -state disable; $widget(Entry449_23) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_24) configure -state disable; $widget(Entry449_24) configure -disabledbackground $PSPBackgroundColor
                $widget(TitleFrame449_1) configure -state disable; $widget(TitleFrame449_2) configure -state disable; $widget(TitleFrame449_3) configure -state disable
                $widget(Entry449_12) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_13) configure -state disable; $widget(Entry449_13) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_14) configure -state disable; $widget(Entry449_14) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_15) configure -state disable; $widget(Entry449_15) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_16) configure -state disable; $widget(Entry449_16) configure -disabledbackground $PSPBackgroundColor
                $widget(Entry449_20) configure -disabledbackground $PSPBackgroundColor
                $widget(Entry449_25) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_1) configure -state disable; $widget(Entry449_1) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_2) configure -state disable; $widget(Entry449_2) configure -disabledbackground $PSPBackgroundColor
                $widget(Button449_10) configure -state disable; $widget(Button449_20) configure -state disable
                WidgetShow $widget(Toplevel449); TextEditorRunTrace "Open Window RISAT Input File" "b"
                }
            } else {
            set VarError ""
            set ErrorMessage "THE RISAT BAND-META.txt FILE DOES NOT EXIST"
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        }    
    if {$ActiveProgram == "SENTINEL1"} {
        # NO QUAD-POL DATA FORMAT
        }
    if {$ActiveProgram == "TERRASARX"} {
        if {$Load_TERRASARX_Input_File == 0} {
            source "GUI/data_import/TERRASARX_Input_File.tcl"
            set Load_TERRASARX_Input_File 1
            WmTransient $widget(Toplevel221) $PSPTopLevel
            }
        set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
        set TERRASARXProductFile ""; set PolarType ""
        set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button221_5) configure -state disable;
        $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
        $widget(TitleFrame221_1) configure -text " "
        $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
        $widget(TitleFrame221_2) configure -text " "
        $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
        $widget(TitleFrame221_3) configure -text " "
        $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
        $widget(TitleFrame221_4) configure -text " "
        $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
        WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
        }
    if {$ActiveProgram == "SIRC"} {
        if {$Load_SIRC_Input_File == 0} {
            source "GUI/data_import/SIRC_Input_File.tcl"
            set Load_SIRC_Input_File 1
            WmTransient $widget(Toplevel222) $PSPTopLevel
            }
        set SIRCDirInput $DataDir; set SIRCDirOutput $DataDir; set SIRCFileInputFlag 0
        set SIRCRunNumber "?????"; set SIRCDataFormat ""; set SIRCDataFormatPol "quad"
        set SIRCFileType ""; set SIRCPolMode ""; set SIRCFormat ""
        $widget(Menubutton222_1) configure -state disable; $widget(Button222_10) configure -state disable
        WidgetShow $widget(Toplevel222); TextEditorRunTrace "Open Window SIRC Input File" "b"
        }
    if {$ActiveProgram == "AIRSAR"} {
        if {$Load_AIRSAR_Input_File == 0} {
            source "GUI/data_import/AIRSAR_Input_File.tcl"
            set Load_AIRSAR_Input_File 1
            WmTransient $widget(Toplevel223) $PSPTopLevel
            }
        set AIRSARDirInput $DataDir; set AIRSARDirOutput $DataDir; set AIRSARFileInputFlag 0
        set AirsarHeader 1; set AIRSARDataFormat ""; set AIRSARProcessor ""
        set FileInputSTK1 ""; set FileInputSTK2 ""; set FileInputSTK3 ""
        set FileInputSTK4 ""; set FileInputSTK5 ""; set FileInputSTK ""
        $widget(Menubutton223_1) configure -state disable; $widget(Button223_9) configure -state disable; $widget(Button223_10) configure -state disable
        $widget(TitleFrame223_2) configure -state disable; $widget(Radiobutton223_1) configure -state disable; $widget(Radiobutton223_2) configure -state disable        
        $widget(TitleFrame223_3) configure -state disable; $widget(TitleFrame223_3) configure -text ""
        $widget(Entry223_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_3) configure -state disable 
        $widget(TitleFrame223_4) configure -state disable; $widget(TitleFrame223_4) configure -text ""
        $widget(Entry223_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_4) configure -state disable 
        $widget(TitleFrame223_5) configure -state disable; $widget(TitleFrame223_5) configure -text ""
        $widget(Entry223_5) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_5) configure -state disable 
        $widget(TitleFrame223_6) configure -state disable; $widget(TitleFrame223_6) configure -text ""
        $widget(Entry223_6) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_6) configure -state disable 
        $widget(TitleFrame223_7) configure -state disable; $widget(TitleFrame223_7) configure -text ""
        $widget(Entry223_7) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_7) configure -state disable 
        $widget(TitleFrame223_8) configure -state disable; $widget(TitleFrame223_8) configure -text ""
        $widget(Entry223_8) configure -disabledbackground $PSPBackgroundColor; $widget(Button223_8) configure -state disable 
        $widget(Label223_1) configure -state disable; $widget(Entry223_1) configure -state disable
        $widget(Label223_2) configure -state disable; $widget(Entry223_2) configure -state disable
        $widget(Checkbutton223_1) configure -state disable 
        WidgetShow $widget(Toplevel223); TextEditorRunTrace "Open Window AIRSAR Input File" "b"
        }
    if {$ActiveProgram == "CONVAIR"} {
        if {$Load_CONVAIR_Input_File == 0} {
            source "GUI/data_import/CONVAIR_Input_File.tcl"
            set Load_CONVAIR_Input_File 1
            WmTransient $widget(Toplevel224) $PSPTopLevel
            }
        set CONVAIRDirInput $DataDir; set CONVAIRDirOutput $DataDir; set CONVAIRFileInputFlag 0
        set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""
        set NligFullSize "?"; set NcolFullSize "?"
        WidgetShow $widget(Toplevel224); TextEditorRunTrace "Open Window CONVAIR Input File" "b"
        }
    if {$ActiveProgram == "EMISAR"} {
        if {$Load_EMISAR_Input_File == 0} {
            source "GUI/data_import/EMISAR_Input_File.tcl"
            set Load_EMISAR_Input_File 1
            WmTransient $widget(Toplevel225) $PSPTopLevel
            }
        set EMISARDirInput $DataDir; set EMISARDirOutput $DataDir; set EMISARFileInputFlag 0
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; set FileInput5 ""; set FileInput6 ""
        set NligFullSize "?"; set NcolFullSize "?"; set EMISARDataFormat ""; set EMISARFormatS2 0; set EMISARFormatC3 0
        $widget(Entry225_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_1) configure -state disable; $widget(TitleFrame225_1) configure -text ""
        $widget(Entry225_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_2) configure -state disable; $widget(TitleFrame225_2) configure -text ""
        $widget(Entry225_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_3) configure -state disable; $widget(TitleFrame225_3) configure -text ""
        $widget(Entry225_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_4) configure -state disable; $widget(TitleFrame225_4) configure -text ""
        $widget(Entry225_5) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_5) configure -state disable; $widget(TitleFrame225_5) configure -text ""
        $widget(Entry225_6) configure -disabledbackground $PSPBackgroundColor; $widget(Button225_6) configure -state disable; $widget(TitleFrame225_6) configure -text ""
        WidgetShow $widget(Toplevel225); TextEditorRunTrace "Open Window EMISAR Input File" "b"
        }
    if {$ActiveProgram == "ESAR"} {
        if {$Load_ESAR_Input_File == 0} {
            source "GUI/data_import/ESAR_Input_File.tcl"
            set Load_ESAR_Input_File 1
            WmTransient $widget(Toplevel226) $PSPTopLevel
            }
        set ESARDirInput $DataDir; set ESARDirOutput $DataDir; set ESARFileInputFlag 0; set ESARDataFormat "RGI"
        set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""; set EsarHeader 1
        $widget(Label226_1) configure -state disable; $widget(Entry226_1) configure -state disable
        $widget(Label226_2) configure -state disable; $widget(Entry226_2) configure -state disable
        WidgetShow $widget(Toplevel226); TextEditorRunTrace "Open Window ESAR Input File" "b"
        }
    if {$ActiveProgram == "FSAR"} {
        if {$Load_FSAR_Input_File == 0} {
            source "GUI/data_import/FSAR_Input_File.tcl"
            set Load_FSAR_Input_File 1
            WmTransient $widget(Toplevel431) $PSPTopLevel
            }
        set FSARDirInput $DataDir; set FSARDirOutput $DataDir; set FSARFileInputFlag 0; set FSARDataFormat "quad"
        set FSARProductFileHH ""; set FSARProductFileHV ""; set FSARProductFileVH ""; set FSARProductFileVV "";
        set FSARFreq ""; set FSARCalib ""; set FSARResolRg ""; set FSARResolAz ""; set FSARPixRg ""; set FSARPixAz ""
        set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""; set FsarHeader ""; set FSARRGIDir ""
        set FSARMaskFile ""; set FSARIncAngFile ""
        $widget(TitleFrame431_01) configure -state disable
        $widget(Entry431_01) configure -disabledbackground $PSPBackgroundColor
        $widget(Button431_01) configure -state disable;
        $widget(TitleFrame431_02) configure -state disable
        $widget(Entry431_02) configure -disabledbackground $PSPBackgroundColor
        $widget(Button431_02) configure -state disable;
        $widget(TitleFrame431_03) configure -state disable
        $widget(Entry431_03) configure -disabledbackground $PSPBackgroundColor
        $widget(Button431_03) configure -state disable;
        $widget(TitleFrame431_04) configure -state disable
        $widget(Entry431_04) configure -disabledbackground $PSPBackgroundColor
        $widget(Button431_04) configure -state disable;
        $widget(Button431_00) configure -state disable; $widget(Button431_7) configure -state disable; $widget(Button431_8) configure -state disable; $widget(Button431_9) configure -state disable
        $widget(Label431_001) configure -state disable; $widget(Entry431_001) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_002) configure -state disable; $widget(Entry431_002) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_003) configure -state disable; $widget(Entry431_003) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_004) configure -state disable; $widget(Entry431_004) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_005) configure -state disable; $widget(Entry431_005) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_006) configure -state disable; $widget(Entry431_006) configure -disabledbackground $PSPBackgroundColor
        $widget(TitleFrame431_5) configure -state disable; $widget(Entry431_5) configure -disabledbackground $PSPBackgroundColor
        $widget(TitleFrame431_6) configure -state disable; $widget(Entry431_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_1) configure -state disable; $widget(Entry431_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Label431_2) configure -state disable; $widget(Entry431_8) configure -disabledbackground $PSPBackgroundColor
        WidgetShow $widget(Toplevel431); TextEditorRunTrace "Open Window FSAR Input File" "b"
        }
    if {$ActiveProgram == "PISAR"} {
        if {$Load_PISAR_Input_File == 0} {
            source "GUI/data_import/PISAR_Input_File.tcl"
            set Load_PISAR_Input_File 1
            WmTransient $widget(Toplevel227) $PSPTopLevel
            }
        set PISARDirInput $DataDir; set PISARDirOutput $DataDir; set PISARFileInputFlag 0
        set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""; set FileInputPISAR ""
        set PISARDataFormat ""; set PISAR_MGPC 0; set PISAR_MGPSSC 0; set PISAROffset 0
        $widget(Entry227_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_1) configure -state disable
        $widget(Entry227_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_2) configure -state disable
        $widget(Entry227_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_3) configure -state disable
        $widget(Entry227_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_4) configure -state disable
        $widget(Entry227_5) configure -disabledbackground $PSPBackgroundColor; $widget(Button227_5) configure -state disable
        WidgetShow $widget(Toplevel227); TextEditorRunTrace "Open Window PISAR Input File" "b"
        }
    if {$ActiveProgram == "SETHI"} {
        if {$Load_SETHI_Input_File == 0} {
            source "GUI/data_import/SETHI_Input_File.tcl"
            set Load_SETHI_Input_File 1
            WmTransient $widget(Toplevel228) $PSPTopLevel
            }
        set SETHIDirInput $DataDir; set SETHIDirOutput $DataDir; set SETHIFileInputFlag 0
        set FileInputHH ""; set FileInputHV ""; set FileInputVH ""; set FileInputVV ""
        set NligFullSize "?"; set NcolFullSize "?"; set FileHeaderSethi ""
        $widget(TitleFrame228_1) configure -state disable;
        $widget(Entry228_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_1) configure -state disable
        $widget(TitleFrame228_2) configure -state disable;
        $widget(Entry228_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_2) configure -state disable
        $widget(TitleFrame228_3) configure -state disable;
        $widget(Entry228_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_3) configure -state disable
        $widget(TitleFrame228_4) configure -state disable;
        $widget(Entry228_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button228_4) configure -state disable
        $widget(Button228_10) configure -state disable
        WidgetShow $widget(Toplevel228); TextEditorRunTrace "Open Window SETHI Input File" "b"
        }       
    if {$ActiveProgram == "UAVSAR"} {
        if {$Load_UAVSAR_Input_File == 0} {
            source "GUI/data_import/UAVSAR_Input_File.tcl"
            set Load_UAVSAR_Input_File 1
            WmTransient $widget(Toplevel386) $PSPTopLevel
            }
        set UAVSARDirInput $DataDir; set UAVSARDirOutput $DataDir;
        set UAVSARDataFormat ""; set UAVSARAnnotationFile ""; set UAVSARFileInputFlag 0
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; set FileInput5 ""; set FileInput6 ""
        $widget(TitleFrame386_3) configure -state disable; $widget(TitleFrame386_3) configure -text ""
        $widget(Entry386_3) configure -disabledbackground $PSPBackgroundColor
        $widget(Button386_3) configure -state disable 
        $widget(TitleFrame386_4) configure -state disable; $widget(TitleFrame386_4) configure -text ""
        $widget(Entry386_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Button386_4) configure -state disable 
        $widget(TitleFrame386_5) configure -state disable; $widget(TitleFrame386_5) configure -text ""
        $widget(Entry386_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Button386_5) configure -state disable 
        $widget(TitleFrame386_6) configure -state disable; $widget(TitleFrame386_6) configure -text ""
        $widget(Entry386_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Button386_6) configure -state disable 
        $widget(TitleFrame386_7) configure -state disable; $widget(TitleFrame386_7) configure -text ""
        $widget(Entry386_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Button386_7) configure -state disable 
        $widget(TitleFrame386_8) configure -state disable; $widget(TitleFrame386_8) configure -text ""
        $widget(Entry386_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Button386_8) configure -state disable 

        $widget(Button386_1) configure -state disable 
        $widget(Button386_2) configure -state disable 
        $widget(Button386_10) configure -state disable
        WidgetShow $widget(Toplevel386); TextEditorRunTrace "Open Window UAVSAR Input File" "b"
        }

    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Input Data File} 
    $site_4_0.men98.m add separator \
        
    $site_4_0.men98.m add command \
        \
        -command {global ActiveProgram VarError ErrorMessage PSPViewGimpBMP
global EOSIDataDirInput EOSIFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration 
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput 
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCDataFormat 
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag AirsarHeader AIRSARDataFormat AIRSARProcessor
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag EMISARDataFormat
global ESARDirInput ESARDirOutput ESARFileInputFlag EsarHeader ESARDataFormat
global FSARDirInput FSARDirOutput FSARFileInputFlag FsarHeader FSARDataFormat
global FSARMaskFile FSARIncAngFile
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat PISAR_MGPC PISAR_MGPSSC PISAROffset
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag 
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag UAVSARDataFormat UAVSARAnnotationFile
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV FileInputPISAR FileInputSIRC
global FileInputSTK FileInputSTK1 FileInputSTK2 FileInputSTK3
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6 FileInput7 FileInput8
global FileInput9 FileInput10 FileInput11 FileInput12 FileInput13 FileInput14 FileInput15 FileInput16
global AlosQuickLook Radarsat2QuickLook TerrasarxQuickLook SircQuickLook CSKQuickLook RisatQuickLook Sentinel1QuickLook 
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput
global SourceWidth SourceHeight WidthBMP HeightBMP WidthBMPQL HeightBMPQL
global ImageSource BMPDirInput BMPImage
global BMPWidth BMPHeight ZoomBMP BMPView BMPCanvas
global BMPViewFileInput BMPDropperFlag BMPMouseX BMPMouseY BMPChange ColorNumber
global QLBMPImageOpen QLZoomBMP QLZoom PVShortcut
global TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat TMPQuickLookSentinel1
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC
global TMPQuickLookSethi TMPQuickLookUavsar TMPQuickLookDir
global TMPAirsarConfig TMPEsarConfig TMPFsarConfig TMPPisarConfig TMPTopsarConfig TMPSIRCConfig TMPALOSConfig TMPRISATConfig
global TMPRadarsat2Config TMPTerrasarxConfig TMPUavsarConfig TMPSentinel1Config
global MultiLookSubSamp PSPMemory TMPMemoryAllocError

set EOSIFileInputFlag 0
if {$ActiveProgram == "RAWBINARYDATA"} {
    if {$RawBinaryFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "AIRSAR"} {
    if {$AIRSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CONVAIR"} {
    if {$CONVAIRFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "EMISAR"} {
    if {$EMISARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ESAR"} {
    if {$ESARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "FSAR"} {
    if {$FSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "PISAR"} {
    if {$PISARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SETHI"} {
    if {$SETHIFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "UAVSAR"} {
    if {$UAVSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    #BMP PROCESS
    global Load_Save Load_ViewBMPQL PSPTopLevel
 
    if {$PVShortcut == 1} {
        set PVShortcut 0
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }
    if {$Load_ViewBMPQL == 0} {
        source "GUI/bmp_process/ViewBMPQL.tcl"
        set Load_ViewBMPQL 1
        $widget(CANVASBMPQL) configure -cursor arrow
        WmTransient $widget(Toplevel207) $PSPTopLevel
        }

    set WidthBMPQL $WidthBMP
    set HeightBMPQL [expr $HeightBMP - 50]

    set NligFullSize $NligFullSizeInput
    set NcolFullSize $NcolFullSizeInput
    set SourceWidth $NcolFullSizeInput
    set SourceHeight $NligFullSizeInput
    set subsample 0
    if {$SourceWidth > $WidthBMPQL} {set subsample 1}
    if {$SourceHeight > $HeightBMPQL} {set subsample 1}
    set BMPSample 1
    if {$subsample == 0} {
        set ZoomBMP "1:$BMPSample"
        set BMPWidth $SourceWidth
        set BMPHeight $SourceHeight
        } else {
        if {$SourceWidth >= $SourceHeight} {
            while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
            } else {
            while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
            } 
        set ZoomBMP "1:$BMPSample"
        set BMPWidth [expr round($SourceWidth / $BMPSample)]
        set BMPHeight [expr round($SourceHeight / $BMPSample)]
        } 
    set QLZoomBMP $ZoomBMP    
    set QLZoom $BMPSample
   
    set MultiLookSubSamp " -ssr 1 -ssc 1 -nlr $BMPSample -nlc $BMPSample "
    append MultiLookSubSamp "-mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 "

    DeleteMatrixT $TMPQuickLookDir
    DeleteMatrixC $TMPQuickLookDir
    DeleteMatrixS $TMPQuickLookDir
    DeleteMatrixI $TMPQuickLookDir

    if {$ActiveProgram == "ALOS"} {
        set BMPViewFileInput $TMPQuickLookAlos
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ALOSDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ALOSDataFormat == "quad1.1"} {
            set ALOSFonction "Soft/data_import/alos_convert_11.exe"
            if {$ALOSUnCalibration == 1} { set ALOSFonction "Soft/data_import/alos_convert_11_uncal.exe" }
            TextEditorRunTrace "Process The Function $ALOSFonction" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| $ALOSFonction -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "quad1.1vex"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_vex_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_vex_convert.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ALOS

    if {$ActiveProgram == "ALOS2"} {
        set BMPViewFileInput $TMPQuickLookAlos
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ALOSDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ALOSDataFormat == "quad1.1"} {
            set ALOSFonction "Soft/data_import/alos_convert_11.exe"
            TextEditorRunTrace "Process The Function $ALOSFonction" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| $ALOSFonction -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ALOS2

    if {$ActiveProgram == "RADARSAT2"} {
        set BMPViewFileInput $TMPQuickLookRadarsat2
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RADARSAT2DirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$RADARSAT2DataFormat == "quad"} {
            TextEditorRunTrace "Process The Function Soft/data_import/radarsat2_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/radarsat2_convert.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RADARSAT2

    if {$ActiveProgram == "RISAT"} {
        set BMPViewFileInput $TMPQuickLookRISAT
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RISATDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/RISAT_convert_11.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPRISATConfig\x22 $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/RISAT_convert_11.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPRISATConfig\x22 $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RISAT

    if {$ActiveProgram == "SENTINEL1"} {
        # NO QUAD-POL DATA FORMAT
        }
        #End SENTINEL1

    if {$ActiveProgram == "TERRASARX"} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        DeleteFile $BMPViewFileInput
        set BMPDirInput $TERRASARXDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$TERRASARXDataFormat == "quad"} {
            if {$TERRASARXDataLevel == "SSC"} {
                TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_ssc_quad.exe" "k"
                TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPTerrasarxConfig\x22 $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/terrasarx_convert_ssc_quad.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPTerrasarxConfig\x22 $MultiLookSubSamp" r]
                }
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End TERRASAR X

    if {$ActiveProgram == "SIRC"} {
        set BMPViewFileInput $TMPQuickLookSirc
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SIRCDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$SIRCDataFormat == "SLCquad"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert_SLC.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert_SLC.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        if {$SIRCDataFormat == "MLCquad"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SIR C

    if {$ActiveProgram == "AIRSAR"} {
        set BMPViewFileInput $TMPQuickLookAirsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $AIRSARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$AIRSARDataFormat == "SLC"} {
            if {$AIRSARProcessor == "old"} {
                TextEditorRunTrace "Process The Function Soft/data_import/airsar_convert_SLC.exe" "k"
                TextEditorRunTrace "Arguments: -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/airsar_convert_SLC.exe -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" r]
                }
            if {$AIRSARProcessor == "new"} {
                TextEditorRunTrace "Process The Function Soft/data_import/airsar_convert_V6_SLC.exe" "k"
                TextEditorRunTrace "Arguments: -if1 \x22$FileInputSTK\x22 -if2 \x22$FileInputSTK1\x22 -if3 \x22$FileInputSTK2\x22 -if4 \x22$FileInputSTK3\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 -iee $IEEEFormat -sym 1 $MultiLookSubSamp" "k"
                set f [ open "| Soft/data_import/airsar_convert_V6_SLC.exe -if1 \x22$FileInputSTK\x22 -if2 \x22$FileInputSTK1\x22 -if3 \x22$FileInputSTK2\x22 -if4 \x22$FileInputSTK3\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 -iee $IEEEFormat -sym 1 $MultiLookSubSamp" r]
                }
            }
        if {$AIRSARDataFormat == "MLC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/airsar_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/airsar_convert.exe -if \x22$FileInputSTK\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPAirsarConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End AIRSAR

    if {$ActiveProgram == "CONVAIR"} {
        set BMPViewFileInput $TMPQuickLookConvair
        DeleteFile $BMPViewFileInput
        set BMPDirInput $CONVAIRDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/convair_convert.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/convair_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End CONVAIR

    if {$ActiveProgram == "EMISAR"} {
        set BMPViewFileInput $TMPQuickLookEmisar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $EMISARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$EMISARDataFormat == "S2"} {
            TextEditorRunTrace "Process The Function Soft/data_import/emisar_convert_SLC.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/emisar_convert_SLC.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" r]
            }
        if {$EMISARDataFormat == "C3"} {
            TextEditorRunTrace "Process The Function Soft/data_import/emisar_convert_MLK.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/emisar_convert_MLK.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End EMISAR

    if {$ActiveProgram == "ESAR"} {
        set BMPViewFileInput $TMPQuickLookEsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ESARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ESARDataFormat == "RGI"} {
            TextEditorRunTrace "Process The Function Soft/data_import/esar_convert.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -hdr $EsarHeader $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/esar_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -hdr $EsarHeader $MultiLookSubSamp" r]
            }
        if {$ESARDataFormat == "GTC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/esar_convert_gtc.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -hdr $EsarHeader $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/esar_convert_gtc.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -hdr $EsarHeader $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ESAR

    if {$ActiveProgram == "FSAR"} {
        set BMPViewFileInput $TMPQuickLookFsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $FSARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/fsar_convert.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -msk \x22$FSARMaskFile\x22 -inc \x22$FSARIncAngFile\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -hdr $FsarHeader $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/fsar_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -msk \x22$FSARMaskFile\x22 -inc \x22$FSARIncAngFile\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 -hdr $FsarHeader $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ESAR

    if {$ActiveProgram == "PISAR"} {
        if {$PISARDataFormat == "MGPC"} { set BMPViewFileInput $TMPQuickLookPisarMGPC}
        if {$PISARDataFormat == "MGPSSC"} { set BMPViewFileInput $TMPQuickLookPisarMGPSSC}
        DeleteFile $BMPViewFileInput
        set BMPDirInput $PISARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$PISARDataFormat == "MGPC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/pisar_convert_MGPC.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputPISAR\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/pisar_convert_MGPC.exe -if \x22$FileInputPISAR\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" r]
            }
        if {$PISARDataFormat == "MGPSSC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/pisar_convert_MGPSSC.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -off $PISAROffset $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/pisar_convert_MGPSSC.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 -off $PISAROffset $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End PISAR

    if {$ActiveProgram == "SETHI"} {
        set BMPViewFileInput $TMPQuickLookSethi
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SETHIDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/sethi_convert.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/sethi_convert.exe -if1 \x22$FileInputHH\x22 -if2 \x22$FileInputHV\x22 -if3 \x22$FileInputVH\x22 -if4 \x22$FileInputVV\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -sym 1 $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SETHI

    if {$ActiveProgram == "UAVSAR"} {
        set BMPViewFileInput $TMPQuickLookUavsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $UAVSARDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$UAVSARDataFormat == "SLC"} {
            TextEditorRunTrace "Process The Function Soft/data_import/uavsar_convert_SLC.exe" "k"
            TextEditorRunTrace "Arguments: -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/uavsar_convert_SLC.exe -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym 1 $MultiLookSubSamp" r]
            } else {
            TextEditorRunTrace "Process The Function Soft/data_import/uavsar_convert_MLC.exe" "k"
            TextEditorRunTrace "Arguments: -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -inr $NligFullSize -inc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/uavsar_convert_MLC.exe -hf \x22$UAVSARAnnotationFile\x22 -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -if5 \x22$FileInput5\x22 -if6 \x22$FileInput6\x22 -od \x22$TMPQuickLookDir\x22 -odf T3 -inr $NligFullSize -inc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End UAVSAR

#######################################################################################
    #Create Pauli BMP Image

    set ConfigFile "$TMPQuickLookDir/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {

        EnviWriteConfigT $TMPQuickLookDir $NligFullSize $NcolFullSize
        set MaskCmd ""
        set MaskFile "$TMPQuickLookDir/mask_valid_pixels.bin"
        if [file exists $MaskFile] { set MaskCmd "-mask \x22$MaskFile\x22" }

        set RGBDirInput $TMPQuickLookDir
        set EOSI_RGB "ALL"
        if {$EOSI_RGB == "ALL"} {
            set config "true"
            set fichier "$RGBDirInput/T11.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE T11.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/T22.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE T22.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/T33.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE T33.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_pauli_rgb_file.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf T3 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_pauli_rgb_file.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf T3 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                }
            }
        }

#######################################################################################
    #Display Window and show image
    if [file exists $BMPViewFileInput] {
        if {$ActiveProgram == "ALOS"} {set AlosQuickLook 1}
        if {$ActiveProgram == "ALOS2"} {set AlosQuickLook 1}
        if {$ActiveProgram == "CSK"} {set CSKQuickLook 1}
        if {$ActiveProgram == "RADARSAT2"} {set Radarsat2QuickLook 1}
        if {$ActiveProgram == "RISAT"} {set RisatQuickLook 1}
        if {$ActiveProgram == "SENTINEL1"} {set Sentinel1QuickLook 1}
        if {$ActiveProgram == "TERRASARX"} {set TerrasarxQuickLook 1}
        if {$ActiveProgram == "SIRC"} {set SircQuickLook 1}
        if {$ActiveProgram == "AIRSAR"} {set AirsarQuickLook 1}
        if {$ActiveProgram == "CONVAIR"} {set ConvairQuickLook 1}
        if {$ActiveProgram == "EMISAR"} {set EmisarQuickLook 1}
        if {$ActiveProgram == "ESAR"} {set EsarQuickLook 1}
        if {$ActiveProgram == "FSAR"} {set FsarQuickLook 1}
        if {$ActiveProgram == "PISAR"} {set PisarQuickLook 1}
        if {$ActiveProgram == "SETHI"} {set SethiQuickLook 1}
        if {$ActiveProgram == "UAVSAR"} {set UavsarQuickLook 1}

        set WidthBMPQL $WidthBMP
        set HeightBMPQL [expr $HeightBMP - 50]

        image create photo BMPImage
        image create photo ImageSource -file $BMPViewFileInput
        set SourceWidth [image width ImageSource]
        set SourceHeight [image height ImageSource]

        set subsample 0
        if {$SourceWidth > $WidthBMPQL} {set subsample 1}
        if {$SourceHeight > $HeightBMPQL} {set subsample 1}

        set BMPSample 1
        if {$subsample == 0} {
            set BMPWidth $SourceWidth
            set BMPHeight $SourceHeight
            } else {
            if {$SourceWidth >= $SourceHeight} {
                while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
                } else {
                while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
                } 
            set BMPWidth [expr round($SourceWidth / $BMPSample)]
            set BMPHeight [expr round($SourceHeight / $BMPSample)]
            } 
        set QLBMPImageOpen "1"
        set BMPDropperFlag "0"
        set BMPChange "0"
        set ColorNumber "BMP 24 Bits"
        set BMPMouseX ""
        set BMPMouseY ""
        if {$Load_ViewBMPQL == 1} {Window hide $widget(VIEWBMPQL)}
        BMPImage blank
        BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample

        $widget(CANVASBMPQL) configure -width $BMPWidth -height $BMPHeight
        $widget(CANVASBMPQL) create image 0 0 -anchor nw -image BMPImage
        wm title $widget(VIEWBMPQL) [file tail $BMPViewFileInput]

        set x [winfo x $widget(VIEWBMPQL)]
        set y [winfo y $widget(VIEWBMPQL)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget(VIEWBMPQL) $geometrie; update
        WidgetGeometryLeft $widget(VIEWBMPQL)
        catch {wm geometry $widget(VIEWBMPQL) {}} 
        Window show $widget(VIEWBMPQL); TextEditorRunTrace "Open Window View BMP Quick Look" "b"        
        } else {
        if {$ActiveProgram == "ALOS"} {set AlosQuickLook 0}
        if {$ActiveProgram == "ALOS2"} {set AlosQuickLook 0}
        if {$ActiveProgram == "CSK"} {set CSKQuickLook 0}
        if {$ActiveProgram == "RADARSAT2"} {set Radarsat2QuickLook 0}
        if {$ActiveProgram == "RISAT"} {set RisatQuickLook 0}
        if {$ActiveProgram == "SENTINEL1"} {set Sentinel1QuickLook 0}
        if {$ActiveProgram == "TERRASARX"} {set TerrasarxQuickLook 0}
        if {$ActiveProgram == "SIRC"} {set SircQuickLook 0}
        if {$ActiveProgram == "AIRSAR"} {set AirsarQuickLook 0}
        if {$ActiveProgram == "CONVAIR"} {set ConvairQuickLook 0}
        if {$ActiveProgram == "EMISAR"} {set EmisarQuickLook 0}
        if {$ActiveProgram == "ESAR"} {set EsarQuickLook 0}
        if {$ActiveProgram == "FSAR"} {set FsarQuickLook 0}
        if {$ActiveProgram == "PISAR"} {set PisarQuickLook 0}
        if {$ActiveProgram == "SETHI"} {set SethiQuickLook 0}
        if {$ActiveProgram == "UAVSAR"} {set UavsarQuickLook 0}
        set ErrorMessage "QUICKLOOK IMAGE NOT CREATED"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }} \
        -label {Quick Look} 
    $site_4_0.men98.m add separator \
        
    $site_4_0.men98.m add cascade \
        -menu "$site_4_0.men98.m.men71" -command {} -label Extract 
    set site_6_0 $site_4_0.men98.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global EOSIFileInputFlag EOSIDirInput EOSIOutputDir EOSIOutputSubDir EOSIExtractFonction ImageEOSIExtractMenu
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag AIRSARProcessor TOPSAROutputFormat
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag
global ESARDirInput ESARDirOutput ESARFileInputFlag
global FSARDirInput FSARDirOutput FSARFileInputFlag
global PISARDirInput PISARDirOutput PISARFileInputFlag
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag
global FileInputSTK1 FileInputSTK2 FileInputSTK3 FileInputSTK4 FileInputSTK5
global FlagFileInputSTK1 FlagFileInputSTK2 FlagFileInputSTK3 FlagFileInputSTK4 FlagFileInputSTK5
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global MultiLookRow MultiLookCol SubSampRow SubSampCol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
#DATA IMPORT
global Load_EOSI_Extract_Data Load_TOPSAR_Extract_Data PSPTopLevel

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "AIRSAR"} {
    if {$AIRSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CONVAIR"} {
    if {$CONVAIRFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "EMISAR"} {
    if {$EMISARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ESAR"} {
    if {$ESARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "FSAR"} {
    if {$FSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "PISAR"} {
    if {$PISARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SETHI"} {
    if {$SETHIFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "UAVSAR"} {
    if {$UAVSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    set LoadTopsar "false"
    if {$ActiveProgram == "AIRSAR"} {
        if {$AIRSARProcessor == "TOPSAR"} {set LoadTopsar "true"}
        }
    if {$LoadTopsar == "false"} {  
        if {$Load_EOSI_Extract_Data == 0} {
            source "GUI/data_import/EOSI_Extract_Data.tcl"
            set Load_EOSI_Extract_Data 1
            WmTransient $widget(Toplevel229) $PSPTopLevel
            }
        } else {
        if {$Load_TOPSAR_Extract_Data == 0} {
            source "GUI/data_import/TOPSAR_Extract_Data.tcl"
            set Load_TOPSAR_Extract_Data 1
            WmTransient $widget(Toplevel251) $PSPTopLevel
            }
        }
    if {$ActiveProgram == "ALOS"} {set EOSIDirInput $ALOSDirInput; set EOSIOutputDir $ALOSDirOutput }
    if {$ActiveProgram == "ALOS2"} {set EOSIDirInput $ALOSDirInput; set EOSIOutputDir $ALOSDirOutput }
    if {$ActiveProgram == "CSK"} {set EOSIDirInput $CSKDirInput; set EOSIOutputDir $CSKDirOutput }
    if {$ActiveProgram == "RADARSAT2"} {set EOSIDirInput $RADARSAT2DirInput; set EOSIOutputDir $RADARSAT2DirOutput }
    if {$ActiveProgram == "RISAT"} {set EOSIDirInput $RISATDirInput; set EOSIOutputDir $RISATDirOutput }
    if {$ActiveProgram == "SENTINEL1"} {set EOSIDirInput $SENTINEL1DirInput; set EOSIOutputDir $SENTINEL1DirOutput }
    if {$ActiveProgram == "TERRASARX"} {set EOSIDirInput $TERRASARXDirInput; set EOSIOutputDir $TERRASARXDirOutput }
    if {$ActiveProgram == "SIRC"} {set EOSIDirInput $SIRCDirInput; set EOSIOutputDir $SIRCDirOutput }
    if {$ActiveProgram == "AIRSAR"} {set EOSIDirInput $AIRSARDirInput; set EOSIOutputDir $AIRSARDirOutput }
    if {$ActiveProgram == "CONVAIR"} {set EOSIDirInput $CONVAIRDirInput; set EOSIOutputDir $CONVAIRDirOutput }
    if {$ActiveProgram == "EMISAR"} {set EOSIDirInput $EMISARDirInput; set EOSIOutputDir $EMISARDirOutput }
    if {$ActiveProgram == "ESAR"} {set EOSIDirInput $ESARDirInput; set EOSIOutputDir $ESARDirOutput }
    if {$ActiveProgram == "FSAR"} {set EOSIDirInput $FSARDirInput; set EOSIOutputDir $FSARDirOutput }
    if {$ActiveProgram == "PISAR"} {set EOSIDirInput $PISARDirInput; set EOSIOutputDir $PISARDirOutput }
    if {$ActiveProgram == "SETHI"} {set EOSIDirInput $SETHIDirInput; set EOSIOutputDir $SETHIDirOutput }
    if {$ActiveProgram == "UAVSAR"} {set EOSIDirInput $UAVSARDirInput; set EOSIOutputDir $UAVSARDirOutput }
    set EOSIOutputSubDir "T3"
    set EOSIExtractFonction "Full"
    set MultiLookRow ""
    set MultiLookCol ""
    set SubSampRow ""
    set SubSampCol ""
    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize
    if {$LoadTopsar == "false"} {  
        $widget(Label229_1) configure -state disable; $widget(Label229_2) configure -state disable
        $widget(Label229_3) configure -state disable; $widget(Label229_4) configure -state disable
        $widget(Entry229_1) configure -state disable; $widget(Entry229_2) configure -state disable
        $widget(Entry229_3) configure -state disable; $widget(Entry229_4) configure -state disable
        package require Img
        image create photo ImageEOSIExtractMenu
        ImageEOSIExtractMenu blank
        $widget(CANVASEOSIEXTRACTMENU) create image 0 0 -anchor nw -image ImageEOSIExtractMenu
        image delete ImageEOSIExtractMenu
        if {$ActiveProgram == "ALOS"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/ALOS.gif"}
        if {$ActiveProgram == "ALOS2"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/ALOS2.gif"}
        if {$ActiveProgram == "CSK"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/CSK.gif"}
        if {$ActiveProgram == "RADARSAT2"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/RADARSAT2.gif"}
        if {$ActiveProgram == "RISAT"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/RISAT.gif"}
        if {$ActiveProgram == "TERRASARX"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/TERRASARX.gif"}
        if {$ActiveProgram == "SENTINEL1"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/SENTINEL1.gif"}
        if {$ActiveProgram == "SIRC"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/SIRC.gif"}
        if {$ActiveProgram == "AIRSAR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/AIRSAR.gif"}
        if {$ActiveProgram == "CONVAIR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/CONVAIR.gif"}
        if {$ActiveProgram == "EMISAR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/EMISAR.gif"}
        if {$ActiveProgram == "ESAR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/ESAR.gif"}
        if {$ActiveProgram == "FSAR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/FSAR.gif"}
        if {$ActiveProgram == "PISAR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/PISAR.gif"}
        if {$ActiveProgram == "SETHI"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/SETHI.gif"} 
        if {$ActiveProgram == "UAVSAR"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/UAVSAR.gif"}
        $widget(CANVASEOSIEXTRACTMENU) create image 0 0 -anchor nw -image ImageEOSIExtractMenu
        WidgetShow $widget(Toplevel229); TextEditorRunTrace "Open Window $ActiveProgram Extract Data" "b"
        wm title $widget(Toplevel229) [file tail "$ActiveProgram Extract Data"]
        } else {
        $widget(Label251_1) configure -state disable; $widget(Label251_2) configure -state disable
        $widget(Label251_3) configure -state disable; $widget(Label251_4) configure -state disable
        $widget(Entry251_1) configure -state disable; $widget(Entry251_2) configure -state disable
        $widget(Entry251_3) configure -state disable; $widget(Entry251_4) configure -state disable
        set FlagFileInputSTK1 "0"; set FlagFileInputSTK2 "0"; set FlagFileInputSTK3 "0"; set FlagFileInputSTK4 "0"; set FlagFileInputSTK5 "0"
        $widget(Checkbutton251_1) configure -state disable; $widget(Checkbutton251_2) configure -state disable; $widget(Checkbutton251_3) configure -state disable
        $widget(Checkbutton251_4) configure -state disable; $widget(Checkbutton251_5) configure -state disable
        $widget(Radiobutton251_1) configure -state normal; $widget(Radiobutton251_2) configure -state disable; set TOPSAROutputFormat "T3"
        if {$FileInputSTK1 != ""} { $widget(Checkbutton251_1) configure -state normal }
        if {$FileInputSTK2 != ""} { $widget(Checkbutton251_2) configure -state normal }
        if {$FileInputSTK3 != ""} { $widget(Checkbutton251_3) configure -state normal }
        if {$FileInputSTK4 != ""} { $widget(Checkbutton251_4) configure -state normal }
        if {$FileInputSTK5 != ""} { $widget(Checkbutton251_5) configure -state normal }
        WidgetShow $widget(Toplevel251); TextEditorRunTrace "Open Window TOPSAR Extract Data" "b"
        }
    }} \
        -label {Full Resolution} 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global EOSIDirInput EOSIFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag
global ESARDirInput ESARDirOutput ESARFileInputFlag
global FSARDirInput FSARDirOutput FSARFileInputFlag
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag
global AlosQuickLook Radarsat2QuickLook TerrasarxQuickLook SircQuickLook CSKQuickLook RisatQuickLook Sentinel1QuickLook 
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook

global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput

global QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol QLBMPMouseX QLBMPMouseY
global MouseActiveButton TrainingAreaTool

global QLBMPImageOpen QLZoomBMP QLZoom QLZoomBMP ZoomBMPQL

global DataDir FileName BMPChange BMPImageOpen BMPDirInput BMPViewFileInput SourceWidth SourceHeight 
global BMPWidth BMPHeight WidthBMP HeightBMP
global BMPImage BMPImageLens ImageSource BMPView BMPCanvas
global ColorNumber ColorNumberUtil ColorMapBMP RedPalette GreenPalette BluePalette
global BMPLensFlag RectLensCenter BMPWidthSource BMPHeightSource BMPSampleSource ZoomBMPSource
global BMPColorMapDisplay BMPColorMapGrayJetHsv BMPTrainingRect
global BMPMax BMPMin BMPValue BMPDropperFlag BMPSubAreaFlag
global TMPQuickLookRawbin TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat TMPQuickLookSentinel1
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC TMPQuickLookSethi TMPQuickLookUavsar
package require Img

#BMP PROCESS
global Load_Save Load_ViewBMPFile Load_ViewBMP1 Load_ViewBMPLens Load_Zoom
global Load_colormap256 Load_colormap32 Load_colormap16 Load_colormap8
global Load_Display Load_ColorMapGrayJetHsv

#DATA IMPORT
global Load_SubArea_GraphicEditor PSPTopLevel

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "AIRSAR"} {
    if {$AIRSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CONVAIR"} {
    if {$CONVAIRFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "EMISAR"} {
    if {$EMISARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ESAR"} {
    if {$ESARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "FSAR"} {
    if {$FSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "PISAR"} {
    if {$PISARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SETHI"} {
    if {$SETHIFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "UAVSAR"} {
    if {$UAVSARFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
   
############################################################################
if {$ActiveProgram == "ALOS"} {
    set QuickLookFlag 0
    if {$AlosQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAlos
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "ALOS2"} {
    set QuickLookFlag 0
    if {$AlosQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAlos
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "CSK"} {
    set QuickLookFlag 0
    if {$CSKQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookCSK
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "RADARSAT2"} {
    set QuickLookFlag 0
    if {$Radarsat2QuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRadarsat2
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "RISAT"} {
    set QuickLookFlag 0
    if {$RisatQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRisat
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "SENTINEL1"} {
    set QuickLookFlag 0
    if {$Sentinel1QuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSentinel1
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "TERRASARX"} {
    set QuickLookFlag 0
    if {$TerrasarxQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "SIRC"} {
    set QuickLookFlag 0
    if {$SircQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSirc
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "AIRSAR"} {
    set QuickLookFlag 0
    if {$AirsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAirsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "CONVAIR"} {
    set QuickLookFlag 0
    if {$ConvairQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookConvair
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "EMISAR"} {
    set QuickLookFlag 0
    if {$EmisarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookEmisar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "ESAR"} {
    set QuickLookFlag 0
    if {$EsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookEsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "FSAR"} {
    set QuickLookFlag 0
    if {$FsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookFsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "PISAR"} {
    set QuickLookFlag 0
    if {$PisarQuickLook == 1} {
        if {$PISARDataFormat == "MGPC"} { set BMPViewFileInput $TMPQuickLookPisarMGPC}
        if {$PISARDataFormat == "MGPSSC"} { set BMPViewFileInput $TMPQuickLookPisarMGPSSC}
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "SETHI"} {
    set QuickLookFlag 0
    if {$SethiQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSethi
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "UAVSAR"} {
    set QuickLookFlag 0
    if {$UavsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookUavsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }


if {$QuickLookFlag == 1} {
    if {$Load_SubArea_GraphicEditor == 0} {
        source "GUI/data_import/SubArea_GraphicEditor.tcl"
        set Load_SubArea_GraphicEditor 1
        WmTransient $widget(Toplevel202) $PSPTopLevel
        }
      
    if {$Load_ViewBMP1 == 0} {
        source "GUI/bmp_process/ViewBMP1.tcl"
        set Load_ViewBMP1 1
        WmTransient $widget(Toplevel51) $PSPTopLevel
        }
    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }

    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize

    if {$BMPImageOpen == 1} {
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    LoadPSPViewer
    load_bmp_caracteristics $BMPViewFileInput
    load_bmp_file $BMPViewFileInput    
 
    $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
    $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
    wm title $widget($BMPView) [file tail $BMPViewFileInput]

    set x [winfo x $widget($BMPView)]
    set y [winfo y $widget($BMPView)]
    set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
    append geometrie $x; append geometrie "+"; append geometrie $y
    wm geometry $widget($BMPView) $geometrie; update
    WidgetGeometryLeft $widget($BMPView)
    catch {wm geometry $widget($BMPView) {}} 
    Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"
    
    set BMPImageOpen "1"
    set QLMouseInitX ""
    set QLMouseInitY ""
    set QLMouseEndX ""
    set QLMouseEndY ""
    set QLMouseNlig ""
    set QLMouseNcol ""
    set QLBMPMouseX ""
    set QLBMPMouseY ""
    set BMPSubAreaFlag "1"
    set MouseActiveFunction ""
    set TrainingAreaTool "rect"
    set rect_color "white"
    set c0 .top202.fra69.cpd73
    $c0 configure -background $rect_color
    WidgetShowFromWidget $widget($BMPView) $widget(Toplevel202)
    TextEditorRunTrace "Open Window Sub Area Graphic Editor" "b"
    } else {
    set ErrorMessage "CREATE A QUICKLOOK IMAGE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set QuickLookSubAreaFlag 0
    }

############################################################################
}} \
        -label {Sub Area} 
    $site_4_0.men98.m add separator \
        
    $site_4_0.men98.m add command \
        \
        -command {global FileName DataDir ConfigFile VarError ErrorMessage PSPTopLevel
#UTIL
global Load_TextEdit
if {$Load_TextEdit == 0} {
    source "GUI/util/TextEdit.tcl"
    set Load_TextEdit 1
    WmTransient $widget(Toplevel95) $PSPTopLevel
    }

set ConfigFile "$DataDir/T3/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    TextEditorRunTrace "Open Window Text Editor" "b"
    TextEditor $ConfigFile
    } else {
    append ErrorMessage " - CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Edit Config File} 
    menubutton $site_4_0.men74 \
        -borderwidth 0 -menu "$site_4_0.men74.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men74" "IMPDPG" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men74 "$site_4_0.men74 Menubutton .top2.fra71.fra76 all _vTclBalloon"
    bind $site_4_0.men74 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Import Data}
    }
    menu $site_4_0.men74.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men74.m add command \
        \
        -command {global ActiveProgram DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TSXProduct TSXResolution TSXImaging TSXPolar
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ALOS_Input_File Load_TERRASARX_Input_File PSPTopLevel

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
    if {$ActiveProgram == "ALOS"} {
        if {$Load_ALOS_Input_File == 0} {
            source "GUI/data_import/ALOS_Input_File.tcl"
            set Load_ALOS_Input_File 1
            WmTransient $widget(Toplevel218) $PSPTopLevel
            }
        set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
        set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
        set ALOSDataLevel ""; set ALOSDataType ""
        $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
        $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
        $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
        $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
        $widget(Checkbutton218_1) configure -state disable
        $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
        $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
        WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
        }
    if {$ActiveProgram == "TERRASARX"} {
        if {$Load_TERRASARX_Input_File == 0} {
            source "GUI/data_import/TERRASARX_Input_File.tcl"
            set Load_TERRASARX_Input_File 1
            WmTransient $widget(Toplevel221) $PSPTopLevel
            }
        set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
        set TERRASARXProductFile ""; set PolarType ""
        set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button221_5) configure -state disable;
        $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
        $widget(TitleFrame221_1) configure -text " "
        $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
        $widget(TitleFrame221_2) configure -text " "
        $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
        $widget(TitleFrame221_3) configure -text " "
        $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
        $widget(TitleFrame221_4) configure -text " "
        $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Button221_6) configure -state disable; 
        WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
        }
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Input Data File} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add command \
        \
        -command {global ActiveProgram VarError ErrorMessage PSPViewGimpBMP
global EOSIDirInput EOSIFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration 
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel
global IEEEFormat FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6 
global AlosQuickLook TerrasarxQuickLook
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput
global SourceWidth SourceHeight WidthBMP HeightBMP WidthBMPQL HeightBMPQL
global ImageSource BMPDirInput BMPImage
global BMPWidth BMPHeight ZoomBMP BMPView BMPCanvas
global BMPViewFileInput BMPDropperFlag BMPMouseX BMPMouseY BMPChange ColorNumber
global QLBMPImageOpen QLZoomBMP QLZoom PVShortcut
global TMPQuickLookAlos TMPQuickLookTerrasarX TMPQuickLookDir
global TMPALOSConfig TMPTerrasarxConfig 
global MultiLookSubSamp PSPMemory TMPMemoryAllocError

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "ALOS2"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    #BMP PROCESS
    global Load_Save Load_ViewBMPQL PSPTopLevel
 
    if {$PVShortcut == 1} {
        set PVShortcut 0
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }
    if {$Load_ViewBMPQL == 0} {
        source "GUI/bmp_process/ViewBMPQL.tcl"
        set Load_ViewBMPQL 1
        $widget(CANVASBMPQL) configure -cursor arrow
        WmTransient $widget(Toplevel207) $PSPTopLevel
        }

    set WidthBMPQL $WidthBMP
    set HeightBMPQL [expr $HeightBMP - 50]

    set NligFullSize $NligFullSizeInput
    set NcolFullSize $NcolFullSizeInput
    set SourceWidth $NcolFullSizeInput
    set SourceHeight $NligFullSizeInput
    set subsample 0
    if {$SourceWidth > $WidthBMPQL} {set subsample 1}
    if {$SourceHeight > $HeightBMPQL} {set subsample 1}
    set BMPSample 1
    if {$subsample == 0} {
        set ZoomBMP "1:$BMPSample"
        set BMPWidth $SourceWidth
        set BMPHeight $SourceHeight
        } else {
        if {$SourceWidth >= $SourceHeight} {
            while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
            } else {
            while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
            } 
        set ZoomBMP "1:$BMPSample"
        set BMPWidth [expr round($SourceWidth / $BMPSample)]
        set BMPHeight [expr round($SourceHeight / $BMPSample)]
        } 
    set QLZoomBMP $ZoomBMP    
    set QLZoom $BMPSample
   
    set MultiLookSubSamp " -ssr 1 -ssc 1 -nlr $BMPSample -nlc $BMPSample "
    append MultiLookSubSamp "-mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 "

    DeleteMatrixT $TMPQuickLookDir
    DeleteMatrixC $TMPQuickLookDir
    DeleteMatrixS $TMPQuickLookDir
    DeleteMatrixI $TMPQuickLookDir

    if {$ActiveProgram == "ALOS"} {
        set BMPViewFileInput $TMPQuickLookAlos
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ALOSDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ALOSDataFormat == "dual1.5"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_convert_15_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_convert_15_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "quad1.5"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_convert_15.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_convert_15.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -if3 \x22$FileInput3\x22 -if4 \x22$FileInput4\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ALOS

    if {$ActiveProgram == "TERRASARX"} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        DeleteFile $BMPViewFileInput
        set BMPDirInput $TERRASARXDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$TERRASARXDataFormat == "dual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_mgd_gec_eec_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/terrasarx_convert_mgd_gec_eec_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End TERRASAR X

#######################################################################################
    #Create Pauli BMP Image

    set ConfigFile "$TMPQuickLookDir/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {

        EnviWriteConfigI $TMPQuickLookDir $NligFullSize $NcolFullSize
        set MaskCmd ""
        set MaskFile "$TMPQuickLookDir/mask_valid_pixels.bin"
        if [file exists $MaskFile] { set MaskCmd "-mask \x22$MaskFile\x22" }

        set EOSI_RGB "Dual_I"
        set RGBDirInput $TMPQuickLookDir
        if {$ActiveProgram == "ALOS"} {
            if {$ALOSDataFormat == "quad1.5"} { set EOSI_RGB "Quad_I" }
            }
        if {$ActiveProgram == "ALOS2"} {
            if {$ALOSDataFormat == "quad1.5"} { set EOSI_RGB "Quad_I" }
            }

        if {$EOSI_RGB == "Dual_I"} {
            set config "true"
            if {$PolarType == "pp5"} {
                set Channel1 "I11"
                set Channel2 "I21"
                }
            if {$PolarType == "pp6"} {
                set Channel1 "I12"
                set Channel2 "I22"
                }
           if {$PolarType == "pp7"} {
                set Channel1 "I11"
                set Channel2 "I22"
                }
            set fichier "$RGBDirInput/"; append fichier "$Channel1.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                }
            set fichier "$RGBDirInput/"; append fichier "$Channel2.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_rgb_file_SPPIPPC2.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_rgb_file_SPPIPPC2.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                } else {
                set VarError ""
                set ErrorMessage "THE FILES $Channel1 AND $Channel2 MUST BE CREATED FIRST"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            }

        if {$EOSI_RGB == "Quad_I"} {
             set config "true"
             set fichier "$RGBDirInput/I11.bin"
             if [file exists $fichier] {
                 } else {
                 set config "false"
                 set VarError ""
                 set ErrorMessage "THE FILE I11.bin HAS NOT BEEN CREATED"
                 Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                 tkwait variable VarError
                 }
            set fichier "$RGBDirInput/I12.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE I12.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/I21.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE I21.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/I22.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE I22.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_rgb_file_SPPIPPC2.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_rgb_file_SPPIPPC2.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf IPP -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                }
            }
        }

#######################################################################################
    #Display Window and show image
    if [file exists $BMPViewFileInput] {
        if {$ActiveProgram == "ALOS"} {set AlosQuickLook 1}
        if {$ActiveProgram == "ALOS2"} {set AlosQuickLook 1}
        if {$ActiveProgram == "TERRASARX"} {set TerrasarxQuickLook 1}

        set WidthBMPQL $WidthBMP
        set HeightBMPQL [expr $HeightBMP - 50]

        image create photo BMPImage
        image create photo ImageSource -file $BMPViewFileInput
        set SourceWidth [image width ImageSource]
        set SourceHeight [image height ImageSource]

        set subsample 0
        if {$SourceWidth > $WidthBMPQL} {set subsample 1}
        if {$SourceHeight > $HeightBMPQL} {set subsample 1}

        set BMPSample 1
        if {$subsample == 0} {
            set BMPWidth $SourceWidth
            set BMPHeight $SourceHeight
            } else {
            if {$SourceWidth >= $SourceHeight} {
                while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
                } else {
                while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
                } 
            set BMPWidth [expr round($SourceWidth / $BMPSample)]
            set BMPHeight [expr round($SourceHeight / $BMPSample)]
            } 
        set QLBMPImageOpen "1"
        set BMPDropperFlag "0"
        set BMPChange "0"
        set ColorNumber "BMP 24 Bits"
        set BMPMouseX ""
        set BMPMouseY ""
        if {$Load_ViewBMPQL == 1} {Window hide $widget(VIEWBMPQL)}
        BMPImage blank
        BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample

        $widget(CANVASBMPQL) configure -width $BMPWidth -height $BMPHeight
        $widget(CANVASBMPQL) create image 0 0 -anchor nw -image BMPImage
        wm title $widget(VIEWBMPQL) [file tail $BMPViewFileInput]

        set x [winfo x $widget(VIEWBMPQL)]
        set y [winfo y $widget(VIEWBMPQL)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget(VIEWBMPQL) $geometrie; update
        WidgetGeometryLeft $widget(VIEWBMPQL)
        catch {wm geometry $widget(VIEWBMPQL) {}} 
        Window show $widget(VIEWBMPQL); TextEditorRunTrace "Open Window View BMP Quick Look" "b"        
        } else {
        if {$ActiveProgram == "ALOS"} {set AlosQuickLook 0}
        if {$ActiveProgram == "ALOS2"} {set AlosQuickLook 0}
        if {$ActiveProgram == "TERRASARX"} {set TerrasarxQuickLook 0}
        set ErrorMessage "QUICKLOOK IMAGE NOT CREATED"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }} \
        -label {Quick Look} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men83" -command {} -label Extract 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men83 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men83 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global EOSIFileInputFlag EOSIDirInput EOSIOutputDir EOSIOutputSubDir EOSIExtractFonction ImageEOSIExtractMenu
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global MultiLookRow MultiLookCol SubSampRow SubSampCol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
#DATA IMPORT
global Load_EOSI_Extract_Data PSPTopLevel

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    if {$Load_EOSI_Extract_Data == 0} {
        source "GUI/data_import/EOSI_Extract_Data.tcl"
        set Load_EOSI_Extract_Data 1
        WmTransient $widget(Toplevel229) $PSPTopLevel
        }
    if {$ActiveProgram == "ALOS"} {set EOSIDirInput $ALOSDirInput; set EOSIOutputDir $ALOSDirOutput }
    if {$ActiveProgram == "TERRASARX"} {set EOSIDirInput $TERRASARXDirInput; set EOSIOutputDir $TERRASARXDirOutput }
    set EOSIOutputSubDir ""
    set EOSIExtractFonction "Full"
    set MultiLookRow ""
    set MultiLookCol ""
    set SubSampRow ""
    set SubSampCol ""
    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize
    $widget(Label229_1) configure -state disable; $widget(Label229_2) configure -state disable
    $widget(Label229_3) configure -state disable; $widget(Label229_4) configure -state disable
    $widget(Entry229_1) configure -state disable; $widget(Entry229_2) configure -state disable
    $widget(Entry229_3) configure -state disable; $widget(Entry229_4) configure -state disable
    package require Img
    image create photo ImageEOSIExtractMenu
    ImageEOSIExtractMenu blank
    $widget(CANVASEOSIEXTRACTMENU) create image 0 0 -anchor nw -image ImageEOSIExtractMenu
    image delete ImageEOSIExtractMenu
    if {$ActiveProgram == "ALOS"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/ALOS.gif"}
    if {$ActiveProgram == "TERRASARX"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/TERRASARX.gif"}
    $widget(CANVASEOSIEXTRACTMENU) create image 0 0 -anchor nw -image ImageEOSIExtractMenu
    WidgetShow $widget(Toplevel229); TextEditorRunTrace "Open Window $ActiveProgram Extract Data" "b"
    wm title $widget(Toplevel229) [file tail "$ActiveProgram Extract Data"]
    }} \
        -label {Full Resolution} 
    $site_6_0.men83 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global EOSIDirInput EOSIFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global AlosQuickLook TerrasarxQuickLook
global TMPQuickLookAlos TMPQuickLookTerrasarX
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput
global QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol QLBMPMouseX QLBMPMouseY
global MouseActiveButton TrainingAreaTool
global QLBMPImageOpen QLZoomBMP QLZoom QLZoomBMP ZoomBMPQL

global DataDir FileName BMPChange BMPImageOpen BMPDirInput BMPViewFileInput SourceWidth SourceHeight 
global BMPWidth BMPHeight WidthBMP HeightBMP
global BMPImage BMPImageLens ImageSource BMPView BMPCanvas
global ColorNumber ColorNumberUtil ColorMapBMP RedPalette GreenPalette BluePalette
global BMPLensFlag RectLensCenter BMPWidthSource BMPHeightSource BMPSampleSource ZoomBMPSource
global BMPColorMapDisplay BMPColorMapGrayJetHsv BMPTrainingRect
global BMPMax BMPMin BMPValue BMPDropperFlag BMPSubAreaFlag

package require Img

#BMP PROCESS
global Load_Save Load_ViewBMPFile Load_ViewBMP1 Load_ViewBMPLens Load_Zoom
global Load_colormap256 Load_colormap32 Load_colormap16 Load_colormap8
global Load_Display Load_ColorMapGrayJetHsv

#DATA IMPORT
global Load_SubArea_GraphicEditor PSPTopLevel

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
   
############################################################################
    set QuickLookFlag 0
    if {$ActiveProgram == "ALOS"} {
        if {$AlosQuickLook == 1} {
            set BMPViewFileInput $TMPQuickLookAlos
            if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
            }
        }
    if {$ActiveProgram == "TERRASARX"} {
        if {$TerrasarxQuickLook == 1} {
            set BMPViewFileInput $TMPQuickLookTerrasarX
            if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
            }
        }

    if {$QuickLookFlag == 1} {
        if {$Load_SubArea_GraphicEditor == 0} {
            source "GUI/data_import/SubArea_GraphicEditor.tcl"
            set Load_SubArea_GraphicEditor 1
            WmTransient $widget(Toplevel202) $PSPTopLevel
            }
        if {$Load_ViewBMP1 == 0} {
            source "GUI/bmp_process/ViewBMP1.tcl"
            set Load_ViewBMP1 1
            WmTransient $widget(Toplevel51) $PSPTopLevel
            }
        if {$Load_Save == 0} {
            source "GUI/bmp_process/Save.tcl"
            set Load_Save 1
            WmTransient $widget(Toplevel82) $PSPTopLevel
            }
        set NligFullSize $NligFullSizeInput
        set NligInit 1
        set NligEnd $NligFullSize
        set NcolFullSize $NcolFullSizeInput
        set NcolInit 1
        set NcolEnd $NcolFullSize
        if {$BMPImageOpen == 1} {
            ClosePSPViewer
            Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
            }
        LoadPSPViewer
        load_bmp_caracteristics $BMPViewFileInput
        load_bmp_file $BMPViewFileInput    

        $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
        $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
        wm title $widget($BMPView) [file tail $BMPViewFileInput]

        set x [winfo x $widget($BMPView)]
        set y [winfo y $widget($BMPView)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget($BMPView) $geometrie; update
        WidgetGeometryLeft $widget($BMPView)
        catch {wm geometry $widget($BMPView) {}} 
        Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"
        
        set BMPImageOpen "1"
        set QLMouseInitX ""
        set QLMouseInitY ""
        set QLMouseEndX ""
        set QLMouseEndY ""
        set QLMouseNlig ""
        set QLMouseNcol ""
        set QLBMPMouseX ""
        set QLBMPMouseY ""
        set BMPSubAreaFlag "1"
        set MouseActiveFunction ""
        set TrainingAreaTool "rect"
        set rect_color "white"
        set c0 .top202.fra69.cpd73
        $c0 configure -background $rect_color
        WidgetShowFromWidget $widget($BMPView) $widget(Toplevel202)
        TextEditorRunTrace "Open Window Sub Area Graphic Editor" "b"
        } else {
        set ErrorMessage "CREATE A QUICKLOOK IMAGE FIRST" 
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set QuickLookSubAreaFlag 0
        }

############################################################################
}} \
        -label {Sub Area} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add command \
        \
        -command {global FileName DataDir ConfigFile VarError ErrorMessage PSPTopLevel
#UTIL
global Load_TextEdit
if {$Load_TextEdit == 0} {
    source "GUI/util/TextEdit.tcl"
    set Load_TextEdit 1
    WmTransient $widget(Toplevel95) $PSPTopLevel
    }

set ConfigFile "$DataDir/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    TextEditorRunTrace "Open Window Text Editor" "b"
    TextEditor $ConfigFile
    } else {
    append ErrorMessage " - CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Edit Config File} 
    menubutton $site_4_0.men76 \
        -borderwidth 0 -menu "$site_4_0.men76.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men76" "IMPDPS" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men76 "$site_4_0.men76 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men76 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Import Data}
    }
    menu $site_4_0.men76.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men76.m add command \
        \
        -command {global ActiveProgram DataDir
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag
global ALOSLeaderFile ALOSTrailerFile ALOSSceneID ALOSMode ALOSNode ALOSMap
global ALOSScene ALOSDate ALOSOrbit ALOSDirection ALOSPixRow ALOSPixCol
global ALOSDataLevel ALOSDataType ALOSDataFormat ALOSUnCalibration ALOSProductFile
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput CSKMessage
global CSKSatelliteID CSKStationID CSKFrequency CSKIncAngle CSKLookSide CSKOrbit CSKNcol CSKNlig
global CSKSceneStart CSKSceneStop CSKPolar1 CSKPolar2 CSKColumn CSKLine
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag
global RISATLeaderFile RISATBandMetaFile RISATGridFile RISATMode RISATDataFormat RISATProductFile
global RISATSceneID RISATResRg RISATResAz RISATPixAz RISATPixRg
global RISATImgFormat RISATProcLevel RISATincang RISATImgMode
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1ProductFile TMPSentinel1Config
global SENTINEL1Mission SENTINEL1Level SENTINEL1Product SENTINEL1Mode
global SENTINEL1Swath SENTINEL1SwathMax SENTINEL1Burst SENTINEL1BurstMax
global SENTINEL1PixAz SENTINEL1PixRg SENTINEL1IncAngle SENTINEL1FUD SENTINEL1Acq
global SENTINEL1NligInit SENTINEL1NcolInit SENTINEL1NligFinal SENTINEL1NcolFinal
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TANDEMXDirInput TANDEMXDirInputMaster TANDEMXDirOutputMaster
global TANDEMXDirInputSlave TANDEMXDirOutputSlave TANDEMXFileInputFlag
global TANDEMXProductFile TDXProduct TDXResolution TDXImaging TDXPolar
global TSXProduct TSXResolution TSXImaging TSXPolar
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCRunNumber
global SIRCFileType SIRCPolMode SIRCFormat SIRCDataFormat SIRCDataFormatPol
global IEEEFormat FileInputSIRC FileInput1 FileInput2 FileInput3 FileInput4
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage PolarType
global VarAdvice WarningMessage WarningMessage2 WarningMessage3 WarningMessage4
#DATA CONVERT
global Load_ALOS_Input_File Load_RADARSAT2_Input_File Load_TERRASARX_Input_File Load_SIRC_Input_File PSPTopLevel
global Load_ALOS_Vex_Input_File Load_TANDEMX_Input_File Load_RISAT_Input_File Load_SENTINEL1_Input_File 

if {$DataDir != ""} {
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    if {$ActiveProgram == "ALOS"} {
        if {$ALOSDataFormat == "dual1.1"} {
            if {$Load_ALOS_Input_File == 0} {
                source "GUI/data_import/ALOS_Input_File.tcl"
                set Load_ALOS_Input_File 1
                WmTransient $widget(Toplevel218) $PSPTopLevel
                }
            set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
            set ALOSLeaderFile ""; set ALOSTrailerFile ""; set ALOSSceneID ""; set ALOSMode ""; set ALOSNode ""; set ALOSMap ""
            set ALOSDataLevel ""; set ALOSDataType ""; set ALOSUnCalibration 0
            set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
            $widget(Label218_10) configure -state disable; $widget(Entry218_10) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_11) configure -state disable; $widget(Entry218_11) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_17) configure -state disable; $widget(Entry218_17) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_18) configure -state disable; $widget(Entry218_18) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_19) configure -state disable; $widget(Entry218_19) configure -disabledbackground $PSPBackgroundColor
            $widget(TitleFrame218_1) configure -state disable; $widget(TitleFrame218_2) configure -state disable
            $widget(Entry218_12) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_13) configure -state disable; $widget(Entry218_13) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_14) configure -state disable; $widget(Entry218_14) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_15) configure -state disable; $widget(Entry218_15) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_16) configure -state disable; $widget(Entry218_16) configure -disabledbackground $PSPBackgroundColor
            $widget(Button218_9) configure -state disable; $widget(Menubutton218_1) configure -state disable
            $widget(Checkbutton218_1) configure -state disable
            $widget(Entry218_20) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_1) configure -state disable; $widget(Entry218_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Label218_2) configure -state disable; $widget(Entry218_2) configure -disabledbackground $PSPBackgroundColor
            $widget(Button218_10) configure -state disable; $widget(Button218_20) configure -state disable
            WidgetShow $widget(Toplevel218); TextEditorRunTrace "Open Window ALOS Input File" "b"
            }
        if {$ALOSDataFormat == "dual1.1vex"} {
            if {$Load_ALOS_Vex_Input_File == 0} {
                source "GUI/data_import/ALOS_Vex_Input_File.tcl"
                set Load_ALOS_Vex_Input_File 1
                WmTransient $widget(Toplevel350) $PSPTopLevel
                }
            set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
            set ALOSLeaderFile ""; set ALOSDataLevel ""; set ALOSDataType ""
            set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
            set PolarType ""; set ALOSProductFile ""; set IEEEFormat 1
            $widget(Button350_5) configure -state disable;
            $widget(Button350_6) configure -state disable; 
            $widget(Button350_7) configure -state disable; 
            $widget(Entry350_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label350_10) configure -state disable
            $widget(Label350_5) configure -state disable; $widget(Entry350_5) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_6) configure -state disable; $widget(Entry350_6) configure -disabledbackground $PSPBackgroundColor
            $widget(TitleFrame350_1) configure -state disable
            $widget(Label350_1) configure -state disable; $widget(Entry350_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_2) configure -state disable; $widget(Entry350_2) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_3) configure -state disable; $widget(Entry350_3) configure -disabledbackground $PSPBackgroundColor
            $widget(Label350_4) configure -state disable; $widget(Entry350_4) configure -disabledbackground $PSPBackgroundColor
            WidgetShow $widget(Toplevel350); TextEditorRunTrace "Open Window ALOS Input File" "b"
            }    
        }    
    if {$ActiveProgram == "ALOS2"} {
        if {$ALOSDataFormat == "dual1.1"} {
            if {$Load_ALOS2_Input_File == 0} {
                source "GUI/data_import/ALOS2_Input_File.tcl"
                set Load_ALOS2_Input_File 1
                WmTransient $widget(Toplevel454) $PSPTopLevel
                }
            set ALOSDirInput $DataDir; set ALOSDirOutput $DataDir; set ALOSFileInputFlag 0
            set ALOSLeaderFile ""; set ALOSTrailerFile ""
            set ALOSScene ""; set ALOSDate ""; set ALOSOrbit ""; set ALOSDirection ""; set ALOSMode ""; set ALOSNode ""
            set ALOSDataLevel ""; set ALOSDataType ""; set ALOSUnCalibration 0; set ALOSPixRow ""; set ALOSPixCol ""
            set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
            $widget(Label454_8) configure -state disable; $widget(Entry454_8) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_9) configure -state disable; $widget(Entry454_9) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_10) configure -state disable; $widget(Entry454_10) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_11) configure -state disable; $widget(Entry454_11) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_17) configure -state disable; $widget(Entry454_17) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_18) configure -state disable; $widget(Entry454_18) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_19) configure -state disable; $widget(Entry454_19) configure -disabledbackground $PSPBackgroundColor
            $widget(TitleFrame454_1) configure -state disable; $widget(TitleFrame454_2) configure -state disable
            $widget(Entry454_12) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_13) configure -state disable; $widget(Entry454_13) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_14) configure -state disable; $widget(Entry454_14) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_15) configure -state disable; $widget(Entry454_15) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_16) configure -state disable; $widget(Entry454_16) configure -disabledbackground $PSPBackgroundColor
            $widget(Button454_9) configure -state disable; $widget(Menubutton454_1) configure -state disable
            $widget(Checkbutton454_1) configure -state disable
            $widget(Label454_1) configure -state disable; $widget(Entry454_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_2) configure -state disable; $widget(Entry454_2) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_3) configure -state disable; $widget(Entry454_3) configure -disabledbackground $PSPBackgroundColor
            $widget(Label454_4) configure -state disable; $widget(Entry454_4) configure -disabledbackground $PSPBackgroundColor
            $widget(Button454_10) configure -state disable
            WidgetShow $widget(Toplevel454); TextEditorRunTrace "Open Window ALOS2 Input File" "b"
            }
        }    
    if {$ActiveProgram == "CSK"} {
        if {$Load_CSK_Input_File == 0} {
            source "GUI/data_import/CSK_Input_File.tcl"
            set Load_CSK_Input_File 1
            WmTransient $widget(Toplevel430) $PSPTopLevel
            }
        set CSKDirInput $DataDir; set CSKDirOutput $DataDir; set CSKFileInputFlag 0
        set CSKDataFormat "dual"; set CSKFileInput ""
        set CSKSatelliteID ""; set CSKStationID ""; set CSKFrequency ""; set CSKIncAngle ""
        set CSKLookSide ""; set CSKOrbit ""; set CSKSceneStart ""; set CSKSceneStop ""; set CSKMessage ""
        set CSKPolar1 ""; set CSKPolar2 ""; set CSKColumn ""; set CSKLine ""; set CSKNcol ""; set CSKNlig ""
        set PolarType ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button430_1) configure -state disable; $widget(Button430_2) configure -state disable; $widget(Button430_3) configure -state disable
        WidgetShow $widget(Toplevel430); TextEditorRunTrace "Open Window COSMO-SKYMED Input File" "b"
        }
    if {$ActiveProgram == "RADARSAT2"} {
        if {$Load_RADARSAT2_Input_File == 0} {
            source "GUI/data_import/RADARSAT2_Input_File.tcl"
            set Load_RADARSAT2_Input_File 1
            WmTransient $widget(Toplevel219) $PSPTopLevel
            }
        set RADARSAT2DirInput $DataDir; set RADARSAT2DirOutput $DataDir; set RADARSAT2FileInputFlag 0
        set RADARSAT2DataFormat "dual"; set RADARSAT2DataLevel ""; set RADARSAT2ProductFile ""
        set RADARSAT2Lut "sigma"; set RADARSAT2LutFile ""
        set PolarType ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button219_5) configure -state disable;
        $widget(Entry219_10) configure -disabledbackground $PSPBackgroundColor; $widget(Label219_10) configure -state disable
        $widget(Entry219_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_1) configure -state disable
        $widget(TitleFrame219_1) configure -text " "
        $widget(Entry219_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_2) configure -state disable
        $widget(TitleFrame219_2) configure -text " "
        $widget(Entry219_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_3) configure -state disable
        $widget(TitleFrame219_3) configure -text " "
        $widget(Entry219_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button219_4) configure -state disable
        $widget(TitleFrame219_4) configure -text " "
        $widget(Label219_1) configure -state disable; $widget(Entry219_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Label219_2) configure -state disable; $widget(Entry219_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Button219_6) configure -state disable; 
        $widget(Button219_7) configure -state disable; 
        WidgetShow $widget(Toplevel219); TextEditorRunTrace "Open Window RADARSAT2 Input File" "b"
        }
    if {$ActiveProgram == "RISAT"} {
        set RISATBandMetaFile "$DataDir/BAND_META.txt"
        if [file exists $RISATBandMetaFile] {
            if {$RISATDataFormat == "dual1.1"} {
                if {$Load_RISAT_Input_File == 0} {
                    source "GUI/data_import/RISAT_Input_File.tcl"
                    set Load_RISAT_Input_File 1
                    WmTransient $widget(Toplevel449) $PSPTopLevel
                    }
                set RISATDirInput $DataDir; set RISATDirOutput $DataDir; set RISATFileInputFlag 0
                set RISATLeaderFile ""; set RISATMode ""; set RISATProductFile ""
                set RISATSceneID ""; set RISATResRg ""; set RISATResAz ""; set RISATPixAz ""; set RISATPixRg ""
                set RISATImgFormat ""; set RISATProcLevel ""; set RISATincang ""; set RISATImgMode ""; set RISATGridFile  ""
                set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""; 
                $widget(Label449_10) configure -state disable; $widget(Entry449_10) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_11) configure -state disable; $widget(Entry449_11) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_17) configure -state disable; $widget(Entry449_17) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_18) configure -state disable; $widget(Entry449_18) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_19) configure -state disable; $widget(Entry449_19) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_20) configure -state disable; $widget(Entry449_20) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_21) configure -state disable; $widget(Entry449_21) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_22) configure -state disable; $widget(Entry449_22) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_23) configure -state disable; $widget(Entry449_23) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_24) configure -state disable; $widget(Entry449_24) configure -disabledbackground $PSPBackgroundColor
                $widget(TitleFrame449_1) configure -state disable; $widget(TitleFrame449_2) configure -state disable; $widget(TitleFrame449_3) configure -state disable
                $widget(Entry449_12) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_13) configure -state disable; $widget(Entry449_13) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_14) configure -state disable; $widget(Entry449_14) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_15) configure -state disable; $widget(Entry449_15) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_16) configure -state disable; $widget(Entry449_16) configure -disabledbackground $PSPBackgroundColor
                $widget(Entry449_20) configure -disabledbackground $PSPBackgroundColor
                $widget(Entry449_25) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_1) configure -state disable; $widget(Entry449_1) configure -disabledbackground $PSPBackgroundColor
                $widget(Label449_2) configure -state disable; $widget(Entry449_2) configure -disabledbackground $PSPBackgroundColor
                $widget(Button449_10) configure -state disable; $widget(Button449_20) configure -state disable
                WidgetShow $widget(Toplevel449); TextEditorRunTrace "Open Window RISAT Input File" "b"
                }
            } else {
            set VarError ""
            set ErrorMessage "THE RISAT BAND-META.txt FILE DOES NOT EXIST"
            Window show .top44; TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        }    
    if {$ActiveProgram == "SENTINEL1"} {
        if {$Load_SENTINEL1_Input_File == 0} {
            source "GUI/data_import/SENTINEL1_Input_File.tcl"
            set Load_SENTINEL1_Input_File 1
            WmTransient $widget(Toplevel453) $PSPTopLevel
            }
        set SENTINEL1DirInput $DataDir; set SENTINEL1DirOutput $DataDir; set SENTINEL1FileInputFlag 0
        set SENTINEL1DataFormat "dual"; for {set i 0} {$i <= 10} {incr i} { set SENTINEL1ProductFile($i) "" }
        set SENTINEL1Mission ""; set SENTINEL1Level ""; set SENTINEL1Product ""; set SENTINEL1Mode ""
        set SENTINEL1Swath ""; set SENTINEL1SwathMax ""; set SENTINEL1Burst ""; set SENTINEL1BurstMax ""
        set SENTINEL1PixAz ""; set SENTINEL1PixRg ""; set SENTINEL1IncAngle ""
        set SENTINEL1NligInit ""; set SENTINEL1NcolInit ""; set SENTINEL1NligFinal ""; set SENTINEL1NcolFinal ""
        set PolarType ""
        set FileInput1 ""; set FileInput2 ""
        $widget(TitleFrame453_1) configure  -state disable
        $widget(Entry453_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button453_1) configure -state disable
        $widget(TitleFrame453_2) configure  -state disable
        $widget(Entry453_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button453_2) configure -state disable
        $widget(TitleFrame453_01) configure  -state disable
        $widget(Entry453_01) configure -disabledbackground $PSPBackgroundColor
        $widget(Button453_01) configure -state disable; $widget(Button453_02) configure -state disable; $widget(Button453_03) configure -state disable
        $widget(Button453_04) configure -state disable
        $widget(Checkbutton453_01) configure -state disable; set SENTINEL1FUD 0
        $widget(Entry453_09) configure -disabledbackground $PSPBackgroundColor; set SENTINEL1Acq ""
        $widget(Entry453_02) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_02) configure -state disable
        $widget(Entry453_03) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_03) configure -state disable
        $widget(Entry453_04) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_04) configure -state disable
        $widget(Entry453_05) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_05) configure -state disable
        $widget(Entry453_06) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_06) configure -state disable
        $widget(Entry453_07) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_07) configure -state disable
        $widget(Entry453_08) configure -disabledbackground $PSPBackgroundColor; $widget(Label453_08) configure -state disable
        $widget(Button453_6) configure -state disable
        DeleteFile $TMPSentinel1Config
        set SentinelPreview "$SENTINEL1DirInput/preview/product-preview.html"
        TextEditorRunTrace "Process The Function Soft/data_import/sentinel1_product_preview.exe" "k"
        TextEditorRunTrace "Arguments: -if \x22$SentinelPreview\x22 -of \x22$TMPSentinel1Config\x22" "k"
        set f [ open "| Soft/data_import/sentinel1_product_preview.exe -if \x22$SentinelPreview\x22 -of \x22$TMPSentinel1Config\x22" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WaitUntilCreated $TMPSentinel1Config
        if [file exists $TMPSentinel1Config] {
            set f [open $TMPSentinel1Config r]
            gets $f SENTINEL1Mission
            gets $f SENTINEL1Product
            if {$SENTINEL1Product == "SLC"} {
                gets $f SENTINEL1Mode
                gets $f SENTINEL1Level
                gets $f PolarType
                gets $f SENTINEL1Number
                for {set i 1} {$i <= $SENTINEL1Number} {incr i} { gets $f SENTINEL1ProductFile($i) }
                if {$SENTINEL1Mode == "IW"} { set SENTINEL1SwathMax 3}
                if {$SENTINEL1Mode == "EW"} { set SENTINEL1SwathMax 5}
                set SENTINEL1Swath 1
                WidgetShow $widget(Toplevel453); TextEditorRunTrace "Open Window SENTINEL1 Input File" "b"
                } else {
                set ErrorMessage "ERROR IN THE SENTINEL1 PRODUCT : MUST BE SLC"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            close $f
            }
        }
        
    if {$ActiveProgram == "TERRASARX"} {
        if {$Load_TERRASARX_Input_File == 0} {
            source "GUI/data_import/TERRASARX_Input_File.tcl"
            set Load_TERRASARX_Input_File 1
            WmTransient $widget(Toplevel221) $PSPTopLevel
            }
        set TERRASARXDirInput $DataDir; set TERRASARXDirOutput $DataDir; set TERRASARXFileInputFlag 0
        set TERRASARXProductFile ""; set PolarType ""
        set TSXProduct ""; set TSXResolution ""; set TSXImaging ""; set TSXPolar ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button221_5) configure -state disable;
        $widget(Entry221_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_1) configure -state disable
        $widget(TitleFrame221_1) configure -text " "
        $widget(Entry221_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_2) configure -state disable
        $widget(TitleFrame221_2) configure -text " "
        $widget(Entry221_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_3) configure -state disable
        $widget(TitleFrame221_3) configure -text " "
        $widget(Entry221_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button221_4) configure -state disable
        $widget(TitleFrame221_4) configure -text " "
        $widget(Label221_1) configure -state disable; $widget(Entry221_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Label221_2) configure -state disable; $widget(Entry221_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Button221_6) configure -state disable; $widget(Button221_7) configure -state disable 
        WidgetShow $widget(Toplevel221); TextEditorRunTrace "Open Window TERRASARX Input File" "b"
        }
    if {$ActiveProgram == "TANDEMX"} {
        if {$Load_TANDEMX_Input_File == 0} {
            source "GUI/data_import/TANDEMX_Input_File.tcl"
            set Load_TANDEMX_Input_File 1
            WmTransient $widget(Toplevel436) $PSPTopLevel
            }
        set TANDEMXDirInput $DataDir; set TERRASARXFileInputFlag 0
        set TANDEMXDirInputMaster ""; set TANDEMXDirOutputMaster ""; 
        set TANDEMXDirInputSlave ""; set TANDEMXDirOutputSlave ""; 
        set TANDEMXProductFile ""; set PolarType ""
        set TDXProduct ""; set TDXResolution ""; set TDXImaging ""; set TDXPolar ""
        set FileInput1 ""; set FileInput2 ""; set FileInput3 ""; set FileInput4 ""
        $widget(Button436_01) configure -state disable; $widget(Button436_02) configure -state disable;
        $widget(Button436_03) configure -state disable; $widget(Button436_04) configure -state disable;
        $widget(Button436_05) configure -state disable; $widget(Button436_06) configure -state disable;
        $widget(Entry436_1) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_1) configure -state disable
        $widget(TitleFrame436_1) configure -text " "
        $widget(Entry436_2) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_2) configure -state disable
        $widget(TitleFrame436_2) configure -text " "
        $widget(Entry436_3) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_3) configure -state disable
        $widget(TitleFrame436_3) configure -text " "
        $widget(Entry436_4) configure -disabledbackground $PSPBackgroundColor; $widget(Button436_4) configure -state disable
        $widget(TitleFrame436_4) configure -text " "
        $widget(Button436_6) configure -state disable

        set WarningMessage "DUE TO THE LENGTH OF THE FULL PATH FILE"
        set WarningMessage2 "WinRAR and WinZIP COULD NOT EXTRACT THE"
        set WarningMessage3 "ENTIRE CONTENTS OF THE .rar.gz TDMX FILE"
        set WarningMessage4 "CHECK IF ALL THE xml FILES ARE EXTRACTED"
        set VarAdvice ""
        Window show $widget(Toplevel377); TextEditorRunTrace "Open Window Advice" "b"
        tkwait variable VarAdvice
 
        WidgetShow $widget(Toplevel436); TextEditorRunTrace "Open Window TANDEMX Input File" "b"
        }
    if {$ActiveProgram == "SIRC"} {
        if {$Load_SIRC_Input_File == 0} {
            source "GUI/data_import/SIRC_Input_File.tcl"
            set Load_SIRC_Input_File 1
            WmTransient $widget(Toplevel222) $PSPTopLevel
            }
        set SIRCDirInput $DataDir; set SIRCDirOutput $DataDir; set SIRCFileInputFlag 0
        set SIRCRunNumber "?????"; set SIRCDataFormat ""; set SIRCDataFormatPol "dual"
        set SIRCFileType ""; set SIRCPolMode ""; set SIRCFormat ""
        $widget(Menubutton222_1) configure -state disable; $widget(Button222_10) configure -state disable
        WidgetShow $widget(Toplevel222); TextEditorRunTrace "Open Window SIRC Input File" "b"
        }
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Input Data File} 
    $site_4_0.men76.m add separator \
        
    $site_4_0.men76.m add command \
        \
        -command {global ActiveProgram VarError ErrorMessage PSPViewGimpBMP
global EOSIDirInput EOSIFileInputFlag
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration 
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput 
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1FileInputFlag
global SENTINEL1Burst SENTINEL1LigInit SENTINEL1ColInit SENTINEL1LigFinal SENTINEL1ColFinal
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel
global TANDEMXDirInputMaster TANDEMXDirOutputMaster TANDEMXFileInputFlag
global TANDEMXDataFormat TANDEMXDataLevel
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag SIRCDataFormat 
global IEEEFormat FileInputHH FileInputHV FileInputVH FileInputVV FileInputPISAR FileInputSIRC
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global AlosQuickLook Radarsat2QuickLook TerrasarxQuickLook TandemxQuickLook SircQuickLook CSKQuickLook RisatQuickLook Sentinel1QuickLook 
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput
global SourceWidth SourceHeight WidthBMP HeightBMP WidthBMPQL HeightBMPQL
global ImageSource BMPDirInput BMPImage
global BMPWidth BMPHeight ZoomBMP BMPView BMPCanvas
global BMPViewFileInput BMPDropperFlag BMPMouseX BMPMouseY BMPChange ColorNumber
global QLBMPImageOpen QLZoomBMP QLZoom PVShortcut
global TMPQuickLookAlos TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookTandemX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat TMPQuickLookSentinel1
global TMPSIRCConfig TMPALOSConfig TMPRadarsat2Config TMPTerrasarxConfig TMPTANDEMXConfigMaster TMPTANDEMXConfigSlave TMPQuickLookDir TMPSentinel1Config 
global MultiLookSubSamp PSPMemory TMPMemoryAllocError

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    #BMP PROCESS
    global Load_Save Load_ViewBMPQL PSPTopLevel
 
    if {$PVShortcut == 1} {
        set PVShortcut 0
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }
    if {$Load_ViewBMPQL == 0} {
        source "GUI/bmp_process/ViewBMPQL.tcl"
        set Load_ViewBMPQL 1
        $widget(CANVASBMPQL) configure -cursor arrow
        WmTransient $widget(Toplevel207) $PSPTopLevel
        }

    set WidthBMPQL $WidthBMP
    set HeightBMPQL [expr $HeightBMP - 50]

    set NligFullSize $NligFullSizeInput
    set NcolFullSize $NcolFullSizeInput
    set SourceWidth $NcolFullSizeInput
    set SourceHeight $NligFullSizeInput

    if {$ActiveProgram == "SENTINEL1"} {
        if {$SENTINEL1Burst != "ALL" } {
            set NligInit [expr $SENTINEL1LigInit - 1]
            set NligFullSize $SENTINEL1NligFinal
            set SourceHeight $SENTINEL1NligFinal
            set NcolInit [expr $SENTINEL1ColInit - 1]
            set NcolFullSize $SENTINEL1NcolFinal
            set SourceWidth $SENTINEL1NcolFinal
            } else {
            set NligInit 0
            set NcolInit 0
            }
        }

    set subsample 0
    if {$SourceWidth > $WidthBMPQL} {set subsample 1}
    if {$SourceHeight > $HeightBMPQL} {set subsample 1}
    set BMPSample 1
    if {$subsample == 0} {
        set ZoomBMP "1:$BMPSample"
        set BMPWidth $SourceWidth
        set BMPHeight $SourceHeight
        } else {
        if {$SourceWidth >= $SourceHeight} {
            while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
            } else {
            while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
            } 
        set ZoomBMP "1:$BMPSample"
        set BMPWidth [expr round($SourceWidth / $BMPSample)]
        set BMPHeight [expr round($SourceHeight / $BMPSample)]
        } 
    set QLZoomBMP $ZoomBMP    
    set QLZoom $BMPSample
   
    set MultiLookSubSamp " -ssr 1 -ssc 1 -nlr $BMPSample -nlc $BMPSample "
    append MultiLookSubSamp "-mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 "

    DeleteMatrixT $TMPQuickLookDir
    DeleteMatrixC $TMPQuickLookDir
    DeleteMatrixS $TMPQuickLookDir
    DeleteMatrixI $TMPQuickLookDir

    if {$ActiveProgram == "ALOS"} {
        set BMPViewFileInput $TMPQuickLookAlos
        DeleteFile $BMPViewFileInput
        set BMPDirInput $ALOSDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$ALOSDataFormat == "dual1.1"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_convert_11_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_convert_11_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPALOSConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        if {$ALOSDataFormat == "dual1.1vex"} {
            TextEditorRunTrace "Process The Function Soft/data_import/alos_vex_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/alos_vex_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ALOS

    if {$ActiveProgram == "CSK"} {
        set BMPViewFileInput $TMPQuickLookCSK
        DeleteFile $BMPViewFileInput
        set BMPDirInput $CSKDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$CSKDataFormat == "dual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/csk_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/csk_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End CSK

    if {$ActiveProgram == "RADARSAT2"} {
        set BMPViewFileInput $TMPQuickLookRadarsat2
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RADARSAT2DirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$RADARSAT2DataFormat == "dual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/radarsat2_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/radarsat2_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType -lut \x22$RADARSAT2LutFile\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RADARSAT2

    if {$ActiveProgram == "RISAT"} {
        set BMPViewFileInput $TMPQuickLookRISAT
        DeleteFile $BMPViewFileInput
        set BMPDirInput $RISATDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/RISAT_convert_11_dual.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPRISATConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/RISAT_convert_11_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPRISATConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End RISAT

    if {$ActiveProgram == "SENTINEL1"} {
        set BMPViewFileInput $TMPQuickLookSentinel1
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SENTINEL1DirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$SENTINEL1Burst == "ALL" } {
            set SENTINEL1MaskFile "$TMPQuickLookDir/mask_valid_pixels.bin"
            set SENTINEL1File "$SENTINEL1DirInput/product_header.txt"
            DeleteFile $SENTINEL1MaskFile
            TextEditorRunTrace "Process The Function Soft/data_import/sentinel1_mask_all.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$SENTINEL1File\x22 -of \x22$SENTINEL1MaskFile\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sentinel1_mask_all.exe -if \x22$SENTINEL1File\x22 -of \x22$SENTINEL1MaskFile\x22 $MultiLookSubSamp" r]
            WaitUntilCreated $SENTINEL1MaskFile
            }
        TextEditorRunTrace "Process The Function Soft/data_import/sentinel1_convert_dual.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSizeInput -nc $NcolFullSizeInput -ofr $NligInit -ofc $NcolInit -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/sentinel1_convert_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSizeInput -nc $NcolFullSizeInput -ofr $NligInit -ofc $NcolInit -fnr $NligFullSize -fnc $NcolFullSize -iee $IEEEFormat -pp $PolarType $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SENTINEL1

    if {$ActiveProgram == "TERRASARX"} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        DeleteFile $BMPViewFileInput
        set BMPDirInput $TERRASARXDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$TERRASARXDataFormat == "dual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_ssc_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/terrasarx_convert_ssc_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTerrasarxConfig\x22 -pp $PolarType $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End TERRASAR X

    if {$ActiveProgram == "TANDEMX"} {
        set BMPViewFileInput $TMPQuickLookTandemX
        DeleteFile $BMPViewFileInput
        set BMPDirInput $TANDEMXDirInputMaster
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        TextEditorRunTrace "Process The Function Soft/data_import/terrasarx_convert_ssc_dual.exe" "k"
        TextEditorRunTrace "Arguments: -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTANDEMXConfigMaster\x22 -pp $PolarType $MultiLookSubSamp" "k"
        set f [ open "| Soft/data_import/terrasarx_convert_ssc_dual.exe -if1 \x22$FileInput1\x22 -if2 \x22$FileInput2\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -cf \x22$TMPTANDEMXConfigMaster\x22 -pp $PolarType $MultiLookSubSamp" r]
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End TANDEM X

    if {$ActiveProgram == "SIRC"} {
        set BMPViewFileInput $TMPQuickLookSirc
        DeleteFile $BMPViewFileInput
        set BMPDirInput $SIRCDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 ""
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$SIRCDataFormat == "SLCdual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert_SLC_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert_SLC_dual.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf SPPC2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        if {$SIRCDataFormat == "MLCdual"} {
            TextEditorRunTrace "Process The Function Soft/data_import/sirc_convert_dual.exe" "k"
            TextEditorRunTrace "Arguments: -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf C2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" "k"
            set f [ open "| Soft/data_import/sirc_convert_dual.exe -if \x22$FileInputSIRC\x22 -od \x22$TMPQuickLookDir\x22 -odf C2 -nr $NligFullSize -nc $NcolFullSize -ofr 0 -ofc 0 -fnr $NligFullSize -fnc $NcolFullSize -sym $Symmetrie -cf \x22$TMPSIRCConfig\x22 $MultiLookSubSamp" r]
            }
        PsPprogressBar $f
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End SIR C

#######################################################################################
    #Create Pauli BMP Image

    set ConfigFile "$TMPQuickLookDir/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {

        EnviWriteConfigC $TMPQuickLookDir $NligFullSize $NcolFullSize
        set MaskCmd ""
        set MaskFile "$TMPQuickLookDir/mask_valid_pixels.bin"
        if [file exists $MaskFile] { set MaskCmd "-mask \x22$MaskFile\x22" }

        set RGBDirInput $TMPQuickLookDir
        set EOSI_RGB "Dual"
        if {$EOSI_RGB == "Dual"} {
            set config "true"
            set fichier "$RGBDirInput/C11.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE C11.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/C22.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE C22.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            set fichier "$RGBDirInput/C12_real.bin"
            if [file exists $fichier] {
                } else {
                set config "false"
                set VarError ""
                set ErrorMessage "THE FILE C12_real.bin HAS NOT BEEN CREATED"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            if {"$config"=="true"} {
                set Fonction "Creation of the RGB BMP File :"
                set Fonction2 "$BMPViewFileInput"    
                set ProgressLine "0"
                WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
                update
                TextEditorRunTrace "Process The Function Soft/bmp_process/create_rgb_file_SPPIPPC2.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf C2 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" "k"
                set f [ open "| Soft/bmp_process/create_rgb_file_SPPIPPC2.exe -id \x22$RGBDirInput\x22 -of \x22$BMPViewFileInput\x22 -iodf C2 -ofr 0 -ofc 0 -fnr $BMPHeight -fnc $BMPWidth -rgbf RGB1 -mem $PSPMemory -errf \x22$TMPMemoryAllocError\x22 $MaskCmd -auto 1" r]
                PsPprogressBar $f
                TextEditorRunTrace "Check RunTime Errors" "r"
                CheckRunTimeError
                WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
                if {$PSPViewGimpBMP == 1} { Gimp $BMPViewFileInput }
                }
            }
        }

#######################################################################################
    #Display Window and show image
    if [file exists $BMPViewFileInput] {
        if {$ActiveProgram == "ALOS"} {set AlosQuickLook 1}
        if {$ActiveProgram == "CSK"} {set CSKQuickLook 1}
        if {$ActiveProgram == "RADARSAT2"} {set Radarsat2QuickLook 1}
        if {$ActiveProgram == "RISAT"} {set RisatQuickLook 1}
        if {$ActiveProgram == "SENTINEL1"} {set Sentinel1QuickLook 1}
        if {$ActiveProgram == "TERRASARX"} {set TerrasarxQuickLook 1}
        if {$ActiveProgram == "TANDEMX"} {set TandemxQuickLook 1}
        if {$ActiveProgram == "SIRC"} {set SircQuickLook 1}

        set WidthBMPQL $WidthBMP
        set HeightBMPQL [expr $HeightBMP - 50]

        image create photo BMPImage
        image create photo ImageSource -file $BMPViewFileInput
        set SourceWidth [image width ImageSource]
        set SourceHeight [image height ImageSource]

        set subsample 0
        if {$SourceWidth > $WidthBMPQL} {set subsample 1}
        if {$SourceHeight > $HeightBMPQL} {set subsample 1}

        set BMPSample 1
        if {$subsample == 0} {
            set BMPWidth $SourceWidth
            set BMPHeight $SourceHeight
            } else {
            if {$SourceWidth >= $SourceHeight} {
                while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
                } else {
                while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
                } 
            set BMPWidth [expr round($SourceWidth / $BMPSample)]
            set BMPHeight [expr round($SourceHeight / $BMPSample)]
            } 
        set QLBMPImageOpen "1"
        set BMPDropperFlag "0"
        set BMPChange "0"
        set ColorNumber "BMP 24 Bits"
        set BMPMouseX ""
        set BMPMouseY ""
        if {$Load_ViewBMPQL == 1} {Window hide $widget(VIEWBMPQL)}
        BMPImage blank
        BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample

        $widget(CANVASBMPQL) configure -width $BMPWidth -height $BMPHeight
        $widget(CANVASBMPQL) create image 0 0 -anchor nw -image BMPImage
        wm title $widget(VIEWBMPQL) [file tail $BMPViewFileInput]

        set x [winfo x $widget(VIEWBMPQL)]
        set y [winfo y $widget(VIEWBMPQL)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget(VIEWBMPQL) $geometrie; update
        WidgetGeometryLeft $widget(VIEWBMPQL)
        catch {wm geometry $widget(VIEWBMPQL) {}} 
        Window show $widget(VIEWBMPQL); TextEditorRunTrace "Open Window View BMP Quick Look" "b"        
        } else {
        if {$ActiveProgram == "ALOS"} {set AlosQuickLook 0}
        if {$ActiveProgram == "CSK"} {set CSKQuickLook 0}
        if {$ActiveProgram == "RADARSAT2"} {set Radarsat2QuickLook 0}
        if {$ActiveProgram == "RISAT"} {set RisatQuickLook 0}
        if {$ActiveProgram == "SENTINEL1"} {set Sentinel1QuickLook 0}
        if {$ActiveProgram == "TERRASARX"} {set TerrasarxQuickLook 0}
        if {$ActiveProgram == "TANDEMX"} {set TandemxQuickLook 0}
        if {$ActiveProgram == "SIRC"} {set SircQuickLook 0}
        set ErrorMessage "QUICKLOOK IMAGE NOT CREATED"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }} \
        -label {Quick Look} 
    $site_4_0.men76.m add separator \
        
    $site_4_0.men76.m add cascade \
        -menu "$site_4_0.men76.m.men71" -command {} -label Extract 
    set site_6_0 $site_4_0.men76.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global EOSIFileInputFlag EOSIDirInput EOSIOutputDir EOSIOutputSubDir EOSIExtractFonction ImageEOSIExtractMenu
global EOSIDirInputMaster EOSIOutputDirMaster EOSIDirInputSlave EOSIOutputDirSlave
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global SENTINEL1Burst SENTINEL1LigInit SENTINEL1ColInit SENTINEL1LigFinal SENTINEL1ColFinal
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag
global TERRASARXDataFormat TERRASARXDataLevel TERRASARXProductFile
global TANDEMXDirInputMaster TANDEMXDirOutputMaster TANDEMXDirInputSlave TANDEMXDirOutputSlave
global TERRASARXDirInputMaster TERRASARXDirOutputMaster TERRASARXDirInputSlave TERRASARXDirOutputSlave
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag
global FileInput1 FileInput2 FileInput3 FileInput4 FileInput5 FileInput6
global MultiLookRow MultiLookCol SubSampRow SubSampCol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
#DATA IMPORT
global Load_EOSI_Extract_Data Load_EOSI_TDX_Extract_Data PSPTopLevel

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    set MultiLookRow ""
    set MultiLookCol ""
    set SubSampRow ""
    set SubSampCol ""
    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize
    if {$ActiveProgram == "SENTINEL1"} {
        if {$SENTINEL1Burst != "ALL" } {
            set NligInit $SENTINEL1LigInit
            set NligEnd $SENTINEL1LigFinal
            set NcolInit $SENTINEL1ColInit
            set NcolEnd $SENTINEL1ColFinal
            }
        }
    if {$ActiveProgram != "TANDEMX"} {
        if {$Load_EOSI_Extract_Data == 0} {
            source "GUI/data_import/EOSI_Extract_Data.tcl"
            set Load_EOSI_Extract_Data 1
            WmTransient $widget(Toplevel229) $PSPTopLevel
            }
        if {$ActiveProgram == "ALOS"} {set EOSIDirInput $ALOSDirInput; set EOSIOutputDir $ALOSDirOutput }
        if {$ActiveProgram == "CSK"} {set EOSIDirInput $CSKDirInput; set EOSIOutputDir $CSKDirOutput }
        if {$ActiveProgram == "RADARSAT2"} {set EOSIDirInput $RADARSAT2DirInput; set EOSIOutputDir $RADARSAT2DirOutput }
        if {$ActiveProgram == "RISAT"} {set EOSIDirInput $RISATDirInput; set EOSIOutputDir $RISATDirOutput }
        if {$ActiveProgram == "SENTINEL1"} {set EOSIDirInput $SENTINEL1DirInput; set EOSIOutputDir $SENTINEL1DirOutput }
        if {$ActiveProgram == "TERRASARX"} {set EOSIDirInput $TERRASARXDirInput; set EOSIOutputDir $TERRASARXDirOutput }
        if {$ActiveProgram == "SIRC"} {set EOSIDirInput $SIRCDirInput; set EOSIOutputDir $SIRCDirOutput }
        set EOSIOutputSubDir "C2"
        set EOSIExtractFonction "Full"
        $widget(Label229_1) configure -state disable; $widget(Label229_2) configure -state disable
        $widget(Label229_3) configure -state disable; $widget(Label229_4) configure -state disable
        $widget(Entry229_1) configure -state disable; $widget(Entry229_2) configure -state disable
        $widget(Entry229_3) configure -state disable; $widget(Entry229_4) configure -state disable
        package require Img
        image create photo ImageEOSIExtractMenu
        ImageEOSIExtractMenu blank
        $widget(CANVASEOSIEXTRACTMENU) create image 0 0 -anchor nw -image ImageEOSIExtractMenu
        image delete ImageEOSIExtractMenu
        if {$ActiveProgram == "ALOS"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/ALOS.gif"}
        if {$ActiveProgram == "CSK"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/CSK.gif"}
        if {$ActiveProgram == "RADARSAT2"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/RADARSAT2.gif"}
        if {$ActiveProgram == "RISAT"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/RISAT.gif"}
        if {$ActiveProgram == "SENTINEL1"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/SENTINEL1.gif"}
        if {$ActiveProgram == "TERRASARX"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/TERRASARX.gif"}
        if {$ActiveProgram == "SIRC"} {image create photo ImageEOSIExtractMenu -file "GUI/Images/SIRC.gif"}
        $widget(CANVASEOSIEXTRACTMENU) create image 0 0 -anchor nw -image ImageEOSIExtractMenu
        WidgetShow $widget(Toplevel229); TextEditorRunTrace "Open Window $ActiveProgram Extract Data" "b"
        wm title $widget(Toplevel229) [file tail "$ActiveProgram Extract Data"]
        } else {
        if {$Load_EOSI_TDX_Extract_Data == 0} {
            source "GUI/data_import/EOSI_TDX_Extract_Data.tcl"
            set Load_EOSI_TDX_Extract_Data 1
            WmTransient $widget(Toplevel437) $PSPTopLevel
            }
        set EOSIDirInputMaster $TANDEMXDirInputMaster; set EOSIOutputDirMaster $TANDEMXDirOutputMaster
        set EOSIDirInputSlave $TANDEMXDirInputSlave; set EOSIOutputDirSlave $TANDEMXDirOutputSlave
        set EOSIOutputSubDir ""
        set EOSIExtractFonction "Full"
        set TANDEMXBistaticCorrection 0
        $widget(Label437_1) configure -state disable; $widget(Label437_2) configure -state disable
        $widget(Entry437_1) configure -state disable; $widget(Entry437_2) configure -state disable
        WidgetShow $widget(Toplevel437); TextEditorRunTrace "Open Window $ActiveProgram Extract Data" "b"
        wm title $widget(Toplevel437) [file tail "$ActiveProgram Extract Data"]
        }
    }} \
        -label {Full Resolution} 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global EOSIDirInput EOSIFileInputFlag
global EOSIDirInputMaster EOSIOutputDirMaster EOSIDirInputSlave EOSIOutputDirSlave
global ALOSDirInput ALOSDirOutput ALOSFileInputFlag ALOSDataFormat ALOSUnCalibration
global CSKDirInput CSKDirOutput CSKFileInputFlag CSKDataFormat CSKFileInput
global RADARSAT2DirInput RADARSAT2DirOutput RADARSAT2FileInputFlag
global RADARSAT2DataFormat RADARSAT2DataLevel RADARSAT2ProductFile
global RADARSAT2Lut RADARSAT2LutFile
global RISATDirInput RISATDirOutput RISATFileInputFlag RISATDataFormat
global SENTINEL1DirInput SENTINEL1DirOutput SENTINEL1FileInputFlag
global SENTINEL1DataFormat SENTINEL1DataLevel SENTINEL1ProductFile
global SENTINEL1Burst SENTINEL1LigInit SENTINEL1ColInit SENTINEL1LigFinal SENTINEL1ColFinal
global TERRASARXDirInput TERRASARXDirOutput TERRASARXFileInputFlag TANDEMXFileInputFlag
global TANDEMXDirInputMaster TANDEMXDirOutputMaster TANDEMXDirInputSlave TANDEMXDirOutputSlave
global SIRCDirInput SIRCDirOutput SIRCFileInputFlag
global AIRSARDirInput AIRSARDirOutput AIRSARFileInputFlag
global CONVAIRDirInput CONVAIRDirOutput CONVAIRFileInputFlag
global EMISARDirInput EMISARDirOutput EMISARFileInputFlag
global ESARDirInput ESARDirOutput ESARFileInputFlag
global PISARDirInput PISARDirOutput PISARFileInputFlag PISARDataFormat
global SETHIDirInput SETHIDirOutput SETHIFileInputFlag
global UAVSARDirInput UAVSARDirOutput UAVSARFileInputFlag
global AlosQuickLook Radarsat2QuickLook TerrasarxQuickLook TandemxQuickLook SircQuickLook CSKQuickLook RisatQuickLook Sentinel1QuickLook 
global AirsarQuickLook ConvairQuickLook EmisarQuickLook EsarQuickLook PisarQuickLook SethiQuickLook UavsarQuickLook

global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput

global QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol QLBMPMouseX QLBMPMouseY
global MouseActiveButton TrainingAreaTool

global QLBMPImageOpen QLZoomBMP QLZoom QLZoomBMP ZoomBMPQL

global DataDir FileName BMPChange BMPImageOpen BMPDirInput BMPViewFileInput SourceWidth SourceHeight 
global BMPWidth BMPHeight WidthBMP HeightBMP
global BMPImage BMPImageLens ImageSource BMPView BMPCanvas
global ColorNumber ColorNumberUtil ColorMapBMP RedPalette GreenPalette BluePalette
global BMPLensFlag RectLensCenter BMPWidthSource BMPHeightSource BMPSampleSource ZoomBMPSource
global BMPColorMapDisplay BMPColorMapGrayJetHsv BMPTrainingRect
global BMPMax BMPMin BMPValue BMPDropperFlag BMPSubAreaFlag
global TMPQuickLookRawbin TMPQuickLookAlos TMPQuickLookAsar TMPQuickLookRadarsat2 TMPQuickLookTerrasarX TMPQuickLookTandemX TMPQuickLookSirc TMPQuickLookCSK TMPQuickLookRisat TMPQuickLookSentinel1
global TMPQuickLookAirsar TMPQuickLookConvair TMPQuickLookEmisar TMPQuickLookEsar TMPQuickLookFsar TMPQuickLookPisarMGPC TMPQuickLookPisarMGPSSC TMPQuickLookSethi TMPQuickLookUavsar
package require Img

#BMP PROCESS
global Load_Save Load_ViewBMPFile Load_ViewBMP1 Load_ViewBMPLens Load_Zoom
global Load_colormap256 Load_colormap32 Load_colormap16 Load_colormap8
global Load_Display Load_ColorMapGrayJetHsv

#DATA IMPORT
global Load_SubArea_GraphicEditor PSPTopLevel

set EOSIFileInputFlag 0
if {$ActiveProgram == "ALOS"} {
    if {$ALOSFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "CSK"} {
    if {$CSKFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RADARSAT2"} {
    if {$RADARSAT2FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "RISAT"} {
    if {$RISATFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SENTINEL1"} {
    if {$SENTINEL1FileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }
if {$ActiveProgram == "SIRC"} {
    if {$SIRCFileInputFlag == 1} { set EOSIFileInputFlag 1 }
    }

if {$EOSIFileInputFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
   
############################################################################
if {$ActiveProgram == "ALOS"} {
    set QuickLookFlag 0
    if {$AlosQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAlos
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "CSK"} {
    set QuickLookFlag 0
    if {$CSKQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookCSK
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "RADARSAT2"} {
    set QuickLookFlag 0
    if {$Radarsat2QuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRadarsat2
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "RISAT"} {
    set QuickLookFlag 0
    if {$RisatQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookRisat
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "SENTINEL1"} {
    set QuickLookFlag 0
    if {$Sentinel1QuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSentinel1
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "TERRASARX"} {
    set QuickLookFlag 0
    if {$TerrasarxQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookTerrasarX
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "TANDEMX"} {
    set QuickLookFlag 0
    if {$TandemxQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookTandemX
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
if {$ActiveProgram == "SIRC"} {
    set QuickLookFlag 0
    if {$SircQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookSirc
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }

if {$QuickLookFlag == 1} {
    if {$Load_SubArea_GraphicEditor == 0} {
        source "GUI/data_import/SubArea_GraphicEditor.tcl"
        set Load_SubArea_GraphicEditor 1
        WmTransient $widget(Toplevel202) $PSPTopLevel
        }
      
    if {$Load_ViewBMP1 == 0} {
        source "GUI/bmp_process/ViewBMP1.tcl"
        set Load_ViewBMP1 1
        WmTransient $widget(Toplevel51) $PSPTopLevel
        }
    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }

    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize

    if {$ActiveProgram == "SENTINEL1"} {
        if {$SENTINEL1Burst != "ALL" } {
            set NligFullSize $SENTINEL1NligFinal
            set NligInit $SENTINEL1LigInit
            set NligEnd $SENTINEL1LigFinal
            set NcolFullSize $SENTINEL1NcolFinal
            set NcolInit $SENTINEL1ColInit
            set NcolEnd $SENTINEL1ColFinal
            }
        }

    if {$BMPImageOpen == 1} {
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    LoadPSPViewer
    load_bmp_caracteristics $BMPViewFileInput
    load_bmp_file $BMPViewFileInput    
    
    $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
    $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
    wm title $widget($BMPView) [file tail $BMPViewFileInput]

    set x [winfo x $widget($BMPView)]
    set y [winfo y $widget($BMPView)]
    set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
    append geometrie $x; append geometrie "+"; append geometrie $y
    wm geometry $widget($BMPView) $geometrie; update
    WidgetGeometryLeft $widget($BMPView)
    catch {wm geometry $widget($BMPView) {}} 
    Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"
    
    set BMPImageOpen "1"
    set QLMouseInitX ""
    set QLMouseInitY ""
    set QLMouseEndX ""
    set QLMouseEndY ""
    set QLMouseNlig ""
    set QLMouseNcol ""
    set QLBMPMouseX ""
    set QLBMPMouseY ""
    set BMPSubAreaFlag "1"
    set MouseActiveFunction ""
    set TrainingAreaTool "rect"
    set rect_color "white"
    set c0 .top202.fra69.cpd73
    WidgetShowFromWidget $widget($BMPView) $widget(Toplevel202)
    TextEditorRunTrace "Open Window Sub Area Graphic Editor" "b"
    } else {
    set ErrorMessage "CREATE A QUICKLOOK IMAGE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set QuickLookSubAreaFlag 0
    }

############################################################################
}} \
        -label {Sub Area} 
    $site_4_0.men76.m add separator \
        
    $site_4_0.men76.m add command \
        \
        -command {global FileName DataDir ConfigFile VarError ErrorMessage PSPTopLevel
#UTIL
global Load_TextEdit
if {$Load_TextEdit == 0} {
    source "GUI/util/TextEdit.tcl"
    set Load_TextEdit 1
    WmTransient $widget(Toplevel95) $PSPTopLevel
    }

set ConfigFile "$DataDir/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    TextEditorRunTrace "Open Window Text Editor" "b"
    TextEditor $ConfigFile
    } else {
    append ErrorMessage " - CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Edit Config File} 
    menubutton $site_4_0.men70 \
        -borderwidth 0 -menu "$site_4_0.men70.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men70" "IMPASAR" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men70 "$site_4_0.men70 Menubutton .top2.fra71.fra76 all _vTclBalloon"
    bind $site_4_0.men70 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Import Data}
    }
    menu $site_4_0.men70.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men70.m add command \
        \
        -command {global DataDir AsarDirInput AsarDirOutput AsarDataFormat
global FileInputASAR IEEEFormat ASARFileInputFlag
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
global VarError ErrorMessage
#DATA CONVERT
global Load_ASAR_Input_File PSPTopLevel

set AsarDirInput $DataDir
set AsarDirOutput $DataDir

if {$AsarDirInput != ""} {
    if {$Load_ASAR_Input_File == 0} {
        source "GUI/data_import/ASAR_Input_File.tcl"
        set Load_ASAR_Input_File 1
        WmTransient $widget(Toplevel200) $PSPTopLevel
        }
    set FileInputASAR ""
    set IEEEFormat "0"
    set NligFullSize ""
    set NcolFullSize ""
    set NligInit ""
    set NligEnd ""
    set NcolInit ""
    set NcolEnd ""
    set AsarDataFormat ""
    set ASARFileInputFlag 0
    WidgetShow $widget(Toplevel200); TextEditorRunTrace "Open Window ASAR Input File" "b"
    } else {
    set ErrorMessage "ENTER MAIN INPUT DIRECTORY FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Input Data File} 
    $site_4_0.men70.m add separator \
        
    $site_4_0.men70.m add command \
        \
        -command {global FileName AsarDirOutput AsarDataFormat VarError ErrorMessage PSPTopLevel
#UTIL
global Load_TextEdit
if {$Load_TextEdit == 0} {
    source "GUI/util/TextEdit.tcl"
    set Load_TextEdit 1
    WmTransient $widget(Toplevel95) $PSPTopLevel
    }

if {$AsarDataFormat != ""} {

    set types {
        {{Header Files}        {.hdr}        }
        }
    set FileName ""
    OpenFile $AsarDirOutput $types "ASAR HEADER FILE"
    set ASARHeaderFile $FileName
    if {$ASARHeaderFile != ""} {
        TextEditorRunTrace "Open Window Text Editor" "b"
        TextEditor $ASARHeaderFile
        }
    } else {
    set ErrorMessage "DEFINE INPUT DATA FORMAT FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Header Analysis} 
    $site_4_0.men70.m add separator \
        
    $site_4_0.men70.m add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global AsarDataFormat AsarDirInput FileInputASAR AsarQuickLook
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput
global SourceWidth SourceHeight WidthBMP HeightBMP WidthBMPQL HeightBMPQL
global ImageSource BMPDirInput BMPImage
global BMPWidth BMPHeight ZoomBMP BMPView BMPCanvas
global BMPViewFileInput BMPDropperFlag BMPMouseX BMPMouseY BMPChange ColorNumber
global QLBMPImageOpen QLZoomBMP QLZoom PVShortcut
global Mds1Offset Mds2Offset
global TMPQuickLookAsar PSPTopLevel

set QuickLookFlag 1
if {$ActiveProgram == "ASAR"} {
    if {$AsarDataFormat == ""} { set QuickLookFlag 0 }
    if {$FileInputASAR == ""} { set QuickLookFlag 0 }
    }        

if {$QuickLookFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

if {$QuickLookFlag == 1} {
    #BMP PROCESS
    global Load_Save Load_ViewBMPQL 
 
    if {$PVShortcut == 1} {
        set PVShortcut 0
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }
    
    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }
    if {$Load_ViewBMPQL == 0} {
        source "GUI/bmp_process/ViewBMPQL.tcl"
        set Load_ViewBMPQL 1
        $widget(CANVASBMPQL) configure -cursor arrow
        WmTransient $widget(Toplevel207) $PSPTopLevel
        }

    set WidthBMPQL $WidthBMP
    set HeightBMPQL [expr $HeightBMP - 50]

    set NligFullSize $NligFullSizeInput
    set NcolFullSize $NcolFullSizeInput
    set SourceWidth $NcolFullSizeInput
    set SourceHeight $NligFullSizeInput
    set subsample 0
    if {$SourceWidth > $WidthBMPQL} {set subsample 1}
    if {$SourceHeight > $HeightBMPQL} {set subsample 1}
    set BMPSample 1
    if {$subsample == 0} {
        set ZoomBMP "1:$BMPSample"
        set BMPWidth $SourceWidth
        set BMPHeight $SourceHeight
        } else {
        if {$SourceWidth >= $SourceHeight} {
            while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
            } else {
            while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
            } 
        set ZoomBMP "1:$BMPSample"
        set BMPWidth [expr round($SourceWidth / $BMPSample)]
        set BMPHeight [expr round($SourceHeight / $BMPSample)]
        } 
    set QLZoomBMP $ZoomBMP    
    set QLZoom $BMPSample
  
    if {$ActiveProgram == "ASAR"} {
        set BMPViewFileInput $TMPQuickLookAsar
        DeleteFile $BMPViewFileInput
        set BMPDirInput $AsarDirInput
        set Fonction "Quick Look Generation"
        set Fonction2 $FileInputASAR
        set ProgressLine "0"
        WidgetShowTop28; TextEditorRunTrace "Open Window Message" "b"
        update
        if {$AsarDataFormat == "APS"} {
            TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_asar_aps.exe" "k"
            TextEditorRunTrace "Arguments: \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" "k"
            set f [ open "| Soft/bmp_process/quicklook_asar_aps.exe \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" r]
            PsPprogressBar $f
            } else {
            TextEditorRunTrace "Process The Function Soft/bmp_process/quicklook_asar_app_apg.exe" "k"
            TextEditorRunTrace "Arguments: \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" "k"
            set f [ open "| Soft/bmp_process/quicklook_asar_app_apg.exe \x22$FileInputASAR\x22 $NcolFullSizeInput $BMPSample $BMPHeight $BMPWidth $Mds1Offset $Mds2Offset \x22$TMPQuickLookAsar\x22" r]
            PsPprogressBar $f
            }
        TextEditorRunTrace "Check RunTime Errors" "r"
        CheckRunTimeError
        WidgetHideTop28; TextEditorRunTrace "Close Window Message" "b"
        set Fonction ""; set Fonction2 ""
        }
        #End ASAR

    #Display Window and show image
    if [file exists $BMPViewFileInput] {
        if {$ActiveProgram == "ASAR"} {set AsarQuickLook 1}

        set WidthBMPQL $WidthBMP
        set HeightBMPQL [expr $HeightBMP - 50]

        image create photo BMPImage
        image create photo ImageSource -file $BMPViewFileInput
        set SourceWidth [image width ImageSource]
        set SourceHeight [image height ImageSource]

        set subsample 0
        if {$SourceWidth > $WidthBMPQL} {set subsample 1}
        if {$SourceHeight > $HeightBMPQL} {set subsample 1}

        set BMPSample 1
        if {$subsample == 0} {
            set BMPWidth $SourceWidth
            set BMPHeight $SourceHeight
            } else {
            if {$SourceWidth >= $SourceHeight} {
                while {[expr round($SourceWidth / $BMPSample)] > $WidthBMPQL} {incr BMPSample}
                } else {
                while {[expr round($SourceHeight / $BMPSample)] > $HeightBMPQL} {incr BMPSample}
                } 
            set BMPWidth [expr round($SourceWidth / $BMPSample)]
            set BMPHeight [expr round($SourceHeight / $BMPSample)]
            } 
        set QLBMPImageOpen "1"
        set BMPDropperFlag "0"
        set BMPChange "0"
        set ColorNumber "BMP 24 Bits"
        set BMPMouseX ""
        set BMPMouseY ""
        if {$Load_ViewBMPQL == 1} {Window hide $widget(VIEWBMPQL)}
        BMPImage blank
        BMPImage copy ImageSource -from 0 0 $SourceWidth $SourceHeight -subsample $BMPSample $BMPSample

        $widget(CANVASBMPQL) configure -width $BMPWidth -height $BMPHeight
        $widget(CANVASBMPQL) create image 0 0 -anchor nw -image BMPImage
        wm title $widget(VIEWBMPQL) [file tail $BMPViewFileInput]

        set x [winfo x $widget(VIEWBMPQL)]
        set y [winfo y $widget(VIEWBMPQL)]
        set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
        append geometrie $x; append geometrie "+"; append geometrie $y
        wm geometry $widget(VIEWBMPQL) $geometrie; update
        WidgetGeometryLeft $widget(VIEWBMPQL)
        catch {wm geometry $widget(VIEWBMPQL) {}} 
        Window show $widget(VIEWBMPQL); TextEditorRunTrace "Open Window View BMP Quick Look" "b"        
        } else {
        if {$ActiveProgram == "ASAR"} {set AsarQuickLook 0}
        set ErrorMessage "QUICKLOOK IMAGE NOT CREATED"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }} \
        -label {Quick Look} 
    $site_4_0.men70.m add separator \
        
    $site_4_0.men70.m add cascade \
        -menu "$site_4_0.men70.m.men71" -command {} -label Extract 
    set site_6_0 $site_4_0.men70.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global FileInputASAR AsarDataFormat AsarDirOutput AsarExtractFonction
global MultiLookRow MultiLookCol SubSampRow SubSampCol
global NligInit NligEnd NligFullSize NcolInit NcolEnd NcolFullSize NligFullSizeInput NcolFullSizeInput
#DATA IMPORT
global Load_ASAR_Extract_Data PSPTopLevel

set ExtractFlag 1
if {$ActiveProgram == "ASAR"} {
    if {$AsarDataFormat == ""} { set ExtractFlag 0 }
    if {$FileInputASAR == ""} { set ExtractFlag 0 }
    }

if {$ExtractFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

if {$ExtractFlag == 1} {

    if {$Load_ASAR_Extract_Data == 0} {
        source "GUI/data_import/ASAR_Extract_Data.tcl"
        set Load_ASAR_Extract_Data 1
        WmTransient $widget(Toplevel203) $PSPTopLevel
        }
    set AsarExtractFonction "Full"
    set MultiLookRow ""
    set MultiLookCol ""
    set SubSampRow ""
    set SubSampCol ""
    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize
    $widget(Label203_1) configure -state disable
    $widget(Label203_2) configure -state disable
    $widget(Label203_3) configure -state disable
    $widget(Label203_4) configure -state disable
    $widget(Entry203_1) configure -state disable
    $widget(Entry203_2) configure -state disable
    $widget(Entry203_3) configure -state disable
    $widget(Entry203_4) configure -state disable
    WidgetShow $widget(Toplevel203); TextEditorRunTrace "Open Window ASAR Extract Data" "b"
    }} \
        -label {Full Resolution} 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram VarError ErrorMessage
global FileInputASAR AsarDataFormat
global NligFullSize NcolFullSize NligFullSizeInput NcolFullSizeInput

global QLMouseInitX QLMouseInitY QLMouseEndX QLMouseEndY QLMouseNlig QLMouseNcol QLBMPMouseX QLBMPMouseY
global MouseActiveButton TrainingAreaTool

global QLBMPImageOpen QLZoomBMP QLZoom QLZoomBMP ZoomBMPQL

global DataDir FileName BMPChange BMPImageOpen BMPDirInput BMPViewFileInput SourceWidth SourceHeight 
global BMPWidth BMPHeight WidthBMP HeightBMP
global BMPImage BMPImageLens ImageSource BMPView BMPCanvas
global ColorNumber ColorNumberUtil ColorMapBMP RedPalette GreenPalette BluePalette
global BMPLensFlag RectLensCenter BMPWidthSource BMPHeightSource BMPSampleSource ZoomBMPSource
global BMPColorMapDisplay BMPColorMapGrayJetHsv BMPTrainingRect
global BMPMax BMPMin BMPValue BMPDropperFlag BMPSubAreaFlag
package require Img

#BMP PROCESS
global Load_Save Load_ViewBMPFile Load_ViewBMP1 Load_ViewBMPLens Load_Zoom
global Load_colormap256 Load_colormap32 Load_colormap16 Load_colormap8
global Load_Display Load_ColorMapGrayJetHsv PSPTopLevel

#DATA IMPORT
global Load_SubArea_GraphicEditor 

set ExtractFlag 1
if {$ActiveProgram == "ASAR"} {
    if {$AsarDataFormat == ""} { set ExtractFlag 0 }
    if {$FileInputASAR == ""} { set ExtractFlag 0 }
    }

if {$ExtractFlag == 0} {
    set ErrorMessage "ENTER INPUT DATA FILE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    
if {$ExtractFlag == 1} {   
############################################################################
if {$ActiveProgram == "ASAR"} {
    set QuickLookFlag 0
    if {$AsarQuickLook == 1} {
        set BMPViewFileInput $TMPQuickLookAsar
        if [file exists $BMPViewFileInput] {set QuickLookFlag 1}
        }
    }
            
if {$QuickLookFlag == 1} {
    if {$Load_SubArea_GraphicEditor == 0} {
        source "GUI/data_import/SubArea_GraphicEditor.tcl"
        set Load_SubArea_GraphicEditor 1
        WmTransient $widget(Toplevel202) $PSPTopLevel
        }
      
    if {$Load_ViewBMP1 == 0} {
        source "GUI/bmp_process/ViewBMP1.tcl"
        set Load_ViewBMP1 1
        WmTransient $widget(Toplevel51) $PSPTopLevel
        }
    if {$Load_Save == 0} {
        source "GUI/bmp_process/Save.tcl"
        set Load_Save 1
        WmTransient $widget(Toplevel82) $PSPTopLevel
        }

    set NligFullSize $NligFullSizeInput
    set NligInit 1
    set NligEnd $NligFullSize
    set NcolFullSize $NcolFullSizeInput
    set NcolInit 1
    set NcolEnd $NcolFullSize

    if {$BMPImageOpen == 1} {
        ClosePSPViewer
        Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"
        }

    LoadPSPViewer
    load_bmp_caracteristics $BMPViewFileInput
    load_bmp_file $BMPViewFileInput    
    
    $widget($BMPCanvas) configure -width $BMPWidth -height $BMPHeight
    $widget($BMPCanvas) create image 0 0 -anchor nw -image BMPImage
    wm title $widget($BMPView) [file tail $BMPViewFileInput]

    set x [winfo x $widget($BMPView)]
    set y [winfo y $widget($BMPView)]
    set geometrie $BMPWidth; append geometrie "x"; append geometrie $BMPHeight; append geometrie "+";
    append geometrie $x; append geometrie "+"; append geometrie $y
    wm geometry $widget($BMPView) $geometrie; update
    WidgetGeometryLeft $widget($BMPView)
    catch {wm geometry $widget($BMPView) {}} 
    Window show $widget($BMPView); TextEditorRunTrace "Open Window View $BMPView" "b"
    
    set BMPImageOpen "1"
    set QLMouseInitX ""
    set QLMouseInitY ""
    set QLMouseEndX ""
    set QLMouseEndY ""
    set QLMouseNlig ""
    set QLMouseNcol ""
    set QLBMPMouseX ""
    set QLBMPMouseY ""
    set BMPSubAreaFlag "1"
    set MouseActiveFunction ""
    set TrainingAreaTool "rect"
    set rect_color "white"
    set c0 .top202.fra69.cpd73
    $c0 configure -background $rect_color
    WidgetShowFromWidget $widget($BMPView) $widget(Toplevel202)
    TextEditorRunTrace "Open Window Sub Area Graphic Editor" "b"
    } else {
    set ErrorMessage "CREATE A QUICKLOOK IMAGE FIRST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set QuickLookSubAreaFlag 0
    }

############################################################################
}} \
        -label {Sub Area} 
    $site_4_0.men70.m add separator \
        
    $site_4_0.men70.m add command \
        \
        -command {global FileName DataDir ConfigFile VarError ErrorMessage PSPTopLevel
#UTIL
global Load_TextEdit
if {$Load_TextEdit == 0} {
    source "GUI/util/TextEdit.tcl"
    set Load_TextEdit 1
    WmTransient $widget(Toplevel95) $PSPTopLevel
    }

set ConfigFile "$DataDir/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    TextEditorRunTrace "Open Window Text Editor" "b"
    TextEditor $ConfigFile
    } else {
    append ErrorMessage " - CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Edit Config File} 
    pack $site_4_0.men69 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men98 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men74 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men76 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men70 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra77 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra77" "FrameConvert" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra77
    button $site_4_0.cpd67 \
        -borderwidth 0 \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ConvertDirInput ConvertDirOutput ConvertOutputDir ConvertOutputSubDir
global ConfigFile PolarCase PolarType VarError ErrorMessage
global ConvertFonction ConvertInputFormat ConvertSymmetrisation
global ConvertOutputFormat ConvertOutputFormatPP ConvertExtractFonction
global MultiLookRow MultiLookCol SubSampRow SubSampCol

#DATA CONVERT
global Load_DataFileConvertS2 Load_DataFileConvertC3 Load_DataFileConvertC4
global Load_DataFileConvertT3 Load_DataFileConvertT4 Load_DataFileConvertSPPIPPC2 PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    set ConvertDirInput ""
    set ConvertDirOutput ""
    set ConvertOutputDir ""
    set ConvertOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set MultiLookRow ""
    set MultiLookCol ""
    set SubSampRow ""
    set SubSampCol ""
    set ConvertExtractFonction "Full"
    set ConvertOutputFormat ""
    set ConvertOutputFormatPP ""

    set ConvertDirOutput $DataDir
    set ConvertOutputDir $DataDir

    if {$DataFormatActive == "S2"} {
        if {$Load_DataFileConvertS2 == 0} {
            source "GUI/data_convert/DataFileConvertS2.tcl"
            set Load_DataFileConvertS2 1
            WmTransient $widget(Toplevel410) $PSPTopLevel
            }
        $widget(Label410_1) configure -state disable; $widget(Label410_2) configure -state disable
        $widget(Label410_3) configure -state disable; $widget(Label410_4) configure -state disable
        $widget(Entry410_1) configure -state disable; $widget(Entry410_2) configure -state disable
        $widget(Entry410_3) configure -state disable; $widget(Entry410_4) configure -state disable
        set ConvertDirInput $DataDir
        set ConvertOutputSubDir ""
        set ConvertFonction "S2"
        $widget(Radiobutton410_1) configure -state normal; $widget(Radiobutton410_2) configure -state normal
        $widget(Radiobutton410_3) configure -state normal; $widget(Radiobutton410_4) configure -state normal
        $widget(Radiobutton410_5) configure -state normal; $widget(Radiobutton410_6) configure -state normal
        $widget(Radiobutton410_7) configure -state normal
        if {$PolarCase == "monostatic"} {
            set ConvertSymmetrisation 1; $widget(Checkbutton410_1) configure -state disable
            $widget(Radiobutton410_9) configure -state disable; $widget(Radiobutton410_10) configure -state disable
            }
        if {$PolarCase == "bistatic"} {
            set ConvertSymmetrisation 0; $widget(Checkbutton410_1) configure -state normal
            $widget(Radiobutton410_9) configure -state normal; $widget(Radiobutton410_10) configure -state normal
            }
        set ConvertInputFormat "2x2 Complex Scattering Matrix S2" 
        }       
 
    if { $DataFormatActive == "C3" } {
        if {$Load_DataFileConvertC3 == 0} {
            source "GUI/data_convert/DataFileConvertC3.tcl"
            set Load_DataFileConvertC3 1
            WmTransient $widget(Toplevel413) $PSPTopLevel
            }
        $widget(Label413_1) configure -state disable; $widget(Label413_2) configure -state disable
        $widget(Label413_3) configure -state disable; $widget(Label413_4) configure -state disable
        $widget(Entry413_1) configure -state disable; $widget(Entry413_2) configure -state disable
        $widget(Entry413_3) configure -state disable; $widget(Entry413_4) configure -state disable
        set ConvertDirInput "$DataDir/C3"
        set ConvertOutputSubDir "C3"
        set ConvertFonction "C3"
        set ConvertSymmetrisation 1
        set ConvertInputFormat "3x3 Complex Covariance Matrix C3" 
        }

    if { $DataFormatActive == "T3" } {
        if {$Load_DataFileConvertT3 == 0} {
            source "GUI/data_convert/DataFileConvertT3.tcl"
            set Load_DataFileConvertT3 1
            WmTransient $widget(Toplevel411) $PSPTopLevel
            }
        $widget(Label411_1) configure -state disable; $widget(Label411_2) configure -state disable
        $widget(Label411_3) configure -state disable; $widget(Label411_4) configure -state disable
        $widget(Entry411_1) configure -state disable; $widget(Entry411_2) configure -state disable
        $widget(Entry411_3) configure -state disable; $widget(Entry411_4) configure -state disable
        set ConvertDirInput "$DataDir/T3"
        set ConvertOutputSubDir "T3"
        set ConvertFonction "T3"
        set ConvertSymmetrisation 1
        set ConvertInputFormat "3x3 Complex Coherency Matrix T3" 
        }

    if { $DataFormatActive == "C4" } {
        if {$Load_DataFileConvertC4 == 0} {
            source "GUI/data_convert/DataFileConvertC4.tcl"
            set Load_DataFileConvertC4 1
            WmTransient $widget(Toplevel414) $PSPTopLevel
            }
        $widget(Label414_1) configure -state disable; $widget(Label414_2) configure -state disable
        $widget(Label414_3) configure -state disable; $widget(Label414_4) configure -state disable
        $widget(Entry414_1) configure -state disable; $widget(Entry414_2) configure -state disable
        $widget(Entry414_3) configure -state disable; $widget(Entry414_4) configure -state disable
        set ConvertDirInput "$DataDir/C4"
        set ConvertOutputSubDir "C4"
        set ConvertFonction "C4"
        set ConvertSymmetrisation 0
        set ConvertInputFormat "4x4 Complex Covariance Matrix C4" 
        $widget(Checkbutton414_1) configure -state normal
        $widget(Radiobutton414_4) configure -state normal; $widget(Radiobutton414_5) configure -state normal
        }

    if { $DataFormatActive == "T4" } {
        if {$Load_DataFileConvertT4 == 0} {
            source "GUI/data_convert/DataFileConvertT4.tcl"
            set Load_DataFileConvertT4 1
            WmTransient $widget(Toplevel412) $PSPTopLevel
            }
        $widget(Label412_1) configure -state disable; $widget(Label412_2) configure -state disable
        $widget(Label412_3) configure -state disable; $widget(Label412_4) configure -state disable
        $widget(Entry412_1) configure -state disable; $widget(Entry412_2) configure -state disable
        $widget(Entry412_3) configure -state disable; $widget(Entry412_4) configure -state disable
        set ConvertDirInput "$DataDir/T4"
        set ConvertOutputSubDir "T4"
        set ConvertFonction "T4"
        set ConvertSymmetrisation 0
        set ConvertInputFormat "4x4 Complex Coherency Matrix T4" 
        $widget(Checkbutton412_1) configure -state normal
        $widget(Radiobutton412_4) configure -state normal; $widget(Radiobutton412_5) configure -state normal
        }

    if {$DataFormatActive == "C2"} {
        if {$Load_DataFileConvertSPPIPPC2 == 0} {
            source "GUI/data_convert/DataFileConvertSPPIPPC2.tcl"
            set Load_DataFileConvertSPPIPPC2 1
            WmTransient $widget(Toplevel415) $PSPTopLevel
            }
        $widget(Label415_1) configure -state disable; $widget(Label415_2) configure -state disable
        $widget(Label415_3) configure -state disable; $widget(Label415_4) configure -state disable
        $widget(Entry415_1) configure -state disable; $widget(Entry415_2) configure -state disable
        $widget(Entry415_3) configure -state disable; $widget(Entry415_4) configure -state disable
        $widget(Radiobutton415_1) configure -state disable; $widget(Radiobutton415_2) configure -state disable
        $widget(Radiobutton415_3) configure -state disable; $widget(Radiobutton415_4) configure -state disable
        $widget(Radiobutton415_5) configure -state normal
        set ConvertDirInput "$DataDir/C2"
        set ConvertOutputSubDir "C2"
        set ConvertFonction "C2"
        set ConvertSymmetrisation 1
        set ConvertInputFormat "2x2 Complex Covariance Matrix C2" 
        }

    if {$DataFormatActive == "T2"} {
        if {$Load_DataFileConvertSPPIPPC2 == 0} {
            source "GUI/data_convert/DataFileConvertSPPIPPC2.tcl"
            set Load_DataFileConvertSPPIPPC2 1
            WmTransient $widget(Toplevel415) $PSPTopLevel
            }
        $widget(Label415_1) configure -state disable; $widget(Label415_2) configure -state disable
        $widget(Label415_3) configure -state disable; $widget(Label415_4) configure -state disable
        $widget(Entry415_1) configure -state disable; $widget(Entry415_2) configure -state disable
        $widget(Entry415_3) configure -state disable; $widget(Entry415_4) configure -state disable
        $widget(Radiobutton415_1) configure -state disable; $widget(Radiobutton415_2) configure -state disable
        $widget(Radiobutton415_3) configure -state disable; $widget(Radiobutton415_4) configure -state disable
        $widget(Radiobutton415_5) configure -state normal
        set ConvertDirInput "$DataDir/T2"
        set ConvertOutputSubDir "T2"
        set ConvertFonction "T2"
        set ConvertSymmetrisation 1
        set ConvertInputFormat "2x2 Complex Coherency Matrix T2" 
        }

    if {$DataFormatActive == "SPP"} {
        if {$Load_DataFileConvertSPPIPPC2 == 0} {
            source "GUI/data_convert/DataFileConvertSPPIPPC2.tcl"
            set Load_DataFileConvertSPPIPPC2 1
            WmTransient $widget(Toplevel415) $PSPTopLevel
            }
        $widget(Label415_1) configure -state disable; $widget(Label415_2) configure -state disable
        $widget(Label415_3) configure -state disable; $widget(Label415_4) configure -state disable
        $widget(Entry415_1) configure -state disable; $widget(Entry415_2) configure -state disable
        $widget(Entry415_3) configure -state disable; $widget(Entry415_4) configure -state disable
        $widget(Radiobutton415_1) configure -state normal; $widget(Radiobutton415_2) configure -state normal
        $widget(Radiobutton415_3) configure -state normal; $widget(Radiobutton415_4) configure -state disable
        $widget(Radiobutton415_5) configure -state disable
        set ConvertDirInput $DataDir
        set ConvertOutputSubDir ""
        set ConvertFonction "SPP"
        set ConvertSymmetrisation 1
        set ConvertInputFormat "Dual Polarisation elements" 
        }    

    if {$DataFormatActive == "IPP"} {
        if {$Load_DataFileConvertSPPIPPC2 == 0} {
            source "GUI/data_convert/DataFileConvertSPPIPPC2.tcl"
            set Load_DataFileConvertSPPIPPC2 1
            WmTransient $widget(Toplevel415) $PSPTopLevel
            }
        $widget(Label415_1) configure -state disable; $widget(Label415_2) configure -state disable
        $widget(Label415_3) configure -state disable; $widget(Label415_4) configure -state disable
        $widget(Entry415_1) configure -state disable; $widget(Entry415_2) configure -state disable
        $widget(Entry415_3) configure -state disable; $widget(Entry415_4) configure -state disable
        $widget(Radiobutton415_1) configure -state disable; $widget(Radiobutton415_2) configure -state disable
        $widget(Radiobutton415_3) configure -state disable; $widget(Radiobutton415_4) configure -state normal
        $widget(Radiobutton415_5) configure -state disable
        set ConvertDirInput $DataDir
        set ConvertOutputSubDir ""
        set ConvertFonction "IPP"
        set ConvertSymmetrisation 1
        set ConvertInputFormat "Intensities Elements" 
        }    

    set ConfigFile "$ConvertDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$DataFormatActive == "S2"} { WidgetShow $widget(Toplevel410) }       
        if {$DataFormatActive == "C2"} { WidgetShow $widget(Toplevel415) }
        if {$DataFormatActive == "T2"} { WidgetShow $widget(Toplevel415) }
        if {$DataFormatActive == "C3"} { WidgetShow $widget(Toplevel413) }
        if {$DataFormatActive == "T3"} { WidgetShow $widget(Toplevel411) }
        if {$DataFormatActive == "C4"} { WidgetShow $widget(Toplevel414) }
        if {$DataFormatActive == "T4"} { WidgetShow $widget(Toplevel412) }
        if {$DataFormatActive == "SPP"} { WidgetShow $widget(Toplevel415) }    
        if {$DataFormatActive == "IPP"} { WidgetShow $widget(Toplevel415) }    
        TextEditorRunTrace "Open Window Data File Convert" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -pady 0 -relief flat -state disabled -text Convert 
    vTcl:DefineAlias "$site_4_0.cpd67" "CONSNGL" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd67 "$site_4_0.cpd67 Button $top all _vTclBalloon"
    bind $site_4_0.cpd67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Convert Data}
    }
    button $site_4_0.cpd68 \
        -borderwidth 0 \
        -command {global FileName DataFormatActive DataDirChannel1 DataDirChannel2
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global MasterOutputDir SlaveOutputDir MasterSlaveOutputDir
global ConvertMasterDirInput ConvertSlaveDirInput
global ConvertMasterOutputDir ConvertSlaveOutputDir ConvertMasterSlaveOutputDir
global ConvertDirInput ConvertDirOutput ConvertOutputDir ConvertOutputSubDir
global ConfigFile PolarCase PolarType VarError ErrorMessage
global ConvertFonction ConvertInputFormat ConvertSymmetrisation
global ConvertOutputFormat ConvertExtractFonction
global MultiLookRow MultiLookCol SubSampRow SubSampCol

#DATA CONVERT
global Load_DataFileConvertDual PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_DataFileConvertDual == 0} {
    source "GUI/data_convert/DataFileConvertDual.tcl"
    set Load_DataFileConvertDual 1
    WmTransient $widget(Toplevel302) $PSPTopLevel
    }

set MasterOutputDir ""
set SlaveOutputDir ""
set MasterSlaveOutputDir ""
set ConvertMasterDirInput ""
set ConvertSlaveDirInput ""
set ConvertDirOutput ""
set ConvertMasterOutputDir ""
set ConvertSlaveOutputDir ""
set ConvertMasterSlaveOutputDir ""
set ConvertOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MultiLookRow ""
set MultiLookCol ""
set SubSampRow ""
set SubSampCol ""
set ConvertExtractFonction "Full"
set ConvertOutputFormat ""
set ConvertSymmetrisation 1

$widget(Label302_1) configure -state disable
$widget(Label302_2) configure -state disable
$widget(Label302_3) configure -state disable
$widget(Label302_4) configure -state disable
$widget(Entry302_1) configure -state disable
$widget(Entry302_2) configure -state disable
$widget(Entry302_3) configure -state disable
$widget(Entry302_4) configure -state disable
$widget(Radiobutton302_1) configure -state disable
$widget(Radiobutton302_2) configure -state disable
$widget(Radiobutton302_3) configure -state disable
$widget(Radiobutton302_4) configure -state disable
$widget(Radiobutton302_5) configure -state disable
$widget(Radiobutton302_6) configure -state disable

if {$DataFormatActive == "S2"} {
    set ConvertInputFormat "2x2 Complex Scattering Matrix S2" 
    set ConvertFonction "S2"
    $widget(TitleFrame302_1) configure -text "Input Master Directory"    
    $widget(TitleFrame302_2) configure -text "Input Slave Directory"    
    $widget(Entry302_02) configure -disabledbackground #FFFFFF
    $widget(Entry302_02) configure -state disable
    $widget(TitleFrame302_3) configure -text ""
    $widget(Entry302_03) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_03) configure -state disable
    $widget(Button302_1) configure -state disable
    $widget(TitleFrame302_4) configure -text ""
    $widget(Entry302_04) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_04) configure -state disable
    $widget(Button302_2) configure -state disable        
    $widget(TitleFrame302_5) configure -text ""
    $widget(Entry302_05) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_05) configure -state disable
    $widget(Entry302_06) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_06) configure -state disable
    $widget(Button302_3) configure -state disable
    $widget(Label302_01) configure -state disable
    set ConvertMasterDirInput $DataDirChannel1
    set ConvertSlaveDirInput $DataDirChannel2
    set ConvertMasterOutputDir ""
    set ConvertSlaveOutputDir ""
    set ConvertMasterSlaveOutputDir ""
    set ConvertOutputSubDir ""
    set MasterOutputDir $DataDirChannel1
    set SlaveOutputDir $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set config ""
    set ConfigFile "$DataDirChannel1/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set config "master"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    set ConfigFile "$DataDirChannel2/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        append config "slave"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "SPP"} {
    set ConvertInputFormat "Dual Polarisation Elements" 
    set ConvertFonction "SPP"
    $widget(TitleFrame302_1) configure -text "Input Master Directory"    
    $widget(TitleFrame302_2) configure -text "Input Slave Directory"    
    $widget(Entry302_02) configure -disabledbackground #FFFFFF
    $widget(Entry302_02) configure -state disable
    $widget(TitleFrame302_3) configure -text ""
    $widget(Entry302_03) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_03) configure -state disable
    $widget(Button302_1) configure -state disable
    $widget(TitleFrame302_4) configure -text ""
    $widget(Entry302_04) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_04) configure -state disable
    $widget(Button302_2) configure -state disable        
    $widget(TitleFrame302_5) configure -text ""
    $widget(Entry302_05) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_05) configure -state disable
    $widget(Entry302_06) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_06) configure -state disable
    $widget(Button302_3) configure -state disable
    $widget(Label302_01) configure -state disable
    set ConvertMasterDirInput $DataDirChannel1
    set ConvertSlaveDirInput $DataDirChannel2
    set ConvertMasterOutputDir ""
    set ConvertSlaveOutputDir ""
    set ConvertMasterSlaveOutputDir ""
    set ConvertOutputSubDir ""
    set MasterOutputDir $DataDirChannel1
    set SlaveOutputDir $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set config ""
    set ConfigFile "$DataDirChannel1/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set config "master"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    set ConfigFile "$DataDirChannel2/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        append config "slave"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "T4"} {
    set ConvertInputFormat "4x4 Complex Coherency Matrix T4" 
    set ConvertFonction "T4"
    set ConvertOutputFormat "T4"
    $widget(TitleFrame302_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame302_2) configure -text ""
    $widget(Entry302_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_02) configure -state disable
    $widget(TitleFrame302_3) configure -text ""
    $widget(Entry302_03) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_03) configure -state disable
    $widget(Button302_1) configure -state disable
    $widget(TitleFrame302_4) configure -text ""
    $widget(Entry302_04) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_04) configure -state disable
    $widget(Button302_2) configure -state disable        
    $widget(TitleFrame302_5) configure -text "Output Master-Slave Directory"
    $widget(Entry302_05) configure -disabledbackground #FFFFFF
    $widget(Entry302_05) configure -state normal
    $widget(Entry302_06) configure -disabledbackground #FFFFFF
    $widget(Entry302_06) configure -state disable
    $widget(Button302_3) configure -state normal
    $widget(Label302_01) configure -state normal
    set ConvertMasterDirInput "$DataDirChannel1/T4"
    set ConvertSlaveDirInput ""
    set ConvertMasterOutputDir ""
    set ConvertSlaveOutputDir ""
    set ConvertMasterSlaveOutputDir $DataDirChannel1
    set ConvertOutputSubDir "T4"
    set MasterOutputDir ""
    set SlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set config ""
    set ConfigFile "$DataDirChannel1/T4/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set config "masterslave"
        }
    }    

if {$DataFormatActive == "T6"} {
    set ConvertInputFormat "6x6 Complex Coherency Matrix T6" 
    set ConvertFonction "T6"
    set ConvertOutputFormat "T6"
    $widget(TitleFrame302_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame302_2) configure -text ""
    $widget(Entry302_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_02) configure -state disable
    $widget(TitleFrame302_3) configure -text ""
    $widget(Entry302_03) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_03) configure -state disable
    $widget(Button302_1) configure -state disable
    $widget(TitleFrame302_4) configure -text ""
    $widget(Entry302_04) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry302_04) configure -state disable
    $widget(Button302_2) configure -state disable        
    $widget(TitleFrame302_5) configure -text "Output Master-Slave Directory"
    $widget(Entry302_05) configure -disabledbackground #FFFFFF
    $widget(Entry302_05) configure -state normal
    $widget(Entry302_06) configure -disabledbackground #FFFFFF
    $widget(Entry302_06) configure -state disable
    $widget(Button302_3) configure -state normal
    $widget(Label302_01) configure -state normal
    set ConvertMasterDirInput "$DataDirChannel1/T6"
    set ConvertSlaveDirInput ""
    set ConvertMasterOutputDir ""
    set ConvertSlaveOutputDir ""
    set ConvertMasterSlaveOutputDir $DataDirChannel1
    set ConvertOutputSubDir "T6"
    set MasterOutputDir ""
    set SlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set config ""
    set ConfigFile "$DataDirChannel1/T6/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set config "masterslave"
        }
    }    

    if {$config == "masterslave"} {
        if {$DataFormatActive == "S2"} {
            $widget(Radiobutton302_1) configure -state normal
            $widget(Radiobutton302_3) configure -state normal
            }
        if {$DataFormatActive == "SPP"} {
            $widget(Radiobutton302_4) configure -state normal
            $widget(Radiobutton302_6) configure -state normal
            }
        if {$DataFormatActive == "T4"} {
            $widget(Radiobutton302_5) configure -state normal
            }
        if {$DataFormatActive == "T6"} {
            $widget(Radiobutton302_2) configure -state normal
            }
        WidgetShow $widget(Toplevel302); TextEditorRunTrace "Open Window Data File Convert Dual" "b"
        }

# Config Format
}} \
        -pady 0 -relief flat -state disabled 
    vTcl:DefineAlias "$site_4_0.cpd68" "CONDUAL" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd68 "$site_4_0.cpd68 Button $top all _vTclBalloon"
    bind $site_4_0.cpd68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Convert Data}
    }
    button $site_4_0.cpd69 \
        -borderwidth 0 \
        -command {global DataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ConvertDirInput ConvertInputSubDir 
global ConvertDirOutput ConvertOutputDir ConvertOutputSubDir ConvertOutputDirExt
global ConfigFile PolarCase PolarType VarError ErrorMessage
global ConvertFonction ConvertInputFormat ConvertSymmetrisation
global ConvertOutputFormat ConvertOutputFormatPP ConvertExtractFonction
global MultiLookRow MultiLookCol SubSampRow SubSampCol
global ConvertFormatInput ConvertFormatOutput
global TestDataDirMult

#DATA CONVERT MULT
global Load_DataFileConvertMult PSPTopLevel

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_DataFileConvertMult == 0} {
    source "GUI/data_convert/DataFileConvertMult.tcl"
    set Load_DataFileConvertMult 1
    WmTransient $widget(Toplevel504) $PSPTopLevel
    }

set ConvertDirInput ""
set ConvertOutputDirExt "_???"
set ConvertInputSubDir ""
set ConvertDirOutput ""
set ConvertOutputDir ""
set ConvertOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MultiLookRow ""
set MultiLookCol ""
set SubSampRow ""
set SubSampCol ""
set ConvertExtractFonction "Full"
set ConvertOutputFormat ""
set ConvertOutputFormatPP ""

$widget(Radiobutton504_1) configure -state disable
$widget(Radiobutton504_2) configure -state disable
$widget(Radiobutton504_3) configure -state disable
$widget(Radiobutton504_4) configure -state disable
$widget(Radiobutton504_5) configure -state disable
$widget(Radiobutton504_6) configure -state disable
$widget(Label504_1) configure -state disable
$widget(Label504_2) configure -state disable
$widget(Label504_3) configure -state disable
$widget(Label504_4) configure -state disable
$widget(Entry504_1) configure -state disable
$widget(Entry504_2) configure -state disable
$widget(Entry504_3) configure -state disable
$widget(Entry504_4) configure -state disable

set ConvertDirInput $DataDirMult(1)
set ConvertOutputDir "$DataDirMult(1)_???"
set ConvertDirOutput $ConvertOutputDir
set ConvertSymmetrisation 1

    if {$DataFormatActive == "S2"} {
        set ConvertInputSubDir ""
        set ConvertOutputSubDir ""
        set ConvertFonction "S2"
        set ConvertFormatInput "2x2 Complex Scattering Matrix S2" 
        $widget(Radiobutton504_4) configure -state normal
        $widget(Radiobutton504_5) configure -state normal
        $widget(Radiobutton504_6) configure -state normal
        }       

    if {$DataFormatActive == "T3"} {
        set ConvertInputSubDir "T3"
        set ConvertOutputSubDir "T3"
        set ConvertFonction "T3"
        set ConvertOutputFormat "T3"
        set ConvertFormatInput "3x3 Complex Coherency Matrix T3" 
        $widget(Radiobutton504_6) configure -state normal
        }       

    if {$DataFormatActive == "SPP"} {
        set ConvertInputSubDir ""
        set ConvertOutputSubDir ""
        set ConvertFonction "SPP"
        set ConvertOutputFormat ""
        set ConvertFormatInput "Dual Polarisation elements" 
        $widget(Radiobutton504_1) configure -state normal
        $widget(Radiobutton504_2) configure -state normal
        $widget(Radiobutton504_3) configure -state normal
        }    

    if {$DataFormatActive == "C2"} {
        set ConvertInputSubDir "C2"
        set ConvertOutputSubDir "C2"
        set ConvertFonction "C2"
        set ConvertOutputFormat "C2"
        set ConvertFormatInput "2x2 Complex Covariance Matrix C2" 
        $widget(Radiobutton504_3) configure -state normal
        }    

    if {$DataFormatActive == "T2"} {
        set ConvertInputSubDir "T2"
        set ConvertOutputSubDir "T2"
        set ConvertFonction "T2"
        set ConvertOutputFormat "T2"
        set ConvertFormatInput "2x2 Complex Coherency Matrix T2" 
        $widget(Radiobutton504_3) configure -state normal
        }    

    if {$ConvertInputSubDir != ""} {append ConvertDirInput "/$ConvertInputSubDir"}

    set ConfigFile "$ConvertDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel504); TextEditorRunTrace "Open Window Data File Convert Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}

}} \
        -pady 0 -relief flat -state disabled 
    vTcl:DefineAlias "$site_4_0.cpd69" "CONMULT" vTcl:WidgetProc "Toplevel2" 1
    pack $site_4_0.cpd67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.cpd68 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.cpd69 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra78 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra78" "FrameProcess" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra78
    menubutton $site_4_0.men58 \
        -borderwidth 0 -menu "$site_4_0.men58.m" -padx 0 -pady 0 \
        -state disabled -text Process 
    vTcl:DefineAlias "$site_4_0.men58" "PROPSP" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men58 "$site_4_0.men58 Menubutton .top2.fra71.fra78 all _vTclBalloon"
    bind $site_4_0.men58 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men58.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    vTcl:DefineAlias "$site_4_0.men58.m" "Menu24" vTcl:WidgetProc "" 1
    $site_4_0.men58.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global ConfigFile VarError ErrorMessage Fonction Fonction2
global SlrDirInput SlrDirOutput SinclairFonction
global CohDirInput CohDirOutput CohOutputDir CohOutputSubDir
global CovDirInput CovDirOutput CovOutputDir CovOutputSubDir 
global IntDirInput IntDirOutput

#DATA PROCESS SNGL
global PSPTopLevel
global Load_SinclairElements Load_CovarianceElementsT2 Load_CovarianceElementsT3 Load_CovarianceElementsT4
global Load_CovarianceElementsC2 Load_CovarianceElementsC3 Load_CovarianceElementsC4 
global Load_IntensitiesElements

set SlrDirInput ""; set SlrDirOutput ""
set CohDirInput ""; set CohDirOutput ""
set CohOutputDir ""; set CohOutputSubDir ""
set CovDirInput ""; set CovDirOutput ""
set CovOutputDir ""; set CovOutputSubDir ""
set IntDirInput ""; set IntDirOutput ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    if {$Load_SinclairElements == 0} {
        source "GUI/data_process_sngl/SinclairElements.tcl"
        set Load_SinclairElements 1
        WmTransient $widget(Toplevel86) $PSPTopLevel
        }

    set SinclairFonction "S2"
    set SlrDirInput "$DataDir"
    set SlrDirOutput "$DataDir"
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""
    $widget(Checkbutton86_1) configure -state disable
    $widget(Checkbutton86_2) configure -state disable
    $widget(Checkbutton86_3) configure -state disable
    $widget(Checkbutton86_4) configure -state disable
    $widget(Checkbutton86_5) configure -state disable
    $widget(Checkbutton86_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            $widget(Label86_1) configure -state normal
            $widget(Label86_2) configure -state normal
            $widget(Label86_3) configure -state normal
            $widget(Label86_4) configure -state normal
            $widget(Label86_5) configure -state normal
            $widget(Label86_6) configure -state normal
            $widget(Radiobutton86_1) configure -state normal
            $widget(Radiobutton86_2) configure -state normal
            $widget(Radiobutton86_3) configure -state normal
            $widget(Radiobutton86_4) configure -state normal
            $widget(Radiobutton86_5) configure -state normal
            $widget(Radiobutton86_6) configure -state normal
            $widget(Radiobutton86_7) configure -state normal
            $widget(Radiobutton86_8) configure -state normal
            $widget(Radiobutton86_9) configure -state normal
            $widget(Radiobutton86_10) configure -state normal
            $widget(Radiobutton86_11) configure -state normal
            $widget(Radiobutton86_12) configure -state normal
            $widget(Radiobutton86_13) configure -state normal
            $widget(Radiobutton86_14) configure -state normal
            $widget(Radiobutton86_15) configure -state normal
            $widget(Radiobutton86_16) configure -state normal
            $widget(Radiobutton86_17) configure -state normal
            $widget(Radiobutton86_18) configure -state normal
            $widget(Radiobutton86_19) configure -state normal
            $widget(Radiobutton86_20) configure -state normal
            $widget(Radiobutton86_21) configure -state normal
            $widget(Radiobutton86_22) configure -state normal
            WidgetShow $widget(Toplevel86); TextEditorRunTrace "Open Window Sinclair Elements" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
            }
        }
    }

if {$DataFormatActive == "C2"} {
    if {$Load_CovarianceElementsC2 == 0} {
        source "GUI/data_process_sngl/CovarianceElementsC2.tcl"
        set Load_CovarianceElementsC2 1
        WmTransient $widget(Toplevel23) $PSPTopLevel
        }

    set CovDirInput "$DataDir/C2"
    set CovOutputDir "$DataDir"
    set CovOutputSubDir "C2"
    set CovDirOutput "$DataDir"
    set BMPDirInput "$CovDirOutput/C2"
    set C2toC11 ""; set C2toC12 ""; set C2toC22 ""; set C2toSpan ""
    set BMPC2toC11 ""; set BMPC2toC12 ""; set BMPC2toC22 ""; set BMPC2toSpan ""
    $widget(Checkbutton23_1) configure -state disable
    $widget(Checkbutton23_2) configure -state disable
    $widget(Checkbutton23_3) configure -state disable
    $widget(Checkbutton23_4) configure -state disable
    set ConfigFile "$CovDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "pp4"} {
            WidgetShow $widget(Toplevel23); TextEditorRunTrace "Open Window Covariance Elements C2" "b"
            } else {
            set ErrorMessage "IMPOSSIBLE WITH PARTIAL POLAR PP4"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel23); TextEditorRunTrace "Close Window Covariance Elements C2" "b"
            }    
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel23); TextEditorRunTrace "Close Window Covariance Elements C2" "b"
        }
    }    

if {$DataFormatActive == "C3"} {
    if {$Load_CovarianceElementsC3 == 0} {
        source "GUI/data_process_sngl/CovarianceElementsC3.tcl"
        set Load_CovarianceElementsC3 1
        WmTransient $widget(Toplevel61) $PSPTopLevel
        }

    set CovDirInput "$DataDir/C3"
    set CovDirOutput $DataDir
    set CovOutputDir $DataDir
    set CovOutputSubDir "C3"
    set BMPDirInput "$CovOutputDir/C3"
    set C3toC11 ""; set C3toC12 ""; set C3toC13 ""; set C3toC22 ""; set C3toC23 ""; set C3toC33 ""; set C3toSpan ""
    set BMPC3toC11 ""; set BMPC3toC12 ""; set BMPC3toC13 ""; set BMPC3toC22 ""; set BMPC3toC23 ""; set BMPC3toC33 ""; set BMPC3toSpan ""
    $widget(Checkbutton61_1) configure -state disable
    $widget(Checkbutton61_2) configure -state disable
    $widget(Checkbutton61_3) configure -state disable
    $widget(Checkbutton61_4) configure -state disable
    $widget(Checkbutton61_5) configure -state disable
    $widget(Checkbutton61_6) configure -state disable
    $widget(Checkbutton61_7) configure -state disable
    set ConfigFile "$CovDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel61); TextEditorRunTrace "Open Window Covariance Elements C3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel61); TextEditorRunTrace "Close Window Covariance Elements C3" "b"
        }
    }    

if {$DataFormatActive == "C4"} {
    if {$Load_CovarianceElementsC4 == 0} {
        source "GUI/data_process_sngl/CovarianceElementsC4.tcl"
        set Load_CovarianceElementsC4 1
        WmTransient $widget(Toplevel57) $PSPTopLevel
        }

    set CovDirInput "$DataDir/C4"
    set CovDirOutput $DataDir
    set CovOutputDir $DataDir
    set CovOutputSubDir "C4"
    set BMPDirInput "$CovOutputDir/C4"
    set C4toC11 ""; set C4toC12 ""; set C4toC13 ""; set C4toC14 ""; set C4toC22 ""
    set C4toC23 ""; set C4toC24 ""; set C4toC33 ""; set C4toC34 ""; set C4toC44 ""; set C4toSpan ""
    set BMPC4toC11 ""; set BMPC4toC12 ""; set BMPC4toC13 ""; set BMPC4toC14 ""; set BMPC4toC22 ""
    set BMPC4toC23 ""; set BMPC4toC24 ""; set BMPC4toC33 ""; set BMPC4toC34 ""; set BMPC4toC44 ""; set BMPC4toSpan ""
    $widget(Checkbutton57_1) configure -state disable
    $widget(Checkbutton57_2) configure -state disable
    $widget(Checkbutton57_3) configure -state disable
    $widget(Checkbutton57_4) configure -state disable
    $widget(Checkbutton57_5) configure -state disable
    $widget(Checkbutton57_6) configure -state disable
    $widget(Checkbutton57_7) configure -state disable
    $widget(Checkbutton57_8) configure -state disable
    $widget(Checkbutton57_9) configure -state disable
    $widget(Checkbutton57_10) configure -state disable
    $widget(Checkbutton57_11) configure -state disable
    set ConfigFile "$CovDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel57); TextEditorRunTrace "Open Window Covariance Elements C4" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel57); TextEditorRunTrace "Close Window Covariance Elements C4" "b"
        }
    }    

if {$DataFormatActive == "T3"} {
    if {$Load_CovarianceElementsT3 == 0} {
        source "GUI/data_process_sngl/CovarianceElementsT3.tcl"
        set Load_CovarianceElementsT3 1
        WmTransient $widget(Toplevel42) $PSPTopLevel
        }

    set CohDirInput "$DataDir/T3"
    set CohDirOutput $DataDir
    set CohOutputDir $DataDir
    set CohOutputSubDir "T3"
    set BMPDirInput "$CohOutputDir/T3"
    set T3toT11 ""; set T3toT12 ""; set T3toT13 ""; set T3toT22 ""; set T3toT23 ""; set T3toT33 "";  set T3toSpan ""
    set BMPT3toT11 "";  set BMPT3toT12 "";  set BMPT3toT13 "";  set BMPT3toT22 "";  set BMPT3toT23 "";  set BMPT3toT33 ""; set BMPT3toSpan ""
    $widget(Checkbutton42_1) configure -state disable
    $widget(Checkbutton42_2) configure -state disable
    $widget(Checkbutton42_3) configure -state disable
    $widget(Checkbutton42_4) configure -state disable
    $widget(Checkbutton42_5) configure -state disable
    $widget(Checkbutton42_6) configure -state disable
    $widget(Checkbutton42_7) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel42); TextEditorRunTrace "Open Window Covariance Elements T3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel42); TextEditorRunTrace "Close Window Covariance Elements T3" "b"
        }
    }    

if {$DataFormatActive == "T4"} {
    if {$Load_CovarianceElementsT4 == 0} {
        source "GUI/data_process_sngl/CovarianceElementsT4.tcl"
        set Load_CovarianceElementsT4 1
        WmTransient $widget(Toplevel40) $PSPTopLevel
        }

    set CohDirInput "$DataDir/T4"
    set CohDirOutput $DataDir
    set CohOutputDir $DataDir
    set CohOutputSubDir "T4"
    set BMPDirInput "$CohOutputDir/T4"
    set T4toT11 ""; set T4toT12 ""; set T4toT13 ""; set T4toT14 ""; set T4toT22 ""; set T4toT23 ""
    set T4toT24 ""; set T4toT33 ""; set T4toT34 ""; set T4toT44 ""; set T4toSpan ""
    set BMPT4toT11 ""; set BMPT4toT12 ""; set BMPT4toT13 ""; set BMPT4toT14 ""; set BMPT4toT22 ""
    set BMPT4toT23 ""; set BMPT4toT24 ""; set BMPT4toT33 ""; set BMPT4toT34 ""; set BMPT4toT44 ""; set BMPT4toSpan ""
    $widget(Checkbutton40_1) configure -state disable
    $widget(Checkbutton40_2) configure -state disable
    $widget(Checkbutton40_3) configure -state disable
    $widget(Checkbutton40_4) configure -state disable
    $widget(Checkbutton40_5) configure -state disable
    $widget(Checkbutton40_6) configure -state disable
    $widget(Checkbutton40_7) configure -state disable
    $widget(Checkbutton40_8) configure -state disable
    $widget(Checkbutton40_9) configure -state disable
    $widget(Checkbutton40_10) configure -state disable
    $widget(Checkbutton40_11) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel40); TextEditorRunTrace "Open Window Covariance Elements T4" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel40); TextEditorRunTrace "Close Window Covariance Elements T4" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    if {$Load_SinclairElements == 0} {
        source "GUI/data_process_sngl/SinclairElements.tcl"
        set Load_SinclairElements 1
        WmTransient $widget(Toplevel86) $PSPTopLevel
        }

    set SinclairFonction "SPP"
    set SlrDirInput "$DataDir"
    set SlrDirOutput "$DataDir"
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""; set SlrtoPauli ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""; set BMPSlrtoPauli ""
    $widget(Checkbutton86_1) configure -state disable
    $widget(Checkbutton86_2) configure -state disable
    $widget(Checkbutton86_3) configure -state disable
    $widget(Checkbutton86_4) configure -state disable
    $widget(Checkbutton86_5) configure -state disable
    $widget(Checkbutton86_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            if { "$PolarType" == "pp1"} {
                $widget(Label86_1) configure -state normal
                $widget(Radiobutton86_1) configure -state normal
                $widget(Radiobutton86_2) configure -state normal
                $widget(Radiobutton86_3) configure -state normal
                $widget(Radiobutton86_4) configure -state normal
                $widget(Label86_2) configure -state normal
                $widget(Radiobutton86_5) configure -state normal
                $widget(Radiobutton86_6) configure -state normal
                $widget(Radiobutton86_7) configure -state normal
                $widget(Radiobutton86_8) configure -state normal
                $widget(Label86_3) configure -state disable
                $widget(Radiobutton86_9) configure -state disable
                $widget(Radiobutton86_10) configure -state disable
                $widget(Radiobutton86_11) configure -state disable
                $widget(Radiobutton86_12) configure -state disable
                $widget(Label86_4) configure -state disable
                $widget(Radiobutton86_13) configure -state disable
                $widget(Radiobutton86_14) configure -state disable
                $widget(Radiobutton86_15) configure -state disable
                $widget(Radiobutton86_16) configure -state disable
                }            
            if { "$PolarType" == "pp2"} {
                $widget(Label86_1) configure -state disable
                $widget(Radiobutton86_1) configure -state disable
                $widget(Radiobutton86_2) configure -state disable
                $widget(Radiobutton86_3) configure -state disable
                $widget(Radiobutton86_4) configure -state disable
                $widget(Label86_2) configure -state disable
                $widget(Radiobutton86_5) configure -state disable
                $widget(Radiobutton86_6) configure -state disable
                $widget(Radiobutton86_7) configure -state disable
                $widget(Radiobutton86_8) configure -state disable
                $widget(Label86_3) configure -state normal
                $widget(Radiobutton86_9) configure -state normal
                $widget(Radiobutton86_10) configure -state normal
                $widget(Radiobutton86_11) configure -state normal
                $widget(Radiobutton86_12) configure -state normal
                $widget(Label86_4) configure -state normal
                $widget(Radiobutton86_13) configure -state normal
                $widget(Radiobutton86_14) configure -state normal
                $widget(Radiobutton86_15) configure -state normal
                $widget(Radiobutton86_16) configure -state normal
                }            
            if { "$PolarType" == "pp3"} {
                $widget(Label86_1) configure -state normal
                $widget(Radiobutton86_1) configure -state normal
                $widget(Radiobutton86_2) configure -state normal
                $widget(Radiobutton86_3) configure -state normal
                $widget(Radiobutton86_4) configure -state normal
                $widget(Label86_2) configure -state disable
                $widget(Radiobutton86_5) configure -state disable
                $widget(Radiobutton86_6) configure -state disable
                $widget(Radiobutton86_7) configure -state disable
                $widget(Radiobutton86_8) configure -state disable
                $widget(Label86_3) configure -state disable
                $widget(Radiobutton86_9) configure -state disable
                $widget(Radiobutton86_10) configure -state disable
                $widget(Radiobutton86_11) configure -state disable
                $widget(Radiobutton86_12) configure -state disable
                $widget(Label86_4) configure -state normal
                $widget(Radiobutton86_13) configure -state normal
                $widget(Radiobutton86_14) configure -state normal
                $widget(Radiobutton86_15) configure -state normal
                $widget(Radiobutton86_16) configure -state normal
                }            
            $widget(Label86_5) configure -state normal
            $widget(Radiobutton86_17) configure -state normal
            $widget(Radiobutton86_18) configure -state normal
            $widget(Label86_6) configure -state disable
            $widget(Radiobutton86_19) configure -state disable
            $widget(Radiobutton86_20) configure -state disable
            $widget(Radiobutton86_21) configure -state disable
            $widget(Radiobutton86_22) configure -state disable
            WidgetShow $widget(Toplevel86); TextEditorRunTrace "Open Window Sinclair Elements" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    if {$Load_IntensitiesElements == 0} {
        source "GUI/data_process_sngl/IntensitiesElements.tcl"
        set Load_IntensitiesElements 1
        WmTransient $widget(Toplevel210) $PSPTopLevel
        }

    set IntDirInput "$DataDir"
    set IntDirOutput "$DataDir"
    set BMPDirInput $IntDirOutput
    set IntI11 0; set IntI21 0; set IntI12 0; set IntI22 0; set IntSpan 0
    set IntContrast1 0; set IntContrast2 0
    set BMPIntI11 0; set BMPIntI21 0; set BMPIntI12 0; set BMPIntI22 0
    set BMPIntSpan 0; set BMPIntContrast1 0; set BMPIntContrast2 0
    $widget(Checkbutton210_1) configure -state disable
    $widget(Checkbutton210_2) configure -state disable
    $widget(Checkbutton210_3) configure -state disable
    $widget(Checkbutton210_4) configure -state disable
    $widget(Checkbutton210_5) configure -state disable
    set ConfigFile "$IntDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel210); TextEditorRunTrace "Close Window Intensities Elements" "b"
            } else {
                if { "$PolarType" == "full"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state normal
                    $widget(Checkbutton210_6) configure -state normal
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state normal
                    $widget(Checkbutton210_8) configure -state normal
                    $widget(Checkbutton210_9) configure -state disable
                    }
                if { "$PolarType" == "pp5"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state disable
                    $widget(Radiobutton210_9) configure -state disable
                    $widget(Radiobutton210_10) configure -state disable
                    $widget(Radiobutton210_11) configure -state disable
                    $widget(Label210_4) configure -state disable
                    $widget(Radiobutton210_13) configure -state disable
                    $widget(Radiobutton210_14) configure -state disable
                    $widget(Radiobutton210_15) configure -state disable
                    $widget(Label210_6) configure -state normal
                    $widget(Checkbutton210_6) configure -state normal
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp6"} {
                    $widget(Label210_1) configure -state disable
                    $widget(Radiobutton210_1) configure -state disable
                    $widget(Radiobutton210_2) configure -state disable
                    $widget(Radiobutton210_3) configure -state disable
                    $widget(Label210_2) configure -state disable
                    $widget(Radiobutton210_5) configure -state disable
                    $widget(Radiobutton210_6) configure -state disable
                    $widget(Radiobutton210_7) configure -state disable
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state normal
                    $widget(Checkbutton210_8) configure -state normal
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp7"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state disable
                    $widget(Radiobutton210_5) configure -state disable
                    $widget(Radiobutton210_6) configure -state disable
                    $widget(Radiobutton210_7) configure -state disable
                    $widget(Label210_3) configure -state disable
                    $widget(Radiobutton210_9) configure -state disable
                    $widget(Radiobutton210_10) configure -state disable
                    $widget(Radiobutton210_11) configure -state disable
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp4"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }
                WidgetShow $widget(Toplevel210); TextEditorRunTrace "Open Window Intensities Elements" "b"
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel210); TextEditorRunTrace "Close Window Intensities Elements" "b"
        }
    }} \
        -label {Matrix Elements} 
    $site_4_0.men58.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global RoDirInput RoDirOutput RoOutputDir RoOutputSubDir
global PolarType Channel1 Channel2 NwinRoL NwinRoC

#DATA PROCESS SNGL
global PSPTopLevel
global Load_CorrelationCoefficients2 Load_CorrelationCoefficients3 Load_CorrelationCoefficients4
global Load_CorrelationCoefficientsPP 

set RoDirInput ""; set RoDirOutput ""
set RoOutputDir ""; set RoOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set RoDirInput $DataDir
    set RoDirOutput $DataDir
    set RoOutputDir $DataDir
    set RoOutputSubDir ""
    set BMPDirInput $RoDirOutput
    set NwinRoL "1"
    set NwinRoC "1"

    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set CorrelationFonction "S2"
            if { "$PolarCase" == "monostatic"} {
                if {$Load_CorrelationCoefficients3 == 0} {
                    source "GUI/data_process_sngl/CorrelationCoefficients3.tcl"
                    set Load_CorrelationCoefficients3 1
                    WmTransient $widget(Toplevel79) $PSPTopLevel
                    }
                set Ro12 "0"; set Ro13 "0"; set Ro23 "0"; set CCC "0"; set CCCnorm "0"
                set BMPmodRo12 "0"; set BMPphaRo12 "0"; set BMPmodRo13 "0"
                set BMPphaRo13 "0"; set BMPmodRo23 "0"; set BMPphaRo23 "0"
                set BMPmodCCC "0"; set BMPphaCCC "0"; set BMPmodCCCnorm "0"
                $widget(Checkbutton79_2) configure -state disable
                $widget(Checkbutton79_3) configure -state disable
                $widget(Checkbutton79_5) configure -state disable
                $widget(Checkbutton79_6) configure -state disable
                $widget(Checkbutton79_8) configure -state disable
                $widget(Checkbutton79_9) configure -state disable
                $widget(Checkbutton79_11) configure -state disable
                $widget(Checkbutton79_12) configure -state disable
                $widget(Checkbutton79_14) configure -state disable
                WidgetShow $widget(Toplevel79); TextEditorRunTrace "Open Window Correlation Coefficients3" "b"
                }
            if { "$PolarCase" == "bistatic"} {
                if {$Load_CorrelationCoefficients4 == 0} {
                    source "GUI/data_process_sngl/CorrelationCoefficients4.tcl"
                    set Load_CorrelationCoefficients4 1
                    WmTransient $widget(Toplevel66) $PSPTopLevel
                    }
                set Ro12 "0"; set Ro13 "0"; set Ro14 "0"; set Ro23 "0"
                set Ro24 "0"; set Ro34 "0"; set CCC "0"; set CCCnorm "0"; set BMPmodRo12 "0"
                set BMPphaRo12 "0"; set BMPmodRo13 "0"; set BMPphaRo13 "0"
                set BMPmodRo14 "0"; set BMPphaRo14 "0"; set BMPmodRo23 "0"
                set BMPphaRo23 "0"; set BMPmodRo24 "0"; set BMPphaRo24 "0"
                set BMPmodRo34 "0"; set BMPphaRo34 "0"
                set BMPmodCCC "0"; set BMPphaCCC "0"; set BMPmodCCCnorm "0"
                $widget(Checkbutton66_2) configure -state disable
                $widget(Checkbutton66_3) configure -state disable
                $widget(Checkbutton66_5) configure -state disable
                $widget(Checkbutton66_6) configure -state disable
                $widget(Checkbutton66_8) configure -state disable
                $widget(Checkbutton66_9) configure -state disable
                $widget(Checkbutton66_11) configure -state disable
                $widget(Checkbutton66_12) configure -state disable
                $widget(Checkbutton66_14) configure -state disable
                $widget(Checkbutton66_15) configure -state disable
                $widget(Checkbutton66_17) configure -state disable
                $widget(Checkbutton66_18) configure -state disable
                $widget(Checkbutton66_20) configure -state disable
                $widget(Checkbutton66_21) configure -state disable
                $widget(Checkbutton66_23) configure -state disable
                WidgetShow $widget(Toplevel66); TextEditorRunTrace "Open Window Correlation Coefficients4" "b"
                }
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel79); TextEditorRunTrace "Close Window Correlation Coefficients3" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel79); TextEditorRunTrace "Close Window Correlation Coefficients3" "b"
        }
    }       

if {$DataFormatActive == "C2"} {
    if {$Load_CorrelationCoefficients2 == 0} {
        source "GUI/data_process_sngl/CorrelationCoefficients2.tcl"
        set Load_CorrelationCoefficients2 1
        WmTransient $widget(Toplevel80) $PSPTopLevel
        }

    set RoDirInput "$DataDir/C2"
    set RoOutputDir $DataDir
    set RoOutputSubDir "C2"
    set RoDirOutput $DataDir
    set BMPDirInput "$RoDirOutput/C2"
    set NwinRoL "1"
    set NwinRoC "1"
    set Ro12 "0"
    set BMPmodRo12 "0"; set BMPphaRo12 "0"
    set CorrelationFonction "C2"
    $widget(Checkbutton80_2) configure -state disable
    $widget(Checkbutton80_3) configure -state disable
    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel80); TextEditorRunTrace "Open Window Correlation Coefficients2" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel80); TextEditorRunTrace "Close Window Correlation Coefficients2" "b"
        }
    }    

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if {$Load_CorrelationCoefficients3 == 0} {
        source "GUI/data_process_sngl/CorrelationCoefficients3.tcl"
        set Load_CorrelationCoefficients3 1
        WmTransient $widget(Toplevel79) $PSPTopLevel
        }
    if { $DataFormatActive == "C3" } {
        set RoDirInput "$DataDir/C3"
        set RoDirOutput $DataDir
        set RoOutputDir $DataDir
        set RoOutputSubDir "C3"
        set BMPDirInput "$RoDirOutput/C3"
        set CorrelationFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set RoDirInput "$DataDir/T3"
        set RoDirOutput $DataDir
        set RoOutputDir $DataDir
        set RoOutputSubDir "T3"
        set BMPDirInput "$RoDirOutput/T3"
        set CorrelationFonction "T3"
        }
    set NwinRoL "1"
    set NwinRoC "1"
    set Ro12 "0"; set Ro13 "0"; set Ro23 "0"; set CCC "0"; set CCCnorm "0"
    set BMPmodRo12 "0"; set BMPphaRo12 "0"; set BMPmodRo13 "0"; set BMPphaRo13 "0"
    set BMPmodRo23 "0"; set BMPphaRo23 "0"; set BMPmodCCC "0"; set BMPphaCCC "0"; set BMPmodCCCnorm "0"
    $widget(Checkbutton79_2) configure -state disable
    $widget(Checkbutton79_3) configure -state disable
    $widget(Checkbutton79_5) configure -state disable
    $widget(Checkbutton79_6) configure -state disable
    $widget(Checkbutton79_8) configure -state disable
    $widget(Checkbutton79_9) configure -state disable
    $widget(Checkbutton79_11) configure -state disable
    $widget(Checkbutton79_12) configure -state disable
    $widget(Checkbutton79_14) configure -state disable
    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel79); TextEditorRunTrace "Open Window Correlation Coefficients3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel79); TextEditorRunTrace "Close Window Correlation Coefficients3" "b"
        }
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if {$Load_CorrelationCoefficients4 == 0} {
        source "GUI/data_process_sngl/CorrelationCoefficients4.tcl"
        set Load_CorrelationCoefficients4 1
        WmTransient $widget(Toplevel66) $PSPTopLevel
        }
    if { $DataFormatActive == "C4" } {
        set RoDirInput "$DataDir/C4"
        set RoDirOutput $DataDir
        set RoOutputDir $DataDir
        set RoOutputSubDir "C4"
        set BMPDirInput "$RoDirOutput/C4"
        set CorrelationFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set RoDirInput "$DataDir/T4"
        set RoDirOutput $DataDir
        set RoOutputDir $DataDir
        set RoOutputSubDir "T4"
        set BMPDirInput "$RoDirOutput/T4"
        set CorrelationFonction "T4"
        }
    set NwinRoL "1"
    set NwinRoC "1"
    set Ro12 "0"; set Ro13 "0"; set Ro14 "0"; set Ro23 "0"
    set Ro24 "0"; set Ro34 "0"; set CCC "0"; set CCCnorm "0"
    set BMPmodRo12 "0"; set BMPphaRo12 "0"; set BMPmodRo13 "0"; set BMPphaRo13 "0"
    set BMPmodRo14 "0"; set BMPphaRo14 "0"; set BMPmodRo23 "0"; set BMPphaRo23 "0"
    set BMPmodRo24 "0"; set BMPphaRo24 "0"; set BMPmodRo34 "0"; set BMPphaRo34 "0"
    set BMPmodCCC "0"; set BMPphaCCC "0"; set BMPmodCCCnorm "0"
    $widget(Checkbutton66_2) configure -state disable
    $widget(Checkbutton66_3) configure -state disable
    $widget(Checkbutton66_5) configure -state disable
    $widget(Checkbutton66_6) configure -state disable
    $widget(Checkbutton66_8) configure -state disable
    $widget(Checkbutton66_9) configure -state disable
    $widget(Checkbutton66_11) configure -state disable
    $widget(Checkbutton66_12) configure -state disable
    $widget(Checkbutton66_14) configure -state disable
    $widget(Checkbutton66_15) configure -state disable
    $widget(Checkbutton66_17) configure -state disable
    $widget(Checkbutton66_18) configure -state disable
    $widget(Checkbutton66_20) configure -state disable
    $widget(Checkbutton66_21) configure -state disable
    $widget(Checkbutton66_23) configure -state disable
    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel66); TextEditorRunTrace "Open Window Correlation Coefficients4" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel66); TextEditorRunTrace "Close Window Correlation Coefficients4" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    if {$Load_CorrelationCoefficientsPP == 0} {
        source "GUI/data_process_sngl/CorrelationCoefficientsPP.tcl"
        set Load_CorrelationCoefficientsPP 1
        WmTransient $widget(Toplevel237) $PSPTopLevel
        }

    set RoDirInput $DataDir
    set RoOutputDir $DataDir
    set RoOutputSubDir ""
    set RoDirOutput $DataDir
    set BMPDirInput $RoDirOutput
    set NwinRoL "1"
    set NwinRoC "1"
    set Ro12 "0"
    set BMPmodRo12 "0"
    set BMPphaRo12 "0"
    set CorrelationFonction "SPP"
    $widget(Checkbutton237_2) configure -state disable
    $widget(Checkbutton237_3) configure -state disable
    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel237); TextEditorRunTrace "Close Window Correlation Coefficients PP" "b"
            } else {
            if { "$PolarType" == "pp1"} {
                set Channel1 "s11"
                set Channel2 "s21"
                }
            if { "$PolarType" == "pp2"} {
                set Channel1 "s22"
                set Channel2 "s12"
                }
            if { "$PolarType" == "pp3"} {
                set Channel1 "s11"
                set Channel2 "s22"
                }
            WidgetShow $widget(Toplevel237); TextEditorRunTrace "Open Window Correlation Coefficients PP" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel237); TextEditorRunTrace "Close Window Correlation Coefficients PP" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Correlation Coefficients} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men67" -command {} \
        -label {Elliptical Basis Change} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men67 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global BasisDirInput BasisDirOutput BasisOutputDir BasisOutputSubDir
global BasisFunction BasisFonction BasisFonctionChange
global OrientationAngle EllipticityAngle

#BASIS CHANGE
global Load_EllipticalBasisChange
global PSPTopLevel

if {$Load_EllipticalBasisChange == 0} {
    source "GUI/basis_change/EllipticalBasisChange.tcl"
    set Load_EllipticalBasisChange 1
    WmTransient $widget(Toplevel49) $PSPTopLevel
    }

set BasisDirInput ""
set BasisDirOutput ""
set BasisOutputDir ""
set BasisOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set BasisFonctionChange "Linear Basis (+45/-45) Changement"
set OrientationAngle "45"
set EllipticityAngle "0"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set BasisDirInput "$DataDir"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "S2"
                set BasisFunction ""
                set BasisDirInput  $DataDir
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_LIN"
                set BasisOutputSubDir ""
                $widget(Entry49_1) configure -state disable
                $widget(Entry49_2) configure -state disable
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C3" } {
    set BasisDirInput "$DataDir/C3"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "C3"
                set BasisFunction ""
                set BasisDirInput  "$DataDir/C3"
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_LIN"
                set BasisOutputSubDir "C3"
                $widget(Entry49_1) configure -state disable
                $widget(Entry49_2) configure -state disable
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "C4"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "T3" } {
    set BasisDirInput "$DataDir/T3"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "T3"
                set BasisFunction ""
                set BasisDirInput  "$DataDir/T3"
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_LIN"
                set BasisOutputSubDir "T3"
                $widget(Entry49_1) configure -state disable
                $widget(Entry49_2) configure -state disable
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "T4"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Linear (+45 / -45)} 
    $site_6_0.men67 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global BasisDirInput BasisDirOutput BasisOutputDir BasisOutputSubDir
global BasisFunction BasisFonction BasisFonctionChange
global OrientationAngle EllipticityAngle

#BASIS CHANGE
global Load_EllipticalBasisChange
global PSPTopLevel

if {$Load_EllipticalBasisChange == 0} {
    source "GUI/basis_change/EllipticalBasisChange.tcl"
    set Load_EllipticalBasisChange 1
    WmTransient $widget(Toplevel49) $PSPTopLevel
    }

set BasisDirInput ""
set BasisDirOutput ""
set BasisOutputDir ""
set BasisOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set BasisFonctionChange "Circular Basis (L/R) Changement"
set OrientationAngle "0"
set EllipticityAngle "45"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set BasisDirInput "$DataDir"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "S2"
                set BasisFunction ""
                set BasisDirInput  $DataDir
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_CIR"
                set BasisOutputSubDir ""
                $widget(Entry49_1) configure -state disable
                $widget(Entry49_2) configure -state disable
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C3" } {
    set BasisDirInput "$DataDir/C3"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "C3"
                set BasisFunction ""
                set BasisDirInput  "$DataDir/C3"
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_CIR"
                set BasisOutputSubDir "C3"
                $widget(Entry49_1) configure -state disable
                $widget(Entry49_2) configure -state disable
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "C4"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "T3" } {
    set BasisDirInput "$DataDir/T3"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "T3"
                set BasisFunction ""
                set BasisDirInput  "$DataDir/T3"
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_CIR"
                set BasisOutputSubDir "T3"
                $widget(Entry49_1) configure -state disable
                $widget(Entry49_2) configure -state disable
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "T4"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Circular (L / R)} 
    $site_6_0.men67 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global BasisDirInput BasisDirOutput BasisOutputDir BasisOutputSubDir
global BasisFunction BasisFonction BasisFonctionChange
global OrientationAngle EllipticityAngle

#BASIS CHANGE
global Load_EllipticalBasisChange
global PSPTopLevel

if {$Load_EllipticalBasisChange == 0} {
    source "GUI/basis_change/EllipticalBasisChange.tcl"
    set Load_EllipticalBasisChange 1
    WmTransient $widget(Toplevel49) $PSPTopLevel
    }

set BasisDirInput ""
set BasisDirOutput ""
set BasisOutputDir ""
set BasisOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set BasisFonctionChange "Elliptical Basis (phi,tau) Changement"
set OrientationAngle "?"
set EllipticityAngle "?"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set BasisDirInput "$DataDir"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "S2"
                set BasisFunction ""
                set BasisDirInput  $DataDir
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_ELL"
                set BasisOutputSubDir ""
                $widget(Entry49_1) configure -state normal
                $widget(Entry49_2) configure -state normal
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C3" } {
    set BasisDirInput "$DataDir/C3"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "C3"
                set BasisFunction ""
                set BasisDirInput  "$DataDir/C3"
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_ELL"
                set BasisOutputSubDir "C3"
                $widget(Entry49_1) configure -state normal
                $widget(Entry49_2) configure -state normal
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "C4"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "T3" } {
    set BasisDirInput "$DataDir/T3"
    set ConfigFile "$BasisDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "monostatic"} {
            set ErrorMessage "INPUT DATA MUST BE MONOSTATIC"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
            } else {
            if { "$PolarType" == "full"} {
                set BasisFonction "T3"
                set BasisFunction ""
                set BasisDirInput  "$DataDir/T3"
                set BasisDirOutput $DataDir
                set BasisOutputDir $DataDir; append BasisOutputDir "_ELL"
                set BasisOutputSubDir "T3"
                $widget(Entry49_1) configure -state normal
                $widget(Entry49_2) configure -state normal
                WidgetShow $widget(Toplevel49); TextEditorRunTrace "Open Window Elliptical Basis Change" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                Window hide $widget(Toplevel49); TextEditorRunTrace "Close Window Elliptical Basis Change" "b"
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "T4"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Elliptical (phi, tau)} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men68" -command {} \
        -label {Polarimetric Speckle Filter} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men68 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    vTcl:DefineAlias "$site_6_0.men68" "Menu23" vTcl:WidgetProc "" 1
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global NlookAnYang NwinLAnYang NwinCAnYang
global SwinLAnYang SwinCAnYang KAnYang

#SPECKLE FILTER
global Load_SpeckleFilterAnYang PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookAnYang "1"
set KAnYang "20"
set NwinLAnYang "3"
set NwinCAnYang "3"
set SwinLAnYang "15"
set SwinCAnYang "15"
set FilterFonction "W. AN and J. YANG - Non Local Pretest Filter"
set FilterFunction "Soft/speckle_filter/an_yang_filter.exe"

if {$Load_SpeckleFilterAnYang == 0} {
    source "GUI/speckle_filter/SpeckleFilterAnYang.tcl"
    set Load_SpeckleFilterAnYang 1
    WmTransient $widget(Toplevel429) $PSPTopLevel
    }
$widget(TitleFrame429_1) configure -state disable
$widget(TitleFrame429_1) configure -text ""
$widget(Radiobutton429_1) configure -state disable
$widget(Radiobutton429_2) configure -state disable
$widget(Radiobutton429_3) configure -state disable
$widget(Radiobutton429_4) configure -state disable
$widget(Checkbutton429_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_PRE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "S2T3"
            $widget(TitleFrame429_1) configure -state normal
            $widget(TitleFrame429_1) configure -text "Output Format"
            $widget(Radiobutton429_1) configure -state normal
            $widget(Radiobutton429_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                $widget(Radiobutton429_3) configure -state disable
                $widget(Radiobutton429_4) configure -state disable
                $widget(Checkbutton429_1) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                $widget(Radiobutton429_3) configure -state normal
                $widget(Radiobutton429_4) configure -state normal
                $widget(Checkbutton429_1) configure -state normal
                }
            WidgetShow $widget(Toplevel429); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T2" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "T2" } {
        set FilterDirInput "$DataDir/T2"
        set FilterOutputSubDir "T2"
        set FilterFonc "T2"
        }
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton429_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton429_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel429); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel429); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {An-Yang Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter.exe"
set FilterNoise "0"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_BOX"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            $widget(TitleFrame25_1) configure -state normal
            $widget(TitleFrame25_1) configure -text "Output Format"
            $widget(Radiobutton25_1) configure -state normal
            $widget(Radiobutton25_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set FilterFonc "S2T3"
                $widget(Radiobutton25_3) configure -state disable
                $widget(Radiobutton25_4) configure -state disable
                $widget(Checkbutton25_1) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set FilterFonc "S2T4"
                $widget(Radiobutton25_3) configure -state normal
                $widget(Radiobutton25_4) configure -state normal
                $widget(Checkbutton25_1) configure -state normal
                }
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton25_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton25_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterMaskFile

#SPECKLE FILTER
global Load_SpeckleFilterEdge PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterMaskFile ""
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter_edge.exe"

if {$Load_SpeckleFilterEdge == 0} {
    source "GUI/speckle_filter/SpeckleFilterEdge.tcl"
    set Load_SpeckleFilterEdge 1
    WmTransient $widget(Toplevel362) $PSPTopLevel
    }
$widget(TitleFrame362_1) configure -state disable
$widget(TitleFrame362_1) configure -text ""
$widget(Radiobutton362_1) configure -state disable
$widget(Radiobutton362_2) configure -state disable
$widget(Radiobutton362_3) configure -state disable
$widget(Radiobutton362_4) configure -state disable
$widget(Checkbutton362_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_EDG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            $widget(TitleFrame362_1) configure -state disable
            $widget(TitleFrame362_1) configure -text "Output Format"
            $widget(Radiobutton362_1) configure -state normal
            $widget(Radiobutton362_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set FilterFonc "S2T3"
                $widget(Radiobutton362_3) configure -state disable
                $widget(Radiobutton362_4) configure -state disable
                $widget(Checkbutton362_1) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set FilterFonc "S2T4"
                $widget(Radiobutton362_3) configure -state normal
                $widget(Radiobutton362_4) configure -state normal
                $widget(Checkbutton362_1) configure -state normal
                }
            WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton362_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton362_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car - Edge Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "GAUSSIAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/gaussian_filter.exe"
set FilterNoise "0"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_GSS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            $widget(TitleFrame25_1) configure -state normal
            $widget(TitleFrame25_1) configure -text "Output Format"
            $widget(Radiobutton25_1) configure -state normal
            $widget(Radiobutton25_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                $widget(Radiobutton25_3) configure -state disable
                $widget(Radiobutton25_4) configure -state disable
                $widget(Checkbutton25_1) configure -state disable
                set FilterFonc "S2T3"
                }
            if { "$PolarCase" == "bistatic"} {
                $widget(Radiobutton25_3) configure -state normal
                $widget(Radiobutton25_4) configure -state normal
                $widget(Checkbutton25_1) configure -state normal
                set FilterFonc "S2T4"
                }
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton25_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton25_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Gaussian Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "50"
set NwinFilterC "1"
set FilterFonction "IDAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/idan_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_IDAN"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            $widget(TitleFrame25_1) configure -state normal
            $widget(TitleFrame25_1) configure -text "Output Format"
            $widget(Radiobutton25_1) configure -state normal
            $widget(Radiobutton25_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set FilterFonc "S2T3"
                $widget(Radiobutton25_3) configure -state disable
                $widget(Radiobutton25_4) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set FilterFonc "S2T4"
                $widget(Radiobutton25_3) configure -state normal
                $widget(Radiobutton25_4) configure -state normal
                }
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {IDAN Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "1"
set FilterFonction "LEE Refined Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_refined_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state normal
$widget(Entry25_1) configure -state normal
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LEE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            $widget(TitleFrame25_1) configure -state normal
            $widget(TitleFrame25_1) configure -text "Output Format"
            $widget(Radiobutton25_1) configure -state normal
            $widget(Radiobutton25_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set FilterFonc "S2T3"
                $widget(Radiobutton25_3) configure -state disable
                $widget(Radiobutton25_4) configure -state disable
                $widget(Checkbutton25_1) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set FilterFonc "S2T4"
                $widget(Radiobutton25_3) configure -state normal
                $widget(Radiobutton25_4) configure -state normal
                $widget(Checkbutton25_1) configure -state normal
                }
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton25_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton25_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Refined Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC
global NlookSigma Sigma NwinFilter NwinTgt

#SPECKLE FILTER
global Load_SpeckleFilterSigma PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookSigma "1"
set Sigma "0.9"
set NwinTgt "3"
set NwinFilter "9"
set FilterFonction "J.S. LEE Sigma Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_sigma_filter.exe"

if {$Load_SpeckleFilterSigma == 0} {
    source "GUI/speckle_filter/SpeckleFilterSigma.tcl"
    set Load_SpeckleFilterSigma 1
    WmTransient $widget(Toplevel352) $PSPTopLevel
    }
$widget(TitleFrame352_1) configure -state disable
$widget(TitleFrame352_1) configure -text ""
$widget(Radiobutton352_1) configure -state disable
$widget(Radiobutton352_2) configure -state disable
$widget(Radiobutton352_3) configure -state disable
$widget(Radiobutton352_4) configure -state disable
$widget(Checkbutton352_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_SIG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "S2T3"
            $widget(TitleFrame352_1) configure -state normal
            $widget(TitleFrame352_1) configure -text "Output Format"
            $widget(Radiobutton352_1) configure -state normal
            $widget(Radiobutton352_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                $widget(Radiobutton352_3) configure -state disable
                $widget(Radiobutton352_4) configure -state disable
                $widget(Checkbutton352_1) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                $widget(Radiobutton352_3) configure -state normal
                $widget(Radiobutton352_4) configure -state normal
                $widget(Checkbutton352_1) configure -state normal
                }
            WidgetShow $widget(Toplevel352); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton352_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton352_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel352); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel352); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Lee Sigma Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterNoise
global NitFilter ImprovedFilter WeightFilter StrgFilter

#SPECKLE FILTER
global Load_SpeckleFilterLopez PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set NitFilter "1"
set ImprovedFilter "0"
set WeightFilter "1."
set StrgFilter "1."

set FilterFonction "LOPEZ Speckle Filter"
set FilterFunction "Soft/speckle_filter/lopez_filter.exe"

if {$Load_SpeckleFilterLopez == 0} {
    source "GUI/speckle_filter/SpeckleFilterLopez.tcl"
    set Load_SpeckleFilterLopez 1
    WmTransient $widget(Toplevel365) $PSPTopLevel
    }
$widget(TitleFrame365_1) configure -state disable
$widget(TitleFrame365_1) configure -text ""
$widget(Radiobutton365_1) configure -state disable
$widget(Radiobutton365_2) configure -state disable
$widget(Radiobutton365_3) configure -state disable
$widget(Radiobutton365_4) configure -state disable
$widget(Checkbutton365_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LOP"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "S2T3"
            $widget(TitleFrame365_1) configure -state normal
            $widget(TitleFrame365_1) configure -text "Output Format"
            $widget(Radiobutton365_1) configure -state normal
            $widget(Radiobutton365_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                $widget(Radiobutton365_3) configure -state disable
                $widget(Radiobutton365_4) configure -state disable
                $widget(Checkbutton365_1) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                $widget(Radiobutton365_3) configure -state normal
                $widget(Radiobutton365_4) configure -state normal
                $widget(Checkbutton365_1) configure -state normal
                }
            WidgetShow $widget(Toplevel365); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton365_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton365_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel365); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel365); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Lopez Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc
global MeanShiftLook MeanShiftNwin MeanShiftNwinPix MeanShiftThreshold
global MeanShiftSigma MeanShiftKernelS MeanShiftKernelR
global MeanShiftPixel MeanShiftBeta MeanShiftLambdaS MeanShiftLambdaR

#SPECKLE FILTER
global Load_SpeckleFilterMeanShift PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set MeanShiftLook "1"
set MeanShiftNwin "11"
set MeanShiftNwinPix "3"
set MeanShiftThreshold "0.1"
set MeanShiftSigma "0.9"
set MeanShiftKernelS "2"
set MeanShiftKernelR "2"
set MeanShiftPixel "2"
set MeanShiftBeta "1"
set MeanShiftLambdaS "3"
set MeanShiftLambdaR "3"

set FilterFonction "Generalized Mean-Shift Speckle Filter"
set FilterFunction "Soft/speckle_filter/generalized_mean_filter_filter.exe"

if {$Load_SpeckleFilterMeanShift == 0} {
    source "GUI/speckle_filter/SpeckleFilterMeanShift.tcl"
    set Load_SpeckleFilterMeanShift 1
    WmTransient $widget(Toplevel452) $PSPTopLevel
    }
$widget(TitleFrame452_1) configure -state disable
$widget(TitleFrame452_1) configure -text ""
$widget(Radiobutton452_1) configure -state disable
$widget(Radiobutton452_2) configure -state disable
$widget(Radiobutton452_3) configure -state disable
$widget(Radiobutton452_4) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_GMS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel452); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "S2T3"
            $widget(TitleFrame452_1) configure -state normal
            $widget(TitleFrame452_1) configure -text "Output Format"
            $widget(Radiobutton452_1) configure -state normal
            $widget(Radiobutton452_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                $widget(Radiobutton452_3) configure -state disable
                $widget(Radiobutton452_4) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                $widget(Radiobutton452_3) configure -state normal
                $widget(Radiobutton452_4) configure -state normal
                }
            WidgetShow $widget(Toplevel452); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel452); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "T2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "T2" } {
        set FilterDirInput "$DataDir/T2"
        set FilterOutputSubDir "T2"
        set FilterFonc "T2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton452_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton452_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel452); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel452); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel452); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel452); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel452); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Mean-Shift Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global NwinSearch NwinPatch NLFilter
global NlookNL CoeffK NwinFilter NwinTgt

#SPECKLE FILTER
global Load_SpeckleFilterNLmean PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookNL "1"
set CoeffK "20"
set NwinTgt ""
set NwinFilter "7"
set NwinSearch "15"
set NwinPatch "7"
set NLFilter "NLmean"
set FilterFonction "Non Local Means and Refined Lee Speckle Filter"
set FilterFunction "Soft/speckle_filter/nl_mean_filter.exe"

if {$Load_SpeckleFilterNLmean == 0} {
    source "GUI/speckle_filter/SpeckleFilterNLmean.tcl"
    set Load_SpeckleFilterNLmean 1
    WmTransient $widget(Toplevel451) $PSPTopLevel
    }
$widget(TitleFrame451_1) configure -state disable
$widget(TitleFrame451_1) configure -text ""
$widget(Radiobutton451_1) configure -state disable
$widget(Radiobutton451_2) configure -state disable
$widget(Radiobutton451_3) configure -state disable
$widget(Radiobutton451_4) configure -state disable
$widget(Label451_1) configure -state disable
$widget(Button451_1) configure -state disable
$widget(Button451_2) configure -state disable
$widget(Entry451_1) configure -state disable
$widget(Entry451_1) configure -disabledbackground $PSPBackgroundColor

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_NL"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel451); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            $widget(TitleFrame451_1) configure -state normal
            $widget(TitleFrame451_1) configure -text "Output Format"
            $widget(Radiobutton451_1) configure -state normal
            $widget(Radiobutton451_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set FilterFonc "S2T3"
                $widget(Radiobutton451_3) configure -state disable
                $widget(Radiobutton451_4) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set FilterFonc "S2T4"
                $widget(Radiobutton451_3) configure -state normal
                $widget(Radiobutton451_4) configure -state normal
                }
            WidgetShow $widget(Toplevel451); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel451); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFonc "C4"
        $widget(Checkbutton451_1) configure -state normal
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFonc "T4"
        $widget(Checkbutton451_1) configure -state normal
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel451); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel451); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "C2"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel451); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "SPP"
            WidgetShow $widget(Toplevel451); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel451); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Non Local Means Filter} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 
global FilterScattModelBasedDirInput FilterScattModelBasedDirOutput FilterScattModelBasedOutputDir FilterScattModelBasedOutputSubDir
global FilterScattModelBasedFonc FilterScattModelBasedNwinL FilterScattModelBasedType

#SPECKLE FILTER
global Load_SpeckleFilterScattModelBased PSPTopLevel

set FilterScattModelBasedDirInput ""
set FilterScattModelBasedDirOutput ""
set FilterScattModelBasedOutputDir ""
set FilterScattModelBasedOutputSubDir ""
set ConfigFile ""

set Nlook "1"
set FilterScattModelBasedNwinL "7"
set FilterScattModelBasedType "box"

if {$Load_SpeckleFilterScattModelBased == 0} {
    source "GUI/speckle_filter/SpeckleFilterScattModelBased.tcl"
    set Load_SpeckleFilterScattModelBased 1
    WmTransient $widget(Toplevel435) $PSPTopLevel
    }
$widget(TitleFrame435_1) configure -state disable
$widget(TitleFrame435_1) configure -text ""
$widget(Radiobutton435_1) configure -state disable
$widget(Radiobutton435_2) configure -state disable

set FilterScattModelBasedDirOutput $DataDir
set FilterScattModelBasedOutputDir $DataDir
append FilterScattModelBasedOutputDir "_SMB"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterScattModelBasedDirInput $DataDir
    set FilterScattModelBasedOutputSubDir "T3"
    set ConfigFile "$FilterScattModelBasedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel435); TextEditorRunTrace "Close Window Scattering Model Based Speckle Filter" "b"
            } else {
            $widget(TitleFrame435_1) configure -state normal
            $widget(TitleFrame435_1) configure -text "Output Format"
            $widget(Radiobutton435_1) configure -state normal
            $widget(Radiobutton435_2) configure -state normal
            WidgetShow $widget(Toplevel435); TextEditorRunTrace "Open Window Scattering Model Based Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel435); TextEditorRunTrace "Close Window Scattering Model Based Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "C3" } {
        set FilterScattModelBasedDirInput "$DataDir/C3"
        set FilterScattModelBasedOutputSubDir "C3"
        set FilterScattModelBasedFonc "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterScattModelBasedDirInput "$DataDir/T3"
        set FilterScattModelBasedOutputSubDir "T3"
        set FilterScattModelBasedFonc "T3"
        }
    set ConfigFile "$FilterScattModelBasedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel435); TextEditorRunTrace "Open Window Scattering Model Based Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel435); TextEditorRunTrace "Close Window Scattering Model Based Speckle Filter" "b"
        }
    }} \
        -label {Scattering Model Based Filter} 
    $site_6_0.men68 add separator \
        
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter FilterFoncPWF
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "PWF Speckle Filter"
set FilterFunction "Soft/speckle_filter/PWF_filter.exe"
set FilterFonc "PWF"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir "T3"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFoncPWF "S2"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFoncPWF "C2"
        }
    if { $DataFormatActive == "C3" } {
        set FilterDirInput "$DataDir/C3"
        set FilterOutputSubDir "C3"
        set FilterFoncPWF "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFoncPWF "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FilterDirInput "$DataDir/C4"
        set FilterOutputSubDir "C4"
        set FilterFoncPWF "C4"
        }
    if { $DataFormatActive == "T4" } {
        set FilterDirInput "$DataDir/T4"
        set FilterOutputSubDir "T4"
        set FilterFoncPWF "T4"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {P.W.F Filter} 
    $site_6_0.men68 add separator \
        
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 
global SIRVDirInput SIRVDirOutput SIRVOutputDir SIRVOutputSubDir
global SIRVFonction SIRVFunction SIRVFonc SIRVNormFlag
global Nlook NwinSIRVL NwinSIRVC

#SPECKLE SIRV
global Load_SIRVEstimationRestoration PSPTopLevel

set SIRVDirInput ""
set SIRVDirOutput ""
set SIRVOutputDir ""
set SIRVOutputSubDir ""
set ConfigFile ""

set Nlook "1"
set NwinSIRVL "7"
set NwinSIRVC "7"
set SIRVFonction "SIRV Model Estimation"
set SIRVFunction "Soft/speckle_filter/sirv_model_estimation.exe"
set SIRVNormFlag "0"

if {$Load_SIRVEstimationRestoration == 0} {
    source "GUI/speckle_filter/SIRVEstimationRestoration.tcl"
    set Load_SIRVEstimationRestoration 1
    WmTransient $widget(Toplevel433) $PSPTopLevel
    }
$widget(Label433_1) configure -state disable
$widget(Entry433_1) configure -state disable
$widget(Label433_2) configure -state normal
$widget(Entry433_2) configure -state normal
$widget(Label433_3) configure -state normal
$widget(Entry433_3) configure -state normal
$widget(TitleFrame433_1) configure -state disable
$widget(TitleFrame433_1) configure -text ""
$widget(Radiobutton433_1) configure -state disable
$widget(Radiobutton433_2) configure -state disable
$widget(Radiobutton433_3) configure -state disable
$widget(Radiobutton433_4) configure -state disable
$widget(Checkbutton433_1) configure -state normal

set SIRVDirOutput $DataDir
set SIRVOutputDir $DataDir
append SIRVOutputDir "_SIRV"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2" || $DataFormatActive == "SPP" } {

if {$DataFormatActive == "S2"} {
    set SIRVDirInput $DataDir
    set SIRVOutputSubDir "T3"
    set ConfigFile "$SIRVDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
            } else {
            $widget(TitleFrame433_1) configure -state normal
            $widget(TitleFrame433_1) configure -text "Output Format"
            $widget(Radiobutton433_1) configure -state normal
            $widget(Radiobutton433_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set SIRVFonc "S2T3"
                $widget(Radiobutton433_3) configure -state disable
                $widget(Radiobutton433_4) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set SIRVFonc "S2T4"
                $widget(Radiobutton433_3) configure -state normal
                $widget(Radiobutton433_4) configure -state normal
                }
            WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
        }
    }       

if {$DataFormatActive == "SPP"} {
    set SIRVDirInput $DataDir
    set SIRVOutputSubDir "C2"
    set ConfigFile "$SIRVDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
            } else {
            set SIRVFonc "SPP"
            WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
        }
    }    

} else {
set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
set VarWarning ""
Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
tkwait variable VarWarning
set VarWarning ""
}} \
        -label {SIRV Model Estimation} 
    $site_6_0.men68 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 
global SIRVDirInput SIRVDirOutput SIRVOutputDir SIRVOutputSubDir
global SIRVFonction SIRVFunction SIRVFonc SIRVNormFlag
global Nlook NwinSIRVL NwinSIRVC

#SPECKLE SIRV
global Load_SIRVEstimationRestoration PSPTopLevel

set SIRVDirInput ""
set SIRVDirOutput ""
set SIRVOutputDir ""
set SIRVOutputSubDir ""
set ConfigFile ""

set Nlook "1"
set NwinSIRVL "7"
set NwinSIRVC "7"
set SIRVFonction "J. Skou - H. Skriver Restoration"
set SIRVFunction "Soft/speckle_filter/skou_skriver_restoration.exe"
set SIRVNormFlag "0"

if {$Load_SIRVEstimationRestoration == 0} {
    source "GUI/speckle_filter/SIRVEstimationRestoration.tcl"
    set Load_SIRVEstimationRestoration 1
    WmTransient $widget(Toplevel433) $PSPTopLevel
    }
$widget(Label433_1) configure -state disable
$widget(Entry433_1) configure -state disable
$widget(Label433_2) configure -state normal
$widget(Entry433_2) configure -state normal
$widget(Label433_3) configure -state normal
$widget(Entry433_3) configure -state normal
$widget(TitleFrame433_1) configure -state disable
$widget(TitleFrame433_1) configure -text ""
$widget(Radiobutton433_1) configure -state disable
$widget(Radiobutton433_2) configure -state disable
$widget(Radiobutton433_3) configure -state disable
$widget(Radiobutton433_4) configure -state disable
$widget(Checkbutton433_1) configure -state disable

set SIRVDirOutput $DataDir
set SIRVOutputDir $DataDir
append SIRVOutputDir "_SSR"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set SIRVDirInput $DataDir
    set SIRVOutputSubDir "T3"
    set ConfigFile "$SIRVDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
            } else {
            $widget(TitleFrame433_1) configure -state normal
            $widget(TitleFrame433_1) configure -text "Output Format"
            $widget(Radiobutton433_1) configure -state normal
            $widget(Radiobutton433_2) configure -state normal
            if { "$PolarCase" == "monostatic"} {
                set SIRVFonc "S2T3"
                $widget(Radiobutton433_3) configure -state disable
                $widget(Radiobutton433_4) configure -state disable
                }
            if { "$PolarCase" == "bistatic"} {
                set SIRVFonc "S2T4"
                $widget(Radiobutton433_3) configure -state normal
                $widget(Radiobutton433_4) configure -state normal
                }
            WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
        }
    }       

if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T2" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if { $DataFormatActive == "C2" } {
        set SIRVDirInput "$DataDir/C2"
        set SIRVOutputSubDir "C2"
        set SIRVFonc "C2"
        }
    if { $DataFormatActive == "C3" } {
        set SIRVDirInput "$DataDir/C3"
        set SIRVOutputSubDir "C3"
        set SIRVFonc "C3"
        }
    if { $DataFormatActive == "T2" } {
        set SIRVDirInput "$DataDir/T2"
        set SIRVOutputSubDir "T2"
        set SIRVFonc "T2"
        }
    if { $DataFormatActive == "T3" } {
        set SIRVDirInput "$DataDir/T3"
        set SIRVOutputSubDir "T3"
        set SIRVFonc "T3"
        }
    if { $DataFormatActive == "C4" } {
        set SIRVDirInput "$DataDir/C4"
        set SIRVOutputSubDir "C4"
        set SIRVFonc "C4"
        }
    if { $DataFormatActive == "T4" } {
        set SIRVDirInput "$DataDir/T4"
        set SIRVOutputSubDir "T4"
        set SIRVFonc "T4"
        }
    set ConfigFile "$SIRVDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
        }
    }    

if {$DataFormatActive == "SPP"} {
    set SIRVDirInput $DataDir
    set SIRVOutputSubDir "C2"
    set ConfigFile "$SIRVDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
            } else {
            set SIRVFonc "SPP"
            WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Skou-Skriver Restoration} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men69" -command {} \
        -label {H / A / Alpha Decomposition} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men69 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men69 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global HAAlphaDecompositionFonction HAAlphaDecompositionFunction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC alpbetdelgam alpbetepsdelgamnhu lambda alpha entropy anisotropy 
global combinationsHA CombHA CombH1mA Comb1mHA Comb1mH1mA
global BMPalpbetdelgam BMPalpbetepsdelgamnhu BMPlambda BMPalpha BMPentropy BMPanisotropy BMPcombinationsHA

global eigenvalues probabilities alpha12 delta12 alpdel delta shannon
global BMPeigenvalues BMPprobabilities BMPalpha12 BMPdelta12
global BMPalpdel BMPshannon BMPdelta

#DATA PROCESS SNGL
global Load_HAAlphaDecomposition2 Load_HAAlphaDecomposition3 Load_HAAlphaDecomposition4
global PSPTopLevel

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
set alpbetdelgam "0"; set alpbetepsdelgamnhu "0"
set lambda "0"; set alpha "0"
set entropy "0"; set anisotropy "0"
set combinationsHA "0"
set CombHA "0"; set CombH1mA "0"
set Comb1mHA "0"; set Comb1mH1mA "0"

set BMPalpbetepsdelgamnhu "0"
set BMPalpbetdelgam "0"
set BMPlambda "0"; set BMPalpha "0"
set BMPentropy "0"; set BMPanisotropy "0"
set BMPcombinationsHA "0"

set eigenvalues "0"; set probabilities "0"; set alpha12 "0"; set delta12 "0"; set alpdel "0";
set shannon "0"; set delta "0"
set BMPeigenvalues "0"; set BMPprobabilities "0"; set BMPalpha12 "0"; set BMPdelta12 "0"; 
set BMPalpdel "0"; set BMPshannon "0"; set BMPdelta "0"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDir
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir ""
    set HAAlpDirOutput $DataDir
    set BMPDirInput $HAAlpDirOutput
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set HAAlphaDecompositionFonction "S2"
            if { "$PolarCase" == "monostatic"} {
                if {$Load_HAAlphaDecomposition3 == 0} {
                    source "GUI/data_process_sngl/HAAlphaDecomposition3_1.tcl"
                    set Load_HAAlphaDecomposition3 1
                    WmTransient $widget(Toplevel320) $PSPTopLevel
                    }
                $widget(Checkbutton320_1) configure -state disable
                $widget(Checkbutton320_2) configure -state disable
                $widget(Checkbutton320_3) configure -state disable
                $widget(Checkbutton320_4) configure -state disable
                $widget(Checkbutton320_5) configure -state disable
                $widget(Checkbutton320_6) configure -state disable
                $widget(Checkbutton320_7) configure -state disable
                $widget(Checkbutton320_8) configure -state disable
                $widget(Checkbutton320_9) configure -state disable
                $widget(Checkbutton320_10) configure -state disable
                $widget(Checkbutton320_11) configure -state disable
                WidgetShow $widget(Toplevel320); TextEditorRunTrace "Open Window H A Alpha Decomposition Parameters 3" "b"
                }
            if { "$PolarCase" == "bistatic"} {
                if {$Load_HAAlphaDecomposition4 == 0} {
                    source "GUI/data_process_sngl/HAAlphaDecomposition4_1.tcl"
                    set Load_HAAlphaDecomposition4 1
                    WmTransient $widget(Toplevel323) $PSPTopLevel
                    }
                $widget(Checkbutton323_1) configure -state disable
                $widget(Checkbutton323_2) configure -state disable
                $widget(Checkbutton323_3) configure -state disable
                $widget(Checkbutton323_4) configure -state disable
                $widget(Checkbutton323_5) configure -state disable
                $widget(Checkbutton323_6) configure -state disable
                $widget(Checkbutton323_7) configure -state disable
                $widget(Checkbutton323_8) configure -state disable
                $widget(Checkbutton323_9) configure -state disable
                $widget(Checkbutton323_10) configure -state disable
                $widget(Checkbutton323_11) configure -state disable
                WidgetShow $widget(Toplevel323); TextEditorRunTrace "Open Window H A Alpha Decomposition Parameters 4" "b"
                }
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    if {$Load_HAAlphaDecomposition2 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition2.tcl"
        set Load_HAAlphaDecomposition2 1
        WmTransient $widget(Toplevel93) $PSPTopLevel
        }

    set HAAlpDirInput "$DataDir/C2"
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir "C2"
    set HAAlpDirOutput $DataDir
    set BMPDirInput "$HAAlpDirOutput/C2"
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaDecompositionFonction "C2"
        $widget(Checkbutton93_1) configure -state disable
        $widget(Checkbutton93_2) configure -state disable
        $widget(Checkbutton93_3) configure -state disable
        $widget(Checkbutton93_4) configure -state disable
        $widget(Checkbutton93_5) configure -state disable
        $widget(Checkbutton93_6) configure -state disable
        $widget(Checkbutton93_7) configure -state disable
        $widget(Checkbutton93_8) configure -state disable
        $widget(Checkbutton93_9) configure -state disable
        $widget(Checkbutton93_10) configure -state disable
        $widget(Checkbutton93_11) configure -state disable
        $widget(Checkbutton93_12) configure -state disable
        $widget(Checkbutton93_13) configure -state disable
        $widget(Checkbutton93_14) configure -state disable
        $widget(Checkbutton93_15) configure -state disable
        $widget(Checkbutton93_16) configure -state disable
        WidgetShow $widget(Toplevel93); TextEditorRunTrace "Open Window H A Alpha Decomposition 2" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if {$Load_HAAlphaDecomposition3 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition3_1.tcl"
        set Load_HAAlphaDecomposition3 1
        WmTransient $widget(Toplevel320) $PSPTopLevel
        }
    if { $DataFormatActive == "C3" } {
        set HAAlpDirInput "$DataDir/C3"
        set HAAlpOutputSubDir "C3"
        set BMPDirInput "$HAAlpDirOutput/C3"
        set HAAlphaDecompositionFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set HAAlpDirInput "$DataDir/T3"
        set HAAlpOutputSubDir "T3"
        set BMPDirInput "$HAAlpDirOutput/T3"
        set HAAlphaDecompositionFonction "T3"
        }
    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton320_1) configure -state disable
        $widget(Checkbutton320_2) configure -state disable
        $widget(Checkbutton320_3) configure -state disable
        $widget(Checkbutton320_4) configure -state disable
        $widget(Checkbutton320_5) configure -state disable
        $widget(Checkbutton320_6) configure -state disable
        $widget(Checkbutton320_7) configure -state disable
        $widget(Checkbutton320_8) configure -state disable
        $widget(Checkbutton320_9) configure -state disable
        $widget(Checkbutton320_10) configure -state disable
        $widget(Checkbutton320_11) configure -state disable
        if { $DataFormatActive == "C3" } { $widget(Checkbutton320_11) configure -state normal }
        WidgetShow $widget(Toplevel320); TextEditorRunTrace "Open Window H A Alpha Decomposition Parameters 3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if {$Load_HAAlphaDecomposition4 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition4_1.tcl"
        set Load_HAAlphaDecomposition4 1
        WmTransient $widget(Toplevel323) $PSPTopLevel
        }
    if { $DataFormatActive == "C4" } {
        set HAAlpDirInput "$DataDir/C4"
        set HAAlpOutputSubDir "C4"
        set BMPDirInput "$HAAlpDirOutput/C4"
        set HAAlphaDecompositionFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set HAAlpDirInput "$DataDir/T4"
        set HAAlpOutputSubDir "T4"
        set BMPDirInput "$HAAlpDirOutput/T4"
        set HAAlphaDecompositionFonction "T4"
        }
    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton323_1) configure -state disable
        $widget(Checkbutton323_2) configure -state disable
        $widget(Checkbutton323_3) configure -state disable
        $widget(Checkbutton323_4) configure -state disable
        $widget(Checkbutton323_5) configure -state disable
        $widget(Checkbutton323_6) configure -state disable
        $widget(Checkbutton323_7) configure -state disable
        $widget(Checkbutton323_8) configure -state disable
        $widget(Checkbutton323_9) configure -state disable
        $widget(Checkbutton323_10) configure -state disable
        $widget(Checkbutton323_11) configure -state disable
        if { $DataFormatActive == "C4" } { $widget(Checkbutton323_11) configure -state normal }
        WidgetShow $widget(Toplevel323); TextEditorRunTrace "Open Window H A Alpha Decomposition Parameters 4" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "SPP"} {
    if {$Load_HAAlphaDecomposition2 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition2.tcl"
        set Load_HAAlphaDecomposition2 1
        WmTransient $widget(Toplevel93) $PSPTopLevel
        }

    set HAAlpDirInput $DataDir
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir ""
    set HAAlpDirOutput $DataDir
    set BMPDirInput $HAAlpDirOutput
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaDecompositionFonction "SPP"
        $widget(Checkbutton93_1) configure -state disable
        $widget(Checkbutton93_2) configure -state disable
        $widget(Checkbutton93_3) configure -state disable
        $widget(Checkbutton93_4) configure -state disable
        $widget(Checkbutton93_5) configure -state disable
        $widget(Checkbutton93_6) configure -state disable
        $widget(Checkbutton93_7) configure -state disable
        $widget(Checkbutton93_8) configure -state disable
        $widget(Checkbutton93_9) configure -state disable
        $widget(Checkbutton93_10) configure -state disable
        $widget(Checkbutton93_11) configure -state disable
        $widget(Checkbutton93_12) configure -state disable
        $widget(Checkbutton93_13) configure -state disable
        $widget(Checkbutton93_14) configure -state disable
        $widget(Checkbutton93_15) configure -state disable
        $widget(Checkbutton93_16) configure -state disable
        WidgetShow $widget(Toplevel93); TextEditorRunTrace "Open Window H A Alpha Decomposition 2" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Decomposition Parameters} 
    $site_6_0.men69 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC alpha123 beta123 delta123 gamma123 alpbetdelgam
global alpha1234 beta1234 epsilon1234 delta1234 gamma1234 nhu1234 alpbetepsdelgamnhu
global BMPalpha123 BMPbeta123 BMPdelta123 BMPgamma123 BMPalpbetdelgam
global BMPalpha1234 BMPbeta1234 BMPepsilon1234 BMPdelta1234 BMPgamma1234 BMPnhu1234 BMPalpbetepsdelgamnhu

#DATA PROCESS SNGL
global Load_HAAlphaEigenvector3 Load_HAAlphaEigenvector4
global PSPTopLevel

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
set alpha123 "0"; set beta123 "0"
set delta123 "0"; set gamma123 "0"
set alpbetdelgam "0"
set alpha1234 "0"; set beta1234 "0"
set epsilon1234 "0"; set delta1234 "0"
set gamma1234 "0"; set nhu1234 "0"
set alpbetepsdelgamnhu "0"

set BMPalpha123 "0"; set BMPbeta123 "0"
set BMPdelta123 "0"; set BMPgamma123 "0"
set BMPalpbetdelgam "0"
set BMPalpha1234 "0"; set BMPbeta1234 "0"
set BMPepsilon1234 "0"; set BMPdelta1234 "0"
set BMPgamma1234 "0"; set BMPnhu1234 "0"
set BMPalpbetepsdelgamnhu "0"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDir
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir ""
    set HAAlpDirOutput $DataDir
    set BMPDirInput $HAAlpDirOutput
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set HAAlphaDecompositionFonction "S2"
            if { "$PolarCase" == "monostatic"} {
                if {$Load_HAAlphaEigenvector3 == 0} {
                    source "GUI/data_process_sngl/HAAlphaDecomposition3_2.tcl"
                    set Load_HAAlphaEigenvector3 1
                    WmTransient $widget(Toplevel321) $PSPTopLevel
                    }
                $widget(Checkbutton321_1) configure -state disable
                $widget(Checkbutton321_2) configure -state disable
                $widget(Checkbutton321_3) configure -state disable
                $widget(Checkbutton321_4) configure -state disable
                $widget(Checkbutton321_6) configure -state disable
                $widget(Checkbutton321_5) configure -state disable
                WidgetShow $widget(Toplevel321); TextEditorRunTrace "Open Window H A Alpha Eigenvector Set Parameters 3" "b"
                }
            if { "$PolarCase" == "bistatic"} {
                if {$Load_HAAlphaEigenvector4 == 0} {
                    source "GUI/data_process_sngl/HAAlphaDecomposition4_2.tcl"
                    set Load_HAAlphaEigenvector4 1
                    WmTransient $widget(Toplevel324) $PSPTopLevel
                    }
                $widget(Checkbutton324_1) configure -state disable
                $widget(Checkbutton324_2) configure -state disable
                $widget(Checkbutton324_3) configure -state disable
                $widget(Checkbutton324_4) configure -state disable
                $widget(Checkbutton324_5) configure -state disable
                $widget(Checkbutton324_6) configure -state disable
                $widget(Checkbutton324_7) configure -state disable
                $widget(Checkbutton324_8) configure -state disable
                WidgetShow $widget(Toplevel324); TextEditorRunTrace "Open Window H A Alpha Eigenvector Set Parameters 4" "b"
                }
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if {$Load_HAAlphaEigenvector3 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition3_2.tcl"
        set Load_HAAlphaEigenvector3 1
        WmTransient $widget(Toplevel321) $PSPTopLevel
        }
    if { $DataFormatActive == "C3" } {
        set HAAlpDirInput "$DataDir/C3"
        set HAAlpOutputSubDir "C3"
        set BMPDirInput "$HAAlpDirOutput/C3"
        set HAAlphaDecompositionFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set HAAlpDirInput "$DataDir/T3"
        set HAAlpOutputSubDir "T3"
        set BMPDirInput "$HAAlpDirOutput/T3"
        set HAAlphaDecompositionFonction "T3"
        }
    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton321_1) configure -state disable
        $widget(Checkbutton321_2) configure -state disable
        $widget(Checkbutton321_3) configure -state disable
        $widget(Checkbutton321_4) configure -state disable
        $widget(Checkbutton321_6) configure -state disable
        $widget(Checkbutton321_5) configure -state disable
        if { $DataFormatActive == "C3" } { $widget(Checkbutton321_5) configure -state normal }
        WidgetShow $widget(Toplevel321); TextEditorRunTrace "Open Window H A Alpha Eigenvector Set Parameters 3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if {$Load_HAAlphaEigenvector4 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition4_2.tcl"
        set Load_HAAlphaEigenvector4 1
        WmTransient $widget(Toplevel324) $PSPTopLevel
        }
    if { $DataFormatActive == "C4" } {
        set HAAlpDirInput "$DataDir/C4"
        set HAAlpOutputSubDir "C4"
        set BMPDirInput "$HAAlpDirOutput/C4"
        set HAAlphaDecompositionFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set HAAlpDirInput "$DataDir/T4"
        set HAAlpOutputSubDir "T4"
        set BMPDirInput "$HAAlpDirOutput/T4"
        set HAAlphaDecompositionFonction "T4"
        }
    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton324_1) configure -state disable
        $widget(Checkbutton324_2) configure -state disable
        $widget(Checkbutton324_3) configure -state disable
        $widget(Checkbutton324_4) configure -state disable
        $widget(Checkbutton324_5) configure -state disable
        $widget(Checkbutton324_6) configure -state disable
        $widget(Checkbutton324_7) configure -state disable
        $widget(Checkbutton324_8) configure -state disable
        if { $DataFormatActive == "C4" } { $widget(Checkbutton324_7) configure -state normal }
        WidgetShow $widget(Toplevel324); TextEditorRunTrace "Open Window H A Alpha Eigenvector Set Parameters 4" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Eigenvector Set Parameters} 
    $site_6_0.men69 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC eigenvalues probabilities anisotropy anisotropy12 anisotropy34 erd polarisationasymetry
global polarisationfraction lueneburganisotropy vanzylrvi vanzylpedestal shannon
global BMPeigenvalues BMPprobabilities BMPanisotropy BMPanisotropy12 BMPanisotropy34 BMPerd BMPpolarisationasymetry
global BMPpolarisationfraction BMPlueneburganisotropy BMPvanzylrvi BMPvanzylpedestal BMPshannon

#DATA PROCESS SNGL
global Load_HAAlphaEigenvalue3 Load_HAAlphaEigenvalue4
global PSPTopLevel

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
set eigenvalues "0"; set probabilities "0"
set anisotropy "0"; set anisotropy12 "0"; set anisotropy34 "0"
set erd "0"; set polarisationasymetry "0"
set polarisationfraction "0"; set lueneburganisotropy "0"
set vanzylrvi "0"; set vanzylpedestal "0"; set shannon "0"

set BMPeigenvalues "0"; set BMPprobabilities "0"
set BMPanisotropy "0"; set BMPanisotropy12 "0"; set BMPanisotropy34 "0"
set BMPerd "0"; set BMPpolarisationasymetry "0"
set BMPpolarisationfraction "0"
set BMPlueneburganisotropy "0"
set BMPvanzylrvi "0"; set BMPvanzylpedestal "0"
set BMPshannon "0"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDir
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir ""
    set HAAlpDirOutput $DataDir
    set BMPDirInput $HAAlpDirOutput
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            set HAAlphaDecompositionFonction "S2"
            if { "$PolarCase" == "monostatic"} {
                if {$Load_HAAlphaEigenvalue3 == 0} {
                    source "GUI/data_process_sngl/HAAlphaDecomposition3_3.tcl"
                    set Load_HAAlphaEigenvalue3 1
                    WmTransient $widget(Toplevel322) $PSPTopLevel
                    }
                $widget(Checkbutton322_1) configure -state disable
                $widget(Checkbutton322_2) configure -state disable
                $widget(Checkbutton322_3) configure -state disable
                $widget(Checkbutton322_4) configure -state disable
                $widget(Checkbutton322_5) configure -state disable
                $widget(Checkbutton322_6) configure -state disable
                $widget(Checkbutton322_7) configure -state disable
                $widget(Checkbutton322_10) configure -state disable
                $widget(Checkbutton322_11) configure -state disable
                $widget(Checkbutton322_12) configure -state disable
                $widget(Checkbutton322_13) configure -state disable
                $widget(Checkbutton322_14) configure -state disable
                WidgetShow $widget(Toplevel322); TextEditorRunTrace "Open Window H A Alpha Eigenvalue Set Parameters 3" "b"
                }
            if { "$PolarCase" == "bistatic"} {
                if {$Load_HAAlphaEigenvalue4 == 0} {
                    source "GUI/data_process_sngl/HAAlphaDecomposition4_3.tcl"
                    set Load_HAAlphaEigenvalue4 1
                    WmTransient $widget(Toplevel325) $PSPTopLevel
                    }
                $widget(Checkbutton325_1) configure -state disable
                $widget(Checkbutton325_2) configure -state disable
                $widget(Checkbutton325_3) configure -state disable
                $widget(Checkbutton325_4) configure -state disable
                $widget(Checkbutton325_5) configure -state disable
                $widget(Checkbutton325_6) configure -state disable
                $widget(Checkbutton325_7) configure -state disable
                $widget(Checkbutton325_8) configure -state disable
                $widget(Checkbutton325_11) configure -state disable
                $widget(Checkbutton325_12) configure -state disable
                $widget(Checkbutton325_13) configure -state disable
                $widget(Checkbutton325_14) configure -state disable
                $widget(Checkbutton325_15) configure -state disable
                WidgetShow $widget(Toplevel325); TextEditorRunTrace "Open Window H A Alpha Eigenvalue Set Parameters 4" "b"
                }
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if {$Load_HAAlphaEigenvalue3 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition3_3.tcl"
        set Load_HAAlphaEigenvalue3 1
        WmTransient $widget(Toplevel322) $PSPTopLevel
        }
    if { $DataFormatActive == "C3" } {
        set HAAlpDirInput "$DataDir/C3"
        set HAAlpOutputSubDir "C3"
        set BMPDirInput "$HAAlpDirOutput/C3"
        set HAAlphaDecompositionFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set HAAlpDirInput "$DataDir/T3"
        set HAAlpOutputSubDir "T3"
        set BMPDirInput "$HAAlpDirOutput/T3"
        set HAAlphaDecompositionFonction "T3"
        }
    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton322_1) configure -state disable
        $widget(Checkbutton322_2) configure -state disable
        $widget(Checkbutton322_3) configure -state disable
        $widget(Checkbutton322_4) configure -state disable
        $widget(Checkbutton322_5) configure -state disable
        $widget(Checkbutton322_6) configure -state disable
        $widget(Checkbutton322_7) configure -state disable
        $widget(Checkbutton322_10) configure -state disable
        $widget(Checkbutton322_11) configure -state disable
        $widget(Checkbutton322_12) configure -state disable
        $widget(Checkbutton322_13) configure -state disable
        $widget(Checkbutton322_14) configure -state disable
        if { $DataFormatActive == "C3" } { $widget(Checkbutton322_12) configure -state normal }
        WidgetShow $widget(Toplevel322); TextEditorRunTrace "Open Window H A Alpha Eigenvalue Set Parameters 3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    if {$Load_HAAlphaEigenvalue4 == 0} {
        source "GUI/data_process_sngl/HAAlphaDecomposition4_3.tcl"
        set Load_HAAlphaEigenvalue4 1
        WmTransient $widget(Toplevel325) $PSPTopLevel
        }
    if { $DataFormatActive == "C4" } {
        set HAAlpDirInput "$DataDir/C4"
        set HAAlpOutputSubDir "C4"
        set BMPDirInput "$HAAlpDirOutput/C4"
        set HAAlphaDecompositionFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set HAAlpDirInput "$DataDir/T4"
        set HAAlpOutputSubDir "T4"
        set BMPDirInput "$HAAlpDirOutput/T4"
        set HAAlphaDecompositionFonction "T4"
        }
    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton325_1) configure -state disable
        $widget(Checkbutton325_2) configure -state disable
        $widget(Checkbutton325_3) configure -state disable
        $widget(Checkbutton325_4) configure -state disable
        $widget(Checkbutton325_5) configure -state disable
        $widget(Checkbutton325_6) configure -state disable
        $widget(Checkbutton325_7) configure -state disable
        $widget(Checkbutton325_8) configure -state disable
        $widget(Checkbutton325_11) configure -state disable
        $widget(Checkbutton325_12) configure -state disable
        $widget(Checkbutton325_13) configure -state disable
        $widget(Checkbutton325_14) configure -state disable
        $widget(Checkbutton325_15) configure -state disable
        if { $DataFormatActive == "C4" } { $widget(Checkbutton325_13) configure -state normal }
        WidgetShow $widget(Toplevel325); TextEditorRunTrace "Open Window H A Alpha Eigenvalue Set Parameters 4" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Eigenvalue Set Parameters} 
    $site_6_0.men69 add command \
        \
        -command {global DataDir FileName DataFormatActive
global DiversityDirInput DiversityDirOutput DiversityOutputDir DiversityOutputSubDir
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global NwinDiversityL NwinDiversityC 
global DiversityShannon DiversitySimpson DiversityInvSimpson 
global DiversityGini DiversityReyni2 DiversityReyni3
global DiversityReyni4 DiversityIQV DiversityPerplexity
global BMPshannon BMPsimpsonBMPinvsimpson
global BMPgini BMPreyni2 BMPreyni3
global BMPreyni4 BMPiqv BMPperplexity 

#DATA PROCESS SNGL
global Load_DiversityIndex PSPTopLevel

set DiversityDirInput ""
set DiversityDirOutput ""
set DiversityOutputDir ""
set DiversityOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinDiversityL "?"; set NwinDiversityC "?"; 
set DiversityShannon "0"
set DiversitySimpson "0"
set DiversityInvSimpson "0"
set DiversityGini "0"
set DiversityReyni2 "0"
set DiversityReyni3 "0"
set DiversityReyni4 "0"
set DiversityIQV "0"
set DiversityPerplexity "0"
set BMPshannon "0"
set BMPsimpson "0"
set BMPinvsimpson "0"
set BMPgini "0"
set BMPreyni2 "0"
set BMPreyni3 "0"
set BMPreyni4 "0"
set BMPiqv "0"
set BMPperplexity "0"

set config "true"
if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set config "false"
    }

if {$config == "true"} {
    if {$Load_DiversityIndex == 0} {
        source "GUI/data_process_sngl/DiversityIndex.tcl"
        set Load_DiversityIndex 1
        WmTransient $widget(Toplevel444) $PSPTopLevel
        }
    if { $DataFormatActive == "S2" } {
        set DiversityDirInput $DataDir
        set DiversityOutputSubDir ""
        set BMPDirInput $DiversityDirOutput
        }
    if { $DataFormatActive == "SPP" } {
        set DiversityDirInput $DataDir
        set DiversityOutputSubDir ""
        set BMPDirInput $DiversityDirOutput
        }
    if { $DataFormatActive == "C2" } {
        set DiversityDirInput "$DataDir/C2"
        set DiversityOutputSubDir "C2"
        set BMPDirInput "$DiversityDirOutput/C2"
        }
    if { $DataFormatActive == "C3" } {
        set DiversityDirInput "$DataDir/C3"
        set DiversityOutputSubDir "C3"
        set BMPDirInput "$DiversityDirOutput/C3"
        }
    if { $DataFormatActive == "T3" } {
        set DiversityDirInput "$DataDir/T3"
        set DiversityOutputSubDir "T3"
        set BMPDirInput "$DiversityDirOutput/T3"
        }
    if { $DataFormatActive == "C4" } {
        set DiversityDirInput "$DataDir/C4"
        set DiversityOutputSubDir "C4"
        set BMPDirInput "$DiversityDirOutput/C4"
        }
    if { $DataFormatActive == "T4" } {
        set DiversityDirInput "$DataDir/T4"
        set DiversityOutputSubDir "T4"
        set BMPDirInput "$DiversityDirOutput/T4"
        }
    set DiversityOutputDir $DataDir
    set DiversityDirOutput $DataDir
    set ConfigFile "$DiversityDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton444_1) configure -state disable
        $widget(Checkbutton444_2) configure -state disable
        $widget(Checkbutton444_3) configure -state disable
        $widget(Checkbutton444_4) configure -state disable
        $widget(Checkbutton444_5) configure -state disable
        $widget(Checkbutton444_6) configure -state disable
        $widget(Checkbutton444_7) configure -state disable
        $widget(Checkbutton444_10) configure -state disable
        $widget(Checkbutton444_14) configure -state disable
        WidgetShow $widget(Toplevel444); TextEditorRunTrace "Open Window Diversity Index" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }} \
        -label {Diversity Index} 
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men70" -command {} \
        -label {Polarimetric Decompositions} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men70 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Huynen"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "Huynen Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Huynen Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Huynen Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {JRH : Huynen Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Barnes1"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "Barnes-1 Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Barnes-1 Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Barnes-1 Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {RMB1 : Barnes 1 Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Barnes2"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "Barnes-2 Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Barnes-2 Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Barnes-2 Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {RMB2 : Barnes 2 Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Cloude"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "Cloude Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Cloude Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Cloude Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {SRC : Cloude Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Holm1"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "Holm-1 Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Holm-1 Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Holm-1 Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {WAH1 : Holm 1 Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Holm2"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "Holm-2 Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Holm-2 Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Holm-2 Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {WAH2 : Holm 2 Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "HAAlpha"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "S2"    
        set DecompType "H/A/Alpha Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "H/A/Alpha Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "H/A/Alpha Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {HAA : H / A / Alpha Decomposition} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "AnYang3"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "An & Yang 3 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "An & Yang 3 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "An & Yang 3 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state disable
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {AN3 : An & Yang 3 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "AnYang4"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "An & Yang 4 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "An & Yang 4 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "An & Yang 4 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state disable
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {AN4 : An & Yang 4 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Freeman2"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Freeman 2 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Freeman 2 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Freeman 2 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state disable
        $widget(Label70_6) configure -state disable
        $widget(Label70_7) configure -state disable
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {FRE2 : Freeman 2 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Freeman3"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Freeman 3 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Freeman 3 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Freeman 3 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {FRE3 : Freeman 3 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Neumann"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Neumann 2 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Neumann 2 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Neumann 2 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state disable
        $widget(Checkbutton70_3) configure -state disable
        $widget(Label70_6) configure -state disable
        $widget(Label70_7) configure -state disable
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {NEU : Neumann 2 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "AriiNNED3"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Arii 3 Components NNED Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Arii 3 Components NNED Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Arii 3 Components NNED Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {NNED : Arii 3 Components NNED Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "AriiANNED3"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Arii 3 Components ANNED Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Arii 3 Components ANNED Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Arii 3 Components ANNED Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {ANNED : Arii 3 Components ANNED Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "VanZyl3"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Van Zyl (1992) 3 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Van Zyl (1992) 3 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Van Zyl (1992) 3 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {VZ3 : Van Zyl (1992) 3 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC DecompVolume DecompYam4 DecompYam4Final

#DATA PROCESS SNGL
global Load_PolarimetricDecompositionYam4
global PSPTopLevel

if {$Load_PolarimetricDecompositionYam4 == 0} {
    source "GUI/data_process_sngl/PolarimetricDecompositionYam4.tcl"
    set Load_PolarimetricDecompositionYam4 1
    WmTransient $widget(Toplevel426) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Singh4"
set DecompVolume "0"
set DecompYam4 "G4U1"
set DecompYam4Final "G4U1"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Singh 4 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Singh 4 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Singh 4 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir; 
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DecompDirOutput
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(TitleFrame426_1) configure -state disable
        $widget(Radiobutton426_1) configure -state disable
        $widget(Radiobutton426_2) configure -state disable
        $widget(TitleFrame426_2) configure -state normal
        $widget(Radiobutton426_3) configure -state normal
        $widget(Label426_1) configure -state disable
        $widget(Label426_2) configure -state disable
        $widget(Label426_3) configure -state disable
        $widget(Checkbutton426_1) configure -state disable
        $widget(Entry426_1) configure -state disable
        $widget(Entry426_2) configure -state disable
        $widget(Checkbutton426_3) configure -state normal
        $widget(Label426_6) configure -state normal
        $widget(Label426_7) configure -state normal
        $widget(Checkbutton426_2) configure -state normal
        WidgetShow $widget(Toplevel426); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {SIN4 : Singh 4 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Yamaguchi3"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Yamaguchi 3 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Yamaguchi 3 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Yamaguchi 3 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state normal
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        set PolarDecomp "1"; DecompON
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {YAM3 : Yamaguchi 3 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC DecompVolume DecompYam4 DecompYam4Final

#DATA PROCESS SNGL
global Load_PolarimetricDecompositionYam4
global PSPTopLevel

if {$Load_PolarimetricDecompositionYam4 == 0} {
    source "GUI/data_process_sngl/PolarimetricDecompositionYam4.tcl"
    set Load_PolarimetricDecompositionYam4 1
    WmTransient $widget(Toplevel426) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Yamaguchi4"
set DecompVolume "0"
set DecompYam4 "Y4O"
set DecompYam4Final "Y4O"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Yamaguchi 4 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Yamaguchi 4 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Yamaguchi 4 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir; 
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DecompDirOutput
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(TitleFrame426_1) configure -state normal
        $widget(Radiobutton426_1) configure -state normal
        $widget(Radiobutton426_2) configure -state normal
        $widget(TitleFrame426_2) configure -state disable
        $widget(Radiobutton426_3) configure -state disable
        $widget(Label426_1) configure -state disable
        $widget(Label426_2) configure -state disable
        $widget(Label426_3) configure -state disable
        $widget(Checkbutton426_1) configure -state disable
        $widget(Entry426_1) configure -state disable
        $widget(Entry426_2) configure -state disable
        $widget(Checkbutton426_3) configure -state normal
        $widget(Label426_6) configure -state normal
        $widget(Label426_7) configure -state normal
        $widget(Checkbutton426_2) configure -state disable
        WidgetShow $widget(Toplevel426); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {YAM4 : Yamaguchi 4 Components Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "MCSM5"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "L. Zhang 5 Components Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "L. Zhang 5 Components Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "L. Zhang 5 Components Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state disable
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {MCSM5 : L. Zhang 5 Components Decomposition} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Krogager"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    if { $DataFormatActive == "S2" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "S2"    
        set DecompType "Krogager Decomposition S2"
        }
    if { $DataFormatActive == "C3" } {
        set DecompDirInput "$DataDir/C3"
        set DecompOutputSubDir "C3"
        set DecompDecompositionFonction "C3"    
        set DecompType "Krogager Decomposition C3"
        }
    if { $DataFormatActive == "T3" } {
        set DecompDirInput "$DataDir/T3"
        set DecompOutputSubDir "T3"
        set DecompDecompositionFonction "T3"    
        set DecompType "Krogager Decomposition T3"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state disable
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {KRO : Krogager Decomposition} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global CameronDirInput CameronDirOutput CameronOutputDir CameronOutputSubDir
global ColorMapCameron ColorNumber RedPalette GreenPalette BluePalette
global VarColorMap

#DATA PROCESS SNGL
global Load_CameronDecomposition
global PSPTopLevel

if {$Load_CameronDecomposition == 0} {
    source "GUI/data_process_sngl/CameronDecomposition.tcl"
    set Load_CameronDecomposition 1
    WmTransient $widget(Toplevel235) $PSPTopLevel
    }

set CameronDirInput ""
set CameronDirOutput ""
set CameronOutputDir ""
set CameronOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

$widget(Button235_0) configure -state disable 
set VarColorMap "ok"
set ColorNumber "256"
set ColorMapCameron "$COLORMAPDir/Cameron_ColorMap.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
if [file exists $ColorMapCameron ] {
    set f [open $ColorMapCameron r]
    gets $f tmp
    gets $f tmp
    gets $f tmp
    for {set i 0} {$i < $ColorNumber} {incr i} {
        gets $f couleur
        set RedPalette($i) [lindex $couleur 0]
        set GreenPalette($i) [lindex $couleur 1]
        set BluePalette($i) [lindex $couleur 2]
        }
    close $f
    }

set c1 .top235.tit84.f.fra72.fra73.fra77.but79
set couleur [format "#%02x%02x%02x" $RedPalette(1) $GreenPalette(1) $BluePalette(1)]    
$c1 configure -background $couleur
set c2 .top235.tit84.f.fra72.fra73.cpd80.but79
set couleur [format "#%02x%02x%02x" $RedPalette(2) $GreenPalette(2) $BluePalette(2)]    
$c2 configure -background $couleur
set c3 .top235.tit84.f.fra72.fra74.cpd81.but79
set couleur [format "#%02x%02x%02x" $RedPalette(3) $GreenPalette(3) $BluePalette(3)]    
$c3 configure -background $couleur
set c4 .top235.tit84.f.fra72.fra74.cpd82.but79
set couleur [format "#%02x%02x%02x" $RedPalette(4) $GreenPalette(4) $BluePalette(4)]    
$c4 configure -background $couleur
set c5 .top235.tit84.f.fra72.cpd84.cpd81.but79
set couleur [format "#%02x%02x%02x" $RedPalette(5) $GreenPalette(5) $BluePalette(5)]    
$c5 configure -background $couleur
set c6 .top235.tit84.f.fra72.cpd84.cpd82.but79
set couleur [format "#%02x%02x%02x" $RedPalette(6) $GreenPalette(6) $BluePalette(6)]    
$c6 configure -background $couleur
set c7 .top235.tit84.f.fra72.cpd83.cpd81.but79
set couleur [format "#%02x%02x%02x" $RedPalette(7) $GreenPalette(7) $BluePalette(7)]    
$c7 configure -background $couleur
set c8 .top235.tit84.f.fra72.cpd83.cpd82.but79
set couleur [format "#%02x%02x%02x" $RedPalette(8) $GreenPalette(8) $BluePalette(8)]    
$c8 configure -background $couleur

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" } {
    set CameronDirInput $DataDir
    set CameronDirOutput $DataDir
    set CameronOutputDir $DataDir
    set CameronOutputSubDir ""
    set BMPDirInput $CameronDirOutput
    set ConfigFile "$CameronDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            WidgetShow $widget(Toplevel235); TextEditorRunTrace "Open Window Cameron Decomposition" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {CAM : Cameron Decomposition} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global TSVMDirInput TSVMDirOutput TSVMOutputDir TSVMOutputSubDir
global TSVMDecompositionFonction
global NwinTSVML NwinTSVMC TSVMalpha123 TSVMphi123 TSVMtau123 TSVMpsi123 TSVMalpphitaupsi
global BMPTSVMalpha123 BMPTSVMphi123 BMPTSVMtau123 BMPTSVMpsi123 BMPTSVMalpphitaupsi

#DATA PROCESS SNGL
global Load_TSVMDecomposition
global PSPTopLevel

if {$Load_TSVMDecomposition == 0} {
    source "GUI/data_process_sngl/TSVMDecomposition.tcl"
    set Load_TSVMDecomposition 1
    WmTransient $widget(Toplevel367) $PSPTopLevel
    }

set TSVMDirInput ""
set TSVMDirOutput ""
set TSVMOutputDir ""
set TSVMOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinTSVML "?"; set NwinTSVMC "?"
set TSVMalpha123 "0"; set TSVMphi123 "0"
set TSVMtau123 "0"; set TSVMpsi123 "0"
set TSVMalpphitaupsi "0"
set BMPTSVMalpha123 "0"; set BMPTSVMphi123 "0"
set BMPTSVMtau123 "0"; set BMPTSVMpsi123 "0"
set BMPTSVMalpphitaupsi "0"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    set TSVMOutputDir $DataDir
    set TSVMDirOutput $DataDir
    if { $DataFormatActive == "S2" } {
        set TSVMDirInput $DataDir
        set TSVMOutputSubDir ""
        set BMPDirInput $TSVMDirOutput
        set TSVMDecompositionFonction "S2"
        }
    if { $DataFormatActive == "C3" } {
        set TSVMDirInput "$DataDir/C3"
        set TSVMOutputSubDir "C3"
        set BMPDirInput "$TSVMDirOutput/C3"
        set TSVMDecompositionFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set TSVMDirInput "$DataDir/T3"
        set TSVMOutputSubDir "T3"
        set BMPDirInput "$TSVMDirOutput/T3"
        set TSVMDecompositionFonction "T3"
        }
    set ConfigFile "$TSVMDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            $widget(Checkbutton367_1) configure -state disable
            $widget(Checkbutton367_2) configure -state disable
            $widget(Checkbutton367_3) configure -state disable
            $widget(Checkbutton367_4) configure -state disable
            $widget(Checkbutton367_5) configure -state disable
            WidgetShow $widget(Toplevel367); TextEditorRunTrace "Open Window TSVM Decomposition" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {TSVM : Touzi Decomposition} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DecompDirInput DecompDirOutput DecompDirOutputTmp DecompOutputDir DecompOutputSubDir
global PolarDecomp RGBPolarDecomp BMPPolarDecomp DecompDecompositionFonction DecompType DecompFonction
global DecompOutputDir1 DecompOutputSubDir1 DecompOutputDir2 DecompOutputSubDir2
global DecompOutputDir3 DecompOutputSubDir3 DecompOutputDir4 DecompOutputSubDir4
global DecompOutputSubDirTmp NwinDecompL NwinDecompC

#DATA PROCESS SNGL
global Load_PolarimetricDecomposition
global PSPTopLevel

if {$Load_PolarimetricDecomposition == 0} {
    source "GUI/data_process_sngl/PolarimetricDecomposition.tcl"
    set Load_PolarimetricDecomposition 1
    WmTransient $widget(Toplevel70) $PSPTopLevel
    }

set DecompDirInput ""
set DecompDirOutput ""
set DecompDirOutputTmp ""
set DecompOutputDir ""
set DecompOutputSubDir ""

set DecompOutputSubDirTmp ""
set DecompOutputDir1 ""
set DecompOutputSubDir1 ""
set DecompOutputDir2 ""
set DecompOutputSubDir2 ""
set DecompOutputDir3 ""
set DecompOutputSubDir3 ""
set DecompOutputDir4 ""
set DecompOutputSubDir4 ""

set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MinMaxBMPDecomp "0"
set MinBMPDecomp ""
set MaxBMPDecomp ""
set NwinDecompL "3"; set NwinDecompC "3"
set PolarDecomp "0"
set RGBPolarDecomp "0"
set BMPPolarDecomp "0"
set DecompFonction "Raney"
set Fonction "TARGET DECOMPOSITIONS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "SPP" || $DataFormatActive == "C2" } {
    if { $DataFormatActive == "SPP" } {
        set DecompDirInput $DataDir
        set DecompOutputSubDir ""
        set DecompDecompositionFonction "SPP"    
        set DecompType "Raney Decomposition SPP"
        }
    if { $DataFormatActive == "C2" } {
        set DecompDirInput "$DataDir/C2"
        set DecompOutputSubDir "C2"
        set DecompDecompositionFonction "C2"    
        set DecompType "Raney Decomposition C2"
        }
    set DecompDirOutput $DataDir
    set DecompDirOutputTmp $DataDir
    set DecompOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label70_1) configure -state disable
        $widget(Label70_2) configure -state disable
        $widget(Label70_3) configure -state disable
        $widget(Checkbutton70_1) configure -state disable
        $widget(Entry70_1) configure -state disable
        $widget(Entry70_2) configure -state disable
        $widget(Label70_4) configure -state disable
        $widget(Radiobutton70_1) configure -state disable
        $widget(Radiobutton70_2) configure -state disable
        $widget(Label70_5) configure -state normal
        $widget(Entry70_3a) configure -state normal
        $widget(Entry70_3b) configure -state normal
        $widget(Checkbutton70_2) configure -state disable
        $widget(Checkbutton70_3) configure -state normal
        $widget(Label70_6) configure -state normal
        $widget(Label70_7) configure -state normal
        $widget(TitleFrame70_1) configure -state disable; $widget(TitleFrame70_1) configure -text ""
        $widget(TitleFrame70_2) configure -state disable; $widget(TitleFrame70_2) configure -text ""
        $widget(TitleFrame70_3) configure -state disable; $widget(TitleFrame70_3) configure -text ""
        $widget(TitleFrame70_4) configure -state disable; $widget(TitleFrame70_4) configure -text ""
        $widget(Entry70_4) configure -state disable; $widget(Entry70_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_5) configure -state disable; $widget(Entry70_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_6) configure -state disable; $widget(Entry70_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_7) configure -state disable; $widget(Entry70_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_8) configure -state disable; $widget(Entry70_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_9) configure -state disable; $widget(Entry70_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_10) configure -state disable; $widget(Entry70_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry70_11) configure -state disable; $widget(Entry70_11) configure -disabledbackground $PSPBackgroundColor
        $widget(Button70_1) configure -state disable; $widget(Button70_2) configure -state disable
        $widget(Button70_3) configure -state disable; $widget(Button70_4) configure -state disable
        WidgetShow $widget(Toplevel70); TextEditorRunTrace "Open Window Polarimetric Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "S2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {2KR : Raney Decomposition} 
    $site_6_0.men70 add command \
        \
        -command {global DataDir CompactDirInput CompactDirOutput CompactOutputDir CompactOutputSubDir
global ConfigFile VarError ErrorMessage CompactDecompositionFonction hybrid
global NwinCompactL NwinCompactC eigenvalues probabilities mv ms alphas phi
global alpha tau entropy anisotropy PsPdPv sigmahv stvf CPR
global BMPeigenvalues BMPprobabilities BMPmv BMPms BMPalphas BMPphi
global BMPtau BMPalpha BMPentropy BMPanisotropy BMPPsPdPv BMPsigmahv BMPstvf BMPCPR

#DATA PROCESS SNGL
global Load_CompactDecomposition PSPTopLevel

if {$Load_CompactDecomposition == 0} {
    source "GUI/data_process_sngl/CompactDecomposition.tcl"
    set Load_CompactDecomposition 1
    WmTransient $widget(Toplevel442) $PSPTopLevel
    }

set CompactDirInput ""
set CompactDirOutput ""
set CompactOutputDir ""
set CompactOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "SPP" || $DataFormatActive == "C2" } {
    if { $DataFormatActive == "SPP" } {
        set CompactDirInput $DataDir
        set CompactOutputSubDir ""
        set CompactDecompositionFonction "SPP"    
        }
    if { $DataFormatActive == "C2" } {
        set CompactDirInput "$DataDir/C2"
        set CompactOutputSubDir "C2"
        set CompactDecompositionFonction "C2"    
        }
    set CompactDirOutput $DataDir
    set CompactDirOutputTmp $DataDir
    set CompactOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinCompactL "?"; set NwinCompactC "?"
        set hybrid "LHC"
        set eigenvalues "0"
        set probabilities "0"
        set mv "0"
        set ms "0"
        set alphas "0"
        set phi "0"
        set PsPdPv "0"
        set sigmahv "0"
        set entropy "0"
        set anisotropy "0"
        set stvr "0"
        set CPR "0"
        set alpha "0"
        set tau "0"
        set BMPeigenvalues "0"
        set BMPprobabilities "0"
        set BMPmv "0"
        set BMPms "0"
        set BMPalphas "0"
        set BMPphi "0"
        set BMPPsPdPv "0"
        set BMPsigmahv "0"
        set BMPentropy "0"
        set BMPanisotropy "0"
        set BMPstvr "0"
        set BMPCPR "0"
        set BMPalpha "0"
        set BMPtau "0"
        $widget(Checkbutton442_1) configure -state disable
        $widget(Checkbutton442_2) configure -state disable
        $widget(Checkbutton442_3) configure -state disable
        $widget(Checkbutton442_4) configure -state disable
        $widget(Checkbutton442_5) configure -state disable
        $widget(Checkbutton442_6) configure -state disable
        $widget(Checkbutton442_7) configure -state disable
        $widget(Checkbutton442_8) configure -state disable
        $widget(Checkbutton442_11) configure -state disable
        $widget(Checkbutton442_12) configure -state disable
        $widget(Checkbutton442_13) configure -state disable
        $widget(Checkbutton442_14) configure -state disable
        $widget(Checkbutton442_15) configure -state disable
        $widget(Checkbutton442_16) configure -state disable
        WidgetShow $widget(Toplevel442); TextEditorRunTrace "Open Window Compact Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "S2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {CPD : Compact-Pol Decomposition} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men71" -command {} \
        -label {Polarimetric Functionalities - 1} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SyntFonction SyntFunction SyntDirInput SyntDirOutput SyntOutputDir SyntOutputSubDir
global Synt000 Synt030 Synt045 Synt060 Synt090 Synt120 Synt135 Synt150 SyntLeft SyntRight SyntRGB SyntRGBFormat SyntBMP

#DATA PROCESS SNGL
global Load_PolarisationSynthesis PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_PolarisationSynthesis == 0} {
    source "GUI/data_process_sngl/PolarisationSynthesis.tcl"
    set Load_PolarisationSynthesis 1
    WmTransient $widget(Toplevel100) $PSPTopLevel
    }

set SyntDirInput ""
set SyntDirOutput ""
set SyntOutputDir ""
set SyntOutputSubDir ""
set Fonction "Polarisation Synthesis"
set ConfigFile ""

set Synt000 "0"
set Synt030 "0"
set Synt045 "0"
set Synt060 "0"
set Synt090 "0"
set Synt120 "0"
set Synt135 "0"
set Synt150 "0"
set SyntLeft "0"
set SyntRight "0"
set SyntRGB "0"
set SyntRGBFormat ""
set SyntBMP "0"
$widget(Radiobutton100_1) configure -state disable
$widget(Radiobutton100_2) configure -state disable
$widget(Label100_1) configure -state disable
$widget(Label100_2) configure -state disable
$widget(Label100_3) configure -state disable
$widget(Label100_4) configure -state disable
$widget(Label100_5) configure -state disable
$widget(Label100_6) configure -state disable

    set SyntDirOutput $DataDir
    set SyntOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set SyntDirInput $DataDir
        set SyntOutputSubDir ""
        set BMPDirInput $SyntDirOutput
        set SyntFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set SyntDirInput "$DataDir/C3"
        set SyntOutputSubDir "C3"
        set BMPDirInput "$SyntDirOutput/C3"
        set SyntFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set SyntDirInput "$DataDir/T3"
        set SyntOutputSubDir "T3"
        set BMPDirInput "$SyntDirOutput/T3"
        set SyntFonction "T3"
        }
    set ConfigFile "$SyntDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel100); TextEditorRunTrace "Open Window Polarisation Synthesis" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Polarisation Synthesis} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FileName PolSigDirInput PolSigDirOutput PolSigOutputDir PolSigOutputSubDir
global TMPCopolSigTxt TMPCopolSigBin TMPXpolSigTxt TMPXpolSigBin
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global BMPPolSigX BMPPolSigY BMPPolSigValue
global PolSigExecFid PolSigOutputFormat PolSigOutputUnit
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave 
global GnuplotPipeCopol GnuplotPipeXpol
global GnuXview GnuZview GnuOutputFormat GnuOutputFile
global CopolSigOutputFile XpolSigOutputFile

#DATA PROCESS SNGL
global Load_PolarSignature
#BMP PROCESS
global Load_ViewBMPLens PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

set config "true"
if {$PolSigExecFid != ""} {
    set ErrorMessage "POLAR SIGNATURE IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$config == "true"} {

    set PolSigDirOutput $DataDir
    set PolSigOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set PolSigDirInput $DataDir
        set PolSigOutputSubDir ""
        }
    if {$DataFormatActive == "C3"} {
        set PolSigDirInput "$DataDir/C3"
        set PolSigOutputSubDir "C3"
        }
    if {$DataFormatActive == "T3"} {
        set PolSigDirInput "$DataDir/T3"
        set PolSigOutputSubDir "T3"
        }
    set BMPDirInput $PolSigDirInput
    set ConfigFile "$PolSigDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                ClosePSPViewer
                Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                set types {
                    {{BMP Files}        {.bmp}        }
                    }
                set FileName ""
                OpenFile $BMPDirInput $types "INPUT BMP FILE"

                if {$FileName != ""} {
                    set BMPImageOpen "1"
                    set BMPViewFileInput $FileName

                    if {$Load_ViewBMPLens == 0} {
                        source "GUI/bmp_process/ViewBMPLens.tcl"
                        set Load_ViewBMPLens 1
                        WmTransient $widget(Toplevel73) $PSPTopLevel
                        }
                    if {$Load_PolarSignature == 0} {
                        source "GUI/data_process_sngl/PolarSignature.tcl"
                        set Load_PolarSignature 1
                        WmTransient $widget(Toplevel240) $PSPTopLevel
                        } else {
                        $widget(CANVASLENSPOLSIG) dtag $LineXLensInit
                        $widget(CANVASLENSPOLSIG) dtag $LineYLensInit
                        }
                    set line_color "white"
                    set b .top240.fra71.fra72.fra79.but80
                    $b configure -background $line_color -foreground $line_color
                    set BMPPolSigX ""
                    set BMPPolSigY ""
                    set BMPPolSigValue ""
                    set PolSigOutputFormat "mesh"
                    set PolSigOutputUnit "dB"
                    set GnuXview "60"
                    set GnuZview "30"
                    set GnuOutputFormat "SCREEN"
                    set GnuOutputFile ""
                    set CopolSigOutputFile ""
                    set XpolSigOutputFile ""
                    LoadPSPViewer
                    load_bmp_caracteristics $BMPViewFileInput
                    load_bmp_file $BMPViewFileInput    
                    load_bmp_lens_line $widget(Toplevel240) $widget(CANVASLENSPOLSIG)
                    MouseActiveFunction "LensPOLSIG"

                    TextEditorRunTrace "Launch The Process Soft/data_process_sngl/Polar_Signature.exe" "k"
                    TextEditorRunTrace "Arguments: -id \x22$PolSigDirInput\x22 -iodf $DataFormatActive -fct \x22$TMPCopolSigTxt\x22 -fcb \x22$TMPCopolSigBin\x22 -fxt \x22$TMPXpolSigTxt\x22 -fxb \x22$TMPXpolSigBin\x22" "k"
                    set PolSigExecFid [ open "| Soft/data_process_sngl/Polar_Signature.exe -id \x22$PolSigDirInput\x22 -iodf $DataFormatActive -fct \x22$TMPCopolSigTxt\x22 -fcb \x22$TMPCopolSigBin\x22 -fxt \x22$TMPXpolSigTxt\x22 -fxb \x22$TMPXpolSigBin\x22" r+]

                    set GnuplotPipeSave ""; set GnuplotPipeCopol ""; set GnuplotPipeXpol ""
                    WidgetShow $widget(Toplevel240); TextEditorRunTrace "Open Window Polarimetric Signatures" "b"
                    }
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config
    }

# Config Format
}
}} \
        -label {Polarimetric Signature} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global StkDirInput StkDirOutput StkOutputDir StkOutputSubDir
global StkFonction StkFunction NwinStkL NwinStkC
global StkG0v1 StkG1v1 StkG2v1 StkG3v1 StkPhiv1 StkTauv1 StkEigv1 StkProbv1 StkHv1 StkAv1 StkCv1 StkDoLP1 StkDoCP1 StkCPR1 StkLPR1
global BMPStkG0v1 BMPStkG1v1 BMPStkG2v1 BMPStkG3v1 BMPStkPhiv1 BMPStkTauv1 BMPStkEigv1 BMPStkProbv1 BMPStkHv1 BMPStkAv1 BMPStkCv1 BMPStkDoLP1 BMPStkDoCP1 BMPStkCPR1 BMPStkLPR1
global StkG0v2 StkG1v2 StkG2v2 StkG3v2 StkPhiv2 StkTauv2 StkEigv2 StkProbv2 StkHv2 StkAv2 StkCv2 StkDoLP2 StkDoCP2 StkCPR2 StkLPR2
global BMPStkG0v2 BMPStkG1v2 BMPStkG2v2 BMPStkG3v2 BMPStkPhiv2 BMPStkTauv2 BMPStkEigv2 BMPStkProbv2 BMPStkHv2 BMPStkAv2 BMPStkCv2 BMPStkDoLP2 BMPStkDoCP2 BMPStkCPR2 BMPStkLPR2

#DATA PROCESS SNGL
global Load_StokesParameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$DataFormatActive == "S2" || $DataFormatActive == "C2" || $DataFormatActive == "SPP" } {

        if {$Load_StokesParameters == 0} {
            source "GUI/data_process_sngl/StokesParameters.tcl"
            set Load_StokesParameters 1
            WmTransient $widget(Toplevel209) $PSPTopLevel
            }

        set StkDirInput ""
        set StkDirOutput ""
        set StkOutputDir ""
        set StkOutputSubDir ""
        set Fonction ""; set Fonction2 ""
        set ConfigFile ""

        set StkOutputDir $DataDir
        set StkDirOutput $DataDir
        if {$DataFormatActive == "S2"} {
            set StkDirInput $DataDir
            set StkOutputSubDir ""
            set BMPDirInput $StkDirOutput
            set StkFonction "S2"
            $widget(Radiobutton209_1) configure -state normal; $widget(Radiobutton209_2) configure -state normal
            $widget(Radiobutton209_3) configure -state normal; $widget(Radiobutton209_4) configure -state normal
            $widget(Radiobutton209_5) configure -state normal; $widget(Radiobutton209_6) configure -state normal
            $widget(Radiobutton209_7) configure -state normal; $widget(Radiobutton209_8) configure -state normal
            $widget(Checkbutton209_1) configure -state disable; $widget(Checkbutton209_2) configure -state disable
            $widget(Checkbutton209_3) configure -state disable; $widget(Checkbutton209_4) configure -state disable
            $widget(Checkbutton209_5) configure -state normal; $widget(Checkbutton209_6) configure -state disable
            $widget(Checkbutton209_7) configure -state normal; $widget(Checkbutton209_8) configure -state disable
            $widget(Checkbutton209_9) configure -state normal; $widget(Checkbutton209_10) configure -state disable
            $widget(Checkbutton209_11) configure -state normal; $widget(Checkbutton209_12) configure -state disable
            $widget(Checkbutton209_13) configure -state normal; $widget(Checkbutton209_14) configure -state disable
            $widget(Checkbutton209_15) configure -state normal; $widget(Checkbutton209_16) configure -state disable
            $widget(Checkbutton209_17) configure -state normal; $widget(Checkbutton209_18) configure -state disable
            $widget(Checkbutton209_41) configure -state normal; $widget(Checkbutton209_42) configure -state disable
            $widget(Checkbutton209_43) configure -state normal; $widget(Checkbutton209_44) configure -state disable
            $widget(Checkbutton209_45) configure -state normal; $widget(Checkbutton209_46) configure -state disable
            $widget(Checkbutton209_47) configure -state normal; $widget(Checkbutton209_48) configure -state disable

            $widget(Radiobutton209_10) configure -state normal; $widget(Radiobutton209_11) configure -state normal
            $widget(Radiobutton209_12) configure -state normal; $widget(Radiobutton209_13) configure -state normal
            $widget(Radiobutton209_14) configure -state normal; $widget(Radiobutton209_15) configure -state normal
            $widget(Radiobutton209_16) configure -state normal; $widget(Radiobutton209_17) configure -state normal
            $widget(Checkbutton209_21) configure -state disable; $widget(Checkbutton209_22) configure -state disable
            $widget(Checkbutton209_23) configure -state disable; $widget(Checkbutton209_24) configure -state disable
            $widget(Checkbutton209_25) configure -state normal; $widget(Checkbutton209_26) configure -state disable
            $widget(Checkbutton209_27) configure -state normal; $widget(Checkbutton209_28) configure -state disable
            $widget(Checkbutton209_29) configure -state normal; $widget(Checkbutton209_30) configure -state disable
            $widget(Checkbutton209_31) configure -state normal; $widget(Checkbutton209_32) configure -state disable
            $widget(Checkbutton209_33) configure -state normal; $widget(Checkbutton209_34) configure -state disable
            $widget(Checkbutton209_35) configure -state normal; $widget(Checkbutton209_36) configure -state disable
            $widget(Checkbutton209_37) configure -state normal; $widget(Checkbutton209_38) configure -state disable
            $widget(Checkbutton209_51) configure -state normal; $widget(Checkbutton209_52) configure -state disable
            $widget(Checkbutton209_53) configure -state normal; $widget(Checkbutton209_54) configure -state disable
            $widget(Checkbutton209_55) configure -state normal; $widget(Checkbutton209_56) configure -state disable
            $widget(Checkbutton209_57) configure -state normal; $widget(Checkbutton209_58) configure -state disable
            }
        if {$DataFormatActive == "C2"} {
            set StkDirInput "$DataDir/C2"
            set StkOutputSubDir "C2"
            set BMPDirInput "$StkDirOutput/C2"
            set StkFonction "C2"
            }
        if {$DataFormatActive == "SPP"} {
            set StkDirInput $DataDir
            set StkOutputSubDir ""
            set BMPDirInput $StkDirOutput
            set StkFonction "SPP"
            }

        if {$DataFormatActive == "C2" || $DataFormatActive == "SPP"} {
            if { "$PolarType" == "pp2"} {
                $widget(Radiobutton209_1) configure -state disable; $widget(Radiobutton209_2) configure -state disable
                $widget(Radiobutton209_3) configure -state disable; $widget(Radiobutton209_4) configure -state disable
                $widget(Radiobutton209_5) configure -state disable; $widget(Radiobutton209_6) configure -state disable
                $widget(Radiobutton209_7) configure -state disable; $widget(Radiobutton209_8) configure -state disable
                $widget(Checkbutton209_1) configure -state disable; $widget(Checkbutton209_2) configure -state disable
                $widget(Checkbutton209_3) configure -state disable; $widget(Checkbutton209_4) configure -state disable
                $widget(Checkbutton209_5) configure -state disable; $widget(Checkbutton209_6) configure -state disable
                $widget(Checkbutton209_7) configure -state disable; $widget(Checkbutton209_8) configure -state disable
                $widget(Checkbutton209_9) configure -state disable; $widget(Checkbutton209_10) configure -state disable
                $widget(Checkbutton209_11) configure -state disable; $widget(Checkbutton209_12) configure -state disable
                $widget(Checkbutton209_13) configure -state disable; $widget(Checkbutton209_14) configure -state disable
                $widget(Checkbutton209_15) configure -state disable; $widget(Checkbutton209_16) configure -state disable
                $widget(Checkbutton209_17) configure -state disable; $widget(Checkbutton209_18) configure -state disable
                $widget(Checkbutton209_41) configure -state disable; $widget(Checkbutton209_42) configure -state disable
                $widget(Checkbutton209_43) configure -state disable; $widget(Checkbutton209_44) configure -state disable
                $widget(Checkbutton209_45) configure -state disable; $widget(Checkbutton209_46) configure -state disable
                $widget(Checkbutton209_47) configure -state disable; $widget(Checkbutton209_48) configure -state disable

                $widget(Radiobutton209_10) configure -state normal; $widget(Radiobutton209_11) configure -state normal
                $widget(Radiobutton209_12) configure -state normal; $widget(Radiobutton209_13) configure -state normal
                $widget(Radiobutton209_14) configure -state normal; $widget(Radiobutton209_15) configure -state normal
                $widget(Radiobutton209_16) configure -state normal; $widget(Radiobutton209_17) configure -state normal
                $widget(Checkbutton209_21) configure -state disable; $widget(Checkbutton209_22) configure -state disable
                $widget(Checkbutton209_23) configure -state disable; $widget(Checkbutton209_24) configure -state disable
                $widget(Checkbutton209_25) configure -state normal; $widget(Checkbutton209_26) configure -state disable
                $widget(Checkbutton209_27) configure -state normal; $widget(Checkbutton209_28) configure -state disable
                $widget(Checkbutton209_29) configure -state normal; $widget(Checkbutton209_30) configure -state disable
                $widget(Checkbutton209_31) configure -state normal; $widget(Checkbutton209_32) configure -state disable
                $widget(Checkbutton209_33) configure -state normal; $widget(Checkbutton209_34) configure -state disable
                $widget(Checkbutton209_35) configure -state normal; $widget(Checkbutton209_36) configure -state disable
                $widget(Checkbutton209_37) configure -state normal; $widget(Checkbutton209_38) configure -state disable
                $widget(Checkbutton209_51) configure -state normal; $widget(Checkbutton209_52) configure -state disable
                $widget(Checkbutton209_53) configure -state normal; $widget(Checkbutton209_54) configure -state disable
                $widget(Checkbutton209_55) configure -state normal; $widget(Checkbutton209_56) configure -state disable
                $widget(Checkbutton209_57) configure -state normal; $widget(Checkbutton209_58) configure -state disable
                }
            if { "$PolarType" == "pp1"} {
                $widget(Radiobutton209_1) configure -state normal; $widget(Radiobutton209_2) configure -state normal
                $widget(Radiobutton209_3) configure -state normal; $widget(Radiobutton209_4) configure -state normal
                $widget(Radiobutton209_5) configure -state normal; $widget(Radiobutton209_6) configure -state normal
                $widget(Radiobutton209_7) configure -state normal; $widget(Radiobutton209_8) configure -state normal
                $widget(Checkbutton209_1) configure -state disable; $widget(Checkbutton209_2) configure -state disable
                $widget(Checkbutton209_3) configure -state disable; $widget(Checkbutton209_4) configure -state disable
                $widget(Checkbutton209_5) configure -state normal; $widget(Checkbutton209_6) configure -state disable
                $widget(Checkbutton209_7) configure -state normal; $widget(Checkbutton209_8) configure -state disable
                $widget(Checkbutton209_9) configure -state normal; $widget(Checkbutton209_10) configure -state disable
                $widget(Checkbutton209_11) configure -state normal; $widget(Checkbutton209_12) configure -state disable
                $widget(Checkbutton209_13) configure -state normal; $widget(Checkbutton209_14) configure -state disable
                $widget(Checkbutton209_15) configure -state normal; $widget(Checkbutton209_16) configure -state disable
                $widget(Checkbutton209_17) configure -state normal; $widget(Checkbutton209_18) configure -state disable
                $widget(Checkbutton209_41) configure -state normal; $widget(Checkbutton209_42) configure -state disable
                $widget(Checkbutton209_43) configure -state normal; $widget(Checkbutton209_44) configure -state disable
                $widget(Checkbutton209_45) configure -state normal; $widget(Checkbutton209_46) configure -state disable
                $widget(Checkbutton209_47) configure -state normal; $widget(Checkbutton209_48) configure -state disable
    
                $widget(Radiobutton209_10) configure -state disable; $widget(Radiobutton209_11) configure -state disable
                $widget(Radiobutton209_12) configure -state disable; $widget(Radiobutton209_13) configure -state disable
                $widget(Radiobutton209_14) configure -state disable; $widget(Radiobutton209_15) configure -state disable
                $widget(Radiobutton209_16) configure -state disable; $widget(Radiobutton209_17) configure -state disable
                $widget(Checkbutton209_21) configure -state disable; $widget(Checkbutton209_22) configure -state disable
                $widget(Checkbutton209_23) configure -state disable; $widget(Checkbutton209_24) configure -state disable
                $widget(Checkbutton209_25) configure -state disable; $widget(Checkbutton209_26) configure -state disable
                $widget(Checkbutton209_27) configure -state disable; $widget(Checkbutton209_28) configure -state disable
                $widget(Checkbutton209_29) configure -state disable; $widget(Checkbutton209_30) configure -state disable
                $widget(Checkbutton209_31) configure -state disable; $widget(Checkbutton209_32) configure -state disable
                $widget(Checkbutton209_33) configure -state disable; $widget(Checkbutton209_34) configure -state disable
                $widget(Checkbutton209_35) configure -state disable; $widget(Checkbutton209_36) configure -state disable
                $widget(Checkbutton209_37) configure -state disable; $widget(Checkbutton209_38) configure -state disable
                $widget(Checkbutton209_51) configure -state disable; $widget(Checkbutton209_52) configure -state disable
                $widget(Checkbutton209_53) configure -state disable; $widget(Checkbutton209_54) configure -state disable
                $widget(Checkbutton209_55) configure -state disable; $widget(Checkbutton209_56) configure -state disable
                $widget(Checkbutton209_57) configure -state disable; $widget(Checkbutton209_58) configure -state disable
                }
            if { "$PolarType" == "pp3"} {
                set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR PP1 or PP2"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                }
            }

        set ConfigFile "$StkDirInput/config.txt"
        set ErrorMessage ""
        LoadConfig
        if {"$ErrorMessage" == ""} {
            set NwinStkL "?"; set NwinStkC "?"
            set StkG0v1 0; set StkG1v1 0; set StkG2v1 0; set StkG3v1 0
            set StkPhiv1 0; set StkTauv1 0; set StkEigv1 0
            set StkHv1 0; set StkAv1 0; set StkCv1 0; set StkProbv1 0
            set StkDoLP1 0; set StkDoCP1 0; set StkLPR1 0; set StkCPR1 0
            set BMPStkG0v1 0; set BMPStkG1v1 0; set BMPStkG2v1 0; set BMPStkG3v1 0
            set BMPStkPhiv1 0; set BMPStkTauv1 0; set BMPStkEigv1 0
            set BMPStkHv1 0; set BMPStkAv1 0; set BMPStkCv1 0; set BMPStkProbv1 0
            set BMPStkDoLP1 0; set BMPStkDoCP1 0; set BMPStkLPR1 0; set BMPStkCPR1 0
            set StkG0v2 0; set StkG1v2 0; set StkG2v2 0; set StkG3v2 0
            set StkPhiv2 0; set StkTauv2 0; set StkEigv2 0
            set StkHv2 0; set StkAv2 0; set StkCv2 0; set StkProbv2 0
            set StkDoLP2 0; set StkDoCP2 0; set StkLPR2 0; set StkCPR2 0
            set BMPStkG0v2 0; set BMPStkG1v2 0; set BMPStkG2v2 0; set BMPStkG3v2 0
            set BMPStkPhiv2 0; set BMPStkTauv2 0; set BMPStkEigv2 0
            set BMPStkHv2 0; set BMPStkAv2 0; set BMPStkCv2 0; set BMPStkProbv2 0
            set BMPStkDoLP2 0; set BMPStkDoCP2 0; set BMPStkLPR2 0; set BMPStkCPR2 0

            if {$DataFormatActive == "S2"} { WidgetShow $widget(Toplevel209); TextEditorRunTrace "Open Window Stokes Parameters" "b" }
            if {$DataFormatActive == "C2" || $DataFormatActive == "SPP"} {
                if { "$PolarType" == "pp1"} {WidgetShow $widget(Toplevel209); TextEditorRunTrace "Open Window Stokes Parameters" "b"}
                if { "$PolarType" == "pp2"} {WidgetShow $widget(Toplevel209); TextEditorRunTrace "Open Window Stokes Parameters" "b"}
                }

            } else {
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }

        } else {
        set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
        set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
        set VarWarning ""
        Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
        tkwait variable VarWarning
        set VarWarning ""
        }

# Config Format
}} \
        -label {Stokes Parameters} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HybridDirInput HybridDirOutput HybridOutputDir HybridOutputSubDir
global HybridFunction HybridFonction HybridOutputFormat HybridMode HybridMethod HybridConstruct
global NwinHybridL NwinHybridC

#DATA PROCESS
global Load_CompactPolarimetricMode PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_CompactPolarimetricMode == 0} {
    source "GUI/data_process_sngl/CompactPolarimetricMode.tcl"
    set Load_CompactPolarimetricMode 1
    WmTransient $widget(Toplevel334) $PSPTopLevel
    }

set HybridDirInput ""
set HybridDirOutput ""
set HybridOutputDir ""
set HybridOutputSubDir ""
set HybridOutputFormat ""
set NwinHybridL ""
set NwinHybridC ""
set HybridMode ""
set HybridMethod ""
set HybridConstruct "0"
set Fonction ""; set Fonction2 ""
set ConfigFile ""

    set HybridDirOutput $DataDir
    set HybridOutputDir $DataDir
    append HybridOutputDir "_HYB"
    if {$DataFormatActive == "S2"} {
        set HybridDirInput "$DataDir"
        set HybridFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set HybridDirInput "$DataDir/C3"
        set HybridFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set HybridDirInput "$DataDir/T3"
        set HybridFonction "T3"
        }
    set ConfigFile "$HybridDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HybridOutputSubDir "C2"; set NwinHybridL ""; set NwinHybridC ""
        $widget(TitleFrame334_1) configure -state disable; $widget(TitleFrame334_2) configure -state disable
        $widget(Radiobutton334_1) configure -state disable; $widget(Radiobutton334_2) configure -state disable
        $widget(Radiobutton334_3) configure -state disable; $widget(Radiobutton334_4) configure -state disable
        $widget(Radiobutton334_5) configure -state disable
        $widget(Checkbutton334_1) configure -state disable
        $widget(Label334_1) configure -state disable; $widget(Label334_2) configure -state disable
        $widget(Entry334_1) configure -state disable; $widget(Entry334_2) configure -state disable
        $widget(Entry334_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry334_2) configure -disabledbackground $PSPBackgroundColor
        WidgetShow $widget(Toplevel334); TextEditorRunTrace "Open Window Compact Polarimetric Mode" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Compact Polarimetric Mode} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir CompactDirInput CompactDirOutput CompactOutputDir CompactOutputSubDir
global ConfigFile VarError ErrorMessage CompactDecompositionFonction hybrid
global NwinCompactL NwinCompactC eigenvalues probabilities mv ms alphas phi
global alpha tau entropy anisotropy PsPdPv sigmahv stvf CPR
global BMPeigenvalues BMPprobabilities BMPmv BMPms BMPalphas BMPphi
global BMPtau BMPalpha BMPentropy BMPanisotropy BMPPsPdPv BMPsigmahv BMPstvf BMPCPR

#DATA PROCESS SNGL
global Load_CompactDecomposition PSPTopLevel

if {$Load_CompactDecomposition == 0} {
    source "GUI/data_process_sngl/CompactDecomposition.tcl"
    set Load_CompactDecomposition 1
    WmTransient $widget(Toplevel442) $PSPTopLevel
    }

set CompactDirInput ""
set CompactDirOutput ""
set CompactOutputDir ""
set CompactOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "SPP" || $DataFormatActive == "C2" } {
    if { $DataFormatActive == "SPP" } {
        set CompactDirInput $DataDir
        set CompactOutputSubDir ""
        set CompactDecompositionFonction "SPP"    
        }
    if { $DataFormatActive == "C2" } {
        set CompactDirInput "$DataDir/C2"
        set CompactOutputSubDir "C2"
        set CompactDecompositionFonction "C2"    
        }
    set CompactDirOutput $DataDir
    set CompactDirOutputTmp $DataDir
    set CompactOutputDir $DataDir
    set ConfigFile "$DecompDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinCompactL "?"; set NwinCompactC "?"
        set hybrid "LHC"
        set eigenvalues "0"
        set probabilities "0"
        set mv "0"
        set ms "0"
        set alphas "0"
        set phi "0"
        set PsPdPv "0"
        set sigmahv "0"
        set entropy "0"
        set anisotropy "0"
        set stvr "0"
        set CPR "0"
        set alpha "0"
        set tau "0"
        set BMPeigenvalues "0"
        set BMPprobabilities "0"
        set BMPmv "0"
        set BMPms "0"
        set BMPalphas "0"
        set BMPphi "0"
        set BMPPsPdPv "0"
        set BMPsigmahv "0"
        set BMPentropy "0"
        set BMPanisotropy "0"
        set BMPstvr "0"
        set BMPCPR "0"
        set BMPalpha "0"
        set BMPtau "0"
        $widget(Checkbutton442_1) configure -state disable
        $widget(Checkbutton442_2) configure -state disable
        $widget(Checkbutton442_3) configure -state disable
        $widget(Checkbutton442_4) configure -state disable
        $widget(Checkbutton442_5) configure -state disable
        $widget(Checkbutton442_6) configure -state disable
        $widget(Checkbutton442_7) configure -state disable
        $widget(Checkbutton442_8) configure -state disable
        $widget(Checkbutton442_11) configure -state disable
        $widget(Checkbutton442_12) configure -state disable
        $widget(Checkbutton442_13) configure -state disable
        $widget(Checkbutton442_14) configure -state disable
        $widget(Checkbutton442_15) configure -state disable
        WidgetShow $widget(Toplevel442); TextEditorRunTrace "Open Window Compact Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "S2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Compact Decomposition} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global CompactDirInput CompactDirOutput CompactOutputDir CompactOutputSubDir
global ColorMapCompact ColorNumber RedPalette GreenPalette BluePalette
global VarColorMap hybrid NwinCompactL NwinCompactC
global CompactG0dB CompactMv1 CompactMv2 CompactAs1 CompactAs2 CompactDP1 CompactDP2 

#DATA PROCESS SNGL
global Load_CompactClassification PSPTopLevel

if {$Load_CompactClassification == 0} {
    source "GUI/data_process_sngl/CompactClassification.tcl"
    set Load_CompactClassification 1
    WmTransient $widget(Toplevel443) $PSPTopLevel
    }

set CompactDirInput ""
set CompactDirOutput ""
set CompactOutputDir ""
set CompactOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

$widget(Button443_0) configure -state disable 
set VarColorMap "ok"
set ColorNumber "256"
set ColorMapCompact "$COLORMAPDir/Compact_ColorMap.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
if [file exists $ColorMapCompact ] {
    set f [open $ColorMapCompact r]
    gets $f tmp
    gets $f tmp
    gets $f tmp
    for {set i 0} {$i < $ColorNumber} {incr i} {
        gets $f couleur
        set RedPalette($i) [lindex $couleur 0]
        set GreenPalette($i) [lindex $couleur 1]
        set BluePalette($i) [lindex $couleur 2]
        }
    close $f
    }

set c1 .top443.tit84.f.fra72.fra73.fra77.but79
set couleur [format "#%02x%02x%02x" $RedPalette(1) $GreenPalette(1) $BluePalette(1)]    
$c1 configure -background $couleur
set c2 .top443.tit84.f.fra72.fra73.cpd80.but79
set couleur [format "#%02x%02x%02x" $RedPalette(2) $GreenPalette(2) $BluePalette(2)]    
$c2 configure -background $couleur
set c3 .top443.tit84.f.fra72.fra74.cpd81.but79
set couleur [format "#%02x%02x%02x" $RedPalette(3) $GreenPalette(3) $BluePalette(3)]    
$c3 configure -background $couleur
set c4 .top443.tit84.f.fra72.fra74.cpd82.but79
set couleur [format "#%02x%02x%02x" $RedPalette(4) $GreenPalette(4) $BluePalette(4)]    
$c4 configure -background $couleur
set c5 .top443.tit84.f.fra72.cpd84.cpd81.but79
set couleur [format "#%02x%02x%02x" $RedPalette(5) $GreenPalette(5) $BluePalette(5)]    
$c5 configure -background $couleur
set c6 .top443.tit84.f.fra72.cpd84.cpd82.but79
set couleur [format "#%02x%02x%02x" $RedPalette(6) $GreenPalette(6) $BluePalette(6)]    
$c6 configure -background $couleur

set CompactG0dB "-15"
set CompactMv1 "-15"; set CompactMv2 "-20"
set CompactAs1 "10"; set CompactAs2 "45"
set CompactDP1 "0.33"; set CompactDP2 "0.5"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "SPP" || $DataFormatActive == "C2" } {
    if { $DataFormatActive == "SPP" } {
        set CompactDirInput $DataDir
        set CompactDirOutput $DataDir
        set CompactOutputDir $DataDir
        set CompactOutputSubDir ""
        }
    if { $DataFormatActive == "C2" } {
        set CompactDirInput "$DataDir/C2"
        set CompactDirOutput $DataDir
        set CompactOutputDir $DataDir
        set CompactOutputSubDir "C2"
        }
    set BMPDirInput $CompactDirOutput
    set ConfigFile "$CompactDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            set NwinCompactL "?"; set NwinCompactC "?"
            set hybrid "LHC"
            WidgetShow $widget(Toplevel443); TextEditorRunTrace "Open Window Compact Classification" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }       

if { $DataFormatActive == "C3" || $DataFormatActive == "T3" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if { $DataFormatActive == "C4" || $DataFormatActive == "T4" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "S2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }    

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    }} \
        -label {Compact Classification} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 CONFIGDir
global OPCEFonction OPCEFunction NwinOPCEL NwinOPCEC
global OPCEDirInput OPCEDirOutput OPCEOutputDir OPCEOutputSubDir
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint
global AreaPointLig AreaPointCol OPCEFileTrainingArea Fonction

#DATA PROCESS SNGL
global Load_OPCE Load_OPCE_GraphicEditor PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_OPCE == 0} {
    source "GUI/data_process_sngl/OPCE.tcl"
    set Load_OPCE 1
    WmTransient $widget(Toplevel98) $PSPTopLevel
    }

if {$Load_OPCE_GraphicEditor == 0} {
    source "GUI/data_process_sngl/OPCE_GraphicEditor.tcl"
    set Load_OPCE_GraphicEditor 1
    WmTransient $widget(Toplevel96) $PSPTopLevel
    }

set OPCEDirInput ""
set OPCEDirOutput ""
set OPCEOutputDir ""
set OPCEOutputSubDir ""
set Fonction "OPCE PROCEDURE"
set ConfigFile ""

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 2} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 2} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           
           
    set OPCEDirOutput $DataDir
    set OPCEOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set OPCEDirInput $DataDir
        set OPCEOutputSubDir ""
        set BMPDirInput $OPCEDirOutput
        set OPCEFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set OPCEDirInput "$DataDir/C3"
        set OPCEOutputSubDir "C3"
        set BMPDirInput "$OPCEDirOutput/C3"
        set OPCEFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set OPCEDirInput "$DataDir/T3"
        set OPCEOutputSubDir "T3"
        set BMPDirInput "$OPCEDirOutput/T3"
        set OPCEFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set OPCEDirInput "$DataDir/C4"
        set OPCEOutputSubDir "C4"
        set BMPDirInput "$OPCEDirOutput/C4"
        set OPCEFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set OPCEDirInput "$DataDir/T4"
        set OPCEOutputSubDir "T4"
        set BMPDirInput "$OPCEDirOutput/T4"
        set OPCEFonction "T4"
        }
    set ConfigFile "$OPCEDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$OPCEDirInput/OPCE_areas.txt"] {
            set OPCEFileTrainingArea "$OPCEDirInput/OPCE_areas.txt"
            } else {
            set OPCEFileTrainingArea "$CONFIGDir/OPCE_areas.txt"
            } 
        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $OPCEFileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f
        set AreaClassN 1
        set AreaN 1
        set NwinOPCEL "?"; set NwinOPCEC "?"
        $widget(Button98_1) configure -state disable
        WidgetShow $widget(Toplevel98); TextEditorRunTrace "Open Window O.P.C.E" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label O.P.C.E 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global RCSDirInput RCSDirOutput RCSOutputDir RCSOutputSubDir
global RCSFonction RCSFunction RCSdb RCSphi RCStau RCSNwinL RCSNwinC RCSHSL

#DATA PROCESS SNGL
global Load_RCSmax PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_RCSmax == 0} {
    source "GUI/data_process_sngl/RCSmax.tcl"
    set Load_RCSmax 1
    WmTransient $widget(Toplevel99) $PSPTopLevel
    }

set RCSDirInput ""
set RCSDirOutput ""
set RCSOutputDir ""
set RCSOutputSubDir ""
set Fonction "R.C.S MAXIMISATION PROCEDURE"
set ConfigFile ""
set RCSdb "1"
set RCSphi "0"
set RCStau "0"
set RCSNwinL "0"; set RCSNwinC "0"
set RCSHSL "0"

    set RCSDirOutput $DataDir
    set RCSOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set RCSDirInput $DataDir
        set RCSOutputSubDir ""
        set BMPDirInput $RCSDirOutput
        set RCSFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set RCSDirInput "$DataDir/C3"
        set RCSOutputSubDir "C3"
        set BMPDirInput "$RCSDirOutput/C3"
        set RCSFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set RCSDirInput "$DataDir/T3"
        set RCSOutputSubDir "T3"
        set BMPDirInput "$RCSDirOutput/T3"
        set RCSFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set RCSDirInput "$DataDir/C4"
        set RCSOutputSubDir "C4"
        set BMPDirInput "$RCSDirOutput/C4"
        set RCSFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set RCSDirInput "$DataDir/T4"
        set RCSOutputSubDir "T4"
        set BMPDirInput "$RCSDirOutput/T4"
        set RCSFonction "T4"
        }
    set ConfigFile "$RCSDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel99); TextEditorRunTrace "Open Window R.C.S Maximization" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {R.C.S Max} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SurfaceDirInput SurfaceDirOutput SurfaceOutputDir SurfaceOutputSubDir
global SurfaceModel LIAFile LIAangle SurfaceFreq SurfaceCoeffCalib SurfaceCalibFlag
global SurfaceNwinL SurfaceNwinC SurfaceDieli SurfaceBeta
global SurfaceThreshold1 SurfaceThreshold2 SurfaceThreshold3 SurfaceThreshold4
global TMPStatisticsBin1 TMPStatHistoTxt1 TMPStatResultsTxt1
global TMPStatisticsBin2 TMPStatHistoTxt2 TMPStatResultsTxt2
global DisplayXBraggHAlpha

#DATA PROCESS
global Load_SurfaceInversion PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_SurfaceInversion == 0} {
    source "GUI/data_process_sngl/SurfaceInversion.tcl"
    set Load_SurfaceInversion 1
    WmTransient $widget(Toplevel253) $PSPTopLevel
    }

set SurfaceDirInput ""
set SurfaceDirOutput ""
set SurfaceOutputDir ""
set SurfaceOutputSubDir ""
set ConfigFile ""

set SurfaceModel "oh"
set LIAFile ""
set LIAangle 0
set SurfaceFreq ""
set SurfaceCoeffCalib ""
set SurfaceCalibFlag 0
set SurfaceNwinL ""; set SurfaceNwinC ""
set SurfaceDieli ""
set SurfaceBeta ""
set SurfaceThreshold1 "-11"
set SurfaceThreshold2 "0"
set SurfaceThreshold3 ""
set SurfaceThreshold4 ""

    set SurfaceDirOutput $DataDir
    set SurfaceOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set SurfaceDirInput $DataDir
        set SurfaceOutputSubDir ""
        }
    if {$DataFormatActive == "C3"} {
        set SurfaceDirInput "$DataDir/C3"
        set SurfaceOutputSubDir "C3"
        }
    if {$DataFormatActive == "T3"} {
        set SurfaceDirInput "$DataDir/T3"
        set SurfaceOutputSubDir "T3"
        }
    if {$DataFormatActive == "C4"} {
        set SurfaceDirInput "$DataDir/C4"
        set SurfaceOutputSubDir "C4"
        }
    if {$DataFormatActive == "T4"} {
        set SurfaceDirInput "$DataDir/T4"
        set SurfaceOutputSubDir "T4"
        }
    set ConfigFile "$SurfaceDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        DeleteFile $TMPStatisticsBin1
        DeleteFile $TMPStatHistoTxt1
        DeleteFile $TMPStatResultsTxt1
        DeleteFile $TMPStatisticsBin2
        DeleteFile $TMPStatHistoTxt2
        DeleteFile $TMPStatResultsTxt2

        $widget(TitleFrame253_1) configure -text ""
        $widget(Entry253_1) configure -state disable
        $widget(Entry253_1) configure -disabledbackground $PSPBackgroundColor
        $widget(TitleFrame253_2) configure -text ""
        $widget(Entry253_2) configure -state disable
        $widget(Entry253_2) configure -disabledbackground $PSPBackgroundColor
        $widget(Checkbutton253_1) configure -state disable
        $widget(TitleFrame253_3) configure -text ""
        $widget(TitleFrame253_4) configure -text ""
        $widget(TitleFrame253_5) configure -text ""
        $widget(Label253_1a) configure -state disable
        $widget(Label253_1b) configure -state disable
        $widget(Entry253_3a) configure -state disable
        $widget(Entry253_3a) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry253_3b) configure -state disable
        $widget(Entry253_3b) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry253_4) configure -state disable
        $widget(Entry253_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Button253_1) configure -state disable
        $widget(Button253_2) configure -state disable
        $widget(Entry253_5) configure -state disable
        $widget(Entry253_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Button253_3) configure -state disable
        $widget(Button253_4) configure -state disable

        $widget(Label253_2) configure -state normal
        $widget(Entry253_6) configure -state normal
        $widget(Entry253_6) configure -disabledbackground #FFFFFF
        $widget(Label253_5) configure -state normal
        $widget(Label253_3) configure -state normal
        $widget(Entry253_7) configure -state normal
        $widget(Entry253_7) configure -disabledbackground #FFFFFF
        $widget(Label253_6) configure -state normal
        $widget(Button253_5) configure -state normal
        $widget(Button253_6) configure -state disable
        $widget(Button253_8) configure -state disable
        $widget(Label253_4) configure -state disable
        $widget(Label253_7) configure -state disable
        $widget(Entry253_8) configure -state disable
        $widget(Entry253_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Label253_8) configure -state disable
        $widget(Entry253_9) configure -state disable
        $widget(Entry253_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Checkbutton253_2) configure -state disable
        set DisplayXBraggHAlpha 0
        $widget(Button253_7) configure -state disable
        $widget(Button253_9) configure -state disable
        WidgetShow $widget(Toplevel253); TextEditorRunTrace "Open Window Surface Parameter Data Inversion" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Surface Inversion} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SoilRoughnessDirInput SoilRoughnessDirOutput SoilRoughnessOutputDir SoilRoughnessOutputSubDir
global SoilRoughnessModel LIAFile LIAangle SoilRoughnessRho
global SoilRoughnessNwinL SoilRoughnessNwinC 
global SoilRoughnessGtoVS SoilRoughnessGtoVD SoilRoughnessGtoVC SoilRoughnessGtoVBMP
global SoilRoughnessByGtoV SoilRoughnessByA SoilRoughnessByCC SoilRoughnessByBMP
global SoilRoughnessFromX SoilRoughnessFromS SoilRoughnessFromD SoilRoughnessFromBMP

#DATA PROCESS
global Load_SoilRoughnessInversion PSPTopLevel

Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"
set configformat "titi"
if {$configformat == "toto"} {

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {


if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_SoilRoughnessInversion == 0} {
    source "GUI/data_process_sngl/SoilRoughnessInversion.tcl"
    set Load_SoilRoughnessInversion 1
    WmTransient $widget(Toplevel447) $PSPTopLevel
    }

    set SoilRoughnessDirInput ""
    set SoilRoughnessDirOutput ""
    set SoilRoughnessOutputDir ""
    set SoilRoughnessOutputSubDir ""
    set ConfigFile ""

    set SoilRoughnessModel "2"
    set LIAFile ""
    set LIAangle 0

    set SoilRoughnessNwinL "?"
    set SoilRoughnessNwinC "?"

    set SoilRoughnessGtoVS "0"
    set SoilRoughnessGtoVD "0"
    set SoilRoughnessGtoVC "0"
    set SoilRoughnessGtoVBMP "0"
    set SoilRoughnessByGtoV "0"
    set SoilRoughnessByA "0"
    set SoilRoughnessByCC "0"
    set SoilRoughnessByBMP "0"
    set SoilRoughnessFromX "0"
    set SoilRoughnessFromS "0"
    set SoilRoughnessFromD "0"
    set SoilRoughnessFromBMP "0"

    set SoilRoughnessDirOutput $DataDir
    set SoilRoughnessOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set SoilRoughnessDirInput $DataDir
        set SoilRoughnessOutputSubDir ""
        }
    if {$DataFormatActive == "C3"} {
        set SoilRoughnessDirInput "$DataDir/C3"
        set SoilRoughnessOutputSubDir "C3"
        }
    if {$DataFormatActive == "T3"} {
        set SoilRoughnessDirInput "$DataDir/T3"
        set SoilRoughnessOutputSubDir "T3"
        }
    if {$DataFormatActive == "C4"} {
        set SoilRoughnessDirInput "$DataDir/C4"
        set SoilRoughnessOutputSubDir "C4"
        }
    if {$DataFormatActive == "T4"} {
        set SoilRoughnessDirInput "$DataDir/T4"
        set SoilRoughnessOutputSubDir "T4"
        }
    set ConfigFile "$SoilRoughnessDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label447_1) configure -state disable
        $widget(Entry447_1) configure -state disable
        $widget(Entry447_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Checkbutton447_1) configure -state disable
        $widget(Checkbutton447_2) configure -state disable
        $widget(Checkbutton447_3) configure -state disable
        WidgetShow $widget(Toplevel447); TextEditorRunTrace "Open Window Soil Roughness Parameter Data Inversion" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}
}} \
        -label {Roughness - Soil Inversion} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaRVOG 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {RVOG PolSAR Inversion} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men76" -command {} \
        -label {Sub-Aperture Analysis} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men76 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men76 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SubAptDirInput SubAptDirOutput SubAptOutputDir SubAptOutputSubDir
global SubAptOutputDirSub SubAptOutputDirSubNum
global BMPDirInput GnuplotPipeFid GnuplotPipeSave GnuplotPipeSpectrum
global SubAptFilter SubAptFilterCase SubAptDataDir SubAptCheck
global SubAptConvert SubAptNlook SubAptNwinFilter
global SubAptAzimutFlag SubAptProcessFonction SubAptDeleteS2
global SubAptPctRes SubAptNSubIm SubAptWeight SubAptLimit1 SubAptLimit2

#DATA PROCESS SNGL
global Load_SubApertureDecomposition PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    set SubAptDirInput $DataDir
    set SubAptDirOutput $DataDir
    set SubAptOutputDir $DataDir
    set SubAptOutputDirSub "_sub_"
    set SubAptOutputDirSubNum "0"
    set SubAptOutputSubDir ""
    set BMPDirInput $SubAptDirInput
    set ConfigFile "$SubAptDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$Load_SubApertureDecomposition == 0} {
            source "GUI/data_process_sngl/SubApertureDecomposition.tcl"
            set Load_SubApertureDecomposition 1
            WmTransient $widget(Toplevel243) $PSPTopLevel
            }
        $widget(Button243_1) configure -state disable
        $widget(Button243_2) configure -state disable
        $widget(Button243_3) configure -state disable
        $widget(Button243_6) configure -state disable
        $widget(TitleFrame243_0) configure -state disable
        $widget(Entry243_0) configure -state disable
        $widget(Button243_4) configure -state disable
        $widget(Button243_5) configure -state disable
        $widget(Radiobutton243_1) configure -state disable
        $widget(Radiobutton243_2) configure -state disable
        .top243.tit78 configure -text ""
        $widget(Radiobutton243_3) configure -state disable
        $widget(Radiobutton243_4) configure -state disable
        $widget(Radiobutton243_5) configure -state disable
        $widget(Radiobutton243_6) configure -state disable
        $widget(Label243_3) configure -state disable
        $widget(Entry243_3) configure -state disable
        $widget(Label243_4) configure -state disable
        $widget(Entry243_4) configure -state disable
        $widget(Checkbutton243_4) configure -state disable
        set SubAptFilter "0"
        set SubAptFilterCase ""
        set SubAptNlook ""
        set SubAptNwinFilter ""
        set SubAptOutputSubDir ""
        set SubAptDeleteS2 "0"
        set SubAptAzimutFlag "1"
        set SubAptWeight "1"
        set SubAptPctRes "20"
        set SubAptNSubIm "4"
        set SubAptCheck 0
        $widget(Label243_1) configure -state disable
        $widget(Entry243_1) configure -state disable
        $widget(Label243_2) configure -state disable
        $widget(Entry243_2) configure -state disable
        set SubAptLimit1 ""; set SubAptLimit2 ""
        set GnuplotPipeSave ""; set GnuplotPipeSpectrum ""
        if {$GnuplotPipeFid != ""} {
            set ErrorMessage "GNUPLOT ERROR - CHECK SPECTRUM NOT AVAILABLE" 
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set conf "false"
            }
        WidgetShow $widget(Toplevel243); TextEditorRunTrace "Open Window Sub Aperture Decomposition" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label Decomposition 
    $site_7_0.men76 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SubAptDirInput SubAptInputDir
global SubAptDirOutput SubAptOutputDir SubAptSubDir
global SubAptOutputDirSub SubAptSubNum
global BMPDirInput
global SubAptInit SubAptFin SubAptNSubIm SubAptSubIm
global SubAptBMP SubAptPauli SubAptSinclair SubAptSpan
global SubAptHAAlp SubAptHAAlpNwinL SubAptHAAlpNwinC
global SubAptCVH SubAptCVA SubAptCVAlp SubAptCVSpan SubAptCVNwinL SubAptCVNwinC
global SubAptNSM SubAptNSNwinL SubAptNSNwinC SubAptNSNlook

#DATA PROCESS SNGL
global Load_SubApertureApplications PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

set SubAptDirInput ""
set SubAptInputDir ""
set SubAptDirOutput ""
set SubAptOutputDir ""
set SubAptOutputDirSub ""
set SubAptSubDir ""
set SubAptInit ""
set SubAptFin ""
set SubAptSubIm ""

    if {$DataFormatActive == "S2"} {
        set SubAptDirInput "$DataDir"
        }
    if {$DataFormatActive == "C3"} {
        set SubAptDirInput "$DataDir/C3"
        }
    if {$DataFormatActive == "T3"} {
        set SubAptDirInput "$DataDir/T3"
        }
    set ConfigFile "$SubAptDirInput/config.txt"
    set ErrorMessage ""
    LoadConfigSubApt
    if {"$ErrorMessage" == ""} {
        if {$Load_SubApertureApplications == 0} {
            source "GUI/data_process_sngl/SubApertureApplications.tcl"
            set Load_SubApertureApplications 1
            WmTransient $widget(Toplevel248) $PSPTopLevel
            }
        set SubAptDirInput $DataDir
        set SubAptDirOutput $DataDir
        set SubAptOutputDirSub "_sub_"
        set stringindex [string first $SubAptOutputDirSub $DataDir]     
        set SubAptOutputDir [string range $DataDir 0 [expr $stringindex - 1] ]
        set stringindex [expr $stringindex + 5]
        set SubAptInputDir [string range $DataDir 0 [expr $stringindex - 1] ]

        if {$DataFormatActive == "S2"} { set SubAptSubDir "" }
        if {$DataFormatActive == "C3"} { set SubAptSubDir "C3" }
        if {$DataFormatActive == "T3"} { set SubAptSubDir "T3" }

        set BMPDirInput $SubAptDirInput
        set SubAptInit $SubAptSubNum
        set SubAptFin [expr $SubAptNSubIm - 1]
        set SubAptSubIm [expr $SubAptFin - $SubAptInit + 1]

        set SubAptBMP 0; set SubAptPauli 0; set SubAptSinclair 0; set SubAptSpan 0
        set SubAptHAAlp 0; set SubAptHAAlpNwinL ""; set SubAptHAAlpNwinC ""
        set SubAptCVH 0; set SubAptCVA 0; set SubAptCVAlp 0; set SubAptCVSpan 0; set SubAptCVNwinL ""; set SubAptCVNwinC ""
        set SubAptNSM 0; set SubAptNSNwinL ""; set SubAptNSNwinC ""; set SubAptNSNlook ""
        $widget(Checkbutton248_2) configure -state disable; $widget(Checkbutton248_3) configure -state disable
        $widget(Checkbutton248_4) configure -state disable; 
        $widget(Label248_7a) configure -state disable; $widget(Label248_7b) configure -state disable
        $widget(Label248_8a) configure -state disable; $widget(Label248_8b) configure -state disable
        $widget(Label248_9a) configure -state disable; $widget(Label248_9b) configure -state disable
        $widget(Label248_10) configure -state disable
        $widget(Entry248_1a) configure -state disable; $widget(Entry248_1b) configure -state disable
        $widget(Entry248_2a) configure -state disable; $widget(Entry248_2b) configure -state disable
        $widget(Entry248_3a) configure -state disable; $widget(Entry248_3b) configure -state disable
        $widget(Entry248_4) configure -state disable
        WidgetShow $widget(Toplevel248); TextEditorRunTrace "Open Window Sub Aperture Applications" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label Applications 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global DEMDirInput DEMDirOutput DEMOutputDir DEMOutputSubDir
global DEMFonction DEMFunction
global DEMflight DEMincang DEMnearrg DEMfarrg
global DEMresolaz DEMresolrg DEMGS DEMFMG
global DEMrefrow DEMrefcol DEMrefheight

#DATA PROCESS SNGL
global Load_DEMestimation PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_DEMestimation == 0} {
    source "GUI/data_process_sngl/DEMestimation.tcl"
    set Load_DEMestimation 1
    WmTransient $widget(Toplevel356) $PSPTopLevel
    }

set DEMDirInput ""
set DEMDirOutput ""
set DEMOutputDir ""
set DEMOutputSubDir ""
set ConfigFile ""
set DEMflight "?"; set DEMincang "?"; set DEMnearrg "?"; set DEMfarrg "?"
set DEMresolaz "?"; set DEMresolrg "?"; set DEMGS "9"; set DEMFMG "3"
set DEMrefrow "9"; set DEMrefcol "9"; set DEMrefheight "1."

    set DEMDirOutput $DataDir
    set DEMOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set DEMDirInput $DataDir
        set DEMOutputSubDir ""
        set BMPDirInput $DEMDirOutput
        set DEMFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set DEMDirInput "$DataDir/C3"
        set DEMOutputSubDir "C3"
        set BMPDirInput "$DEMDirOutput/C3"
        set DEMFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set DEMDirInput "$DataDir/T3"
        set DEMOutputSubDir "T3"
        set BMPDirInput "$DEMDirOutput/T3"
        set DEMFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set DEMDirInput "$DataDir/C4"
        set DEMOutputSubDir "C4"
        set BMPDirInput "$DEMDirOutput/C4"
        set DEMFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set DEMDirInput "$DataDir/T4"
        set DEMOutputSubDir "T4"
        set BMPDirInput "$DEMDirOutput/T4"
        set DEMFonction "T4"
        }
    set ConfigFile "$DEMDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel356); TextEditorRunTrace "Open Window DEM Extraction" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {DEM Estimation} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "1"; set ParaNwinC "1"
    set ParaBMP 0; 

    set ParametersDirOutput $DataDir; append ParametersDirOutput "_POC"
    set ParametersOutputDir $ParametersDirOutput
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "S2"
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaPOC 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Polarisation Orientation Compensation} 
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men66" -command {} \
        -label {Polarimetric Functionalities - 2} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 

    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaFaraday 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Faraday Rotation Estimation} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 

    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaConformity 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Conformity Coefficient} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaScattPred 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Scattering Predominance} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaScattDiv 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Scattering Diversity} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaDegPur 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Degree of Purity} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaDepInd 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Depolarisation Index} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG ParaName

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0; set ParaName ""
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaAlpha 1; set ParaName "prakscolin"; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Alpha Approximation (Praks & Colin)} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG ParaName

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;; set ParaName ""
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaAlpha 1; set ParaName "ancuiyang"; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Alpha Approximation (An, Cui & Yang)} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG ParaName

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0; set ParaName ""
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaEntropy 1; set ParaName "prakscolin"; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Entropy Approximation (Praks & Colin)} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG ParaName

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0; set ParaName ""
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaEntropy 1; set ParaName "ancuiyang"; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Entropy Approximation (An, Cui & Yang)} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaFreemanEntropy 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Scattering Mechanism Entropy (Freeman)} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaVanZylEntropy 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Scattering Mechanism Entropy (Van Zyl)} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaKozlovAni 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Kozlov Anisotropy} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaLueneburgAni 1; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Lueneburg Anisotropy} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_Parameters
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_Parameters == 0} {
        source "GUI/data_process_sngl/Parameters.tcl"
        set Load_Parameters 1
        WmTransient $widget(Toplevel351) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; 
       
    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "C3"} {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "C4"} {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if {$DataFormatActive == "T4"} {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaPPS 1; set ParaPPSp1 "?"; set ParaPPSalpha1 "?"; WidgetOn351
        WidgetShow $widget(Toplevel351); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Polarized Point Scatterer Detection} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParametersFonctionPP
global ParaHHovHV ParaHVovHH ParaHHovVV ParaVVovHH ParaHVovVV ParaVVovHV
global ParaHHovVH ParaVHovHH ParaHVovVH ParaVHovHV ParaVHovVV ParaVVovVH
global ParaNwinL ParaNwinC ParaBMP  

#DATA PROCESS SNGL
global Load_ParametersPR
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_ParametersPR == 0} {
        source "GUI/data_process_sngl/ParametersPR.tcl"
        set Load_ParametersPR 1
        WmTransient $widget(Toplevel351a) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }       
    if {$DataFormatActive == "C2"} {
        set ParametersDirInput "$DataDir/C2"
        set ParametersOutputSubDir "C2"
        set BMPDirInput "$ParametersDirOutput/C2"
        set ParametersFonction "C2"
        }    
    if { $DataFormatActive == "C3" } {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "SPP"
        set ParametersFonctionPP $PolarType
        }    
    if {$DataFormatActive == "IPP"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "IPP"
        set ParametersFonctionPP $PolarType
        }    
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set ParaHHovHV 0; set ParaHVovHH 0; set ParaHHovVV 0; set ParaVVovHH 0; set ParaHVovVV 0; set ParaVVovHV 0
        set ParaHHovVH 0; set ParaVHovHH 0; set ParaHVovVH 0; set ParaVHovHV 0; set ParaVHovVV 0; set ParaVVovVH 0
        set ParaNwinL "?"; set ParaNwinC "?"
        set ParaBMP 0; WidgetOn351a
        WidgetShow $widget(Toplevel351a); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Reflectivity Ratio} 
    $site_6_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParametersFonctionPP 
global ParaZDRHHHV ParaZDRHVHH ParaZDRHHVV ParaZDRVVHH ParaZDRHVVV ParaZDRVVHV
global ParaZDRHHVH ParaZDRVHHH ParaZDRHVVH ParaZDRVHHV ParaZDRVHVV ParaZDRVVVH
global ParaNwinL ParaNwinC ParaBMP 

#DATA PROCESS SNGL
global Load_ParametersZDR
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_ParametersZDR == 0} {
        source "GUI/data_process_sngl/ParametersZDR.tcl"
        set Load_ParametersZDR 1
        WmTransient $widget(Toplevel351b) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParametersDirOutput $DataDir
    set ParametersOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }       
    if {$DataFormatActive == "C2"} {
        set ParametersDirInput "$DataDir/C2"
        set ParametersOutputSubDir "C2"
        set BMPDirInput "$ParametersDirOutput/C2"
        set ParametersFonction "C2"
        }    
    if { $DataFormatActive == "C3" } {
        set ParametersDirInput "$DataDir/C3"
        set ParametersOutputSubDir "C3"
        set BMPDirInput "$ParametersDirOutput/C3"
        set ParametersFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set ParametersDirInput "$DataDir/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set ParametersDirInput "$DataDir/C4"
        set ParametersOutputSubDir "C4"
        set BMPDirInput "$ParametersDirOutput/C4"
        set ParametersFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set ParametersDirInput "$DataDir/T4"
        set ParametersOutputSubDir "T4"
        set BMPDirInput "$ParametersDirOutput/T4"
        set ParametersFonction "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "SPP"
        set ParametersFonctionPP $PolarType
        }    
    if {$DataFormatActive == "IPP"} {
        set ParametersDirInput $DataDir
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "IPP"
        set ParametersFonctionPP $PolarType
        }    
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set ParaZDRHHHV 0; set ParaZDRHVHH 0; set ParaZDRHHVV 0; set ParaZDRVVHH 0; set ParaZDRHVVV 0; set ParaZDRVVHV 0
        set ParaZDRHHVH 0; set ParaZDRVHHH 0; set ParaZDRHVVH 0; set ParaZDRVHHV 0; set ParaZDRVHVV 0; set ParaZDRVVVH 0
        set ParaNwinL "?"; set ParaNwinC "?"
        set ParaBMP 0; WidgetOn351b
        WidgetShow $widget(Toplevel351b); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Differential Reflectivity (ZDR)} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men72" -command {} \
        -label {Polarimetric Segmentation} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ColorMapPlanes9 ColorMapPlanes27
global HAAlphaClassifFonction
global entropy anisotropy alpha lambda
global NwinHAAlpL NwinHAAlpC Halpha_plane HA_plane Aalpha_plane HalphaLambda_plane
global CombHA CombH1mA Comb1mHA Comb1mH1mA
global RGBHAAlpha RGBCombHA RGBTuoTuo

#DATA PROCESS SNGL
global Load_HAAlphaClassification
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {
    if {$Load_HAAlphaClassification == 0} {
        source "GUI/data_process_sngl/HAAlphaClassification.tcl"
        set Load_HAAlphaClassification 1
        WmTransient $widget(Toplevel74) $PSPTopLevel
        }

    set HAAlpDirInput ""
    set HAAlpDirOutput ""
    set HAAlpOutputDir ""
    set HAAlpOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set ColorMapPlanes9 "$COLORMAPDir/Planes_H_A_Alpha_ColorMap9.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }
    set ColorMapPlanes27 "$COLORMAPDir/Planes_H_Alpha_Lambda_ColorMap27.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }

    set HAAlpOutputDir $DataDir
    set HAAlpDirOutput $DataDir
    if {$DataFormatActive == "S2"} {
        set HAAlpDirInput $DataDir
        set HAAlpOutputSubDir ""
        if { "$PolarCase" == "monostatic"} {set HAAlphaClassifFonction "S2m"}
        if { "$PolarCase" == "bistatic"} {set HAAlphaClassifFonction "S2b"}
        set BMPDirInput $HAAlpDirOutput
        }       
    if {$DataFormatActive == "C2"} {
        set HAAlpDirInput "$DataDir/C2"
        set HAAlpOutputSubDir "C2"
        set HAAlphaClassifFonction "C2"
        set BMPDirInput "$HAAlpDirOutput/C2"
        }    
    if { $DataFormatActive == "C3" } {
        set HAAlpDirInput "$DataDir/C3"
        set HAAlpOutputSubDir "C3"
        set HAAlphaClassifFonction "C3"
        set BMPDirInput "$HAAlpDirOutput/C3"
        }
    if { $DataFormatActive == "T3" } {
        set HAAlpDirInput "$DataDir/T3"
        set HAAlpOutputSubDir "T3"
        set HAAlphaClassifFonction "T3"
        set BMPDirInput "$HAAlpDirOutput/T3"
        }
    if { $DataFormatActive == "C4" } {
        set HAAlpDirInput "$DataDir/C4"
        set HAAlpOutputSubDir "C4"
        set HAAlphaClassifFonction "C4"
        set BMPDirInput "$HAAlpDirOutput/C4"
        }
    if { $DataFormatActive == "T4" } {
        set HAAlpDirInput "$DataDir/T4"
        set HAAlpOutputSubDir "T4"
        set HAAlphaClassifFonction "T4"
        set BMPDirInput "$HAAlpDirOutput/T4"
        }
    if {$DataFormatActive == "SPP"} {
        set HAAlpDirInput $DataDir
        set HAAlpOutputSubDir ""
        set HAAlphaClassifFonction "SPP"
        set BMPDirInput $HAAlpDirOutput
        }    
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinHAAlpL "?"; set NwinHAAlpC "?"; set Halpha_plane "0"; set HA_plane "0"; set Aalpha_plane "0"; set HalphaLambda_plane "0"
        set entropy "0"; set anisotropy "0"; set alpha "0"; set lambda "0"
        set CombHA "0"; set CombH1mA "0"; set Comb1mHA "0"; set Comb1mH1mA "0"
        set RGBHAAlpha "0"; set RGBCombHA "0"; set RGBTuoTuo "0"
        $widget(Button74_1) configure -state disable
        $widget(Button74_2) configure -state disable
        WidgetShow $widget(Toplevel74); TextEditorRunTrace "Open Window H A Alpha Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {H / A / Alpha Classification} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global WishartDirInput WishartDirOutput WishartOutputDir WishartOutputSubDir
global ColorMapWishart8 ColorMapWishart16 RedPalette GreenPalette BluePalette
global BMPWishart WishartNwinL WishartNwinC WishartPourcentage WishartIteration
global ColorMapWishartCoded ColorMapWishartCodedPauli ColorMapWishartCodedSinclair
global WishartHAAlphaClassifFonction WishartHAAlpha
global WishartEntropy WishartAnisotropy WishartAlpha
global WishartEntropyFile WishartAnisotropyFile WishartAlphaFile

#DATA PROCESS SNGL
global Load_WishartHAAlphaClassification Load_WishartHAAlphaClassification_PP
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {
 
    set WishartDirInput ""
    set WishartDirOutput ""
    set WishartOutputDir ""
    set WishartOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""
    
    set BMPWishart 1
    set WishartNwinL 3; set WishartNwinC 3
    set WishartPourcentage 10
    set WishartIteration 10
    
    set ColorMapWishart8 "$COLORMAPDir/Wishart_ColorMap8.pal"
    set ColorMapWishart16 "$COLORMAPDir/Wishart_ColorMap16.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }
  
    set ColorMapWishartCoded "0"
    set ColorMapWishartCodedPauli "0"
    set ColorMapWishartCodedSinclair "0"

    set WishartDirOutput $DataDir
    set WishartOutputDir $DataDir

    if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {

        if {$Load_WishartHAAlphaClassification == 0} {
            source "GUI/data_process_sngl/WishartHAAlphaClassification.tcl"
            set Load_WishartHAAlphaClassification 1
            WmTransient $widget(Toplevel26) $PSPTopLevel
            }
        $widget(Checkbutton26_1) configure -state disable
        $widget(Checkbutton26_2) configure -state disable
        $widget(Label26_1) configure -state disable
        $widget(Label26_2) configure -state disable
        $widget(Label26_3) configure -state disable
        $widget(Label26_4) configure -state disable
        $widget(Label26_5) configure -state disable
        $widget(Label26_6) configure -state disable

        if {$DataFormatActive == "S2"} {
            set WishartDirInput $DataDir
            set WishartOutputSubDir ""
            set BMPDirInput $WishartDirOutput
            if { "$PolarCase" == "monostatic"} {set WishartHAAlphaClassifFonction "S2m"}
            if { "$PolarCase" == "bistatic"} {set WishartHAAlphaClassifFonction "S2b"}
            }       
        if { $DataFormatActive == "C3" } {
            set WishartDirInput "$DataDir/C3"
            set WishartOutputSubDir "C3"
            set BMPDirInput "$WishartDirOutput/C3"
            set WishartHAAlphaClassifFonction "C3"
            }
        if { $DataFormatActive == "T3" } {
            set WishartDirInput "$DataDir/T3"
            set WishartOutputSubDir "T3"
            set BMPDirInput "$WishartDirOutput/T3"
            set WishartHAAlphaClassifFonction "T3"
            }
        if { $DataFormatActive == "C4" } {
            set WishartDirInput "$DataDir/C4"
            set WishartOutputSubDir "C4"
            set BMPDirInput "$WishartDirOutput/C4"
            set WishartHAAlphaClassifFonction "C4"
            }
        if { $DataFormatActive == "T4" } {
            set WishartDirInput "$DataDir/T4"
            set WishartOutputSubDir "T4"
            set BMPDirInput "$WishartDirOutput/T4"
            set WishartHAAlphaClassifFonction "T4"
            }
        set ConfigFile "$WishartDirInput/config.txt"
        set ErrorMessage ""
        LoadConfig
        if {"$ErrorMessage" == ""} {
            set WishartEntropy ""; set WishartAnisotropy ""; set WishartAlpha ""
            set WishartEntropyFile ""; set WishartAnisotropyFile ""; set WishartAlphaFile ""
            WishartUpdate
            WidgetShow $widget(Toplevel26); TextEditorRunTrace "Open Window Wishart - H A Alpha Classification" "b"
            } else {
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        }

    if {$DataFormatActive == "SPP" || $DataFormatActive == "C2"} {

        if {$Load_WishartHAAlphaClassification_PP == 0} {
            source "GUI/data_process_sngl/WishartHAAlphaClassification_PP.tcl"
            set Load_WishartHAAlphaClassification_PP 1
            WmTransient $widget(Toplevel432) $PSPTopLevel
            }
        $widget(Checkbutton432_1) configure -state disable
        $widget(Checkbutton432_2) configure -state disable
        $widget(Label432_1) configure -state disable
        $widget(Label432_2) configure -state disable
        $widget(Label432_3) configure -state disable
        $widget(Label432_4) configure -state disable
        $widget(Label432_5) configure -state disable
        $widget(Label432_6) configure -state disable
        if {$DataFormatActive == "SPP"} {
            set WishartDirInput $DataDir
            set WishartOutputSubDir ""
            set BMPDirInput $WishartDirOutput
            set WishartHAAlphaClassifFonction "SPP"
            }       
        if { $DataFormatActive == "C2" } {
            set WishartDirInput "$DataDir/C2"
            set WishartOutputSubDir "C2"
            set BMPDirInput "$WishartDirOutput/C2"
            set WishartHAAlphaClassifFonction "C2"
            }

        set ConfigFile "$WishartDirInput/config.txt"
        set ErrorMessage ""
        LoadConfig
        if {"$ErrorMessage" == ""} {
            set WishartEntropy ""; set WishartAnisotropy ""; set WishartAlpha ""
            set WishartEntropyFile ""; set WishartAnisotropyFile ""; set WishartAlphaFile ""
            WishartUpdatePP
            WidgetShow $widget(Toplevel432); TextEditorRunTrace "Open Window Wishart - H A Alpha Classification" "b"
            } else {
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        }
# Config Format
}
}} \
        -label {H / A / Alpha - Wishart Classification} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir PSPBackgroundColor
global WishartScattModelBasedDirInput WishartScattModelBasedDirOutput WishartScattModelBasedOutputDir WishartScattModelBasedOutputSubDir
global BMPWishartScattModelBased WishartScattModelBasedNwinL WishartScattModelBasedNwinC WishartScattModelBasedPourcentage WishartScattModelBasedIteration
global WishartScattModelBasedSBFile WishartScattModelBasedDBFile WishartScattModelBasedRVFile
global WishartScattModelBasedColorMapSB WishartScattModelBasedColorMapSBFile
global WishartScattModelBasedColorMapDB WishartScattModelBasedColorMapDBFile
global WishartScattModelBasedColorMapRV WishartScattModelBasedColorMapRVFile
global WishartScattModelBasedClassifFonction 
global WishartScattModelBasedClusterInit WishartScattModelBasedSBClusterFin WishartScattModelBasedDBClusterFin WishartScattModelBasedRVClusterFin
global WishartScattModelBasedMixedFlag WishartScattModelBasedMixedThreshold


#DATA PROCESS SNGL
global Load_WishartScattModelBasedClassification
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {


if {$configformat == "true"} {
 
    set WishartScattModelBasedDirInput ""
    set WishartScattModelBasedDirOutput ""
    set WishartScattModelBasedOutputDir ""
    set WishartScattModelBasedOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""
    
    set BMPWishartScattModelBased 1
    set WishartScattModelBasedNwinL 3; set WishartScattModelBasedNwinC 3
    set WishartScattModelBasedPourcentage 10
    set WishartScattModelBasedIteration 10
    
    set WishartScattModelBasedDirOutput $DataDir
    set WishartScattModelBasedOutputDir $DataDir

    if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3"} {

        if {$Load_WishartScattModelBasedClassification == 0} {
            source "GUI/data_process_sngl/WishartScattModelBasedClassification.tcl"
            set Load_WishartScattModelBasedClassification 1
            WmTransient $widget(Toplevel434) $PSPTopLevel
            }

        if {$DataFormatActive == "S2"} {
            set WishartScattModelBasedDirInput $DataDir
            set WishartScattModelBasedOutputSubDir ""
            set BMPDirInput $WishartScattModelBasedDirOutput
            set WishartScattModelBasedClassifFonction "S2"
            }       
        if { $DataFormatActive == "C3" } {
            set WishartScattModelBasedDirInput "$DataDir/C3"
            set WishartScattModelBasedOutputSubDir "C3"
            set BMPDirInput "$WishartScattModelBasedDirOutput/C3"
            set WishartScattModelBasedClassifFonction "C3"
            }
        if { $DataFormatActive == "T3" } {
            set WishartScattModelBasedDirInput "$DataDir/T3"
            set WishartScattModelBasedOutputSubDir "T3"
            set BMPDirInput "$WishartScattModelBasedDirOutput/T3"
            set WishartScattModelBasedClassifFonction "T3"
            }
        set ConfigFile "$WishartScattModelBasedDirInput/config.txt"
        set ErrorMessage ""
        LoadConfig
        if {"$ErrorMessage" == ""} {
            set WishartScattModelBasedSBFile ""; set WishartScattModelBasedDBFile ""; set WishartScattModelBasedRVFile ""
            set WishartScattModelBasedColorMapSB ""; set WishartScattModelBasedColorMapDB ""; set WishartScattModelBasedColorMapRV ""
            set WishartScattModelBasedColorMapSBFile ""; set WishartScattModelBasedColorMapDBFile ""; set WishartScattModelBasedColorMapRVFile ""
            set WishartScattModelBasedClusterInit "30"
            set WishartScattModelBasedSBClusterFin "5"; set WishartScattModelBasedDBClusterFin "5"; set WishartScattModelBasedRVClusterFin "5"
            set WishartScattModelBasedMixedFlag "1"; set WishartScattModelBasedMixedThreshold "0.5"
            WishartScattModelBasedUpdate
            $widget(Label434_1) configure -state normal; $widget(Entry434_1) configure -state disable
            $widget(Entry434_1) configure -disabledbackground #FFFFFF
            $widget(Button434_1) configure -state normal; $widget(Button434_2) configure -state normal
            WidgetShow $widget(Toplevel434); TextEditorRunTrace "Open Window Wishart - Scattering Model Based Classification" "b"
            } else {
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }

        } else {
        set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
        set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
        set VarWarning ""
        Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
        tkwait variable VarWarning
        set VarWarning ""
        }
# Config Format
}
}} \
        -label {Scattering Model Based - Wishart Classification} 
    $site_6_0.men72 add separator \
        
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global FCMDirInput FCMDirOutput FCMOutputDir FCMOutputSubDir
global ColorMapFCM8 RedPalette GreenPalette BluePalette
global BMPFCM FCMCrisp FCMWei FCMNwinL FCMNwinC FCMPourcentage FCMIteration
global FCMHAlphaClassifFonction

#DATA PROCESS SNGL
global Load_FCMHAlphaClassification 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_FCMHAlphaClassification == 0} {
        source "GUI/data_process_sngl/FCMHAlphaClassification.tcl"
        set Load_FCMHAlphaClassification 1
        WmTransient $widget(Toplevel368) $PSPTopLevel
        }

    set FCMDirInput ""
    set FCMDirOutput ""
    set FCMOutputDir ""
    set FCMOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set BMPFCM 1
    set FCMCrisp 0.2
    set FCMWei 1.05
    set FCMNwinL 3
    set FCMNwinC 3
    set FCMPourcentage 10
    set FCMIteration 10

    set ColorMapFCM8 "$COLORMAPDir/FCM_ColorMap8.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }
  
    $widget(Button368_1) configure -state disable

    set FCMDirOutput $DataDir
    set FCMOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set FCMDirInput $DataDir
        set FCMOutputSubDir ""
        set BMPDirInput $FCMDirOutput
        if { "$PolarCase" == "monostatic"} {set FCMHAlphaClassifFonction "S2m"}
        if { "$PolarCase" == "bistatic"} {set FCMHAlphaClassifFonction "S2b"}
        }       
    if { $DataFormatActive == "C3" } {
        set FCMDirInput "$DataDir/C3"
        set FCMOutputSubDir "C3"
        set BMPDirInput "$FCMDirOutput/C3"
        set FCMHAlphaClassifFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set FCMDirInput "$DataDir/T3"
        set FCMOutputSubDir "T3"
        set BMPDirInput "$FCMDirOutput/T3"
        set FCMHAlphaClassifFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set FCMDirInput "$DataDir/C4"
        set FCMOutputSubDir "C4"
        set BMPDirInput "$FCMDirOutput/C4"
        set FCMHAlphaClassifFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set FCMDirInput "$DataDir/T4"
        set FCMOutputSubDir "T4"
        set BMPDirInput "$FCMDirOutput/T4"
        set FCMHAlphaClassifFonction "T4"
        }
    set ConfigFile "$FCMDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel368); TextEditorRunTrace "Open Window FCM - H Alpha Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Fuzzy - H / Alpha Classification} 
    $site_6_0.men72 add separator \
        
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 CONFIGDir
global SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix VarTrainingArea
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCodedPauli ColorMapSupervisedCodedSinclair
global ColorMapSupervisedCoded1 ColorMapSupervisedCoded2

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_WishartSupervisedClassification Load_WishartSupervisedClassification_PP 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_TrainingAreas_GraphicEditor == 0} {
        source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
        set Load_TrainingAreas_GraphicEditor 1
        WmTransient $widget(Toplevel47) $PSPTopLevel
        }

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    if {$Load_WishartSupervisedClassification == 0} {
        source "GUI/data_process_sngl/WishartSupervisedClassification.tcl"
        set Load_WishartSupervisedClassification 1
        WmTransient $widget(Toplevel53) $PSPTopLevel
        }
    set Fonction "FULL-POLSAR SUPERVISED CLASSIFIER"
    set ColorMapSupervisedCoded "0"
    set ColorMapSupervisedCodedPauli "0"
    set ColorMapSupervisedCodedSinclair "0"
    $widget(Checkbutton53_1) configure -state disable
    $widget(Checkbutton53_2) configure -state disable
    $widget(Label53_1) configure -state disable
    $widget(Label53_2) configure -state disable
    $widget(Label53_3) configure -state disable
    $widget(Label53_4) configure -state disable
    $widget(Label53_5) configure -state disable
    $widget(Label53_6) configure -state disable
    $widget(Label53_7) configure -state disable
    $widget(Entry53_1) configure -state disable
    $widget(Button53_1) configure -state disable
    $widget(Button53_2) configure -state disable
    $widget(Button53_3) configure -state disable
    $widget(Button53_4) configure -state disable
    }

if {$DataFormatActive == "SPP" || $DataFormatActive == "C2" || $DataFormatActive == "IPP"} {
    if {$Load_WishartSupervisedClassification_PP == 0} {
        source "GUI/data_process_sngl/WishartSupervisedClassification_PP.tcl"
        set Load_WishartSupervisedClassification_PP 1
        WmTransient $widget(Toplevel212) $PSPTopLevel
        }
    set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
    set ColorMapSupervisedCoded "0"
    set ColorMapSupervisedCoded1 "0"
    set ColorMapSupervisedCoded2 "0"
    $widget(Checkbutton212_1) configure -state disable
    $widget(Checkbutton212_2) configure -state disable
    $widget(Label212_1) configure -state disable
    $widget(Label212_2) configure -state disable
    $widget(Label212_3) configure -state disable
    $widget(Label212_4) configure -state disable
    $widget(Label212_5) configure -state disable
    $widget(Label212_6) configure -state disable
    $widget(Label212_7) configure -state disable
    $widget(Entry212_1) configure -state disable
    $widget(Button212_1) configure -state disable
    $widget(Button212_2) configure -state disable
    $widget(Button212_3) configure -state disable
    $widget(Button212_4) configure -state disable
    }

    set SupervisedDirInput ""
    set SupervisedDirOutput ""
    set SupervisedOutputDir ""
    set SupervisedOutputSubDir ""

    set SupervisedTrainingProcess 0
    set ConfigFile ""

    set FileTrainingSet ""

    set BMPSupervised 1
    set RejectClass 0
    set RejectRatio ""
    set ConfusionMatrix 1
    set NwinSupervisedL "3"; set NwinSupervisedC "3"

    set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }

    set NTrainingArea(0) 0        
    set AreaPoint(0) 0
    set AreaPointLig(0) 0
    set AreaPointCol(0) 0
    for {set i 0} {$i <= 17} {incr i} {
        set NTrainingArea($i) ""
        for {set j 0} {$j <= 17} {incr j} {
            set Argument [expr (100*$i + $j)]
            set AreaPoint($Argument) ""
            for {set k 0} {$k <= 17} {incr k} {
                set Argument [expr (10000*$i + 100*$j + $k)]
                set AreaPointLig($Argument) ""
                set AreaPointCol($Argument) ""
                }
            }
        }           


    set SupervisedOutputDir $DataDir
    set SupervisedDirOutput $DataDir
    if {$DataFormatActive == "S2"} {
        set SupervisedDirInput $DataDir
        set SupervisedOutputSubDir ""
        set BMPDirInput $SupervisedDirOutput
        if { "$PolarCase" == "monostatic"} {
            set SupervisedFonction "S2m"
            }
        if { "$PolarCase" == "bistatic"} {
            set SupervisedFonction "S2b"
            }
        }       
    if { $DataFormatActive == "C2" } {
        set SupervisedDirInput "$DataDir/C2"
        set SupervisedOutputSubDir "C2"
        set BMPDirInput "$SupervisedDirOutput/C2"
        set SupervisedFonction "C2"
        }
    if { $DataFormatActive == "C3" } {
        set SupervisedDirInput "$DataDir/C3"
        set SupervisedOutputSubDir "C3"
        set BMPDirInput "$SupervisedDirOutput/C3"
        set SupervisedFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set SupervisedDirInput "$DataDir/T3"
        set SupervisedOutputSubDir "T3"
        set BMPDirInput "$SupervisedDirOutput/T3"
        set SupervisedFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set SupervisedDirInput "$DataDir/C4"
        set SupervisedOutputSubDir "C4"
        set BMPDirInput "$SupervisedDirOutput/C4"
        set SupervisedFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set SupervisedDirInput "$DataDir/T4"
        set SupervisedOutputSubDir "T4"
        set BMPDirInput "$SupervisedDirOutput/T4"
        set SupervisedFonction "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set SupervisedDirInput $DataDir
        set SupervisedOutputSubDir ""
        set BMPDirInput $SupervisedDirOutput
        set SupervisedFonction "SPP"
        }       
    if {$DataFormatActive == "IPP"} {
        set SupervisedDirInput $DataDir
        set SupervisedOutputSubDir ""
        set BMPDirInput $SupervisedDirOutput
        set SupervisedFonction "IPP"
        }       
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedDirInput/wishart_training_areas.txt"] {
            set FileTrainingArea "$SupervisedDirInput/wishart_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
            } 
        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
            WidgetShow $widget(Toplevel53); TextEditorRunTrace "Open Window Wishart Supervised Classification" "b"
            }
        if {$DataFormatActive == "SPP" || $DataFormatActive == "C2" || $DataFormatActive == "IPP"} {
            WidgetShow $widget(Toplevel212); TextEditorRunTrace "Open Window Wishart Supervised Classification" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Wishart Supervised Classification} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 CONFIGDir
global SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix VarTrainingArea
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCodedPauli ColorMapSupervisedCodedSinclair
global ColorMapSupervisedCoded1 ColorMapSupervisedCoded2
global SupervisedThreshold SupervisedRedR


#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_GPFSupervisedClassification Load_GPFSupervisedClassification_PP 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$DataFormatActive == "IPP"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_TrainingAreas_GraphicEditor == 0} {
        source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
        set Load_TrainingAreas_GraphicEditor 1
        WmTransient $widget(Toplevel47) $PSPTopLevel
        }

if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
    if {$Load_GPFSupervisedClassification == 0} {
        source "GUI/data_process_sngl/GPFSupervisedClassification.tcl"
        set Load_GPFSupervisedClassification 1
        WmTransient $widget(Toplevel445) $PSPTopLevel
        }
    set Fonction "FULL-POLSAR SUPERVISED CLASSIFIER"
    set ColorMapSupervisedCoded "0"
    set ColorMapSupervisedCodedPauli "0"
    set ColorMapSupervisedCodedSinclair "0"
    $widget(Checkbutton445_1) configure -state disable
    $widget(Checkbutton445_2) configure -state disable
    $widget(Label445_1) configure -state disable
    $widget(Label445_2) configure -state disable
    $widget(Label445_3) configure -state disable
    $widget(Label445_4) configure -state disable
    $widget(Label445_5) configure -state disable
    $widget(Label445_6) configure -state disable
    $widget(Button445_1) configure -state disable
    $widget(Button445_3) configure -state disable
    $widget(Button445_4) configure -state disable
    }

if {$DataFormatActive == "SPP" || $DataFormatActive == "C2" || $DataFormatActive == "T2"} {
    if {$Load_GPFSupervisedClassification_PP == 0} {
        source "GUI/data_process_sngl/GPFSupervisedClassification_PP.tcl"
        set Load_GPFSupervisedClassification_PP 1
        WmTransient $widget(Toplevel446) $PSPTopLevel
        }
    set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
    set ColorMapSupervisedCoded "0"
    set ColorMapSupervisedCoded1 "0"
    set ColorMapSupervisedCoded2 "0"
    $widget(Checkbutton446_1) configure -state disable
    $widget(Checkbutton446_2) configure -state disable
    $widget(Label446_1) configure -state disable
    $widget(Label446_2) configure -state disable
    $widget(Label446_3) configure -state disable
    $widget(Label446_4) configure -state disable
    $widget(Label446_5) configure -state disable
    $widget(Label446_6) configure -state disable
    $widget(Button446_1) configure -state disable
    $widget(Button446_3) configure -state disable
    $widget(Button446_4) configure -state disable
    }

    set SupervisedDirInput ""
    set SupervisedDirOutput ""
    set SupervisedOutputDir ""
    set SupervisedOutputSubDir ""

    set SupervisedTrainingProcess 0
    set ConfigFile ""

    set FileTrainingSet ""

    set BMPSupervised 1
    set SupervisedThreshold "0.98"
    set SupervisedRedR "1.50"
    set ConfusionMatrix 1
    set NwinSupervisedL "3"; set NwinSupervisedC "3"

    set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }

    set NTrainingArea(0) 0        
    set AreaPoint(0) 0
    set AreaPointLig(0) 0
    set AreaPointCol(0) 0
    for {set i 0} {$i <= 17} {incr i} {
        set NTrainingArea($i) ""
        for {set j 0} {$j <= 17} {incr j} {
            set Argument [expr (100*$i + $j)]
            set AreaPoint($Argument) ""
            for {set k 0} {$k <= 17} {incr k} {
                set Argument [expr (10000*$i + 100*$j + $k)]
                set AreaPointLig($Argument) ""
                set AreaPointCol($Argument) ""
                }
            }
        }           


    set SupervisedOutputDir $DataDir
    set SupervisedDirOutput $DataDir
    if {$DataFormatActive == "S2"} {
        set SupervisedDirInput $DataDir
        set SupervisedOutputSubDir ""
        set BMPDirInput $SupervisedDirOutput
        if { "$PolarCase" == "monostatic"} {
            set SupervisedFonction "S2m"
            }
        if { "$PolarCase" == "bistatic"} {
            set SupervisedFonction "S2b"
            }
        }       
    if { $DataFormatActive == "C2" } {
        set SupervisedDirInput "$DataDir/C2"
        set SupervisedOutputSubDir "C2"
        set BMPDirInput "$SupervisedDirOutput/C2"
        set SupervisedFonction "C2"
        }
    if { $DataFormatActive == "T2" } {
        set SupervisedDirInput "$DataDir/T2"
        set SupervisedOutputSubDir "T2"
        set BMPDirInput "$SupervisedDirOutput/T2"
        set SupervisedFonction "T2"
        }
    if { $DataFormatActive == "C3" } {
        set SupervisedDirInput "$DataDir/C3"
        set SupervisedOutputSubDir "C3"
        set BMPDirInput "$SupervisedDirOutput/C3"
        set SupervisedFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set SupervisedDirInput "$DataDir/T3"
        set SupervisedOutputSubDir "T3"
        set BMPDirInput "$SupervisedDirOutput/T3"
        set SupervisedFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set SupervisedDirInput "$DataDir/C4"
        set SupervisedOutputSubDir "C4"
        set BMPDirInput "$SupervisedDirOutput/C4"
        set SupervisedFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set SupervisedDirInput "$DataDir/T4"
        set SupervisedOutputSubDir "T4"
        set BMPDirInput "$SupervisedDirOutput/T4"
        set SupervisedFonction "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set SupervisedDirInput $DataDir
        set SupervisedOutputSubDir ""
        set BMPDirInput $SupervisedDirOutput
        set SupervisedFonction "SPP"
        }       
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedDirInput/gpf_training_areas.txt"] {
            set FileTrainingArea "$SupervisedDirInput/gpf_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/gpf_training_areas.txt"
            } 
        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        if {$DataFormatActive == "S2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
            WidgetShow $widget(Toplevel445); TextEditorRunTrace "Open Window G.P.F. Supervised Classification" "b"
            }
        if {$DataFormatActive == "SPP" || $DataFormatActive == "C2" || $DataFormatActive == "T2"} {
            WidgetShow $widget(Toplevel446); TextEditorRunTrace "Open Window G.P.F. Supervised Classification" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {G.P.F. Supervised Classification} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 CONFIGDir COLORMAPDir
global HierarchicalDirInput HierarchicalDirOutput HierarchicalOutputDir HierarchicalOutputSubDir
global TreeInputParameterFile TreeInputStructureFile HierarchicalFonction
global TreeInputNum TreeNum
global TreeParaLabel TreeInputParaLabel        
global TreeParaFile TreeInputParaFile
global TreeNodeType TreeNodeClass
global TreeNodePara1 TreeNodePara2
global TreeNodeCoeff1 TreeNodeCoeff2
global TreeNodeCoeff3 TreeNodeOperator
global ColorMapHierarchical32 RedPalette GreenPalette BluePalette
global HierarchicalKmean HierarchicalIteration HierarchicalPourcentage

#DATA PROCESS SNGL
global Load_HierarchicalSupervisedClassification
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    set HierarchicalDirInput ""
    set HierarchicalDirOutput ""
    set HierarchicalOutputDir ""
    set HierarchicalOutputSubDir ""

    set Fonction "RULE-BASED HIERARCHICAL CLASSIFIER"
    set ConfigFile ""

    set TreeInputParameterFile ""

    set ColorMapHierarchical32 "$COLORMAPDir/Random_ColorMap32.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }

    set TreeNum 0
    set TreeInputNum 0
    set TreeParaLabel ""
    set TreeInputParaLabel(0) 0        
    set TreeParaFile ""
    set TreeInputParaFile(0) 0        
    for {set i 0} {$i <= 100} {incr i} {
        set TreeInputParaLabel($i) "XX"
        set TreeInputParaFile($i) "XX"
        }           

    set TreeNodeType(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodeType($i) "XX" }
    set TreeNodeClass(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodeClass($i) "XX" }
    set TreeNodePara1(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodePara1($i) "XX" }
    set TreeNodePara2(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodePara2($i) "XX" }
    set TreeNodeCoeff1(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodeCoeff1($i) "XX" }
    set TreeNodeCoeff2(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodeCoeff2($i) "XX" }
    set TreeNodeCoeff3(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodeCoeff3($i) "XX" }
    set TreeNodeOperator(0) 0        
    for {set i 0} {$i <= 64} {incr i} { set TreeNodeOperator($i) "XX" }

    set HierarchicalOutputDir $DataDir
    set HierarchicalDirOutput $DataDir
    if {$DataFormatActive == "S2"} {
        set HierarchicalDirInput $DataDir
        set HierarchicalOutputSubDir ""
        set BMPDirInput $HierarchicalDirOutput
        set HierarchicalFonction "S2"
        }       
    if { $DataFormatActive == "C2" } {
        set HierarchicalDirInput "$DataDir/C2"
        set HierarchicalOutputSubDir "C2"
        set BMPDirInput "$HierarchicalDirOutput/C2"
        set HierarchicalFonction "C2"
        }
    if { $DataFormatActive == "C3" } {
        set HierarchicalDirInput "$DataDir/C3"
        set HierarchicalOutputSubDir "C3"
        set BMPDirInput "$HierarchicalDirOutput/C3"
        set HierarchicalFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set HierarchicalDirInput "$DataDir/T3"
        set HierarchicalOutputSubDir "T3"
        set BMPDirInput "$HierarchicalDirOutput/T3"
        set HierarchicalFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set HierarchicalDirInput "$DataDir/C4"
        set HierarchicalOutputSubDir "C4"
        set BMPDirInput "$HierarchicalDirOutput/C4"
        set HierarchicalFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set HierarchicalDirInput "$DataDir/T4"
        set HierarchicalOutputSubDir "T4"
        set BMPDirInput "$HierarchicalDirOutput/T4"
        set HierarchicalFonction "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set HierarchicalDirInput $DataDir
        set HierarchicalOutputSubDir ""
        set BMPDirInput $HierarchicalDirOutput
        set HierarchicalFonction "SPP"
        }       
    if {$DataFormatActive == "IPP"} {
        set HierarchicalDirInput $DataDir
        set HierarchicalOutputSubDir ""
        set BMPDirInput $HierarchicalDirOutput
        set HierarchicalFonction "IPP"
        }       
    set ConfigFile "$HierarchicalDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$Load_HierarchicalSupervisedClassification == 0} {
            source "GUI/data_process_sngl/HierarchicalSupervisedClassification.tcl"
            set Load_HierarchicalSupervisedClassification 1
            WmTransient $widget(Toplevel262) $PSPTopLevel
            }
        if [file exists "$HierarchicalDirInput/tree_parameters_list.txt"] {
            set TreeInputParameterFile "$HierarchicalDirInput/tree_parameters_list.txt"
            } else {
            set TreeInputParameterFile "$CONFIGDir/tree_parameters_list.txt"
            } 
        set f [open $TreeInputParameterFile r]
        gets $f tmp
        if {$tmp == "TREE INPUT PARAMETERS"} {
            gets $f TreeInputNum
            if {$TreeInputNum != 0} {
                for {set i 1} {$i <= $TreeInputNum} {incr i} {
                    gets $f TreeInputParaLabel($i)
                    gets $f TreeInputParaFile($i)
                    }
                }
            }                
        close $f
        if [file exists "$HierarchicalDirInput/tree_structure.txt"] {
            set TreeInputStructureFile "$HierarchicalDirInput/tree_structure.txt"
            } else {
            set TreeInputStructureFile "$CONFIGDir/tree_structure.txt"
            } 
        set f [open $TreeInputStructureFile r]
        gets $f tmp
        if {$tmp == "TREE STRUCTURE"} {
            for {set i 1} {$i < 64} {incr i} {
                gets $f tmp
                gets $f tmptype
                if {$tmptype == "node" } {
                    set TreeNodeType($i) $tmptype
                    gets $f tmp; set TreeNodePara1($i) $tmp
                    gets $f tmp; set TreeNodePara2($i) $tmp
                    gets $f tmp; set TreeNodeCoeff1($i) $tmp
                    gets $f tmp; set TreeNodeCoeff2($i) $tmp
                    gets $f tmp; set TreeNodeCoeff3($i) $tmp
                    gets $f tmp; set TreeNodeOperator($i) $tmp
                    }            
                if {$tmptype == "class" } {
                    set TreeNodeType($i) $tmptype
                    gets $f tmp; set TreeNodeClass($i) $tmp
                    }            
                gets $f tmp
                }
            }                
        close $f
        set HierarchicalKmean 0; set HierarchicalIteration ""; set HierarchicalPourcentage ""
        $widget(Label262_1) configure -state disable; $widget(Entry262_1) configure -state disable
        $widget(Entry262_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Label262_2) configure -state disable; $widget(Entry262_2) configure -state disable
        $widget(Entry262_2) configure -disabledbackground $PSPBackgroundColor
        WidgetShow $widget(Toplevel262); TextEditorRunTrace "Open Window Rule-Based Hierarchical Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Rule-Based Hierarchical Classification} 
    $site_6_0.men72 add separator \
        
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global IdentDirInput IdentDirOutput IdentOutputDir IdentOutputSubDir
global ColorMap9 ColorMapWishart16
global IdentDecompositionFonction IdentNwinL IdentNwinC entropy anisotropy alpha12 beta12 probabilities
        
#DATA PROCESS SNGL
global Load_ClassificationIdentification
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_ClassificationIdentification == 0} {
        source "GUI/data_process_sngl/ClassificationIdentification.tcl"
        set Load_ClassificationIdentification 1
        WmTransient $widget(Toplevel252) $PSPTopLevel
        }
    
    set IdentDirInput ""
    set IdentDirOutput ""
    set IdentOutputDir ""
    set IdentOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set ColorMap9 "$COLORMAPDir/Planes_H_A_Alpha_ColorMap9.pal"
    set ColorMapWishart16 "$COLORMAPDir/Wishart_ColorMap16.pal"
    for {set i 0} {$i < 256} {incr i} {
        set RedPalette($i) 1
        set GreenPalette($i) 1
        set BluePalette($i) 1
        }

    set IdentOutputDir $DataDir
    set IdentDirOutput $DataDir
    if {$DataFormatActive == "S2"} {
        set IdentDirInput $DataDir
        set IdentOutputSubDir ""
        set BMPDirInput $IdentDirOutput
        if { "$PolarCase" == "monostatic"} {set IdentDecompositionFonction "S2m"}
        if { "$PolarCase" == "bistatic"} {set IdentDecompositionFonction "S2b"}
        }       
    if { $DataFormatActive == "C3" } {
        set IdentDirInput "$DataDir/C3"
        set IdentOutputSubDir "C3"
        set BMPDirInput "$IdentDirOutput/C3"
        set IdentDecompositionFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set IdentDirInput "$DataDir/T3"
        set IdentOutputSubDir "T3"
        set BMPDirInput "$IdentDirOutput/T3"
        set IdentDecompositionFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set IdentDirInput "$DataDir/C4"
        set IdentOutputSubDir "C4"
        set BMPDirInput "$IdentDirOutput/C4"
        set IdentDecompositionFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set IdentDirInput "$DataDir/T4"
        set IdentOutputSubDir "T4"
        set BMPDirInput "$IdentDirOutput/T4"
        set IdentDecompositionFonction "T4"
        }
    set ConfigFile "$IdentDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set entropy "0"; set anisotropy "0"; set alpha12 "0"; set beta12 "0"; set probabilities "0"
        set IdentNwinL "0"; set IdentNwinC "0"
        WidgetShow $widget(Toplevel252); TextEditorRunTrace "Open Window Basic Scattering Mechanism Identification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Basic Scattering Mechanism Identification} 
    $site_6_0.men72 add separator \
        
    $site_6_0.men72 add command \
        \
        -command {global DataDir DataFormatActive
global SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedSVMClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction VarTrainingArea
global SupervisedSVMFonction ColorMapSupervisedCoded ColorMapSupervisedCodedPauli ColorMapSupervisedCodedSinclair
global SVMBatch PolsarProDir TMPScriptSVM  TMPTrainingSetNorm SVMConfigFile SVMRangeFile SVMModelFile ClassificationFile

global TrainingSamplingVal TrainingSampling UnbalanceTraining OldModel StandardPol
global CostVal PolyDeg RBFGamma PolyDegVar RBFGammaVar 
global RBFCV Kernel 
global Log2cBegin Log2cEnd Log2cStep
global Log2gBegin Log2gEnd Log2gStep
global ProbOut DistOut Npolar COLORMAPDir

global PolarIndic PolarFiles Npolar

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_SVMSupervisedClassification PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }


if {$configformat == "true"} {
    if {$Load_TrainingAreas_GraphicEditor == 0} {
	source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
	set Load_TrainingAreas_GraphicEditor 1
	WmTransient $widget(Toplevel47) $PSPTopLevel
	}

    if {$Load_SVMSupervisedClassification == 0} {
	source "GUI/data_process_sngl/SVMSupervisedClassification.tcl"
	set Load_SVMSupervisedClassification 1
	WmTransient $widget(Toplevel394) $PSPTopLevel
	}

    if {$DataFormatActive == "C2" || $DataFormatActive == "C3" || $DataFormatActive == "T3" || $DataFormatActive == "C4" || $DataFormatActive == "T4"} {
	set SupervisedDirInput ""
	set SupervisedDirOutput ""
	set SupervisedOutputDir ""
	set SupervisedOutputSubDir ""
	
	set SupervisedTrainingProcess 0
	set SupervisedClassifierConfusionMatrixFonction "Soft/SVM/svm_confusion_matrix.exe"
	set SupervisedClassifierFonction "Soft/SVM/svm_classifier.exe"
	set SupervisedSVMClassifierFonction "Soft/SVM/svm_classifier.exe"
	set Fonction "SVM SUPERVISED CLASSIFIER"
	set ConfigFile ""

	set FileTrainingSet ""

	set BMPSupervised 1
	set RejectClass 0
	set RejectRatio ""
	set ConfusionMatrix 1
	set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"

	for {set i 0} {$i < 256} {incr i} {
	    set RedPalette($i) 1
	    set GreenPalette($i) 1
	    set BluePalette($i) 1
            }

	set NTrainingArea(0) 0        
	set AreaPoint(0) 0
	set AreaPointLig(0) 0
	set AreaPointCol(0) 0
	for {set i 0} {$i <= 17} {incr i} {
	    set NTrainingArea($i) ""
	    for {set j 0} {$j <= 17} {incr j} {
	        set Argument [expr (100*$i + $j)]
	        set AreaPoint($Argument) ""
	        for {set k 0} {$k <= 17} {incr k} {
	            set Argument [expr (10000*$i + 100*$j + $k)]
	            set AreaPointLig($Argument) ""
	            set AreaPointCol($Argument) ""
                    }
                }
            }           

	set ColorMapSupervisedCoded "0"
	set ColorMapSupervisedCodedPauli "0"
	set ColorMapSupervisedCodedSinclair "0"

	set ConfusionMatrix 1

	set StandardPol "1"
	set PolarIndic $DataFormatActive
		
	if {$PolarIndic == "C2"} { set Npolar "4" }
	if {$PolarIndic == "T3" || $PolarIndic == "C3"} { set Npolar "9" }
	if {$PolarIndic == "T4" || $PolarIndic == "C4"} { set Npolar "16" }

	set OldModel "0"
	set Kernel "2"
	set CostVal "100"
	set TrainingSampling "1"
	set TrainingSamplingVal "500"
	set ProbOut "0"
	set DistOut "0"
	set PolyDeg "DISABLE"
	set PolyDegVar ""
        set RBFCV "0"
        set RBFGamma [expr 4.*1./$Npolar]
        set RBFGammaVar [expr 4.*1./$Npolar]

	$widget(Checkbutton394_1) configure -state disable
	$widget(Checkbutton394_2) configure -state disable
	$widget(Label394_1) configure -state disable
	$widget(Label394_2) configure -state disable
	$widget(Label394_3) configure -state disable
	$widget(Label394_4) configure -state disable
	$widget(Label394_5) configure -state disable
	$widget(Label394_6) configure -state disable

        $widget(Radiobutton394_1) configure -state normal
        $widget(Radiobutton394_2) configure -state normal
        $widget(Button394_5) configure -state disable
        $widget(Checkbutton394_3) configure -state normal
        $widget(Checkbutton394_4) configure -state normal
        $widget(Entry394_4) configure -state normal
        $widget(Entry394_4) configure -disabledbackground #FFFFFF

        $widget(Label394_10) configure -state normal
        $widget(Entry394_5) configure -state normal
        $widget(Entry394_5) configure -disabledbackground #FFFFFF

        $widget(Radiobutton394_3) configure -state normal
        $widget(Radiobutton394_4) configure -state normal
        $widget(Radiobutton394_5) configure -state normal
        $widget(Label394_11) configure -state normal
        $widget(Entry394_6) configure -state normal
        $widget(Entry394_6) configure -disabledbackground #FFFFFF
        $widget(Label394_12) configure -state normal
        $widget(Entry394_7) configure -state disable
        $widget(Entry394_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Label394_13) configure -state disable
        $widget(Button394_6) configure -state disable
        $widget(Checkbutton394_5) configure -state normal

        $widget(Button394_7) configure -state disable

        $widget(Button394_1) configure -state disable
	$widget(Checkbutton394_6) configure -state disable
	$widget(Checkbutton394_7) configure -state disable
		
	set SupervisedOutputDir $DataDir
	set SupervisedDirOutput $DataDir
		
	if { $DataFormatActive == "C2" } {
            set SupervisedDirInput "$DataDir/C2"
            set SupervisedOutputSubDir "C2"
	    set BMPDirInput "$SupervisedDirOutput/C2"
            }
        if { $DataFormatActive == "C3" } {
            set SupervisedDirInput "$DataDir/C3"
	    set SupervisedOutputSubDir "C3"
	    set BMPDirInput "$SupervisedDirOutput/C3"
	    }
        if { $DataFormatActive == "T3" } {
            set SupervisedDirInput "$DataDir/T3"
	    set SupervisedOutputSubDir "T3"
            set BMPDirInput "$SupervisedDirOutput/T3"
	    }
        if { $DataFormatActive == "C4" } {
            set SupervisedDirInput "$DataDir/C4"
            set SupervisedOutputSubDir "C4"
	    set BMPDirInput "$SupervisedDirOutput/C4"
            }
        if { $DataFormatActive == "T4" } {
            set SupervisedDirInput "$DataDir/T4"
            set SupervisedOutputSubDir "T4"
	    set BMPDirInput "$SupervisedDirOutput/T4"
	    }
	$widget(Radiobutton394_1) configure -text "$DataFormatActive"
	set ConfigFile "$SupervisedDirInput/config.txt"
        set ErrorMessage ""
        LoadConfig

        if {"$ErrorMessage" == ""} {
            if [file exists "$SupervisedDirInput/svm_training_areas.txt"] {
                set FileTrainingArea "$SupervisedDirInput/svm_training_areas.txt"
     	        } else {
     	        set FileTrainingArea "Config/svm_training_areas.txt"
     	        } 

        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        WidgetShow $widget(Toplevel394); TextEditorRunTrace "Open Window SVM Supervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
# Config Format
}} \
        -label {SVM Supervised Classification} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men73" -command {} \
        -label {Polarimetric Data Analysis} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men73 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men73 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FileName StatDirInput StatDirOutput StatOutputDir StatOutputSubDir 
global TMPStatisticsTxt TMPStatisticsBin TMPStatResultsTxt
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global StatExecFid StatOutputFile StatFunction
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeStat
global GnuOutputFormat GnuOutputFile GnuStatType
global GnuStatHisto GnuStatHistoId GnuStatHistoNum GnuStatHistoLabel
global GnuStatChannel GnuStatChannelId GnuStatChannelNum GnuStatChannelLabel
global GnuStatElement GnuStatElementId GnuStatElementNum GnuStatElementLabel
global GnuStatPdf GnuStatPdfId GnuStatPdfNum GnuStatPdfLabel GnuStatPdfFlag
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol AreaPointN
global widget SourceWidth SourceHeight WidthBMP HeightBMP BMPWidth BMPHeight
global ZoomBMP BMPImage ImageSource BMPCanvas
global TrainingAreaToolLine rect_color VarStatSave VarStatToolLine                    

#BMP PROCESS
global Load_ViewBMPLens

#DATA PROCESS SNGL
global Load_Statistics
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$DataFormatActive == "SPP"} {
    set ConfigFile "$DataDir/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { $PolarType == "full"} {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set configformat "false"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$configformat == "true"} {

set config "true"
if {$StatExecFid != ""} {
    set ErrorMessage "STATISTICS IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }

if {$config == "true"} {

    if {$DataFormatActive == "S2"} {
        set StatDirInput $DataDir
        set StatOutputSubDir ""
        set GnuStatType "S2"
        set StatFunction "Soft/data_process_sngl/statistics_S2.exe"
        }       
    if {$DataFormatActive == "C2"} {
        set StatDirInput "$DataDir/C2"
        set StatOutputSubDir "C2"
        set GnuStatType "C2"
        set StatFunction "Soft/data_process_sngl/statistics_C2.exe"
        }    
    if { $DataFormatActive == "C3" } {
        set StatDirInput "$DataDir/C3"
        set StatOutputSubDir "C3"
        set GnuStatType "C3"
        set StatFunction "Soft/data_process_sngl/statistics_T3_C3.exe"
        }
    if { $DataFormatActive == "T3" } {
        set StatDirInput "$DataDir/T3"
        set StatOutputSubDir "T3"
        set GnuStatType "T3"
        set StatFunction "Soft/data_process_sngl/statistics_T3_C3.exe"
        }
    if { $DataFormatActive == "C4" } {
        set StatDirInput "$DataDir/C4"
        set StatOutputSubDir "C4"
        set GnuStatType "C4"
        set StatFunction "Soft/data_process_sngl/statistics_T4_C4.exe"
        }
    if { $DataFormatActive == "T4" } {
        set StatDirInput "$DataDir/T4"
        set StatOutputSubDir "T4"
        set GnuStatType "T4"
        set StatFunction "Soft/data_process_sngl/statistics_T4_C4.exe"
        }
    if {$DataFormatActive == "SPP"} {
        set StatDirInput $DataDir
        set StatOutputSubDir ""
        if { "$PolarType" == "pp1"} { set GnuStatType "SPP1" }
        if { "$PolarType" == "pp2"} { set GnuStatType "SPP2" }
        if { "$PolarType" == "pp3"} { set GnuStatType "SPP3" }
        set StatFunction "Soft/data_process_sngl/statistics_S2.exe"
        }    

    set StatDirOutput $DataDir
    set StatOutputDir $DataDir
    set BMPDirInput $StatDirInput
    set ConfigFile "$StatDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                LoadPSPViewer
                Window show $widget(Toplevel64); TextEditorRunTrace "Open Window PolSARpro Viewer" "b"

                if {$Load_Statistics == 0} {
                    source "GUI/data_process_sngl/Statistics.tcl"
                    set Load_Statistics 1
                    WmTransient $widget(Toplevel247) $PSPTopLevel
                    }
                set line_color "white"
                set b .top247.fra71.cpd78.cpd71.fra87.cpd89
                $b configure -background $line_color -foreground $line_color
                set GnuOutputFormat "SCREEN"
                set GnuOutputFile ""                
                set GnuStatHisto ""; set GnuStatHistoId "0"; set GnuStatHistoNum "0"; set GnuStatHistoLabel(0) ""
                for {set i 0} {$i <= 100} {incr i} {set GnuStatHistoLabel($i) ""}
                set GnuStatChannel ""; set GnuStatChannelId "0"; set GnuStatChannelNum "0"; set GnuStatChannelLabel(0) ""
                for {set i 0} {$i <= 20} {incr i} {set GnuStatChannelLabel($i) ""}
                set GnuStatElement ""; set GnuStatElementId "0"; set GnuStatElementNum "0"; set GnuStatElementLabel(0) ""
                for {set i 0} {$i <= 20} {incr i} {set GnuStatElementLabel($i) ""}
                set GnuStatPdf ""; set GnuStatPdfId "0"; set GnuStatPdfNum "0"; set GnuStatPdfLabel(0) ""; set GnuStatPdfFlag "0"
                for {set i 0} {$i <= 20} {incr i} {set GnuStatPdfLabel($i) ""}
                set StatOutputFile ""
                set NTrainingArea(0) 0; set AreaPoint(0) 0; set AreaPointLig(0) 0; set AreaPointCol(0) 0
                for {set i 0} {$i <= 2} {incr i} {
                    set NTrainingArea($i) ""
                    for {set j 0} {$j <= 2} {incr j} {
                        set Argument [expr (100*$i + $j)]
                        set AreaPoint($Argument) ""
                        for {set k 0} {$k <= 17} {incr k} {
                            set Argument [expr (10000*$i + 100*$j + $k)]
                            set AreaPointLig($Argument) ""
                            set AreaPointCol($Argument) ""
                            }
                        }
                    }           
                set AreaClassN 1; set NTrainingAreaClass 1; set AreaN 1; set NTrainingArea(1) 1; set AreaPointN ""
                set TrainingAreaToolLine "false"; set rect_color "white"; set VarStatSave "no"; set VarStatToolLine "stop"                    
                set MouseInitX ""; set MouseInitY ""; set MouseEndX ""; set MouseEndY ""; set MouseNlig ""; set MouseNcol ""
                $widget(TextStat) delete 1.0 end
                $widget(Button247_2) configure -state disable
                $widget(Button247_3) configure -state disable
                $widget(Button247_4) configure -state disable
                $widget(Button247_5) configure -state disable
                $widget(Button247_6) configure -state disable
                $widget(Button247_7) configure -state disable
                $widget(Checkbutton247_1) configure -state disable
                $widget(TitleFrame247_1) configure -state disable
                $widget(Combobox247_1) configure -state disabled
                $widget(TitleFrame247_2) configure -state disable
                $widget(Combobox247_2) configure -state disabled
                $widget(TitleFrame247_3) configure -state disable
                $widget(Combobox247_3) configure -state disabled
                DeleteFile $TMPStatisticsTxt
                DeleteFile $TMPStatisticsBin

                TextEditorRunTrace "Launch The Process Soft/data_process_sngl/stat_extract.exe" "k"
                TextEditorRunTrace "Arguments: -id \x22$StatDirInput\x22 -iodf $DataFormatActive -fist \x22$TMPStatisticsTxt\x22 -fisb \x22$TMPStatisticsBin\x22 -fost \x22$TMPStatResultsTxt\x22" "k"
                set StatExecFid [ open "| Soft/data_process_sngl/stat_extract.exe -id \x22$StatDirInput\x22 -iodf $DataFormatActive -fist \x22$TMPStatisticsTxt\x22 -fisb \x22$TMPStatisticsBin\x22 -fost \x22$TMPStatResultsTxt\x22" r+]
    
                set GnuplotPipeSave ""; set GnuplotPipeStat ""
                WidgetShow $widget(Toplevel247); TextEditorRunTrace "Open Window Statistics" "b"
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}
}} \
        -label {Data Statistics} 
    $site_6_0.men73 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FileName HistoFileInput HistoFileOpen
global HistoDirInput HistoDirOutput HistoOutputDir HistoOutputSubDir
global TMPStatisticsTxt TMPStatisticsBin TMPStatResultsTxt
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global HistoExecFid HistoOutputFile
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeHisto
global GnuOutputFormat GnuOutputFile 
global GnuHistoTitle GnuHistoLabel GnuHistoStyle
global HistoInputFormat HistoOutputFormat
global MinMaxAutoHisto MinHisto MaxHisto
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol AreaPointN
global widget SourceWidth SourceHeight WidthBMP HeightBMP BMPWidth BMPHeight
global ZoomBMP BMPImage ImageSource BMPCanvas
global TrainingAreaToolLine rect_color VarHistoSave VarStatToolLine                    

#DATA PROCESS SNGL
global Load_Histograms
#BMP PROCESS
global Load_ViewBMPLens
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

set config "true"
if {$HistoExecFid != ""} {
    set ErrorMessage "STATISTICS - HISTOGRAM IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$config == "true"} {

    if {$DataFormatActive == "S2"} {
        set HistoDirInput $DataDir
        set HistoOutputSubDir ""
        }       
    if {$DataFormatActive == "C2"} {
        set HistoDirInput "$DataDir/C2"
        set HistoOutputSubDir "C2"
        }    
    if { $DataFormatActive == "C3" } {
        set HistoDirInput "$DataDir/C3"
        set HistoOutputSubDir "C3"
        }
    if { $DataFormatActive == "T3" } {
        set HistoDirInput "$DataDir/T3"
        set HistoOutputSubDir "T3"
        }
    if { $DataFormatActive == "C4" } {
        set HistoDirInput "$DataDir/C4"
        set HistoOutputSubDir "C4"
        }
    if { $DataFormatActive == "T4" } {
        set HistoDirInput "$DataDir/T4"
        set HistoOutputSubDir "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set HistoDirInput $DataDir
        set HistoOutputSubDir ""
        }    
    if {$DataFormatActive == "IPP"} {
        set HistoDirInput $DataDir
        set HistoOutputSubDir ""
        }    
    set HistoDirOutput $DataDir
    set HistoOutputDir $DataDir
    set BMPDirInput $HistoDirInput
    set ConfigFile "$HistoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                LoadPSPViewer
                Window show $widget(Toplevel64); TextEditorRunTrace "Open Window PolSARpro Viewer" "b"

                if {$Load_Histograms == 0} {
                    source "GUI/data_process_sngl/Histograms.tcl"
                    set Load_Histograms 1
                    WmTransient $widget(Toplevel260) $PSPTopLevel
                    }
                set line_color "white"
                set b .top260.fra73.fra74.but77
                $b configure -background $line_color -foreground $line_color
                set GnuOutputFormat "SCREEN"
                set GnuOutputFile ""; set HistoOutputFile ""
                set NTrainingArea(0) 0; set AreaPoint(0) 0; set AreaPointLig(0) 0; set AreaPointCol(0) 0
                for {set i 0} {$i <= 2} {incr i} {
                    set NTrainingArea($i) ""
                    for {set j 0} {$j <= 2} {incr j} {
                        set Argument [expr (100*$i + $j)]
                        set AreaPoint($Argument) ""
                        for {set k 0} {$k <= 17} {incr k} {
                            set Argument [expr (10000*$i + 100*$j + $k)]
                            set AreaPointLig($Argument) ""
                            set AreaPointCol($Argument) ""
                            }
                        }
                    }           
                set AreaClassN 1; set NTrainingAreaClass 1; set AreaN 1; set NTrainingArea(1) 1; set AreaPointN ""
                set TrainingAreaToolLine "false"; set rect_color "white"; set VarHistoSave "no"; set VarStatToolLine "stop"                    
                set MouseInitX ""; set MouseInitY ""; set MouseEndX ""; set MouseEndY ""; set MouseNlig ""; set MouseNcol ""
                $widget(Button260_2) configure -state disable
                $widget(Button260_3) configure -state disable
                $widget(Button260_4) configure -state disable
                $widget(Button260_5) configure -state disable
                $widget(Button260_6) configure -state disable
                $widget(Radiobutton260_1) configure -state disable
                $widget(Radiobutton260_2) configure -state disable
                DeleteFile $TMPStatisticsTxt
                DeleteFile $TMPStatisticsBin
                DeleteFile $TMPStatResultsTxt
                TextEditorRunTrace "Launch The Process Soft/data_process_sngl/statistics_histogram_extract.exe" "k"
                TextEditorRunTrace "Arguments: \x22$TMPStatisticsTxt\x22 \x22$TMPStatisticsBin\x22" "k"
                set HistoExecFid [ open "| Soft/data_process_sngl/statistics_histogram_extract.exe \x22$TMPStatisticsTxt\x22 \x22$TMPStatisticsBin\x22" r+]
                set GnuplotPipeSave ""; set GnuplotPipeStat "";  set HistoFileInput ""; set HistoFileOpen 0
                set GnuHistoTitle "HISTOGRAM"; set GnuHistoLabel "Label"; set GnuHistoStyle "lines"
                set HistoInputFormat "float"; set HistoOutputFormat "real"
                $widget(Radiobutton260_3) configure -state disable; $widget(Radiobutton260_4) configure -state disable
                set MinMaxAutoHisto 1; set MinHisto "Auto"; set MaxHisto "Auto"
                $widget(TitleFrame260_1) configure -state disable; $widget(Checkbutton260_1) configure -state disable
                $widget(Label260_1) configure -state disable; $widget(Entry260_1) configure -state disable
                $widget(Label260_2) configure -state disable; $widget(Entry260_2) configure -state disable
                $widget(Button260_1) configure -state disable
                WidgetShow $widget(Toplevel260); TextEditorRunTrace "Open Window Histograms" "b"
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}} \
        -label {Data Histograms} 
    $site_6_0.men73 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FileName ProfileDirInput ProfileDirOutput ProfileOutputDir ProfileOutputSubDir
global TMPProfileTxt TMPProfileXTxt TMPProfileYTxt TMPProfileXYTxt
global TMPProfileXBin TMPProfileYBin TMPProfileXYBin
global TMPProfile1DXBin TMPProfile1DYBin TMPProfile3DBin
global ProfileFileInput ProfileFileOpen ProfileExecFid
global BMPDirInput BMPViewFileInput BMPImageOpen
global LineXLensInit LineYLensInit line_color PSPBackgroundColor
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeProfile
global GnuOutputFormat GnuOutputFile ProfileOutputFile 
global GnuXview GnuZview GnuOutputFile GnuProfileTitle

#DATA PROCESS SNGL
global Load_DataValueProfile
#BMP PROCESS
global Load_ViewBMPLens
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

set config "true"
if {$ProfileExecFid != ""} {
    set ErrorMessage "DATA PROFILE IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$config == "true"} {

    if {$DataFormatActive == "S2"} {
        set ProfileDirInput $DataDir
        set ProfileOutputSubDir ""
        }       
    if {$DataFormatActive == "C2"} {
        set ProfileDirInput "$DataDir/C2"
        set ProfileOutputSubDir "C2"
        }    
    if { $DataFormatActive == "C3" } {
        set ProfileDirInput "$DataDir/C3"
        set ProfileOutputSubDir "C3"
        }
    if { $DataFormatActive == "T3" } {
        set ProfileDirInput "$DataDir/T3"
        set ProfileOutputSubDir "T3"
        }
    if { $DataFormatActive == "C4" } {
        set ProfileDirInput "$DataDir/C4"
        set ProfileOutputSubDir "C4"
        }
    if { $DataFormatActive == "T4" } {
        set ProfileDirInput "$DataDir/T4"
        set ProfileOutputSubDir "T4"
        }
    if {$DataFormatActive == "SPP"} {
        set ProfileDirInput $DataDir
        set ProfileOutputSubDir ""
        }    
    if {$DataFormatActive == "IPP"} {
        set ProfileDirInput $DataDir
        set ProfileOutputSubDir ""
        }    
    set ProfileDirOutput $DataDir
    set ProfileOutputDir $DataDir
    set BMPDirInput $ProfileDirInput
    set ConfigFile "$ProfileDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                ClosePSPViewer
                Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                set types {
                    {{BMP Files}        {.bmp}        }
                    }
                set FileName ""
                OpenFile $BMPDirInput $types "INPUT BMP FILE"

                if {$FileName != ""} {
                    set BMPImageOpen "1"
                    set BMPViewFileInput $FileName

                    if {$Load_ViewBMPLens == 0} {
                        source "GUI/bmp_process/ViewBMPLens.tcl"
                        set Load_ViewBMPLens 1
                        WmTransient $widget(Toplevel73) $PSPTopLevel
                        }
                    if {$Load_DataValueProfile == 0} {
                        source "GUI/data_process_sngl/DataValueProfile.tcl"
                        set Load_DataValueProfile 1
                        WmTransient $widget(Toplevel257) $PSPTopLevel
                        } else {
                        $widget(CANVASLENSPROFILE) dtag $LineXLensInit
                        $widget(CANVASLENSPROFILE) dtag $LineYLensInit
                        }

                    set GnuplotPipeSave  ""; set GnuplotPipeProfile ""
                    set GnuOutputFormat "SCREEN"
                    set ProfileFileInput ""; set ProfileFileOpen 0

                    ProfileInitWidget
                    ProfileReset

                    set line_color "white"
                    set b .top257.fra71.cpd78.cpd71.fra87.cpd71
                    $b configure -background $line_color -foreground $line_color

                    LoadPSPViewer
                    load_bmp_caracteristics $BMPViewFileInput
                    load_bmp_file $BMPViewFileInput    
                    load_bmp_lens_line $widget(Toplevel257) $widget(CANVASLENSPROFILE)
                    MouseActiveFunction "LensPROFILE"
                    DeleteFile $TMPProfileTxt
                    DeleteFile $TMPProfileXTxt
                    DeleteFile $TMPProfileXBin
                    DeleteFile $TMPProfileYTxt
                    DeleteFile $TMPProfileYBin
                    DeleteFile $TMPProfileXYTxt
                    DeleteFile $TMPProfileXYBin
                    DeleteFile $TMPProfile1DXBin
                    DeleteFile $TMPProfile1DYBin
                    DeleteFile $TMPProfile3DBin
                    TextEditorRunTrace "Launch The Process Soft/data_process_sngl/data_profile_extract.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$TMPProfileTxt\x22 \x22$TMPProfileXTxt\x22 \x22$TMPProfileXBin\x22 \x22$TMPProfileYTxt\x22 \x22$TMPProfileYBin\x22 \x22$TMPProfileXYTxt\x22 \x22$TMPProfileXYBin\x22 \x22$TMPProfile1DXBin\x22 \x22$TMPProfile1DYBin\x22 \x22$TMPProfile3DBin\x22" "k"
                    set ProfileExecFid [ open "| Soft/data_process_sngl/data_profile_extract.exe \x22$TMPProfileTxt\x22 \x22$TMPProfileXTxt\x22 \x22$TMPProfileXBin\x22 \x22$TMPProfileYTxt\x22 \x22$TMPProfileYBin\x22 \x22$TMPProfileXYTxt\x22 \x22$TMPProfileXYBin\x22 \x22$TMPProfile1DXBin\x22 \x22$TMPProfile1DYBin\x22 \x22$TMPProfile3DBin\x22" r+]
                    WidgetShow $widget(Toplevel257); TextEditorRunTrace "Open Window Data Value - Profile" "b"
                    }
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config
    }

# Config Format
}} \
        -label {Data Profiles} 
    $site_6_0.men73 add separator \
        
    $site_6_0.men73 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HistStatDirInput HistStatDirOutput HistStatFileInput HistStatFileOutput
global InputFormat OutputFormat HistStatFonc BMPHistStat NwinHistStatL NwinHistStatC

#DATA PROCESS
global Load_HistogramStatistics
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_HistogramStatistics == 0} {
        source "GUI/data_process_sngl/HistogramStatistics.tcl"
        set Load_HistogramStatistics 1
        WmTransient $widget(Toplevel335) $PSPTopLevel
        }

    set HistStatDirInput ""
    set HistStatDirOutput ""
    set ConfigFile ""

    if {$DataFormatActive == "S2"} {
        set HistStatDirInput $DataDir
        set HistStatDirOutput $DataDir
        }       
    if {$DataFormatActive == "C2"} {
        set HistStatDirInput "$DataDir/C2"
        set HistStatDirOutput "$DataDir/C2"
        }    
    if { $DataFormatActive == "C3" } {
        set HistStatDirInput "$DataDir/C3"
        set HistStatDirOutput "$DataDir/C3"
        }
    if { $DataFormatActive == "T3" } {
        set HistStatDirInput "$DataDir/T3"
        set HistStatDirOutput "$DataDir/T3"
        }
    if { $DataFormatActive == "C4" } {
        set HistStatDirInput "$DataDir/C4"
        set HistStatDirOutput "$DataDir/C4"
        }
    if { $DataFormatActive == "T4" } {
        set HistStatDirInput "$DataDir/T4"
        set HistStatDirOutput "$DataDir/T4"
        }
    if {$DataFormatActive == "SPP"} {
        set HistStatDirInput $DataDir
        set HistStatDirOutput $DataDir
        }    
    if {$DataFormatActive == "IPP"} {
        set HistStatDirInput $DataDir
        set HistStatDirOutput $DataDir
        }    
    set ConfigFile "$HistStatDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinHistStatL "7"; set NwinHistStatC "7"; set BMPHistStat ""
        set HistStatFileInput ""; set HistStatFileOutput ""
        set InputFormat ""; set OutputFormat ""; set HistStatFonc ""
        $widget(Radiobutton335_1) configure -state disable
        $widget(Radiobutton335_2) configure -state disable
        $widget(Radiobutton335_3) configure -state disable
        $widget(Radiobutton335_4) configure -state disable
        $widget(Radiobutton335_5) configure -state disable
        $widget(Radiobutton335_6) configure -state disable
        $widget(Radiobutton335_7) configure -state disable
        $widget(Button335_1) configure -state disable
        $widget(Button335_2) configure -state disable
        WidgetShow $widget(Toplevel335); TextEditorRunTrace "Open Window Histogram Based Statistics" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Histogram Based Statistics} 
    $site_6_0.men73 add separator \
        
    $site_6_0.men73 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global TextStatDirInput TextStatDirOutput TextStatFileInput TextStatFileOutput
global InputFormat OutputFormat TextStatFonc BMPTextStat NwinTextStatL NwinTextStatC TextOrient TextNcolor
global PSPBackgroundColor

#DATA PROCESS
global Load_TextureAnalysis
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_TextureAnalysis == 0} {
        source "GUI/data_process_sngl/TextureAnalysis.tcl"
        set Load_TextureAnalysis 1
        WmTransient $widget(Toplevel390) $PSPTopLevel
        }

    set TextStatDirInput ""
    set TextStatDirOutput ""
    set ConfigFile ""

    if {$DataFormatActive == "S2"} {
        set TextStatDirInput $DataDir
        set TextStatDirOutput $DataDir
        }       
    if {$DataFormatActive == "C2"} {
        set TextStatDirInput "$DataDir/C2"
        set TextStatDirOutput "$DataDir/C2"
        }    
    if { $DataFormatActive == "C3" } {
        set TextStatDirInput "$DataDir/C3"
        set TextStatDirOutput "$DataDir/C3"
        }
    if { $DataFormatActive == "T3" } {
        set TextStatDirInput "$DataDir/T3"
        set TextStatDirOutput "$DataDir/T3"
        }
    if { $DataFormatActive == "C4" } {
        set TextStatDirInput "$DataDir/C4"
        set TextStatDirOutput "$DataDir/C4"
        }
    if { $DataFormatActive == "T4" } {
        set TextStatDirInput "$DataDir/T4"
        set TextStatDirOutput "$DataDir/T4"
        }
    if {$DataFormatActive == "SPP"} {
        set TextStatDirInput $DataDir
        set TextStatDirOutput $DataDir
        }    
    if {$DataFormatActive == "IPP"} {
        set TextStatDirInput $DataDir
        set TextStatDirOutput $DataDir
        }    
    set ConfigFile "$TextStatDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinTextStatL "7"; set NwinTextStatC "7"; set BMPTextStat ""
        set TextStatFileInput ""; set TextStatFileOutput ""
        set InputFormat ""; set OutputFormat ""; set TextStatFonc ""
        set TextOrient ""; set TextNcolor ""
        $widget(Radiobutton390_1) configure -state disable
        $widget(Radiobutton390_2) configure -state disable
        $widget(Radiobutton390_3) configure -state disable
        $widget(Radiobutton390_4) configure -state disable
        $widget(Radiobutton390_5) configure -state disable
        $widget(Radiobutton390_6) configure -state disable
    $widget(Entry390_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry390_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Label390_1) configure -state disable
    $widget(Label390_2) configure -state disable
    $widget(Button390_1) configure -state disable
    $widget(Button390_2) configure -state disable
    $widget(Button390_3) configure -state disable
    $widget(Button390_4) configure -state disable

        WidgetShow $widget(Toplevel390); TextEditorRunTrace "Open Window Texture Analysis" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Texture Analysis} 
    $site_6_0.men73 add separator \
        
    $site_6_0.men73 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global EdgeDirInput EdgeDirOutput EdgeFileInput EdgeFileOutput
global EdgeDetector EdgeCoeff InputFormat OutputFormat

#DATA PROCESS
global Load_EdgeDetector PSPTopLevel
 
set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_EdgeDetector == 0} {
    source "GUI/data_process_sngl/EdgeDetector.tcl"
    set Load_EdgeDetector 1
    WmTransient $widget(Toplevel337) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} { set EdgeDirInput "$DataDir" }
if {$DataFormatActive == "C2"} { set EdgeDirInput "$DataDir/C2" }
if {$DataFormatActive == "C3"} { set EdgeDirInput "$DataDir/C3" }
if {$DataFormatActive == "T3"} { set EdgeDirInput "$DataDir/T3" }
if {$DataFormatActive == "C4"} { set EdgeDirInput "$DataDir/C4" }
if {$DataFormatActive == "T4"} { set EdgeDirInput "$DataDir/T4" }
if {$DataFormatActive == "SPP"} { set EdgeDirInput "$DataDir" }
if {$DataFormatActive == "IPP"} { set EdgeDirInput "$DataDir" }

set EdgeDirOutput $EdgeDirInput
set InputFormat "float"
set OutputFormat "real"
set EdgeFileInput ""
set EdgeFileOutput "$EdgeDirOutput/canny_0.5.bin"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label337_1) configure -state disable
$widget(Entry337_1) configure -state disable
$widget(Label337_2) configure -state disable
$widget(Entry337_2) configure -state disable
$widget(Button337_1) configure -state disable
set MinBMP "Auto"
set MaxBMP "Auto"
set EdgeDetector "canny"
set EdgeCoeff "0.5"
WidgetShow $widget(Toplevel337); TextEditorRunTrace "Open Window Edge Detector" "b"
}} \
        -label {Edge Detector} 
    $site_6_0.men73 add cascade \
        -menu "$site_6_0.men73.men66" -command {} -label {Change Detector} 
    set site_7_0 $site_6_0.men73
    menu $site_7_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ChangeDetectorDirOutput ChangeDetectorOutputFile
global ChangeDetectorInputFile1 ChangeDetectorInputFile2
global ChangeDetectorName ChangeDetectorNwinL ChangeDetectorNwinC
global NligInitFile1 NligEndFile1 NcolInitFile1 NcolEndFile1
global NligInitFile2 NligEndFile2 NcolInitFile2 NcolEndFile2

#DATA PROCESS
global Load_ChangeDetectorFile PSPTopLevel
 
set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }


if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_ChangeDetectorFile == 0} {
    source "GUI/data_process_sngl/ChangeDetectorFile.tcl"
    set Load_ChangeDetectorFile 1
    WmTransient $widget(Toplevel440) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} { set ChangeDetectorDirInput "$DataDir" }
if {$DataFormatActive == "C2"} { set ChangeDetectorDirInput "$DataDir/C2" }
if {$DataFormatActive == "T2"} { set ChangeDetectorDirInput "$DataDir/T2" }
if {$DataFormatActive == "C3"} { set ChangeDetectorDirInput "$DataDir/C3" }
if {$DataFormatActive == "T3"} { set ChangeDetectorDirInput "$DataDir/T3" }
if {$DataFormatActive == "C4"} { set ChangeDetectorDirInput "$DataDir/C4" }
if {$DataFormatActive == "T4"} { set ChangeDetectorDirInput "$DataDir/T4" }
if {$DataFormatActive == "SPP"} { set ChangeDetectorDirInput "$DataDir" }

set ChangeDetectorDirOutput $ChangeDetectorDirInput
set ChangeDetectorInputFile1 ""
set ChangeDetectorInputFile2 ""
set ChangeDetectorOutputFile ""
set ChangeDetectorNwinL "?"
set ChangeDetectorNwinC "?"
set ChangeDetectorName ""
set ChangeDetectorBMP "0"
set NligInitFile1 ""; set NligEndFile1 ""; set NcolInitFile1 ""; set NcolEndFile1 ""
set NligInitFile2 ""; set NligEndFile2 ""; set NcolInitFile2 ""; set NcolEndFile2 ""
WidgetShow $widget(Toplevel440); TextEditorRunTrace "Open Window Change Detector File" "b"
}} \
        -label {Binary File} 
    $site_7_0.men66 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ChangeDetectorDirOutput ChangeDetectorOutputFile
global ChangeDetectorInputDir1 ChangeDetectorInputDir2
global ChangeDetectorName ChangeDetectorNwinL ChangeDetectorNwinC
global NligInitFile1 NligEndFile1 NcolInitFile1 NcolEndFile1
global NligInitFile2 NligEndFile2 NcolInitFile2 NcolEndFile2

#DATA PROCESS
global Load_ChangeDetectorMat PSPTopLevel
 
set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_ChangeDetectorMat == 0} {
    source "GUI/data_process_sngl/ChangeDetectorMat.tcl"
    set Load_ChangeDetectorMat 1
    WmTransient $widget(Toplevel441) $PSPTopLevel
    }

set ChangeDetectorDirOutput ""
set ChangeDetectorInputDir1 ""
set ChangeDetectorInputDir2 ""
set ChangeDetectorOutputFile ""
set ChangeDetectorNwinL "?"
set ChangeDetectorNwinC "?"
set ChangeDetectorName ""
set ChangeDetectorBMP "0"
set NligInitFile1 ""; set NligEndFile1 ""; set NcolInitFile1 ""; set NcolEndFile1 ""
set NligInitFile2 ""; set NligEndFile2 ""; set NcolInitFile2 ""; set NcolEndFile2 ""
WidgetShow $widget(Toplevel441); TextEditorRunTrace "Open Window Change Detector Matrix" "b"
}} \
        -label {Polarimetric Matrix} 
    $site_4_0.men58.m add cascade \
        -menu "$site_4_0.men58.m.men74" -command {} \
        -label {Polarimetric Data Clustering} 
    set site_6_0 $site_4_0.men58.m
    menu $site_6_0.men74 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men74 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ClusterDirInput ClusterDirOutput 
global ClusterOutputDir ClusterOutputSubDir 
global ClusterAvgOutputDir ClusterAvgOutputSubDir 
global ClusterProcess ClusterPara ClusterData 
global ClusterFile ClusterFileInPara ClusterFileInData
global ClusterSegFile ClusterValFile ClusterNpix
global ClusterParaFileIn ClusterParaFileOut
global ClusterAvgOutputSubDirFormat 
global ClusterFormat ClusterNeighb

#DATA PROCESS
global Load_ClusterProcess
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_ClusterProcess == 0} {
        source "GUI/data_process_sngl/ClusterProcess.tcl"
        set Load_ClusterProcess 1
        WmTransient $widget(Toplevel373) $PSPTopLevel
        }

    set ClusterDirInput ""
    set ClusterDirOutput ""
    set CluserOutputDir ""
    set ClusterOutputSubDir ""
    set ConfigFile ""

    set ClusterFile ""; set ClusterFileInPara ""; set ClusterFileInData ""
    set ClusterSegFile ""; set ClusterValFile ""; set ClusterNpix ""; set ClusterNeighb ""
    set ClusterParaFileIn ""; set ClusterParaFileOut ""
    set ClusterAvgOutputSubDirFormat ""; set ClusterFormat ""
    set ClusterAvgOutputDir ""; set ClusterAvgOutputSubDir ""
    set ClusterProcess "1"; set ClusterPara "0"; set ClusterData "0"

    set ClusterDirOutput $DataDir
    set ClusterOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        if { "$PolarCase" == "monostatic"} { set ClusterFormat "S2m" }
        if { "$PolarCase" == "bistatic"} { set ClusterFormat "S2b" }
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }       
    if {$DataFormatActive == "C2"} {
        set ClusterDirInput "$DataDir/C2"
        set ClusterOutputSubDir "C2"
        set ClusterFormat "C2"
        set ClusterFile "$ClusterDirOutput/C2/cluster_file.bin"
        }    
    if { $DataFormatActive == "C3" } {
        set ClusterDirInput "$DataDir/C3"
        set ClusterOutputSubDir "C3"
        set ClusterFormat "C3"
        set ClusterFile "$ClusterDirOutput/C3/cluster_file.bin"
        }
    if { $DataFormatActive == "T3" } {
        set ClusterDirInput "$DataDir/T3"
        set ClusterOutputSubDir "T3"
        set ClusterFormat "T3"
        set ClusterFile "$ClusterDirOutput/T3/cluster_file.bin"
        }
    if { $DataFormatActive == "C4" } {
        set ClusterDirInput "$DataDir/C4"
        set ClusterOutputSubDir "C4"
        set ClusterFormat "C4"
        set ClusterFile "$ClusterDirOutput/C4/cluster_file.bin"
        }
    if { $DataFormatActive == "T4" } {
        set ClusterDirInput "$DataDir/T4"
        set ClusterOutputSubDir "T4"
        set ClusterFormat "T4"
        set ClusterFile "$ClusterDirOutput/T4/cluster_file.bin"
        }
    if {$DataFormatActive == "SPP"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        set ClusterFormat "SPP"
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }    
    if {$DataFormatActive == "IPP"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        set ClusterFormat "IPP"
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }    
    set ConfigFile "$ClusterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set ClusterNpix "20"; set ClusterNeighb "4"
        WidgetShow $widget(Toplevel373); TextEditorRunTrace "Open Window Data Clustering Process" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Clustering Process} 
    $site_6_0.men74 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ClusterDirInput ClusterDirOutput 
global ClusterOutputDir ClusterOutputSubDir 
global ClusterAvgOutputDir ClusterAvgOutputSubDir 
global ClusterProcess ClusterPara ClusterData 
global ClusterFile ClusterFileInPara ClusterFileInData
global ClusterSegFile ClusterValFile ClusterNpix
global ClusterParaFileIn ClusterParaFileOut
global ClusterAvgOutputSubDirFormat 
global ClusterFormat ClusterNeighb

#DATA PROCESS
global Load_ClusterParaAvg 
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_ClusterParaAvg == 0} {
        source "GUI/data_process_sngl/ClusterParaAvg.tcl"
        set Load_ClusterParaAvg 1
        WmTransient $widget(Toplevel374) $PSPTopLevel
        }

    set ClusterDirInput ""
    set ClusterDirOutput ""
    set CluserOutputDir ""
    set ClusterOutputSubDir ""
    set ConfigFile ""

    set ClusterFile ""; set ClusterFileInPara ""; set ClusterFileInData ""
    set ClusterSegFile ""; set ClusterValFile ""; set ClusterNpix ""; set ClusterNeighb ""
    set ClusterParaFileIn ""; set ClusterParaFileOut ""
    set ClusterAvgOutputSubDirFormat ""; set ClusterFormat ""
    set ClusterAvgOutputDir ""; set ClusterAvgOutputSubDir ""
    set ClusterProcess "0"; set ClusterPara "1"; set ClusterData "0"

    set ClusterDirOutput $DataDir
    set ClusterOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        if { "$PolarCase" == "monostatic"} { set ClusterFormat "S2m" }
        if { "$PolarCase" == "bistatic"} { set ClusterFormat "S2b" }
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }       
    if {$DataFormatActive == "C2"} {
        set ClusterDirInput "$DataDir/C2"
        set ClusterOutputSubDir "C2"
        set ClusterFormat "C2"
        set ClusterFile "$ClusterDirOutput/C2/cluster_file.bin"
        }    
    if { $DataFormatActive == "C3" } {
        set ClusterDirInput "$DataDir/C3"
        set ClusterOutputSubDir "C3"
        set ClusterFormat "C3"
        set ClusterFile "$ClusterDirOutput/C3/cluster_file.bin"
        }
    if { $DataFormatActive == "T3" } {
        set ClusterDirInput "$DataDir/T3"
        set ClusterOutputSubDir "T3"
        set ClusterFormat "T3"
        set ClusterFile "$ClusterDirOutput/T3/cluster_file.bin"
        }
    if { $DataFormatActive == "C4" } {
        set ClusterDirInput "$DataDir/C4"
        set ClusterOutputSubDir "C4"
        set ClusterFormat "C4"
        set ClusterFile "$ClusterDirOutput/C4/cluster_file.bin"
        }
    if { $DataFormatActive == "T4" } {
        set ClusterDirInput "$DataDir/T4"
        set ClusterOutputSubDir "T4"
        set ClusterFormat "T4"
        set ClusterFile "$ClusterDirOutput/T4/cluster_file.bin"
        }
    if {$DataFormatActive == "SPP"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        set ClusterFormat "SPP"
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }    
    if {$DataFormatActive == "IPP"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        set ClusterFormat "IPP"
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }    
    set ConfigFile "$ClusterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set ClusterParaFileIn ""
        set ClusterParaFileOut ""
        set ClusterFileInPara ""
        if [file exists "$ClusterFile"] { 
            set ClusterFileInPara $ClusterFile
            } else {
            set ClusterFileInPara ""
            }  
        WidgetShow $widget(Toplevel374); TextEditorRunTrace "Open Window Data Clustering - Parameter Averaging" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Parameter Averaging} 
    $site_6_0.men74 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ClusterDirInput ClusterDirOutput 
global ClusterOutputDir ClusterOutputSubDir 
global ClusterAvgOutputDir ClusterAvgOutputSubDir 
global ClusterProcess ClusterPara ClusterData 
global ClusterFile ClusterFileInPara ClusterFileInData
global ClusterSegFile ClusterValFile ClusterNpix
global ClusterParaFileIn ClusterParaFileOut
global ClusterAvgOutputSubDirFormat 
global ClusterFormat ClusterNeighb

#DATA PROCESS
global Load_ClusterDataSetsAvg 
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_ClusterDataSetsAvg == 0} {
        source "GUI/data_process_sngl/ClusterDataSetsAvg.tcl"
        set Load_ClusterDataSetsAvg 1
        WmTransient $widget(Toplevel375) $PSPTopLevel
        }

    $widget(Radiobutton375_1) configure -state disable
    $widget(Radiobutton375_2) configure -state disable
    $widget(Radiobutton375_3) configure -state disable
    $widget(Radiobutton375_4) configure -state disable
    $widget(Radiobutton375_5) configure -state disable
    $widget(Radiobutton375_6) configure -state disable

    set ClusterDirInput ""
    set ClusterDirOutput ""
    set CluserOutputDir ""
    set ClusterOutputSubDir ""
    set ConfigFile ""

    set ClusterFile ""; set ClusterFileInPara ""; set ClusterFileInData ""
    set ClusterSegFile ""; set ClusterValFile ""; set ClusterNpix ""; set ClusterNeighb ""
    set ClusterParaFileIn ""; set ClusterParaFileOut ""
    set ClusterAvgOutputSubDirFormat ""; set ClusterFormat ""
    set ClusterAvgOutputDir ""; set ClusterAvgOutputSubDir ""
    set ClusterProcess "0"; set ClusterPara "0"; set ClusterData "1"

    set ClusterDirOutput $DataDir
    set ClusterOutputDir $DataDir
    if {$DataFormatActive == "S2"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        if { "$PolarCase" == "monostatic"} {
            set ClusterFormat "S2m"
            $widget(Radiobutton375_2) configure -state normal
            $widget(Radiobutton375_4) configure -state normal
            }
        if { "$PolarCase" == "bistatic"} {
            set ClusterFormat "S2b"
            $widget(Radiobutton375_2) configure -state normal
            $widget(Radiobutton375_4) configure -state normal
            $widget(Radiobutton375_3) configure -state normal
            $widget(Radiobutton375_5) configure -state normal
            }
        set ClusterAvgOutputSubDir "T3"
        set ClusterAvgOutputSubDirFormat "T3"
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }       
    if {$DataFormatActive == "C2"} {
        set ClusterDirInput "$DataDir/C2"
        set ClusterOutputSubDir "C2"
        set ClusterFormat "C2"
        set ClusterAvgOutputSubDir "C2"
        set ClusterAvgOutputSubDirFormat "C2"
        $widget(Radiobutton375_1) configure -state normal
        set ClusterFile "$ClusterDirOutput/C2/cluster_file.bin"
        }    
    if { $DataFormatActive == "C3" } {
        set ClusterDirInput "$DataDir/C3"
        set ClusterOutputSubDir "C3"
        set ClusterFormat "C3"
        set ClusterAvgOutputSubDir "C3"
        set ClusterAvgOutputSubDirFormat "C3"
        $widget(Radiobutton375_2) configure -state normal
        set ClusterFile "$ClusterDirOutput/C3/cluster_file.bin"
        }
    if { $DataFormatActive == "T3" } {
        set ClusterDirInput "$DataDir/T3"
        set ClusterOutputSubDir "T3"
        set ClusterFormat "T3"
        set ClusterAvgOutputSubDir "T3"
        set ClusterAvgOutputSubDirFormat "T3"
        $widget(Radiobutton375_4) configure -state normal
        set ClusterFile "$ClusterDirOutput/T3/cluster_file.bin"
        }
    if { $DataFormatActive == "C4" } {
        set ClusterDirInput "$DataDir/C4"
        set ClusterOutputSubDir "C4"
        set ClusterFormat "C4"
        set ClusterAvgOutputSubDir "C4"
        set ClusterAvgOutputSubDirFormat "C4"
        $widget(Radiobutton375_3) configure -state normal
        set ClusterFile "$ClusterDirOutput/C4/cluster_file.bin"
        }
    if { $DataFormatActive == "T4" } {
        set ClusterDirInput "$DataDir/T4"
        set ClusterOutputSubDir "T4"
        set ClusterFormat "T4"
        set ClusterAvgOutputSubDir "T4"
        set ClusterAvgOutputSubDirFormat "T4"
        $widget(Radiobutton375_5) configure -state normal
        set ClusterFile "$ClusterDirOutput/T4/cluster_file.bin"
        }
    if {$DataFormatActive == "SPP"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        set ClusterFormat "SPP"
        set ClusterAvgOutputSubDir "C2"
        set ClusterAvgOutputSubDirFormat "C2"
        $widget(Radiobutton375_1) configure -state normal
        $widget(Radiobutton375_6) configure -state normal
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }    
    if {$DataFormatActive == "IPP"} {
        set ClusterDirInput $DataDir
        set ClusterOutputSubDir ""
        set ClusterFormat "IPP"
        set ClusterAvgOutputSubDir ""
        set ClusterAvgOutputSubDirFormat "IPP"
        $widget(Radiobutton375_6) configure -state normal
        set ClusterFile "$ClusterDirOutput/cluster_file.bin"
        }    
    set ConfigFile "$ClusterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$ClusterFile"] { 
            set ClusterFileInData $ClusterFile
            } else {
            set ClusterFileInData ""
            }  
       set ClusterAvgOutputDir $ClusterOutputDir
       append ClusterAvgOutputDir "_CLT"

        WidgetShow $widget(Toplevel375); TextEditorRunTrace "Open Window Data Clustering - Data Sets Averaging" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Data Sets Averaging} 
    $site_4_0.men58.m add separator \
        
    $site_4_0.men58.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global BatchDataDir BatchDirInput BatchDirOutput BatchOutputDir BatchDirOutputSubDir
global BatchFilter BatchFilterCase BatchNlook BatchNwinFilter
global BatchDecomp BatchBMPDecomp BatchNwinDecomp BatchHAalpha_planes 
global BatchWishart BatchWishartPourcentage BatchWishartIteration BatchNwinWishart BatchBMPWishart
global ColorMapWishart8 ColorMapPlanes9 ColorMapWishart16
global BatchProcessFonction PSPBackgroundColor

#BATCH PROCEDURE
global Load_BatchProcess Load_BatchProcessS2
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "C2"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }
if {$DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }
if {$DataFormatActive == "IPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$DataDir == ""} {
    set VarError ""
    set ErrorMessage "ENTER A DATA INPUT DIRECTORY FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {

    if {$DataFormatActive == "S2"} {
        if {$Load_BatchProcessS2 == 0} {
            source "GUI/batch_procedure/BatchProcessS2.tcl"
            set Load_BatchProcessS2 1
            WmTransient $widget(Toplevel234) $PSPTopLevel
            }
        $widget(Radiobutton234_3) configure -state disable
        $widget(Radiobutton234_4) configure -state disable
        $widget(Label234_3) configure -state disable
        $widget(Entry234_3) configure -state disable
        $widget(Label234_4a) configure -state disable
        $widget(Entry234_4a) configure -state disable
        $widget(Label234_4b) configure -state disable
        $widget(Entry234_4b) configure -state disable
        .top234.tit78 configure -text ""
        $widget(Radiobutton234_5) configure -state disable
        $widget(Radiobutton234_6) configure -state disable
        $widget(Radiobutton234_7) configure -state disable
        $widget(Radiobutton234_8) configure -state disable
        $widget(Checkbutton234_5) configure -state disable
        $widget(Label234_9) configure -state disable
        $widget(Label234_5a) configure -state disable
        $widget(Entry234_5a) configure -state disable
        $widget(Label234_5b) configure -state disable
        $widget(Entry234_5b) configure -state disable
        $widget(Label234_13) configure -state disable
        $widget(Entry234_13) configure -state disable
        $widget(Entry234_13) configure -disabledbackground $PSPBackgroundColor
        $widget(Button234_7) configure -state disable
        $widget(Button234_1) configure -state disable
        $widget(Label234_6) configure -state disable
        $widget(Entry234_6) configure -state disable
        $widget(Label234_7) configure -state disable
        $widget(Entry234_7) configure -state disable
        $widget(Label234_8a) configure -state disable
        $widget(Entry234_8a) configure -state disable
        $widget(Label234_8b) configure -state disable
        $widget(Entry234_8b) configure -state disable
        $widget(Label234_12) configure -state disable
        $widget(Entry234_12) configure -state disable
        $widget(Entry234_12) configure -disabledbackground $PSPBackgroundColor
        $widget(Button234_6) configure -state disable
        $widget(Button234_2) configure -state disable
        $widget(Label234_14) configure -state disable
        $widget(Entry234_14) configure -state disable
        $widget(Entry234_14) configure -disabledbackground $PSPBackgroundColor
        $widget(Button234_8) configure -state disable
        $widget(Button234_3) configure -state disable
        } else {
        if {$Load_BatchProcess == 0} {
            source "GUI/batch_procedure/BatchProcess.tcl"
            set Load_BatchProcess 1
            WmTransient $widget(Toplevel230) $PSPTopLevel
            }
        $widget(Radiobutton230_3) configure -state disable
        $widget(Radiobutton230_4) configure -state disable
        $widget(Label230_3) configure -state disable
        $widget(Entry230_3) configure -state disable
        $widget(Label230_4a) configure -state disable
        $widget(Entry230_4a) configure -state disable
        $widget(Label230_4b) configure -state disable
        $widget(Entry230_4b) configure -state disable
        $widget(Checkbutton230_5) configure -state disable
        $widget(Label230_9) configure -state disable
        $widget(Label230_5a) configure -state disable
        $widget(Entry230_5a) configure -state disable
        $widget(Label230_5b) configure -state disable
        $widget(Entry230_5b) configure -state disable
        $widget(Label230_13) configure -state disable
        $widget(Entry230_13) configure -state disable
        $widget(Entry230_13) configure -disabledbackground $PSPBackgroundColor
        $widget(Button230_7) configure -state disable
        $widget(Button230_1) configure -state disable
        $widget(Label230_6) configure -state disable
        $widget(Entry230_6) configure -state disable
        $widget(Label230_7) configure -state disable
        $widget(Entry230_7) configure -state disable
        $widget(Label230_8a) configure -state disable
        $widget(Entry230_8a) configure -state disable
        $widget(Label230_8b) configure -state disable
        $widget(Entry230_8b) configure -state disable
        $widget(Label230_12) configure -state disable
        $widget(Entry230_12) configure -state disable
        $widget(Entry230_12) configure -disabledbackground $PSPBackgroundColor
        $widget(Button230_6) configure -state disable
        $widget(Button230_2) configure -state disable
        $widget(Label230_14) configure -state disable
        $widget(Entry230_14) configure -state disable
        $widget(Entry230_14) configure -disabledbackground $PSPBackgroundColor
        $widget(Button230_8) configure -state disable
        $widget(Button230_3) configure -state disable
        }

    set BatchDataDir ""
    set BatchDirInput ""
    set BatchDirOutput ""
    set BatchOutputDir ""
    set BatchOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set BatchDirOutput $DataDir
    set BatchOutputDir $DataDir
    set BatchDataDir $DataDir
    if {$DataFormatActive == "S2"} {
        set BatchDirInput $DataDir
        set BatchOutputSubDir ""
        if { "$PolarCase" == "monostatic"} {set BatchProcessFonction "S2m"}
        if { "$PolarCase" == "bistatic"} {set BatchProcessFonction "S2b"}
        }       
    if { $DataFormatActive == "C3" } {
        set BatchDirInput "$DataDir/C3"
        set BatchOutputSubDir "C3"
        set BatchProcessFonction "C3"
        }
    if { $DataFormatActive == "T3" } {
        set BatchDirInput "$DataDir/T3"
        set BatchOutputSubDir "T3"
        set BatchProcessFonction "T3"
        }
    if { $DataFormatActive == "C4" } {
        set BatchDirInput "$DataDir/C4"
        set BatchOutputSubDir "C4"
        set BatchProcessFonction "C4"
        }
    if { $DataFormatActive == "T4" } {
        set BatchDirInput "$DataDir/T4"
        set BatchOutputSubDir "T4"
        set BatchProcessFonction "T4"
        }
    set ConfigFile "$BatchDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set BatchFilter 0
        set BatchFilterCase ""
        set BatchNlook ""
        set BatchNwinFilter ""
        set BatchDecomp 0
        set BatchBMPDecomp 0
        set BatchNwinDecomp ""
        set BatchHAalpha_planes 0
        set ColorMapPlanes9 ""
        set BatchWishart 0
        set BatchBMPWishart 0
        set BatchNwinWishart ""
        set BatchWishartPourcentage ""
        set BatchWishartIteration ""
        set ColorMapWishart8 ""
        set ColorMapWishart16 ""
        if {$DataFormatActive == "S2"} {
            WidgetShow $widget(Toplevel234); TextEditorRunTrace "Open Window Batch Procedure S2" "b"
            } else {
            WidgetShow $widget(Toplevel230); TextEditorRunTrace "Open Window Batch Procedure T3" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # DataDir
    }
# Config Format
}
}} \
        -label {Batch Process} 
    menubutton $site_4_0.men71 \
        -borderwidth 0 -menu "$site_4_0.men71.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men71" "PROEOSI" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men71 "$site_4_0.men71 Menubutton .top2.fra71.fra78 all _vTclBalloon"
    bind $site_4_0.men71 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men71.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men71.m add command \
        \
        -command {global DataDir CohDirInput CohDirOutput CohOutputDir CohOutputSubDir ConfigFile VarError ErrorMessage

#DATA PROCESS SNGL
global Load_CovarianceElementsT3 PSPTopLevel

if {$Load_CovarianceElementsT3 == 0} {
    source "GUI/data_process_sngl/CovarianceElementsT3.tcl"
    set Load_CovarianceElementsT3 1
    WmTransient $widget(Toplevel42) $PSPTopLevel
    }

set CohDirInput ""
set CohDirOutput ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set CohDirInput "$DataDir/T3"
    set CohDirOutput "$DataDir"
    set CohOutputDir "$DataDir"
    set CohOutputSubDir "T3"
    set BMPDirInput "$CohOutputDir/T3"
    set T3toT11 ""
    set T3toT12 ""
    set T3toT13 ""
    set T3toT22 ""
    set T3toT23 ""
    set T3toT33 ""
    set T3toSpan ""
    set BMPT3toT11 ""
    set BMPT3toT12 ""
    set BMPT3toT13 ""
    set BMPT3toT22 ""
    set BMPT3toT23 ""
    set BMPT3toT33 ""
    set BMPT3toSpan ""
    $widget(Checkbutton42_1) configure -state disable
    $widget(Checkbutton42_2) configure -state disable
    $widget(Checkbutton42_3) configure -state disable
    $widget(Checkbutton42_4) configure -state disable
    $widget(Checkbutton42_5) configure -state disable
    $widget(Checkbutton42_6) configure -state disable
    $widget(Checkbutton42_7) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel42); TextEditorRunTrace "Open Window Covariance Elements T3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Matrix Elements} 
    $site_4_0.men71.m add command \
        \
        -command {global DataDir RoDirInput RoDirOutput RoOutputDir RoOutputSubDir
global ConfigFile VarError ErrorMessage CorrelationFonction NwinRoL NwinRoC


#DATA PROCESS SNGL
global Load_CorrelationCoefficients3 PSPTopLevel

if {$Load_CorrelationCoefficients3 == 0} {
    source "GUI/data_process_sngl/CorrelationCoefficients3.tcl"
    set Load_CorrelationCoefficients3 1
    WmTransient $widget(Toplevel79) $PSPTopLevel
    }

set RoDirInput ""
set RoDirOutput ""
set RoOutputDir ""
set RoOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set RoDirInput "$DataDir/T3"
    set RoDirOutput $DataDir
    set RoOutputDir $DataDir
    set RoOutputSubDir "T3"
    set BMPDirInput "$RoDirOutput/T3"
    set NwinRoL "1"
    set NwinRoC "1"
    set Ro12 "0"
    set Ro13 "0"
    set Ro23 "0"
    set CCC "0"
    set CCCnorm "0"
    set BMPmodRo12 "0"
    set BMPphaRo12 "0"
    set BMPmodRo13 "0"
    set BMPphaRo13 "0"
    set BMPmodRo23 "0"
    set BMPphaRo23 "0"
    set BMPmodCCC "0"
    set BMPphaCCC "0"
    set BMPmodCCCnorm "0"
    set CorrelationFonction "T3"
    $widget(Checkbutton79_2) configure -state disable
    $widget(Checkbutton79_3) configure -state disable
    $widget(Checkbutton79_5) configure -state disable
    $widget(Checkbutton79_6) configure -state disable
    $widget(Checkbutton79_8) configure -state disable
    $widget(Checkbutton79_9) configure -state disable
    $widget(Checkbutton79_11) configure -state disable
    $widget(Checkbutton79_12) configure -state disable
    $widget(Checkbutton79_14) configure -state disable
    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel79); TextEditorRunTrace "Open Window Correlation Coefficients3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Correlation Coefficients} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add cascade \
        -menu "$site_4_0.men71.m.men71" -command {} \
        -label {Polarimetric Speckle Filter} 
    set site_6_0 $site_4_0.men71.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global NlookAnYang NwinLAnYang NwinCAnYang SwinLAnYang SwinCAnYang KAnYang

#SPECKLE FILTER
global Load_SpeckleFilterSigma PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookAnYang "1"
set NwinLAnYang "3"
set NwinCAnYang "3"
set SwinLAnYang "15"
set SwinCAnYang "15"
set KAnYang "20"

set FilterFonction "W. AN and J. YANG - Non Local Pretest Speckle Filter"
set FilterFunction "Soft/speckle_filter/an_yang_filter.exe"

if {$Load_SpeckleFilterAnYang == 0} {
    source "GUI/speckle_filter/SpeckleFilterAnYang.tcl"
    set Load_SpeckleFilterAnYang 1
    WmTransient $widget(Toplevel429) $PSPTopLevel
    }
$widget(TitleFrame429_1) configure -state disable
$widget(TitleFrame429_1) configure -text ""
$widget(Radiobutton429_1) configure -state disable
$widget(Radiobutton429_2) configure -state disable
$widget(Radiobutton429_3) configure -state disable
$widget(Radiobutton429_4) configure -state disable
$widget(Checkbutton429_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_PRE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel429); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {An-Yang Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_BOX"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterMaskFile

#SPECKLE FILTER
global Load_SpeckleFilterEdge PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterMaskFile ""
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter_edge.exe"

if {$Load_SpeckleFilterEdge == 0} {
    source "GUI/speckle_filter/SpeckleFilterEdge.tcl"
    set Load_SpeckleFilterEdge 1
    WmTransient $widget(Toplevel362) $PSPTopLevel
    }
$widget(TitleFrame362_1) configure -state disable
$widget(TitleFrame362_1) configure -text ""
$widget(Radiobutton362_1) configure -state disable
$widget(Radiobutton362_2) configure -state disable
$widget(Radiobutton362_3) configure -state disable
$widget(Radiobutton362_4) configure -state disable
$widget(Checkbutton362_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_EDG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car - Edge Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "GAUSSIAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/gaussian_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_GSS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Gaussian Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "50"
set NwinFilterC "1"
set FilterFonction "IDAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/idan_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_IDAN"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {IDAN Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "1"
set FilterFonction "LEE Refined Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_refined_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state normal
$widget(Entry25_1) configure -state normal
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LEE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Refined Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC
global NlookSigma Sigma NwinFilter NwinTgt

#SPECKLE FILTER
global Load_SpeckleFilterSigma PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookSigma "1"
set Sigma "0.9"
set NwinTgt "3"
set NwinFilter "9"
set FilterFonction "J.S. LEE Sigma Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_sigma_filter.exe"

if {$Load_SpeckleFilterSigma == 0} {
    source "GUI/speckle_filter/SpeckleFilterSigma.tcl"
    set Load_SpeckleFilterSigma 1
    WmTransient $widget(Toplevel352) $PSPTopLevel
    }
$widget(TitleFrame352_1) configure -state disable
$widget(TitleFrame352_1) configure -text ""
$widget(Radiobutton352_1) configure -state disable
$widget(Radiobutton352_2) configure -state disable
$widget(Radiobutton352_3) configure -state disable
$widget(Radiobutton352_4) configure -state disable
$widget(Checkbutton352_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_SIG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel352); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Sigma Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterNoise
global NitFilter ImprovedFilter WeightFilter StrgFilter

#SPECKLE FILTER
global Load_SpeckleFilterLopez PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set NitFilter "1"
set ImprovedFilter "0"
set WeightFilter "1."
set StrgFilter "1."

set FilterFonction "LOPEZ Speckle Filter"
set FilterFunction "Soft/speckle_filter/lopez_filter.exe"

if {$Load_SpeckleFilterLopez == 0} {
    source "GUI/speckle_filter/SpeckleFilterLopez.tcl"
    set Load_SpeckleFilterLopez 1
    WmTransient $widget(Toplevel365) $PSPTopLevel
    }
$widget(TitleFrame365_1) configure -state disable
$widget(TitleFrame365_1) configure -text ""
$widget(Radiobutton365_1) configure -state disable
$widget(Radiobutton365_2) configure -state disable
$widget(Radiobutton365_3) configure -state disable
$widget(Radiobutton365_4) configure -state disable
$widget(Checkbutton365_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LOP"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFonc "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel365); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lopez Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 
global FilterScattModelBasedDirInput FilterScattModelBasedDirOutput FilterScattModelBasedOutputDir FilterScattModelBasedOutputSubDir
global FilterScattModelBasedFonc FilterScattModelBasedNwinL FilterScattModelBasedType

#SPECKLE FILTER
global Load_SpeckleFilterScattModelBased PSPTopLevel

set FilterScattModelBasedDirInput ""
set FilterScattModelBasedDirOutput ""
set FilterScattModelBasedOutputDir ""
set FilterScattModelBasedOutputSubDir ""
set ConfigFile ""

set Nlook "1"
set FilterScattModelBasedNwinL "7"
set FilterScattModelBasedType "box"

if {$Load_SpeckleFilterScattModelBased == 0} {
    source "GUI/speckle_filter/SpeckleFilterScattModelBased.tcl"
    set Load_SpeckleFilterScattModelBased 1
    WmTransient $widget(Toplevel435) $PSPTopLevel
    }
$widget(TitleFrame435_1) configure -state disable
$widget(TitleFrame435_1) configure -text ""
$widget(Radiobutton435_1) configure -state disable
$widget(Radiobutton435_2) configure -state disable

set FilterScattModelBasedDirOutput $DataDir
set FilterScattModelBasedOutputDir $DataDir
append FilterScattModelBasedOutputDir "_SMB"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if { $DataFormatActive == "T3" } {
    set FilterScattModelBasedDirInput "$DataDir/T3"
    set FilterScattModelBasedOutputSubDir "T3"
    set FilterScattModelBasedFonc "T3"
    set ConfigFile "$FilterScattModelBasedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel435); TextEditorRunTrace "Open Window Scattering Model Based Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel435); TextEditorRunTrace "Close Window Scattering Model Based Speckle Filter" "b"
        }
    }} \
        -label {Scattering Model Based Filter} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter FilterFoncPWF
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "PWF Speckle Filter"
set FilterFunction "Soft/speckle_filter/PWF_filter.exe"
set FilterFonc "PWF"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
    if { $DataFormatActive == "T3" } {
        set FilterDirInput "$DataDir/T3"
        set FilterOutputSubDir "T3"
        set FilterFoncPWF "T3"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {PWF Filter} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global Fonction DataDir EdgeDirInput EdgeDirOutput EdgeFileInput EdgeFileOutput
global EdgeDetector EdgeCoeff InputFormat OutputFormat
#DATA PROCESS
global Load_EdgeDetector  PSPTopLevel
 
if {$Load_EdgeDetector == 0} {
    source "GUI/data_process_sngl/EdgeDetector.tcl"
    set Load_EdgeDetector 1
    WmTransient $widget(Toplevel337) $PSPTopLevel
    }

set EdgeDirInput "$DataDir/T3"
set EdgeDirOutput $EdgeDirInput
set InputFormat "float"
set OutputFormat "real"
set EdgeFileInput ""
set EdgeFileOutput "$EdgeDirOutput/canny_0.5.bin"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label337_1) configure -state disable
$widget(Entry337_1) configure -state disable
$widget(Label337_2) configure -state disable
$widget(Entry337_2) configure -state disable
$widget(Button337_1) configure -state disable
set MinBMP "Auto"
set MaxBMP "Auto"
set EdgeDetector "canny"
set EdgeCoeff "0.5"
WidgetShow $widget(Toplevel337); TextEditorRunTrace "Open Window Edge Detector" "b"} \
        -label {Edge Detector} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 
global SIRVDirInput SIRVDirOutput SIRVOutputDir SIRVOutputSubDir
global SIRVFonction SIRVFunction SIRVFonc SIRVNormFlag
global Nlook NwinSIRVL NwinSIRVC

#SPECKLE SIRV
global Load_SIRVEstimationRestoration PSPTopLevel

set SIRVDirInput ""
set SIRVDirOutput ""
set SIRVOutputDir ""
set SIRVOutputSubDir ""
set ConfigFile ""

set Nlook "1"
set NwinSIRVL "7"
set NwinSIRVC "7"
set SIRVFonction "J. Skou - H. Skriver Restoration"
set SIRVFunction "Soft/speckle_filter/skou_skriver_restoration.exe"
set SIRVNormFlag "0"

if {$Load_SIRVEstimationRestoration == 0} {
    source "GUI/speckle_filter/SIRVEstimationRestoration.tcl"
    set Load_SIRVEstimationRestoration 1
    WmTransient $widget(Toplevel433) $PSPTopLevel
    }
$widget(Label433_1) configure -state disable
$widget(Entry433_1) configure -state disable
$widget(Label433_2) configure -state normal
$widget(Entry433_2) configure -state normal
$widget(Label433_3) configure -state normal
$widget(Entry433_3) configure -state normal
$widget(TitleFrame433_1) configure -state disable
$widget(TitleFrame433_1) configure -text ""
$widget(Radiobutton433_1) configure -state disable
$widget(Radiobutton433_2) configure -state disable
$widget(Radiobutton433_3) configure -state disable
$widget(Radiobutton433_4) configure -state disable
$widget(Checkbutton433_1) configure -state disable

set SIRVDirOutput $DataDir
set SIRVOutputDir $DataDir
append SIRVOutputDir "_SSR"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "T3" } {
set SIRVDirInput "$DataDir/T3"
set SIRVOutputSubDir "T3"
set SIRVFonc "T3"
set ConfigFile "$SIRVDirInput/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
    } else {
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
    }
}} \
        -label {Skou-Skriver Restoration} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add cascade \
        -menu "$site_4_0.men71.m.men73" -command {} \
        -label {H / A / Alpha Decomposition} 
    set site_6_0 $site_4_0.men71.m
    menu $site_6_0.men73 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men73 add command \
        \
        -command {global DataDir HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ConfigFile VarError ErrorMessage HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC alpbetdelgam lambda alpha entropy anisotropy 
global combinationsHA CombHA CombH1mA Comb1mHA Comb1mH1mA
global BMPalpbetdelgam BMPlambda BMPalpha BMPentropy BMPanisotropy BMPcombinationsHA

#DATA PROCESS SNGL
global Load_HAAlphaDecomposition3 PSPTopLevel

if {$Load_HAAlphaDecomposition3 == 0} {
    source "GUI/data_process_sngl/HAAlphaDecomposition3_1.tcl"
    set Load_HAAlphaDecomposition3 1
    WmTransient $widget(Toplevel320) $PSPTopLevel
    }

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set HAAlpDirInput "$DataDir/T3"
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir "T3"
    set HAAlpDirOutput $DataDir
    set BMPDirInput "$HAAlpDirOutput/T3"
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaDecompositionFonction "T3"
        set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
        set alpbetdelgam "0"
        set lambda "0"; set alpha "0"
        set entropy "0"; set anisotropy "0"
        set combinationsHA "0"
        set CombHA "0"; set CombH1mA "0"
        set Comb1mHA "0"; set Comb1mH1mA "0"
        set BMPalpbetdelgam "0"
        set BMPlambda "0"; set BMPalpha "0"
        set BMPentropy "0"; set BMPanisotropy "0"
        set BMPcombinationsHA "0"
        $widget(Checkbutton320_1) configure -state disable
        $widget(Checkbutton320_2) configure -state disable
        $widget(Checkbutton320_3) configure -state disable
        $widget(Checkbutton320_4) configure -state disable
        $widget(Checkbutton320_5) configure -state disable
        $widget(Checkbutton320_6) configure -state disable
        $widget(Checkbutton320_7) configure -state disable
        $widget(Checkbutton320_8) configure -state disable
        $widget(Checkbutton320_9) configure -state disable
        $widget(Checkbutton320_10) configure -state disable
        $widget(Checkbutton320_11) configure -state disable
        WidgetShow $widget(Toplevel320); TextEditorRunTrace "Open Window H A Alpha Decomposition Parameters 3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Decomposition Parameters} 
    $site_6_0.men73 add command \
        \
        -command {global DataDir HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ConfigFile VarError ErrorMessage HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC alpha123 beta123 delta123 gamma123 alpbetdelgam
global BMPalpha123 BMPbeta123 BMPdelta123 BMPgamma123 BMPalpbetdelgam

#DATA PROCESS SNGL
global Load_HAAlphaEigenvector3 PSPTopLevel

if {$Load_HAAlphaEigenvector3 == 0} {
    source "GUI/data_process_sngl/HAAlphaDecomposition3_2.tcl"
    set Load_HAAlphaEigenvector3 1
    WmTransient $widget(Toplevel321) $PSPTopLevel
    }

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set HAAlpDirInput "$DataDir/T3"
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir "T3"
    set HAAlpDirOutput $DataDir
    set BMPDirInput "$HAAlpDirOutput/T3"
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaDecompositionFonction "T3"
        set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
        set alpha123 "0"; set beta123 "0"
        set delta123 "0"; set gamma123 "0"
        set alpbetdelgam "0"
        set BMPalpha123 "0"; set BMPbeta123 "0"
        set BMPdelta123 "0"; set BMPgamma123 "0"
        set BMPalpbetdelgam "0"
        $widget(Checkbutton321_1) configure -state disable
        $widget(Checkbutton321_2) configure -state disable
        $widget(Checkbutton321_3) configure -state disable
        $widget(Checkbutton321_4) configure -state disable
        $widget(Checkbutton321_6) configure -state disable
        $widget(Checkbutton321_5) configure -state disable
        WidgetShow $widget(Toplevel321); TextEditorRunTrace "Open Window H A Alpha Eigenvector Set Parameters 3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Eigenvector Set Parameters} 
    $site_6_0.men73 add command \
        \
        -command {global DataDir HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ConfigFile VarError ErrorMessage HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC eigenvalues probabilities anisotropy anisotropy12 erd polarisationasymetry
global polarisationfraction lueneburganisotropy vanzylrvi vanzylpedestal shannon
global BMPeigenvalues BMPprobabilities BMPanisotropy BMPanisotropy12 BMPerd BMPpolarisationasymetry
global BMPpolarisationfraction BMPlueneburganisotropy BMPvanzylrvi BMPvanzylpedestal BMPshannon

#DATA PROCESS SNGL
global Load_HAAlphaEigenvalue3 PSPTopLevel

if {$Load_HAAlphaEigenvalue3 == 0} {
    source "GUI/data_process_sngl/HAAlphaDecomposition3_3.tcl"
    set Load_HAAlphaEigenvalue3 1
    WmTransient $widget(Toplevel322) $PSPTopLevel
    }

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set HAAlpDirInput "$DataDir/T3"
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir "T3"
    set HAAlpDirOutput $DataDir
    set BMPDirInput "$HAAlpDirOutput/T3"
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaDecompositionFonction "T3"
        set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
        set eigenvalues "0"; set probabilities "0"
        set anisotropy "0"; set anisotropy12 "0"
        set erd "0"; set polarisationasymetry "0"
        set polarisationfraction "0"
        set lueneburganisotropy "0"
        set vanzylrvi "0"; set vanzylpedestal "0"
        set shannon "0"
        set BMPeigenvalues "0"; set BMPprobabilities "0"
        set BMPanisotropy "0"; set BMPanisotropy12 "0"
        set BMPerd "0"; set BMPpolarisationasymetry "0"
        set BMPpolarisationfraction "0"
        set BMPlueneburganisotropy "0"
        set BMPvanzylrvi "0"; set BMPvanzylpedestal "0"
        set BMPshannon "0"
        $widget(Checkbutton322_1) configure -state disable
        $widget(Checkbutton322_2) configure -state disable
        $widget(Checkbutton322_3) configure -state disable
        $widget(Checkbutton322_4) configure -state disable
        $widget(Checkbutton322_5) configure -state disable
        $widget(Checkbutton322_6) configure -state disable
        $widget(Checkbutton322_7) configure -state disable
        $widget(Checkbutton322_10) configure -state disable
        $widget(Checkbutton322_11) configure -state disable
        $widget(Checkbutton322_12) configure -state disable
        $widget(Checkbutton322_13) configure -state disable
        $widget(Checkbutton322_14) configure -state disable
        WidgetShow $widget(Toplevel322); TextEditorRunTrace "Open Window H A Alpha Eigenvalue Set Parameters 3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Eigenvalue Set Parameters} 
    $site_6_0.men73 add command \
        \
        -command {global DataDir DiversityDirInput DiversityDirOutput DiversityOutputDir DiversityOutputSubDir
global ConfigFile VarError ErrorMessage 
global NwinDiversityL NwinDiversityC 
global DiversityShannon DiversitySimpson DiversityInvSimpson 
global DiversityGini DiversityReyni2 DiversityReyni3
global DiversityReyni4 DiversityIQV DiversityPerplexity
global BMPshannon BMPsimpsonBMPinvsimpson
global BMPgini BMPreyni2 BMPreyni3
global BMPreyni4 BMPiqv BMPperplexity 

#DATA PROCESS SNGL
global Load_DiversityIndex PSPTopLevel

if {$Load_DiversityIndex == 0} {
    source "GUI/data_process_sngl/DiversityIndex.tcl"
    set Load_DiversityIndex 1
    WmTransient $widget(Toplevel444) $PSPTopLevel
    }

set DiversityDirInput ""
set DiversityDirOutput ""
set DiversityOutputDir ""
set DiversityOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinDiversityL "?"; set NwinDiversityC "?"; 
set DiversityShannon "0"
set DiversitySimpson "0"
set DiversityInvSimpson "0"
set DiversityGini "0"
set DiversityReyni2 "0"
set DiversityReyni3 "0"
set DiversityReyni4 "0"
set DiversityIQV "0"
set DiversityPerplexity "0"
set BMPshannon "0"
set BMPsimpson "0"
set BMPinvsimpson "0"
set BMPgini "0"
set BMPreyni2 "0"
set BMPreyni3 "0"
set BMPreyni4 "0"
set BMPiqv "0"
set BMPperplexity "0"

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set DiversityDirInput "$DataDir/T3"
    set DiversityOutputDir $DataDir
    set DiversityOutputSubDir "T3"
    set DiversityDirOutput $DataDir
    set BMPDirInput "$DiversityDirOutput/T3"
    set ConfigFile "$DiversityDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton444_1) configure -state disable
        $widget(Checkbutton444_2) configure -state disable
        $widget(Checkbutton444_3) configure -state disable
        $widget(Checkbutton444_4) configure -state disable
        $widget(Checkbutton444_5) configure -state disable
        $widget(Checkbutton444_6) configure -state disable
        $widget(Checkbutton444_7) configure -state disable
        $widget(Checkbutton444_10) configure -state disable
        $widget(Checkbutton444_14) configure -state disable
        WidgetShow $widget(Toplevel444); TextEditorRunTrace "Open Window Diversity Index" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Diversity Index} 
    $site_4_0.men71.m add command \
        \
        -command {global VarAdvice

set VarAdvice ""
Window show $widget(Toplevel387); TextEditorRunTrace "Open Window Advice" "b"
tkwait variable VarAdvice
set VarAdvice ""} \
        -label {Polarimetric Decompositions} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add command \
        \
        -command {global VarAdvice

set VarAdvice ""
Window show $widget(Toplevel387); TextEditorRunTrace "Open Window Advice" "b"
tkwait variable VarAdvice
set VarAdvice ""} \
        -label {Polarimetric Functionalities} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add cascade \
        -menu "$site_4_0.men71.m.men74" -command {} \
        -label {Polarimetric Segmentation} 
    set site_6_0 $site_4_0.men71.m
    menu $site_6_0.men74 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men74 add command \
        \
        -command {global DataDir HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ConfigFile VarError ErrorMessage ColorMapPlanes9 ColorMapPlanes27 COLORMAPDir
global HAAlphaClassifFonction
global entropy anisotropy alpha lambda
global NwinHAAlpL NwinHAAlpC Halpha_plane HA_plane Aalpha_plane HalphaLambda_plane
global CombHA CombH1mA Comb1mHA Comb1mH1mA
global RGBHAAlpha RGBCombHA RGBTuoTuo
        
#DATA PROCESS SNGL
global Load_HAAlphaClassification PSPTopLevel

if {$Load_HAAlphaClassification == 0} {
    source "GUI/data_process_sngl/HAAlphaClassification.tcl"
    set Load_HAAlphaClassification 1
    WmTransient $widget(Toplevel74) $PSPTopLevel
    }

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set ColorMapPlanes9 "$COLORMAPDir/Planes_H_A_Alpha_ColorMap9.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
set ColorMapPlanes27 "$COLORMAPDir/Planes_H_Alpha_Lambda_ColorMap27.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set HAAlpDirInput "$DataDir/T3"
    set HAAlpDirOutput $DataDir
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir "T3"
    set BMPDirInput "$HAAlpDirOutput/T3"
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaClassifFonction "T3"
        set NwinHAAlpL "?"; set NwinHAAlpC "?"; set Halpha_plane "0"; set HA_plane "0"; set Aalpha_plane "0"; set HalphaLambda_plane "0"
        set entropy "0"; set anisotropy "0"; set alpha "0"; set lambda "0"
        set CombHA "0"; set CombH1mA "0"; set Comb1mHA "0"; set Comb1mH1mA "0"
        set RGBHAAlpha "0"; set RGBCombHA "0"; set RGBTuoTuo "0"
        $widget(Button74_1) configure -state disable
        $widget(Button74_2) configure -state disable
        WidgetShow $widget(Toplevel74); TextEditorRunTrace "Open Window H A Alpha Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {H / A / Alpha Classification} 
    $site_6_0.men74 add command \
        \
        -command {global Fonction DataDir WishartDirInput WishartDirOutput WishartOutputDir WishartOutputSubDir
global ColorMapWishart8 ColorMapWishart16 RedPalette GreenPalette BluePalette COLORMAPDir
global ConfigFile VarError ErrorMessage BMPWishart WishartNwinL WishartNwinC WishartPourcentage WishartIteration
global ColorMapWishartCoded ColorMapWishartCodedPauli ColorMapWishartCodedSinclair
global WishartHAAlphaClassifFonction WishartHAAlpha
global WishartEntropy WishartAnisotropy WishartAlpha
global WishartEntropyFile WishartAnisotropyFile WishartAlphaFile

#DATA PROCESS SNGL
global Load_WishartHAAlphaClassification PSPTopLevel

if {$Load_WishartHAAlphaClassification == 0} {
    source "GUI/data_process_sngl/WishartHAAlphaClassification.tcl"
    set Load_WishartHAAlphaClassification 1
    WmTransient $widget(Toplevel26) $PSPTopLevel
    }

set WishartDirInput ""
set WishartDirOutput ""
set WishartOutputDir ""
set WishartOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set BMPWishart 1
set WishartNwinL 3; set WishartNwinC 3
set WishartPourcentage 10
set WishartIteration 10

set ColorMapWishart8 "$COLORMAPDir/Wishart_ColorMap8.pal"
set ColorMapWishart16 "$COLORMAPDir/Wishart_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
  
set ColorMapWishartCoded "0"
set ColorMapWishartCodedPauli "0"
set ColorMapWishartCodedSinclair "0"
$widget(Checkbutton26_1) configure -state disable
$widget(Checkbutton26_2) configure -state disable
$widget(Label26_1) configure -state disable
$widget(Label26_2) configure -state disable
$widget(Label26_3) configure -state disable
$widget(Label26_4) configure -state disable
$widget(Label26_5) configure -state disable
$widget(Label26_6) configure -state disable

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set WishartDirInput "$DataDir/T3"
    set WishartDirOutput $DataDir
    set WishartOutputDir $DataDir
    set WishartOutputSubDir "T3"
    set BMPDirInput "$WishartDirOutput/T3"
    set ConfigFile "$WishartDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set WishartHAAlphaClassifFonction "T3"
        set WishartEntropy ""; set WishartAnisotropy ""; set WishartAlpha ""
        set WishartEntropyFile ""; set WishartAnisotropyFile ""; set WishartAlphaFile ""
        WishartUpdate
        WidgetShow $widget(Toplevel26); TextEditorRunTrace "Open Window Wishart - H A Alpha Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {H / A / Alpha - Wishart Classification} 
    $site_6_0.men74 add separator \
        
    $site_6_0.men74 add command \
        \
        -command {global DataDir SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette CONFIGDir COLORMAPDir
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction VarTrainingArea
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCodedPauli ColorMapSupervisedCodedSinclair

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_WishartSupervisedClassification PSPTopLevel

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_WishartSupervisedClassification == 0} {
    source "GUI/data_process_sngl/WishartSupervisedClassification.tcl"
    set Load_WishartSupervisedClassification 1
    WmTransient $widget(Toplevel53) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedFonction "T3"
set Fonction "FULL-POLSAR SUPERVISED CLASSIFIER"
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set RejectClass 0
set RejectRatio ""
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCodedPauli "0"
set ColorMapSupervisedCodedSinclair "0"
$widget(Checkbutton53_1) configure -state disable
$widget(Checkbutton53_2) configure -state disable
$widget(Label53_1) configure -state disable
$widget(Label53_2) configure -state disable
$widget(Label53_3) configure -state disable
$widget(Label53_4) configure -state disable
$widget(Label53_5) configure -state disable
$widget(Label53_6) configure -state disable

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set SupervisedDirInput "$DataDir/T3"
    set SupervisedOutputDir $DataDir
    set SupervisedOutputSubDir "T3"
    set SupervisedDirOutput $DataDir
    set BMPDirInput "$SupervisedDirOutput/T3"
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedDirInput/wishart_training_areas.txt"] {
            set FileTrainingArea "$SupervisedDirInput/wishart_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
            } 

        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        $widget(Label53_7) configure -state disable
        $widget(Entry53_1) configure -state disable
        $widget(Button53_1) configure -state disable
        $widget(Button53_2) configure -state disable
        $widget(Button53_3) configure -state disable
        $widget(Button53_4) configure -state disable
        WidgetShow $widget(Toplevel53); TextEditorRunTrace "Open Window Wishart Supervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set SupervisedDirInput ""
        set SupervisedDirOutput ""
        set SupervisedOutputDir ""
        set SupervisedOutputSubDir ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Wishart Supervised Classification} 
    $site_6_0.men74 add command \
        \
        -command {global DataDir SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette CONFIGDir COLORMAPDir
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction VarTrainingArea
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCodedPauli ColorMapSupervisedCodedSinclair
global SupervisedThreshold SupervisedRedR

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_GPFSupervisedClassification PSPTopLevel

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_GPFSupervisedClassification == 0} {
    source "GUI/data_process_sngl/GPFSupervisedClassification.tcl"
    set Load_GPFSupervisedClassification 1
    WmTransient $widget(Toplevel445) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedFonction "T3"
set Fonction "FULL-POLSAR SUPERVISED CLASSIFIER"
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set SupervisedThreshold "0.98"
set SupervisedRedR "1.50"
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCodedPauli "0"
set ColorMapSupervisedCodedSinclair "0"
$widget(Checkbutton445_1) configure -state disable
$widget(Checkbutton445_2) configure -state disable
$widget(Label445_1) configure -state disable
$widget(Label445_2) configure -state disable
$widget(Label445_3) configure -state disable
$widget(Label445_4) configure -state disable
$widget(Label445_5) configure -state disable
$widget(Label445_6) configure -state disable

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set SupervisedDirInput "$DataDir/T3"
    set SupervisedOutputDir $DataDir
    set SupervisedOutputSubDir "T3"
    set SupervisedDirOutput $DataDir
    set BMPDirInput "$SupervisedDirOutput/T3"
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedDirInput/gpf_training_areas.txt"] {
            set FileTrainingArea "$SupervisedDirInput/gpf_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/gpf_training_areas.txt"
            } 

        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        $widget(Button445_1) configure -state disable
        $widget(Button445_3) configure -state disable
        $widget(Button445_4) configure -state disable
        WidgetShow $widget(Toplevel445); TextEditorRunTrace "Open Window G.P.F. Supervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set SupervisedDirInput ""
        set SupervisedDirOutput ""
        set SupervisedOutputDir ""
        set SupervisedOutputSubDir ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {G.P.F. Supervised Classification} 
    $site_6_0.men74 add separator \
        
    $site_6_0.men74 add command \
        \
        -command {global VarAdvice

set VarAdvice ""
Window show $widget(Toplevel387); TextEditorRunTrace "Open Window Advice" "b"
tkwait variable VarAdvice
set VarAdvice ""} \
        -label {Segmentation Procedures} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add command \
        \
        -command {global DataDir BatchDataDir BatchDirInput BatchDirOutput BatchOutputDir BatchDirOutputSubDir
global BatchFilter BatchFilterCase BatchNlook BatchNwinFilter
global BatchDecomp BatchBMPDecomp BatchNwinDecomp BatchHAalpha_planes 
global BatchWishart BatchWishartPourcentage BatchWishartIteration BatchNwinWishart BatchBMPWishart
global ColorMapWishart8 ColorMapPlanes9 ColorMapWishart16
global BatchProcessFonction PSPBackgroundColor
#BATCH PROCEDURE
global Load_BatchProcess PSPTopLevel

if {$Load_BatchProcess == 0} {
    source "GUI/batch_procedure/BatchProcess.tcl"
    set Load_BatchProcess 1
    WmTransient $widget(Toplevel230) $PSPTopLevel
    }

if {$DataDir == ""} {
    set VarError ""
    set ErrorMessage "ENTER A DATA INPUT DIRECTORY FIRST"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    } else {
    
set BatchDataDir ""
set BatchDirInput ""
set BatchDirOutput ""
set BatchOutputDir ""
set BatchOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set BatchDataDir $DataDir
    set BatchDirInput "$DataDir/T3"
    set BatchDirOutput $DataDir
    set BatchOutputDir $DataDir
    set BatchOutputSubDir "T3"
    set BatchProcessFonction "T3"
    set ConfigFile "$BatchDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set BatchFilter 0
        set BatchFilterCase ""
        set BatchNlook ""
        set BatchNwinFilter ""
        $widget(Radiobutton230_3) configure -state disable
        $widget(Radiobutton230_4) configure -state disable
        $widget(Label230_3) configure -state disable
        $widget(Entry230_3) configure -state disable
        $widget(Label230_4a) configure -state disable
        $widget(Entry230_4a) configure -state disable
        $widget(Label230_4b) configure -state disable
        $widget(Entry230_4b) configure -state disable

        set BatchDecomp 0
        set BatchBMPDecomp 0
        set BatchNwinDecomp ""
        set BatchHAalpha_planes 0
        set ColorMapPlanes9 ""
        $widget(Checkbutton230_5) configure -state disable
        $widget(Label230_9) configure -state disable
        $widget(Label230_5a) configure -state disable
        $widget(Entry230_5a) configure -state disable
        $widget(Label230_5b) configure -state disable
        $widget(Entry230_5b) configure -state disable
        $widget(Label230_13) configure -state disable
        $widget(Entry230_13) configure -state disable
        $widget(Entry230_13) configure -disabledbackground $PSPBackgroundColor
        $widget(Button230_7) configure -state disable
        $widget(Button230_1) configure -state disable

        set BatchWishart 0
        set BatchBMPWishart 0
        set BatchNwinWishart ""
        set BatchWishartPourcentage ""
        set BatchWishartIteration ""
        set ColorMapWishart8 ""
        set ColorMapWishart16 ""
        $widget(Label230_6) configure -state disable
        $widget(Entry230_6) configure -state disable
        $widget(Label230_7) configure -state disable
        $widget(Entry230_7) configure -state disable
        $widget(Label230_8a) configure -state disable
        $widget(Entry230_8a) configure -state disable
        $widget(Label230_8b) configure -state disable
        $widget(Entry230_8b) configure -state disable
        $widget(Label230_12) configure -state disable
        $widget(Entry230_12) configure -state disable
        $widget(Entry230_12) configure -disabledbackground $PSPBackgroundColor
        $widget(Button230_6) configure -state disable
        $widget(Button230_2) configure -state disable
        $widget(Label230_14) configure -state disable
        $widget(Entry230_14) configure -state disable
        $widget(Entry230_14) configure -disabledbackground $PSPBackgroundColor
        $widget(Button230_8) configure -state disable
        $widget(Button230_3) configure -state disable

        WidgetShow $widget(Toplevel230); TextEditorRunTrace "Open Window Batch Procedure T3" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }    
    
}} \
        -label {Batch Process} 
    menubutton $site_4_0.men75 \
        -borderwidth 0 -menu "$site_4_0.men75.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men75" "PRODPG" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men75 "$site_4_0.men75 Menubutton .top2.fra71.fra78 all _vTclBalloon"
    bind $site_4_0.men75 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men75.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men75.m add command \
        \
        -command {global DataDir IntDirInput IntDirOutput ConfigFile VarError ErrorMessage

#DATA PROCESS SNGL
global Load_IntensitiesElements PSPTopLevel

if {$Load_IntensitiesElements == 0} {
    source "GUI/data_process_sngl/IntensitiesElements.tcl"
    set Load_IntensitiesElements 1
    WmTransient $widget(Toplevel210) $PSPTopLevel
    }

set IntDirInput ""
set IntDirOutput ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file exists "$DataDir/config.txt"] {
set config "false"
if [file exists "$DataDir/I11.bin"] {set config "true"}
if [file exists "$DataDir/I22.bin"] {set config "true"}
if {$config == "true"} {
    set IntDirInput "$DataDir"
    set IntDirOutput "$DataDir"
    set BMPDirInput $IntDirOutput
    set IntI11 0
    set IntI21 0
    set IntI12 0
    set IntI22 0
    set IntSpan 0
    set IntContrast1 0
    set IntContrast2 0
    set BMPIntI11 0
    set BMPIntI21 0
    set BMPIntI12 0
    set BMPIntI22 0
    set BMPIntSpan 0
    set BMPIntContrast1 0
    set BMPIntContrast2 0
    $widget(Checkbutton210_1) configure -state disable
    $widget(Checkbutton210_2) configure -state disable
    $widget(Checkbutton210_3) configure -state disable
    $widget(Checkbutton210_4) configure -state disable
    $widget(Checkbutton210_5) configure -state disable
    set ConfigFile "$IntDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            } else {
                if { "$PolarType" == "full"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state normal
                    $widget(Checkbutton210_6) configure -state normal
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state normal
                    $widget(Checkbutton210_8) configure -state normal
                    $widget(Checkbutton210_9) configure -state disable
                    }
                if { "$PolarType" == "pp5"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state disable
                    $widget(Radiobutton210_9) configure -state disable
                    $widget(Radiobutton210_10) configure -state disable
                    $widget(Radiobutton210_11) configure -state disable
                    $widget(Label210_4) configure -state disable
                    $widget(Radiobutton210_13) configure -state disable
                    $widget(Radiobutton210_14) configure -state disable
                    $widget(Radiobutton210_15) configure -state disable
                    $widget(Label210_6) configure -state normal
                    $widget(Checkbutton210_6) configure -state normal
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp6"} {
                    $widget(Label210_1) configure -state disable
                    $widget(Radiobutton210_1) configure -state disable
                    $widget(Radiobutton210_2) configure -state disable
                    $widget(Radiobutton210_3) configure -state disable
                    $widget(Label210_2) configure -state disable
                    $widget(Radiobutton210_5) configure -state disable
                    $widget(Radiobutton210_6) configure -state disable
                    $widget(Radiobutton210_7) configure -state disable
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state normal
                    $widget(Checkbutton210_8) configure -state normal
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp7"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state disable
                    $widget(Radiobutton210_5) configure -state disable
                    $widget(Radiobutton210_6) configure -state disable
                    $widget(Radiobutton210_7) configure -state disable
                    $widget(Label210_3) configure -state disable
                    $widget(Radiobutton210_9) configure -state disable
                    $widget(Radiobutton210_10) configure -state disable
                    $widget(Radiobutton210_11) configure -state disable
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp4"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }
                WidgetShow $widget(Toplevel210); TextEditorRunTrace "Open Window Intensities Elements" "b"
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {( Ixx , Ixy ) Elements} 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add command \
        \
        -command {global DataDir ConvertDirInput ConvertDirOutput
global MultiLookRow MultiLookCol
global ConfigFile VarError ErrorMessage
#DATA CONVERT
global Load_DataFileConvert_Ipp PSPTopLevel

if {$Load_DataFileConvert_Ipp == 0} {
    source "GUI/data_convert/DataFileConvert_Ipp.tcl"
    set Load_DataFileConvert_Ipp 1
    WmTransient $widget(Toplevel24) $PSPTopLevel
    }

set ConvertDirInput ""
set ConvertDirOutput ""
set ConfigFile ""

if [file exists "$DataDir/config.txt"] {
set config "false"
if [file exists "$DataDir/I11.bin"] {set config "true"}
if [file exists "$DataDir/I22.bin"] {set config "true"}
if {$config == "true"} {
    set ConvertDirInput $DataDir
    set ConvertDirOutput $DataDir
    append ConvertDirOutput "_MLK"
    set ConfigFile "$ConvertDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {$ErrorMessage == ""} {
        if {$PolarCase != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ConvertDirInput ""; set ConvertDirOutput ""; set ConfigFile ""
            } else {
            $widget(Label24_1) configure -state normal
            $widget(Entry24_1) configure -state normal
            $widget(Label24_2) configure -state normal
            $widget(Entry24_2) configure -state normal
            set MultiLookRow "1"
            set MultiLookCol "1"
            set Fonction "INTENSITY PP TO INTENSITY PP MULTI LOOK"
            WidgetShow $widget(Toplevel24); TextEditorRunTrace "Open Window Data File Convert Ipp" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set ConvertDirInput ""; set ConvertDirOutput ""; set ConfigFile ""
        }
    } else {
    set ErrorMessage "CHANGE TO THE DATA MAIN INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
} else {
set ErrorMessage "ENTER A VALID DIRECTORY"
Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
tkwait variable VarError
}} \
        -label {( Ixx , Ixy ) >> ( Ixx , Ixy ) MLK} 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add cascade \
        -menu "$site_4_0.men75.m.men82" -command {} -label {Speckle Filter} 
    set site_6_0 $site_4_0.men75.m
    menu $site_6_0.men82 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men82 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_BOX"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car Filter} 
    $site_6_0.men82 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterMaskFile

#SPECKLE FILTER
global Load_SpeckleFilterEdge PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterMaskFile ""
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter_edge.exe"

if {$Load_SpeckleFilterEdge == 0} {
    source "GUI/speckle_filter/SpeckleFilterEdge.tcl"
    set Load_SpeckleFilterEdge 1
    WmTransient $widget(Toplevel362) $PSPTopLevel
    }
$widget(TitleFrame362_1) configure -state disable
$widget(TitleFrame362_1) configure -text ""
$widget(Radiobutton362_1) configure -state disable
$widget(Radiobutton362_2) configure -state disable
$widget(Radiobutton362_3) configure -state disable
$widget(Radiobutton362_4) configure -state disable
$widget(Checkbutton362_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_EDG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car - Edge Filter} 
    $site_6_0.men82 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "GAUSSIAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/gaussian_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_GSS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Gaussian Filter} 
    $site_6_0.men82 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "1"
set FilterFonction "LEE Refined Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_refined_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state normal
$widget(Entry25_1) configure -state normal
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LEE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Refined Filter} 
    $site_6_0.men82 add separator \
        
    $site_6_0.men82 add command \
        \
        -command {global Fonction DataDir EdgeDirInput EdgeDirOutput EdgeFileInput EdgeFileOutput
global EdgeDetector EdgeCoeff InputFormat OutputFormat
#DATA PROCESS
global Load_EdgeDetector PSPTopLevel
 
if {$Load_EdgeDetector == 0} {
    source "GUI/data_process_sngl/EdgeDetector.tcl"
    set Load_EdgeDetector 1
    WmTransient $widget(Toplevel337) $PSPTopLevel
    }

set EdgeDirInput "$DataDir"
set EdgeDirOutput $EdgeDirInput
set InputFormat "float"
set OutputFormat "real"
set EdgeFileInput ""
set EdgeFileOutput "$EdgeDirOutput/canny_0.5.bin"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label337_1) configure -state disable
$widget(Entry337_1) configure -state disable
$widget(Label337_2) configure -state disable
$widget(Entry337_2) configure -state disable
$widget(Button337_1) configure -state disable
set MinBMP "Auto"
set MaxBMP "Auto"
set EdgeDetector "canny"
set EdgeCoeff "0.5"
WidgetShow $widget(Toplevel337); TextEditorRunTrace "Open Window Edge Detector" "b"} \
        -label {Edge Detector} 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add command \
        \
        -command {global DataDir SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette CONFIGDir COLORMAPDir
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction 
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCoded1 ColorMapSupervisedCoded2

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_WishartSupervisedClassification_PP PSPTopLevel

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_WishartSupervisedClassification_PP == 0} {
    source "GUI/data_process_sngl/WishartSupervisedClassification_PP.tcl"
    set Load_WishartSupervisedClassification_PP 1
    WmTransient $widget(Toplevel212) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedFonction "IPP"
set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set RejectClass 0
set RejectRatio ""
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCoded1 "0"
set ColorMapSupervisedCoded2 "0"
$widget(Checkbutton212_1) configure -state disable
$widget(Checkbutton212_2) configure -state disable
$widget(Label212_1) configure -state disable
$widget(Label212_2) configure -state disable
$widget(Label212_3) configure -state disable
$widget(Label212_4) configure -state disable
$widget(Label212_5) configure -state disable
$widget(Label212_6) configure -state disable

if [file exists "$DataDir/config.txt"] {
set config "false"
if [file exists "$DataDir/I11.bin"] {set config "true"}
if [file exists "$DataDir/I22.bin"] {set config "true"}
if {$config == "true"} {
    set SupervisedDirInput $DataDir
    set SupervisedOutputDir $DataDir
    set SupervisedOutputSubDir ""
    set SupervisedDirOutput $DataDir
    set BMPDirInput $SupervisedDirOutput
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            set SupervisedDirInput ""
            set SupervisedDirOutput ""
            set SupervisedOutputDir ""
            set SupervisedOutputSubDir ""
            } else {
            if [file exists "$SupervisedOutputDir/wishart_training_areas.txt"] {
                set FileTrainingArea "$SupervisedOutputDir/wishart_training_areas.txt"
                } else {
                set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
                } 

            set NTrainingArea(0) 0        
            set AreaPoint(0) 0
            set AreaPointLig(0) 0
            set AreaPointCol(0) 0
            set f [open $FileTrainingArea r]
            gets $f tmp
            gets $f NTrainingAreaClass
            gets $f tmp
            for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
                gets $f tmp
                gets $f tmp
                gets $f NTrainingArea($i)
                gets $f tmp
                for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                    gets $f tmp
                    gets $f NAreaPoint
                    set Argument [expr (100*$i + $j)]
                    set AreaPoint($Argument) $NAreaPoint
                    for {set k 1} {$k <= $NAreaPoint} {incr k} {
                        gets $f tmp
                        set Argument1 [expr (10000*$i + 100*$j + $k)]
                        gets $f tmp
                        gets $f AreaPointLig($Argument1)
                        gets $f tmp
                        gets $f AreaPointCol($Argument1)
                        }
                    gets $f tmp
                    }
                }
            close $f

            set AreaClassN 1
            set AreaN 1
            $widget(Label212_7) configure -state disable
            $widget(Entry212_1) configure -state disable
            $widget(Button212_1) configure -state disable
            $widget(Button212_2) configure -state disable
            $widget(Button212_3) configure -state disable
            $widget(Button212_4) configure -state disable
            WidgetShow $widget(Toplevel212); TextEditorRunTrace "Open Window Wishart Supervised Classification" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set SupervisedDirInput ""
        set SupervisedDirOutput ""
        set SupervisedOutputDir ""
        set SupervisedOutputSubDir ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Wishart Supervised Classification} 
    menubutton $site_4_0.men77 \
        -borderwidth 0 -menu "$site_4_0.men77.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men77" "PRODPS" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men77 "$site_4_0.men77 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men77 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men77.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men77.m add command \
        \
        -command {global DataDir CovDirInput CovDirOutput CovOutputDir CovOutputSubDir 
global ConfigFile VarError ErrorMessage

#DATA PROCESS SNGL
global Load_CovarianceElementsC2 PSPTopLevel

if {$Load_CovarianceElementsC2 == 0} {
    source "GUI/data_process_sngl/CovarianceElementsC2.tcl"
    set Load_CovarianceElementsC2 1
    WmTransient $widget(Toplevel23) $PSPTopLevel
    }

set CovDirInput ""
set CovDirOutput ""
set CovOutputDir ""
set CovOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set CovDirInput "$DataDir/C2"
    set CovOutputDir "$DataDir"
    set CovOutputSubDir "C2"
    set CovDirOutput "$DataDir"
    set BMPDirInput "$CovDirOutput/C2"
    set C2toC11 ""
    set C2toC12 ""
    set C2toC22 ""
    set C2toSpan ""
    set BMPC2toC11 ""
    set BMPC2toC12 ""
    set BMPC2toC22 ""
    set BMPC2toSpan ""
    $widget(Checkbutton23_1) configure -state disable
    $widget(Checkbutton23_2) configure -state disable
    $widget(Checkbutton23_3) configure -state disable
    $widget(Checkbutton23_4) configure -state disable
    set ConfigFile "$CovDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "pp4"} {
            WidgetShow $widget(Toplevel23); TextEditorRunTrace "Open Window Covariance Elements C2" "b"
            } else {
            set ErrorMessage "IMPOSSIBLE WITH PARTIAL POLAR PP4"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set CovDirInput ""
            set CovDirOutput ""
            set CovOutputDir ""
            set CovOutputSubDir ""
            set Fonction ""; set Fonction2 ""
            set ConfigFile ""
            }    
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set CovDirInput ""
        set CovDirOutput ""
        set CovOutputDir ""
        set CovOutputSubDir ""
        set Fonction ""; set Fonction2 ""
        set ConfigFile ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Matrix Elements} 
    $site_4_0.men77.m add command \
        \
        -command {global DataDir RoDirInput RoDirOutput RoOutputDir RoOutputSubDir
global ConfigFile VarError ErrorMessage CorrelationFonction NwinRoL NwinRoC


#DATA PROCESS SNGL
global Load_CorrelationCoefficients2 PSPTopLevel

if {$Load_CorrelationCoefficients2 == 0} {
    source "GUI/data_process_sngl/CorrelationCoefficients2.tcl"
    set Load_CorrelationCoefficients2 1
    WmTransient $widget(Toplevel80) $PSPTopLevel
    }

set RoDirInput ""
set RoDirOutput ""
set RoOutputDir ""
set RoOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set RoDirInput "$DataDir/C2"
    set RoOutputDir $DataDir
    set RoOutputSubDir "C2"
    set RoDirOutput $DataDir
    set BMPDirInput "$RoDirOutput/C2"
    set NwinRoL "1"
    set NwinRoC "1"
    set Ro12 "0"
    set BMPmodRo12 "0"
    set BMPphaRo12 "0"
    set CorrelationFonction "C2"
    $widget(Checkbutton80_2) configure -state disable
    $widget(Checkbutton80_3) configure -state disable
    set ConfigFile "$RoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel80); TextEditorRunTrace "Open Window Correlation Coefficients2" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set RoDirInput ""
        set RoDirOutput ""
        set RoOutputDir ""
        set RoOutputSubDir ""
        set Fonction ""; set Fonction2 ""
        set ConfigFile ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Correlation Coefficients} 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add cascade \
        -menu "$site_4_0.men77.m.men71" -command {} \
        -label {Polarimetric Speckle Filter} 
    set site_6_0 $site_4_0.men77.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global NlookAnYang NwinLAnYang NwinCAnYang SwinLAnYang SwinCAnYang KAnYang

#SPECKLE FILTER
global Load_SpeckleFilterSigma PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookAnYang "1"
set NwinLAnYang "3"
set NwinCAnYang "3"
set SwinLAnYang "15"
set SwinCAnYang "15"
set KAnYang "20"

set FilterFonction "W. AN and J. YANG - Non Local Pretest Speckle Filter"
set FilterFunction "Soft/speckle_filter/an_yang_filter.exe"

if {$Load_SpeckleFilterAnYang == 0} {
    source "GUI/speckle_filter/SpeckleFilterAnYang.tcl"
    set Load_SpeckleFilterAnYang 1
    WmTransient $widget(Toplevel429) $PSPTopLevel
    }
$widget(TitleFrame429_1) configure -state disable
$widget(TitleFrame429_1) configure -text ""
$widget(Radiobutton429_1) configure -state disable
$widget(Radiobutton429_2) configure -state disable
$widget(Radiobutton429_3) configure -state disable
$widget(Radiobutton429_4) configure -state disable
$widget(Checkbutton429_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_PRE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" || $DataFormatActive == "T2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    if { $DataFormatActive == "T2" } {
        set FilterDirInput "$DataDir/T2"
        set FilterOutputSubDir "T2"
        set FilterFonc "T2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel429); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel429); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {An-Yang Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_BOX"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterMaskFile

#SPECKLE FILTER
global Load_SpeckleFilterEdge PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterMaskFile ""
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter_edge.exe"

if {$Load_SpeckleFilterEdge == 0} {
    source "GUI/speckle_filter/SpeckleFilterEdge.tcl"
    set Load_SpeckleFilterEdge 1
    WmTransient $widget(Toplevel362) $PSPTopLevel
    }
$widget(TitleFrame362_1) configure -state disable
$widget(TitleFrame362_1) configure -text ""
$widget(Radiobutton362_1) configure -state disable
$widget(Radiobutton362_2) configure -state disable
$widget(Radiobutton362_3) configure -state disable
$widget(Radiobutton362_4) configure -state disable
$widget(Checkbutton362_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_EDG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car - Edge Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "GAUSSIAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/gaussian_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_GSS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Gaussian Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "50"
set NwinFilterC "1"
set FilterFonction "IDAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/idan_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_IDAN"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {IDAN Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "1"
set FilterFonction "LEE Refined Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_refined_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state normal
$widget(Entry25_1) configure -state normal
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LEE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Refined Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC
global NlookSigma Sigma NwinFilter NwinTgt

#SPECKLE FILTER
global Load_SpeckleFilterSigma PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set NlookSigma "1"
set Sigma "0.9"
set NwinTgt "3"
set NwinFilter "9"
set FilterFonction "J.S. LEE Sigma Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_sigma_filter.exe"

if {$Load_SpeckleFilterSigma == 0} {
    source "GUI/speckle_filter/SpeckleFilterSigma.tcl"
    set Load_SpeckleFilterSigma 1
    WmTransient $widget(Toplevel352) $PSPTopLevel
    }
$widget(TitleFrame352_1) configure -state disable
$widget(TitleFrame352_1) configure -text ""
$widget(Radiobutton352_1) configure -state disable
$widget(Radiobutton352_2) configure -state disable
$widget(Radiobutton352_3) configure -state disable
$widget(Radiobutton352_4) configure -state disable
$widget(Checkbutton352_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_SIG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel352); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel352); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Sigma Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterNoise
global NitFilter ImprovedFilter WeightFilter StrgFilter

#SPECKLE FILTER
global Load_SpeckleFilterLopez PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set NitFilter "1"
set ImprovedFilter "0"
set WeightFilter "1."
set StrgFilter "1."

set FilterFonction "LOPEZ Speckle Filter"
set FilterFunction "Soft/speckle_filter/lopez_filter.exe"

if {$Load_SpeckleFilterLopez == 0} {
    source "GUI/speckle_filter/SpeckleFilterLopez.tcl"
    set Load_SpeckleFilterLopez 1
    WmTransient $widget(Toplevel365) $PSPTopLevel
    }
$widget(TitleFrame365_1) configure -state disable
$widget(TitleFrame365_1) configure -text ""
$widget(Radiobutton365_1) configure -state disable
$widget(Radiobutton365_2) configure -state disable
$widget(Radiobutton365_3) configure -state disable
$widget(Radiobutton365_4) configure -state disable
$widget(Checkbutton365_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LOP"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFonc "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel365); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel365); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lopez Filter} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter FilterFoncPWF
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "PWF Speckle Filter"
set FilterFunction "Soft/speckle_filter/PWF_filter.exe"
set FilterFonc "PWF"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir ""

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
    if { $DataFormatActive == "C2" } {
        set FilterDirInput "$DataDir/C2"
        set FilterOutputSubDir "C2"
        set FilterFoncPWF "C2"
        }
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {P.W.F Filter} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global Fonction DataDir EdgeDirInput EdgeDirOutput EdgeFileInput EdgeFileOutput
global EdgeDetector EdgeCoeff InputFormat OutputFormat
#DATA PROCESS
global Load_EdgeDetector PSPTopLevel
 
if {$Load_EdgeDetector == 0} {
    source "GUI/data_process_sngl/EdgeDetector.tcl"
    set Load_EdgeDetector 1
    WmTransient $widget(Toplevel337) $PSPTopLevel
    }

set EdgeDirInput "$DataDir/C2"
set EdgeDirOutput $EdgeDirInput
set InputFormat "float"
set OutputFormat "real"
set EdgeFileInput ""
set EdgeFileOutput "$EdgeDirOutput/canny_0.5.bin"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label337_1) configure -state disable
$widget(Entry337_1) configure -state disable
$widget(Label337_2) configure -state disable
$widget(Entry337_2) configure -state disable
$widget(Button337_1) configure -state disable
set MinBMP "Auto"
set MaxBMP "Auto"
set EdgeDetector "canny"
set EdgeCoeff "0.5"
WidgetShow $widget(Toplevel337); TextEditorRunTrace "Open Window Edge Detector" "b"} \
        -label {Edge Detector} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 
global SIRVDirInput SIRVDirOutput SIRVOutputDir SIRVOutputSubDir
global SIRVFonction SIRVFunction SIRVFonc SIRVNormFlag
global Nlook NwinSIRVL NwinSIRVC

#SPECKLE SIRV
global Load_SIRVEstimationRestoration PSPTopLevel

set SIRVDirInput ""
set SIRVDirOutput ""
set SIRVOutputDir ""
set SIRVOutputSubDir ""
set ConfigFile ""

set Nlook "1"
set NwinSIRVL "7"
set NwinSIRVC "7"
set SIRVFonction "J. Skou - H. Skriver Restoration"
set SIRVFunction "Soft/speckle_filter/skou_skriver_restoration.exe"
set SIRVNormFlag "0"

if {$Load_SIRVEstimationRestoration == 0} {
    source "GUI/speckle_filter/SIRVEstimationRestoration.tcl"
    set Load_SIRVEstimationRestoration 1
    WmTransient $widget(Toplevel433) $PSPTopLevel
    }
$widget(Label433_1) configure -state disable
$widget(Entry433_1) configure -state disable
$widget(Label433_2) configure -state normal
$widget(Entry433_2) configure -state normal
$widget(Label433_3) configure -state normal
$widget(Entry433_3) configure -state normal
$widget(TitleFrame433_1) configure -state disable
$widget(TitleFrame433_1) configure -text ""
$widget(Radiobutton433_1) configure -state disable
$widget(Radiobutton433_2) configure -state disable
$widget(Radiobutton433_3) configure -state disable
$widget(Radiobutton433_4) configure -state disable
$widget(Checkbutton433_1) configure -state disable

set SIRVDirOutput $DataDir
set SIRVOutputDir $DataDir
append SIRVOutputDir "_SSR"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "C2" } {
set SIRVDirInput "$DataDir/C2"
set SIRVOutputSubDir "C2"
set SIRVFonc "C2"
set ConfigFile "$SIRVDirInput/config.txt"
set ErrorMessage ""
LoadConfig
if {"$ErrorMessage" == ""} {
    WidgetShow $widget(Toplevel433); TextEditorRunTrace "Open Window Estimation Restoration" "b"
    } else {
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    Window hide $widget(Toplevel433); TextEditorRunTrace "Close Window Estimation Restoration" "b"
    }
}} \
        -label {Skou-Skriver Restoration} 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add command \
        \
        -command {global DataDir HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ConfigFile VarError ErrorMessage
global HAAlphaDecompositionFonction HAAlphaDecompositionFunction
global NwinHAAlpL NwinHAAlpC eigenvalues probabilities alpha12 delta12 alpdel
global lambda alpha entropy anisotropy shannon
global combinationsHA CombHA CombH1mA Comb1mHA Comb1mH1mA
global BMPeigenvalues BMPprobabilities BMPalpha12 BMPdelta12
global BMPalpdel BMPlambda BMPalpha BMPentropy BMPanisotropy
global BMPcombinationsHA BMPshannon

#DATA PROCESS SNGL
global Load_HAAlphaDecomposition2 PSPTopLevel

if {$Load_HAAlphaDecomposition2 == 0} {
    source "GUI/data_process_sngl/HAAlphaDecomposition2.tcl"
    set Load_HAAlphaDecomposition2 1
    WmTransient $widget(Toplevel93) $PSPTopLevel
    }

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set HAAlpDirInput "$DataDir/C2"
    set HAAlpOutputDir $DataDir
    set HAAlpOutputSubDir "C2"
    set HAAlpDirOutput $DataDir
    set BMPDirInput "$HAAlpDirOutput/C2"
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HAAlphaDecompositionFonction "C2"
        set HAAlphaDecompositionFunction "Soft/data_process_sngl/h_a_alpha_decomposition_C2.exe"
        set NwinHAAlpL "?"; set NwinHAAlpC "?"
        set eigenvalues "0"
        set probabilities "0"
        set alpha12 "0"
        set delta12 "0"
        set alpdel "0"
        set lambda "0"
        set alpha "0"
        set entropy "0"
        set anisotropy "0"
        set combinationsHA "0"
        set CombHA "0"
        set CombH1mA "0"
        set Comb1mHA "0"
        set Comb1mH1mA "0"
        set shannon "0"
        set BMPeigenvalues "0"
        set BMPprobabilities "0"
        set BMPalpha12 "0"
        set BMPdelta12 "0"
        set BMPalpdel "0"
        set BMPlambda "0"
        set BMPalpha "0"
        set BMPentropy "0"
        set BMPanisotropy "0"
        set BMPcombinationsHA "0"
        set BMPshannon "0"
        $widget(Checkbutton93_1) configure -state disable
        $widget(Checkbutton93_2) configure -state disable
        $widget(Checkbutton93_3) configure -state disable
        $widget(Checkbutton93_4) configure -state disable
        $widget(Checkbutton93_5) configure -state disable
        $widget(Checkbutton93_6) configure -state disable
        $widget(Checkbutton93_7) configure -state disable
        $widget(Checkbutton93_8) configure -state disable
        $widget(Checkbutton93_9) configure -state disable
        $widget(Checkbutton93_10) configure -state disable
        $widget(Checkbutton93_11) configure -state disable
        $widget(Checkbutton93_12) configure -state disable
        $widget(Checkbutton93_13) configure -state disable
        $widget(Checkbutton93_14) configure -state disable
        $widget(Checkbutton93_15) configure -state disable
        WidgetShow $widget(Toplevel93); TextEditorRunTrace "Open Window H A Alpha Decomposition 2" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set HAAlpDirInput ""
        set HAAlpDirOutput ""
        set HAAlpOutputDir ""
        set HAAlpOutputSubDir ""
        set Fonction ""; set Fonction2 ""
        set ConfigFile ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {H / A / Alpha Decomposition} 
    $site_4_0.men77.m add command \
        \
        -command {global DataDir DiversityDirInput DiversityDirOutput DiversityOutputDir DiversityOutputSubDir
global ConfigFile VarError ErrorMessage 
global NwinDiversityL NwinDiversityC 
global DiversityShannon DiversitySimpson DiversityInvSimpson 
global DiversityGini DiversityReyni2 DiversityReyni3
global DiversityReyni4 DiversityIQV DiversityPerplexity
global BMPshannon BMPsimpsonBMPinvsimpson
global BMPgini BMPreyni2 BMPreyni3
global BMPreyni4 BMPiqv BMPperplexity 

#DATA PROCESS SNGL
global Load_DiversityIndex PSPTopLevel

if {$Load_DiversityIndex == 0} {
    source "GUI/data_process_sngl/DiversityIndex.tcl"
    set Load_DiversityIndex 1
    WmTransient $widget(Toplevel444) $PSPTopLevel
    }

set DiversityDirInput ""
set DiversityDirOutput ""
set DiversityOutputDir ""
set DiversityOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set NwinDiversityL "?"; set NwinDiversityC "?"; 
set DiversityShannon "0"
set DiversitySimpson "0"
set DiversityInvSimpson "0"
set DiversityGini "0"
set DiversityReyni2 "0"
set DiversityReyni3 "0"
set DiversityReyni4 "0"
set DiversityIQV "0"
set DiversityPerplexity "0"
set BMPshannon "0"
set BMPsimpson "0"
set BMPinvsimpson "0"
set BMPgini "0"
set BMPreyni2 "0"
set BMPreyni3 "0"
set BMPreyni4 "0"
set BMPiqv "0"
set BMPperplexity "0"

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set DiversityDirInput "$DataDir/C2"
    set DiversityOutputDir $DataDir
    set DiversityOutputSubDir "C2"
    set DiversityDirOutput $DataDir
    set BMPDirInput "$DiversityDirOutput/C2"
    set ConfigFile "$DiversityDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton444_1) configure -state disable
        $widget(Checkbutton444_2) configure -state disable
        $widget(Checkbutton444_3) configure -state disable
        $widget(Checkbutton444_4) configure -state disable
        $widget(Checkbutton444_5) configure -state disable
        $widget(Checkbutton444_6) configure -state disable
        $widget(Checkbutton444_7) configure -state disable
        $widget(Checkbutton444_10) configure -state disable
        $widget(Checkbutton444_14) configure -state disable
        WidgetShow $widget(Toplevel444); TextEditorRunTrace "Open Window Diversity Index" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Diversity Index} 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global WishartDirInput WishartDirOutput WishartOutputDir WishartOutputSubDir
global ColorMapWishart8 ColorMapWishart16 RedPalette GreenPalette BluePalette
global BMPWishart WishartNwinL WishartNwinC WishartPourcentage WishartIteration
global ColorMapWishartCoded ColorMapWishartCodedPauli ColorMapWishartCodedSinclair
global WishartHAAlphaClassifFonction WishartHAAlpha
global WishartEntropy WishartAnisotropy WishartAlpha
global WishartEntropyFile WishartAnisotropyFile WishartAlphaFile

#DATA PROCESS SNGL
global Load_WishartHAAlphaClassification_PP 
global PSPTopLevel

if {$Load_WishartHAAlphaClassification_PP == 0} {
    source "GUI/data_process_sngl/WishartHAAlphaClassification_PP.tcl"
    set Load_WishartHAAlphaClassification_PP 1
    WmTransient $widget(Toplevel432) $PSPTopLevel
    }
    
set WishartDirInput ""
set WishartDirOutput ""
set WishartOutputDir ""
set WishartOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""
    
set BMPWishart 1
set WishartNwinL 3; set WishartNwinC 3
set WishartPourcentage 10
set WishartIteration 10
    
set ColorMapWishart8 "$COLORMAPDir/Wishart_ColorMap8.pal"
set ColorMapWishart16 "$COLORMAPDir/Wishart_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
  
set ColorMapWishartCoded "0"
set ColorMapWishartCodedPauli "0"
set ColorMapWishartCodedSinclair "0"
$widget(Checkbutton432_1) configure -state disable
$widget(Checkbutton432_2) configure -state disable
$widget(Label432_1) configure -state disable
$widget(Label432_2) configure -state disable
$widget(Label432_3) configure -state disable
$widget(Label432_4) configure -state disable
$widget(Label432_5) configure -state disable
$widget(Label432_6) configure -state disable

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set WishartDirInput "$DataDir/C2"
    set WishartOutputSubDir "C2"
    set BMPDirInput "$WishartDirOutput/C2"
    set WishartHAAlphaClassifFonction "C2"

    set ConfigFile "$WishartDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set WishartEntropy ""; set WishartAnisotropy ""; set WishartAlpha ""
        set WishartEntropyFile ""; set WishartAnisotropyFile ""; set WishartAlphaFile ""
        WishartUpdatePP
        WidgetShow $widget(Toplevel432); TextEditorRunTrace "Open Window Wishart - H A Alpha Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {H / A / Alpha - Wishart Classification} 
    $site_4_0.men77.m add command \
        \
        -command {global DataDir SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette CONFIGDir COLORMAPDir
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction 
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCoded1 ColorMapSupervisedCoded2

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_WishartSupervisedClassification_PP PSPTopLevel

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_WishartSupervisedClassification_PP == 0} {
    source "GUI/data_process_sngl/WishartSupervisedClassification_PP.tcl"
    set Load_WishartSupervisedClassification_PP 1
    WmTransient $widget(Toplevel212) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedFonction "C2"
set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set RejectClass 0
set RejectRatio ""
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCoded1 "0"
set ColorMapSupervisedCoded2 "0"
$widget(Checkbutton212_1) configure -state disable
$widget(Checkbutton212_2) configure -state disable
$widget(Label212_1) configure -state disable
$widget(Label212_2) configure -state disable
$widget(Label212_3) configure -state disable
$widget(Label212_4) configure -state disable
$widget(Label212_5) configure -state disable
$widget(Label212_6) configure -state disable

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set SupervisedDirInput "$DataDir/C2"
    set SupervisedOutputDir $DataDir
    set SupervisedOutputSubDir "C2"
    set SupervisedDirOutput $DataDir
    set BMPDirInput "$SupervisedDirOutput/C2"
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedDirInput/wishart_training_areas.txt"] {
            set FileTrainingArea "$SupervisedDirInput/wishart_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
            } 

        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        $widget(Label212_7) configure -state disable
        $widget(Entry212_1) configure -state disable
        $widget(Button212_1) configure -state disable
        $widget(Button212_2) configure -state disable
        $widget(Button212_3) configure -state disable
        $widget(Button212_4) configure -state disable
        WidgetShow $widget(Toplevel212); TextEditorRunTrace "Open Window Wishart Supervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set SupervisedDirInput ""
        set SupervisedDirOutput ""
        set SupervisedOutputDir ""
        set SupervisedOutputSubDir ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Wishart Supervised Classification} 
    $site_4_0.men77.m add command \
        \
        -command {global DataDir SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette CONFIGDir COLORMAPDir
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction 
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCoded1 ColorMapSupervisedCoded2
global SupervisedThreshold SupervisedRedR

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_GPFSupervisedClassification_PP PSPTopLevel

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_GPFSupervisedClassification_PP == 0} {
    source "GUI/data_process_sngl/GPFSupervisedClassification_PP.tcl"
    set Load_GPFSupervisedClassification_PP 1
    WmTransient $widget(Toplevel446) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedFonction "C2"
set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set SupervisedThreshold "0.98"
set SupervisedRedR "1.50"
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCoded1 "0"
set ColorMapSupervisedCoded2 "0"
$widget(Checkbutton446_1) configure -state disable
$widget(Checkbutton446_2) configure -state disable
$widget(Label446_1) configure -state disable
$widget(Label446_2) configure -state disable
$widget(Label446_3) configure -state disable
$widget(Label446_4) configure -state disable
$widget(Label446_5) configure -state disable
$widget(Label446_6) configure -state disable

if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set SupervisedDirInput "$DataDir/C2"
    set SupervisedOutputDir $DataDir
    set SupervisedOutputSubDir "C2"
    set SupervisedDirOutput $DataDir
    set BMPDirInput "$SupervisedDirOutput/C2"
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedDirInput/gpf_training_areas.txt"] {
            set FileTrainingArea "$SupervisedDirInput/gpf_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/gpf_training_areas.txt"
            } 

        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        $widget(Button446_1) configure -state disable
        $widget(Button446_3) configure -state disable
        $widget(Button446_4) configure -state disable
        WidgetShow $widget(Toplevel446); TextEditorRunTrace "Open Window G.P.F. Supervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set SupervisedDirInput ""
        set SupervisedDirOutput ""
        set SupervisedOutputDir ""
        set SupervisedOutputSubDir ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {G.P.F. Supervised Classification} 
    $site_4_0.men77.m add separator \
        
    $site_4_0.men77.m add command \
        \
        -command {global VarAdvice

set VarAdvice ""
Window show $widget(Toplevel387); TextEditorRunTrace "Open Window Advice" "b"
tkwait variable VarAdvice
set VarAdvice ""} \
        -label {Polarimetric Functionalities} 
    menubutton $site_4_0.men101 \
        -borderwidth 0 -menu "$site_4_0.men101.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men101" "PROASAR" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men101 "$site_4_0.men101 Menubutton .top2.fra71.fra78 all _vTclBalloon"
    bind $site_4_0.men101 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men101.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men101.m add command \
        \
        -command {global DataDir ActiveProgram IntDirInput IntDirOutput ConfigFile VarError ErrorMessage

#DATA PROCESS SNGL
global Load_IntensitiesElements PSPTopLevel

if {$Load_IntensitiesElements == 0} {
    source "GUI/data_process_sngl/IntensitiesElements.tcl"
    set Load_IntensitiesElements 1
    WmTransient $widget(Toplevel210) $PSPTopLevel
    }

set IntDirInput ""
set IntDirOutput ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

if [file exists "$DataDir/config.txt"] {
set config "false"
if [file exists "$DataDir/I11.bin"] {set config "true"}
if [file exists "$DataDir/I22.bin"] {set config "true"}
if {$config == "true"} {
    set IntDirInput "$DataDir"
    set IntDirOutput "$DataDir"
    set BMPDirInput $IntDirOutput
    set IntI11 0
    set IntI21 0
    set IntI12 0
    set IntI22 0
    set IntSpan 0
    set IntContrast1 0
    set IntContrast2 0
    set BMPIntI11 0
    set BMPIntI21 0
    set BMPIntI12 0
    set BMPIntI22 0
    set BMPIntSpan 0
    set BMPIntContrast1 0
    set BMPIntContrast2 0
    $widget(Checkbutton210_1) configure -state disable
    $widget(Checkbutton210_2) configure -state disable
    $widget(Checkbutton210_3) configure -state disable
    $widget(Checkbutton210_4) configure -state disable
    $widget(Checkbutton210_5) configure -state disable
    set ConfigFile "$IntDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            } else {
            if { "$PolarType" != "full"} {
                if {"$ActiveProgram" == "ASAR"} {
                    if { "$PolarType" == "pp1"} {
                        $widget(Label210_1) configure -state normal
                        $widget(Radiobutton210_1) configure -state normal
                        $widget(Radiobutton210_2) configure -state normal
                        $widget(Radiobutton210_3) configure -state normal
                        $widget(Label210_2) configure -state normal
                        $widget(Radiobutton210_5) configure -state normal
                        $widget(Radiobutton210_6) configure -state normal
                        $widget(Radiobutton210_7) configure -state normal
                        $widget(Label210_3) configure -state disable
                        $widget(Radiobutton210_9) configure -state disable
                        $widget(Radiobutton210_10) configure -state disable
                        $widget(Radiobutton210_11) configure -state disable
                        $widget(Label210_4) configure -state disable
                        $widget(Radiobutton210_13) configure -state disable
                        $widget(Radiobutton210_14) configure -state disable
                        $widget(Radiobutton210_15) configure -state disable
                        $widget(Label210_6) configure -state normal
                        $widget(Checkbutton210_6) configure -state normal
                        $widget(Checkbutton210_7) configure -state disable
                        $widget(Label210_7) configure -state disable
                        $widget(Checkbutton210_8) configure -state disable
                        $widget(Checkbutton210_9) configure -state disable
                        }            
                    if { "$PolarType" == "pp2"} {
                        $widget(Label210_1) configure -state disable
                        $widget(Radiobutton210_1) configure -state disable
                        $widget(Radiobutton210_2) configure -state disable
                        $widget(Radiobutton210_3) configure -state disable
                        $widget(Label210_2) configure -state disable
                        $widget(Radiobutton210_5) configure -state disable
                        $widget(Radiobutton210_6) configure -state disable
                        $widget(Radiobutton210_7) configure -state disable
                        $widget(Label210_3) configure -state normal
                        $widget(Radiobutton210_9) configure -state normal
                        $widget(Radiobutton210_10) configure -state normal
                        $widget(Radiobutton210_11) configure -state normal
                        $widget(Label210_4) configure -state normal
                        $widget(Radiobutton210_13) configure -state normal
                        $widget(Radiobutton210_14) configure -state normal
                        $widget(Radiobutton210_15) configure -state normal
                        $widget(Label210_6) configure -state disable
                        $widget(Checkbutton210_6) configure -state disable
                        $widget(Checkbutton210_7) configure -state disable
                        $widget(Label210_7) configure -state normal
                        $widget(Checkbutton210_8) configure -state normal
                        $widget(Checkbutton210_9) configure -state disable
                        }            
                    if { "$PolarType" == "pp3"} {
                        $widget(Label210_1) configure -state normal
                        $widget(Radiobutton210_1) configure -state normal
                        $widget(Radiobutton210_2) configure -state normal
                        $widget(Radiobutton210_3) configure -state normal
                        $widget(Label210_2) configure -state disable
                        $widget(Radiobutton210_5) configure -state disable
                        $widget(Radiobutton210_6) configure -state disable
                        $widget(Radiobutton210_7) configure -state disable
                        $widget(Label210_3) configure -state disable
                        $widget(Radiobutton210_9) configure -state disable
                        $widget(Radiobutton210_10) configure -state disable
                        $widget(Radiobutton210_11) configure -state disable
                        $widget(Label210_4) configure -state normal
                        $widget(Radiobutton210_13) configure -state normal
                        $widget(Radiobutton210_14) configure -state normal
                        $widget(Radiobutton210_15) configure -state normal
                        $widget(Label210_6) configure -state disable
                        $widget(Checkbutton210_6) configure -state disable
                        $widget(Checkbutton210_7) configure -state disable
                        $widget(Label210_7) configure -state disable
                        $widget(Checkbutton210_8) configure -state disable
                        $widget(Checkbutton210_9) configure -state disable
                        }            
                    }
                if { "$PolarType" == "pp5"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state disable
                    $widget(Radiobutton210_9) configure -state disable
                    $widget(Radiobutton210_10) configure -state disable
                    $widget(Radiobutton210_11) configure -state disable
                    $widget(Label210_4) configure -state disable
                    $widget(Radiobutton210_13) configure -state disable
                    $widget(Radiobutton210_14) configure -state disable
                    $widget(Radiobutton210_15) configure -state disable
                    $widget(Label210_6) configure -state normal
                    $widget(Checkbutton210_6) configure -state normal
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp6"} {
                    $widget(Label210_1) configure -state disable
                    $widget(Radiobutton210_1) configure -state disable
                    $widget(Radiobutton210_2) configure -state disable
                    $widget(Radiobutton210_3) configure -state disable
                    $widget(Label210_2) configure -state disable
                    $widget(Radiobutton210_5) configure -state disable
                    $widget(Radiobutton210_6) configure -state disable
                    $widget(Radiobutton210_7) configure -state disable
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state normal
                    $widget(Checkbutton210_8) configure -state normal
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp7"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state disable
                    $widget(Radiobutton210_5) configure -state disable
                    $widget(Radiobutton210_6) configure -state disable
                    $widget(Radiobutton210_7) configure -state disable
                    $widget(Label210_3) configure -state disable
                    $widget(Radiobutton210_9) configure -state disable
                    $widget(Radiobutton210_10) configure -state disable
                    $widget(Radiobutton210_11) configure -state disable
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }            
                if { "$PolarType" == "pp4"} {
                    $widget(Label210_1) configure -state normal
                    $widget(Radiobutton210_1) configure -state normal
                    $widget(Radiobutton210_2) configure -state normal
                    $widget(Radiobutton210_3) configure -state normal
                    $widget(Label210_2) configure -state normal
                    $widget(Radiobutton210_5) configure -state normal
                    $widget(Radiobutton210_6) configure -state normal
                    $widget(Radiobutton210_7) configure -state normal
                    $widget(Label210_3) configure -state normal
                    $widget(Radiobutton210_9) configure -state normal
                    $widget(Radiobutton210_10) configure -state normal
                    $widget(Radiobutton210_11) configure -state normal
                    $widget(Label210_4) configure -state normal
                    $widget(Radiobutton210_13) configure -state normal
                    $widget(Radiobutton210_14) configure -state normal
                    $widget(Radiobutton210_15) configure -state normal
                    $widget(Label210_6) configure -state disable
                    $widget(Checkbutton210_6) configure -state disable
                    $widget(Checkbutton210_7) configure -state disable
                    $widget(Label210_7) configure -state disable
                    $widget(Checkbutton210_8) configure -state disable
                    $widget(Checkbutton210_9) configure -state disable
                    }
                WidgetShow $widget(Toplevel210); TextEditorRunTrace "Open Window Intensities Elements" "b"
                } else {
                set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
                Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
                tkwait variable VarError
                set ErrorMessage ""
                }
            }                
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {( Ixx , Ixy ) Elements} 
    $site_4_0.men101.m add separator \
        
    $site_4_0.men101.m add command \
        \
        -command {global DataDir ConvertDirInput ConvertDirOutput
global MultiLookRow MultiLookCol
global ConfigFile VarError ErrorMessage
#DATA CONVERT
global Load_DataFileConvert_Ipp PSPTopLevel

if {$Load_DataFileConvert_Ipp == 0} {
    source "GUI/data_convert/DataFileConvert_Ipp.tcl"
    set Load_DataFileConvert_Ipp 1
    WmTransient $widget(Toplevel24) $PSPTopLevel
    }

set ConvertDirInput ""
set ConvertDirOutput ""
set ConfigFile ""

if [file exists "$DataDir/config.txt"] {
set config "false"
if [file exists "$DataDir/I11.bin"] {set config "true"}
if [file exists "$DataDir/I22.bin"] {set config "true"}
if {$config == "true"} {
    set ConvertDirInput $DataDir
    set ConvertDirOutput $DataDir
    append ConvertDirOutput "_MLK"
    set ConfigFile "$ConvertDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {$ErrorMessage == ""} {
        if {$PolarCase != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ConvertDirInput ""; set ConvertDirOutput ""; set ConfigFile ""
            } else {
            $widget(Label24_1) configure -state normal
            $widget(Entry24_1) configure -state normal
            $widget(Label24_2) configure -state normal
            $widget(Entry24_2) configure -state normal
            set MultiLookRow "1"
            set MultiLookCol "1"
            set Fonction "INTENSITY PP TO INTENSITY PP MULTI LOOK"
            WidgetShow $widget(Toplevel24); TextEditorRunTrace "Open Window Data File Convert Ipp" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set ConvertDirInput ""; set ConvertDirOutput ""; set ConfigFile ""
        }
    } else {
    set ErrorMessage "CHANGE TO THE DATA MAIN INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
} else {
set ErrorMessage "ENTER A VALID DIRECTORY"
Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
tkwait variable VarError
}} \
        -label {( Ixx , Ixy )  >>  ( Ixx , Ixy ) MLK} 
    $site_4_0.men101.m add separator \
        
    $site_4_0.men101.m add cascade \
        -menu "$site_4_0.men101.m.men72" -command {} -label {Speckle Filter} 
    set site_6_0 $site_4_0.men101.m
    menu $site_6_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_BOX"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car Filter} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC FilterMaskFile

#SPECKLE FILTER
global Load_SpeckleFilterEdge PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterMaskFile ""
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "BOXCAR Speckle Filter"
set FilterFunction "Soft/speckle_filter/boxcar_filter_edge.exe"

if {$Load_SpeckleFilterEdge == 0} {
    source "GUI/speckle_filter/SpeckleFilterEdge.tcl"
    set Load_SpeckleFilterEdge 1
    WmTransient $widget(Toplevel362) $PSPTopLevel
    }
$widget(TitleFrame362_1) configure -state disable
$widget(TitleFrame362_1) configure -text ""
$widget(Radiobutton362_1) configure -state disable
$widget(Radiobutton362_2) configure -state disable
$widget(Radiobutton362_3) configure -state disable
$widget(Radiobutton362_4) configure -state disable
$widget(Checkbutton362_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_EDG"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel362); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel362); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Box Car - Edge Filter} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "7"
set FilterFonction "GAUSSIAN Speckle Filter"
set FilterFunction "Soft/speckle_filter/gaussian_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state disable
$widget(Entry25_1) configure -state disable
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state normal
$widget(Entry25_3) configure -state normal
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_GSS"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Gaussian Filter} 
    $site_6_0.men72 add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 FilterNoise
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc ChannelFilter
global Nlook NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilter PSPTopLevel

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""
set ChannelFilter "0"
set FilterNoise "0"

set Nlook "1"
set NwinFilterL "7"
set NwinFilterC "1"
set FilterFonction "LEE Refined Speckle Filter"
set FilterFunction "Soft/speckle_filter/lee_refined_filter.exe"

if {$Load_SpeckleFilter == 0} {
    source "GUI/speckle_filter/SpeckleFilter.tcl"
    set Load_SpeckleFilter 1
    WmTransient $widget(Toplevel25) $PSPTopLevel
    }
$widget(Label25_1) configure -state normal
$widget(Entry25_1) configure -state normal
$widget(Label25_2) configure -state normal
$widget(Entry25_2) configure -state normal
$widget(Label25_3) configure -state disable
$widget(Entry25_3) configure -state disable
$widget(TitleFrame25_1) configure -state disable
$widget(TitleFrame25_1) configure -text ""
$widget(Radiobutton25_1) configure -state disable
$widget(Radiobutton25_2) configure -state disable
$widget(Radiobutton25_3) configure -state disable
$widget(Radiobutton25_4) configure -state disable
$widget(Checkbutton25_1) configure -state disable

set FilterDirOutput $DataDir
set FilterOutputDir $DataDir
append FilterOutputDir "_LEE"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    }    

if {$DataFormatActive == "IPP"} {
    set FilterDirInput $DataDir
    set FilterOutputSubDir ""
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
            } else {
            set FilterFonc "IPP"
            WidgetShow $widget(Toplevel25); TextEditorRunTrace "Open Window Speckle Filter" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel25); TextEditorRunTrace "Close Window Speckle Filter" "b"
        }
    }} \
        -label {Lee Refined Filter} 
    $site_6_0.men72 add separator \
        
    $site_6_0.men72 add command \
        \
        -command {global Fonction DataDir EdgeDirInput EdgeDirOutput EdgeFileInput EdgeFileOutput
global EdgeDetector EdgeCoeff InputFormat OutputFormat
#DATA PROCESS
global Load_EdgeDetector PSPTopLevel
 
if {$Load_EdgeDetector == 0} {
    source "GUI/data_process_sngl/EdgeDetector.tcl"
    set Load_EdgeDetector 1
    WmTransient $widget(Toplevel337) $PSPTopLevel
    }

set EdgeDirInput "$DataDir"
set EdgeDirOutput $EdgeDirInput
set InputFormat "float"
set OutputFormat "real"
set EdgeFileInput ""
set EdgeFileOutput "$EdgeDirOutput/canny_0.5.bin"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label337_1) configure -state disable
$widget(Entry337_1) configure -state disable
$widget(Label337_2) configure -state disable
$widget(Entry337_2) configure -state disable
$widget(Button337_1) configure -state disable
set MinBMP "Auto"
set MaxBMP "Auto"
set EdgeDetector "canny"
set EdgeCoeff "0.5"
WidgetShow $widget(Toplevel337); TextEditorRunTrace "Open Window Edge Detector" "b"} \
        -label {Edge Detector} 
    $site_4_0.men101.m add separator \
        
    $site_4_0.men101.m add command \
        \
        -command {global DataDir SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette CONFIGDir COLORMAPDir
global ConfigFile VarError ErrorMessage NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction 
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCoded1 ColorMapSupervisedCoded2

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor Load_WishartSupervisedClassification_PP PSPTopLevel

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_WishartSupervisedClassification_PP == 0} {
    source "GUI/data_process_sngl/WishartSupervisedClassification_PP.tcl"
    set Load_WishartSupervisedClassification_PP 1
    WmTransient $widget(Toplevel212) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedFonction "IPP"
set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set RejectClass 0
set RejectRatio ""
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCoded1 "0"
set ColorMapSupervisedCoded2 "0"
$widget(Checkbutton212_1) configure -state disable
$widget(Checkbutton212_2) configure -state disable
$widget(Label212_1) configure -state disable
$widget(Label212_2) configure -state disable
$widget(Label212_3) configure -state disable
$widget(Label212_4) configure -state disable
$widget(Label212_5) configure -state disable
$widget(Label212_6) configure -state disable

if [file exists "$DataDir/config.txt"] {
set config "false"
if [file exists "$DataDir/I11.bin"] {set config "true"}
if [file exists "$DataDir/I22.bin"] {set config "true"}
if {$config == "true"} {
    set SupervisedDirInput $DataDir
    set SupervisedOutputDir $DataDir
    set SupervisedOutputSubDir ""
    set SupervisedDirOutput $DataDir
    set BMPDirInput $SupervisedDirOutput
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarCase" != "intensities"} {
            set ErrorMessage "INPUT DATA MUST BE INTENSITY DATA"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            set SupervisedDirInput ""
            set SupervisedDirOutput ""
            set SupervisedOutputDir ""
            set SupervisedOutputSubDir ""
            } else {
            if [file exists "$SupervisedOutputDir/wishart_training_areas.txt"] {
                set FileTrainingArea "$SupervisedOutputDir/wishart_training_areas.txt"
                } else {
                set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
                } 

            set NTrainingArea(0) 0        
            set AreaPoint(0) 0
            set AreaPointLig(0) 0
            set AreaPointCol(0) 0
            set f [open $FileTrainingArea r]
            gets $f tmp
            gets $f NTrainingAreaClass
            gets $f tmp
            for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
                gets $f tmp
                gets $f tmp
                gets $f NTrainingArea($i)
                gets $f tmp
                for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                    gets $f tmp
                    gets $f NAreaPoint
                    set Argument [expr (100*$i + $j)]
                    set AreaPoint($Argument) $NAreaPoint
                    for {set k 1} {$k <= $NAreaPoint} {incr k} {
                        gets $f tmp
                        set Argument1 [expr (10000*$i + 100*$j + $k)]
                        gets $f tmp
                        gets $f AreaPointLig($Argument1)
                        gets $f tmp
                        gets $f AreaPointCol($Argument1)
                        }
                    gets $f tmp
                    }
                }
            close $f

            set AreaClassN 1
            set AreaN 1
            $widget(Label212_7) configure -state disable
            $widget(Entry212_1) configure -state disable
            $widget(Button212_1) configure -state disable
            $widget(Button212_2) configure -state disable
            $widget(Button212_3) configure -state disable
            $widget(Button212_4) configure -state disable
            WidgetShow $widget(Toplevel212); TextEditorRunTrace "Open Window Wishart Supervised Classification" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set SupervisedDirInput ""
        set SupervisedDirOutput ""
        set SupervisedOutputDir ""
        set SupervisedOutputSubDir ""
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }} \
        -label {Wishart Supervised Classification} 
    menubutton $site_4_0.men74 \
        -borderwidth 0 -menu "$site_4_0.men74.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men74" "PRODUAL" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men74 "$site_4_0.men74 Menubutton .top2.fra71.fra78 all _vTclBalloon"
    bind $site_4_0.men74 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men74.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men66" -command {} \
        -label {In-SAR Functionalities} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men66 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CoRegMasterDirInput CoRegSlaveDirInput
global CoRegSlaveDirOutput
global CoRegNwinRow CoRegNwinCol
global CoRegRTL CoRegCTL CoRegRTR CoRegCTR
global CoRegRC CoRegCC CoRegRBL CoRegCBL
global CoRegRBR CoRegCBR CoRegRAV CoRegCAV
global CoRegFile CoRegFonction

#DATA PROCESS DUAL
global Load_CoarseCoRegistration
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "T4" || $DataFormatActive == "T6"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_CoarseCoRegistration == 0} {
        source "GUI/data_process_dual/CoarseCoRegistration.tcl"
        set Load_CoarseCoRegistration 1
        WmTransient $widget(Toplevel369) $PSPTopLevel
        }

    set CoRegMasterDirInput ""
    set CoRegSlaveDirInput ""
    set CoRegSlaveDirOutput ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CoRegMasterDirInput $DataDirChannel1
    set CoRegSlaveDirInput $DataDirChannel2
    set CoRegSlaveDirOutput ""
    set CoRegNwinRow "1024"
    set CoRegNwinCol "256"
    set CoRegRTL ""; set CoRegCTL ""; set CoRegRTR ""; set CoRegCTR ""
    set CoRegRC ""; set CoRegCC ""; set CoRegRBL ""; set CoRegCBL ""
    set CoRegRBR ""; set CoRegCBR ""; set CoRegRAV ""; set CoRegCAV ""
    set CoRegFonction $DataFormatActive

    $widget(Button369_1) configure -state disable

    $widget(TitleFrame369_1) configure -state disable; $widget(TitleFrame369_2) configure -state disable
    $widget(TitleFrame369_3) configure -state disable; $widget(TitleFrame369_5) configure -state disable

    $widget(Label369_1) configure -state disable; $widget(Label369_2) configure -state disable
    $widget(Label369_3) configure -state disable; $widget(Label369_4) configure -state disable
    $widget(Label369_5) configure -state disable; $widget(Label369_6) configure -state disable
    $widget(Label369_7) configure -state disable; $widget(Label369_8) configure -state disable
    $widget(Label369_9) configure -state disable; $widget(Label369_10) configure -state disable
    $widget(Label369_11) configure -state disable; $widget(Label369_12) configure -state disable

    $widget(Entry369_1) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry369_3) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_4) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry369_5) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry369_7) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_8) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry369_9) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry369_11) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry369_11) configure -state disable; $widget(Entry369_12) configure -state disable

    $widget(Entry369_21) configure -disabledbackground $PSPBackgroundColor; $widget(Entry369_21) configure -state disable

    WidgetShow $widget(Toplevel369); TextEditorRunTrace "Open Window Pol-InSAR Coarse Co-Registration" "b"

# Config Format
}
}} \
        -label {Coarse Co-Registration} 
    $site_6_0.men66 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FlatEarthMasterDirInput FlatEarthSlaveDirInput
global FlatEarthMasterFile FlatEarthSlaveFile
global FlatEarthSlaveDirOutput FlatEarthNwinRow FlatEarthNwinCol
global FlatEarthChannel FlatEarthFormat
global FlatEarthFile 

#DATA PROCESS DUAL
global Load_FlatEarthEstimation Load_FlatEarthEstimation_PP
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "T4" || $DataFormatActive == "T6"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$DataFormatActive == "SPP"} {
    if {$Load_FlatEarthEstimation_PP == 0} {
        source "GUI/data_process_dual/FlatEarthEstimation_PP.tcl"
        set Load_FlatEarthEstimation_PP 1
        WmTransient $widget(Toplevel355PP) $PSPTopLevel
        }

    set FlatEarthMasterDirInput ""
    set FlatEarthSlaveDirInput ""
    set FlatEarthMasterDirOutput ""
    set FlatEarthSlaveDirOutput ""
    set FlatEarthFile ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set FlatEarthMasterDirInput $DataDirChannel1
    set FlatEarthSlaveDirInput $DataDirChannel2
    if {$PolarType == "pp1"} {
        set FlatEarthMasterFile "$FlatEarthMasterDirInput/s11.bin"
        set FlatEarthSlaveFile "$FlatEarthSlaveDirInput/s11.bin"
        }    
    if {$PolarType == "pp2"} {
        set FlatEarthMasterFile "$FlatEarthMasterDirInput/s22.bin"
        set FlatEarthSlaveFile "$FlatEarthSlaveDirInput/s22.bin"
        }    
    if {$PolarType == "pp3"} {
        set FlatEarthMasterFile "$FlatEarthMasterDirInput/s11.bin"
        set FlatEarthSlaveFile "$FlatEarthSlaveDirInput/s11.bin"
        }
    set FlatEarthSlaveDirOutput $DataDirChannel2
    set FlatEarthChannel "Ch1"
    set FlatEarthFormat "realdeg"
    set FlatEarthNwinRow 1024
    set FlatEarthNwinCol 256
    WidgetShow $widget(Toplevel355PP); TextEditorRunTrace "Open Window Flat Earth Estimation" "b"
    }

if {$DataFormatActive == "S2"} {
    if {$Load_FlatEarthEstimation == 0} {
        source "GUI/data_process_dual/FlatEarthEstimation.tcl"
        set Load_FlatEarthEstimation 1
        WmTransient $widget(Toplevel355) $PSPTopLevel
        }

    set FlatEarthMasterDirInput ""
    set FlatEarthSlaveDirInput ""
    set FlatEarthMasterDirOutput ""
    set FlatEarthSlaveDirOutput ""
    set FlatEarthFile ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set FlatEarthMasterDirInput $DataDirChannel1
    set FlatEarthSlaveDirInput $DataDirChannel2
    set FlatEarthMasterFile "$FlatEarthMasterDirInput/s11.bin"
    set FlatEarthSlaveFile "$FlatEarthSlaveDirInput/s11.bin"
    set FlatEarthSlaveDirOutput $DataDirChannel2
    set FlatEarthChannel "s11"
    set FlatEarthFormat "realdeg"
    set FlatEarthNwinRow 1024
    set FlatEarthNwinCol 256
    WidgetShow $widget(Toplevel355); TextEditorRunTrace "Open Window Flat Earth Estimation" "b"
    }
    
# Config Format
}
}} \
        -label {Flat Earth Estimation} 
    $site_6_0.men66 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FlatEarthMasterDirInput FlatEarthSlaveDirInput
global FlatEarthMasterDirOutput FlatEarthSlaveDirOutput
global FlatEarthSymmetrisation FlatEarthConjugate
global FlatEarthFormat FlatEarthIEEE
global FlatEarthFile 

#DATA PROCESS DUAL
global Load_FlatEarthRemoval
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "T4" || $DataFormatActive == "T6"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_FlatEarthRemoval == 0} {
        source "GUI/data_process_dual/FlatEarthRemoval.tcl"
        set Load_FlatEarthRemoval 1
        WmTransient $widget(Toplevel301) $PSPTopLevel
        }

    set FlatEarthMasterDirInput ""
    set FlatEarthSlaveDirInput ""
    set FlatEarthMasterDirOutput ""
    set FlatEarthSlaveDirOutput ""
    set FlatEarthFile ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""
    
    set FlatEarthMasterDirInput $DataDirChannel1
    set FlatEarthSlaveDirInput $DataDirChannel2
    set FlatEarthMasterDirOutput $DataDirChannel1
    $widget(Entry301_1) configure -state disable
    set FlatEarthSlaveDirOutput $DataDirChannel2
    append FlatEarthSlaveDirOutput "_FER"
    set FlatEarthSymmetrisation 0
    set FlatEarthConjugate 0
    set FlatEarthFormat "realdeg"
    set FlatEarthIEEE 0
    WidgetShow $widget(Toplevel301); TextEditorRunTrace "Open Window Flat Earth Removal" "b"

# Config Format
}
}} \
        -label {Flat Earth Removal} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SlrDirInput SlrDirOutput SinclairFonction
global CohDirInput CohDirOutput CohOutputDir CohOutputSubDir

#DATA PROCESS SNGL
global Load_SinclairElements
#DATA PROCESS DUAL
global Load_CovarianceElementsT4_T11 Load_CovarianceElementsT6_T11
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$DataFormatActive == "S2"} {
    if {$Load_SinclairElements == 0} {
        source "GUI/data_process_sngl/SinclairElements.tcl"
        set Load_SinclairElements 1
        WmTransient $widget(Toplevel86) $PSPTopLevel
        }

    set SlrDirInput ""
    set SlrDirOutput ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set SinclairFonction "S2"
    set SlrDirInput "$DataDirChannel1"
    set SlrDirOutput "$DataDirChannel1"
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""; set SlrtoPauli ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""; set BMPSlrtoPauli ""
    $widget(Checkbutton86_1) configure -state disable
    $widget(Checkbutton86_2) configure -state disable
    $widget(Checkbutton86_3) configure -state disable
    $widget(Checkbutton86_4) configure -state disable
    $widget(Checkbutton86_5) configure -state disable
    $widget(Checkbutton86_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label86_1) configure -state normal
        $widget(Label86_2) configure -state normal
        $widget(Label86_3) configure -state normal
        $widget(Label86_4) configure -state normal
        $widget(Label86_5) configure -state normal
        $widget(Label86_6) configure -state normal
        $widget(Radiobutton86_1) configure -state normal
        $widget(Radiobutton86_2) configure -state normal
        $widget(Radiobutton86_3) configure -state normal
        $widget(Radiobutton86_4) configure -state normal
        $widget(Radiobutton86_5) configure -state normal
        $widget(Radiobutton86_6) configure -state normal
        $widget(Radiobutton86_7) configure -state normal
        $widget(Radiobutton86_8) configure -state normal
        $widget(Radiobutton86_9) configure -state normal
        $widget(Radiobutton86_10) configure -state normal
        $widget(Radiobutton86_11) configure -state normal
        $widget(Radiobutton86_12) configure -state normal
        $widget(Radiobutton86_13) configure -state normal
        $widget(Radiobutton86_14) configure -state normal
        $widget(Radiobutton86_15) configure -state normal
        $widget(Radiobutton86_16) configure -state normal
        $widget(Radiobutton86_17) configure -state normal
        $widget(Radiobutton86_18) configure -state normal
        $widget(Radiobutton86_19) configure -state normal
        $widget(Radiobutton86_20) configure -state normal
        $widget(Radiobutton86_21) configure -state normal
        $widget(Radiobutton86_22) configure -state normal
        WidgetShow $widget(Toplevel86); TextEditorRunTrace "Open Window Sinclair Elements" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "SPP"} {
    if {$Load_SinclairElements == 0} {
        source "GUI/data_process_sngl/SinclairElements.tcl"
        set Load_SinclairElements 1
        WmTransient $widget(Toplevel86) $PSPTopLevel
        }

    set SinclairFonction "SPP"
    set SlrDirInput "$DataDirChannel1"
    set SlrDirOutput "$DataDirChannel1"
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""; set SlrtoPauli ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""; set BMPSlrtoPauli ""
    $widget(Checkbutton86_1) configure -state disable
    $widget(Checkbutton86_2) configure -state disable
    $widget(Checkbutton86_3) configure -state disable
    $widget(Checkbutton86_4) configure -state disable
    $widget(Checkbutton86_5) configure -state disable
    $widget(Checkbutton86_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            if { "$PolarType" == "pp1"} {
                $widget(Label86_1) configure -state normal
                $widget(Radiobutton86_1) configure -state normal
                $widget(Radiobutton86_2) configure -state normal
                $widget(Radiobutton86_3) configure -state normal
                $widget(Radiobutton86_4) configure -state normal
                $widget(Label86_2) configure -state normal
                $widget(Radiobutton86_5) configure -state normal
                $widget(Radiobutton86_6) configure -state normal
                $widget(Radiobutton86_7) configure -state normal
                $widget(Radiobutton86_8) configure -state normal
                $widget(Label86_3) configure -state disable
                $widget(Radiobutton86_9) configure -state disable
                $widget(Radiobutton86_10) configure -state disable
                $widget(Radiobutton86_11) configure -state disable
                $widget(Radiobutton86_12) configure -state disable
                $widget(Label86_4) configure -state disable
                $widget(Radiobutton86_13) configure -state disable
                $widget(Radiobutton86_14) configure -state disable
                $widget(Radiobutton86_15) configure -state disable
                $widget(Radiobutton86_16) configure -state disable
                }            
            if { "$PolarType" == "pp2"} {
                $widget(Label86_1) configure -state disable
                $widget(Radiobutton86_1) configure -state disable
                $widget(Radiobutton86_2) configure -state disable
                $widget(Radiobutton86_3) configure -state disable
                $widget(Radiobutton86_4) configure -state disable
                $widget(Label86_2) configure -state disable
                $widget(Radiobutton86_5) configure -state disable
                $widget(Radiobutton86_6) configure -state disable
                $widget(Radiobutton86_7) configure -state disable
                $widget(Radiobutton86_8) configure -state disable
                $widget(Label86_3) configure -state normal
                $widget(Radiobutton86_9) configure -state normal
                $widget(Radiobutton86_10) configure -state normal
                $widget(Radiobutton86_11) configure -state normal
                $widget(Radiobutton86_12) configure -state normal
                $widget(Label86_4) configure -state normal
                $widget(Radiobutton86_13) configure -state normal
                $widget(Radiobutton86_14) configure -state normal
                $widget(Radiobutton86_15) configure -state normal
                $widget(Radiobutton86_16) configure -state normal
                }            
            if { "$PolarType" == "pp3"} {
                $widget(Label86_1) configure -state normal
                $widget(Radiobutton86_1) configure -state normal
                $widget(Radiobutton86_2) configure -state normal
                $widget(Radiobutton86_3) configure -state normal
                $widget(Radiobutton86_4) configure -state normal
                $widget(Label86_2) configure -state disable
                $widget(Radiobutton86_5) configure -state disable
                $widget(Radiobutton86_6) configure -state disable
                $widget(Radiobutton86_7) configure -state disable
                $widget(Radiobutton86_8) configure -state disable
                $widget(Label86_3) configure -state disable
                $widget(Radiobutton86_9) configure -state disable
                $widget(Radiobutton86_10) configure -state disable
                $widget(Radiobutton86_11) configure -state disable
                $widget(Radiobutton86_12) configure -state disable
                $widget(Label86_4) configure -state normal
                $widget(Radiobutton86_13) configure -state normal
                $widget(Radiobutton86_14) configure -state normal
                $widget(Radiobutton86_15) configure -state normal
                $widget(Radiobutton86_16) configure -state normal
                }            
            $widget(Label86_5) configure -state normal
            $widget(Radiobutton86_17) configure -state normal
            $widget(Radiobutton86_18) configure -state normal
            $widget(Label86_6) configure -state disable
            $widget(Radiobutton86_19) configure -state disable
            $widget(Radiobutton86_20) configure -state disable
            $widget(Radiobutton86_21) configure -state disable
            $widget(Radiobutton86_22) configure -state disable
            WidgetShow $widget(Toplevel86); TextEditorRunTrace "Open Window Sinclair Elements" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
        }
    }    
    
if {$DataFormatActive == "T4"} {
    if {$Load_CovarianceElementsT4_T11 == 0} {
        source "GUI/data_process_dual/CovarianceElementsT4_T11.tcl"
        set Load_CovarianceElementsT4_T11 1
        WmTransient $widget(Toplevel304PP) $PSPTopLevel
        }

    set CohDirInput ""
    set CohDirOutput ""
    set CohOutputDir ""
    set CohOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CohDirInput "$DataDirChannel1/T4"
    set CohDirOutput $DataDirChannel1
    set CohOutputDir $DataDirChannel1
    set CohOutputSubDir "T4"
    set BMPDirInput "$CohOutputDir/T4"
    set T4toT11 ""; set T4toT12 ""; set T4toT22 ""; set T4toSpan ""
    set BMPT4toT11 ""; set BMPT4toT12 ""; set BMPT4toT22 ""; set BMPT6toSpan ""
    $widget(Checkbutton304PP_1) configure -state disable
    $widget(Checkbutton304PP_2) configure -state disable
    $widget(Checkbutton304PP_3) configure -state disable
    $widget(Checkbutton304PP_4) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel304PP); TextEditorRunTrace "Open Window Covariance Elements T4 - T11" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "T6"} {
    if {$Load_CovarianceElementsT6_T11 == 0} {
        source "GUI/data_process_dual/CovarianceElementsT6_T11.tcl"
        set Load_CovarianceElementsT6_T11 1
        WmTransient $widget(Toplevel304) $PSPTopLevel
        }

    set CohDirInput ""
    set CohDirOutput ""
    set CohOutputDir ""
    set CohOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CohDirInput "$DataDirChannel1/T6"
    set CohDirOutput $DataDirChannel1
    set CohOutputDir $DataDirChannel1
    set CohOutputSubDir "T6"
    set BMPDirInput "$CohOutputDir/T6"
    set T6toT11 ""; set T6toT12 ""; set T6toT13 ""; set T6toT22 ""; set T6toT23 ""; set T6toT33 ""; set T6toSpan ""
    set BMPT6toT11 ""; set BMPT6toT12 ""; set BMPT6toT13 ""; set BMPT6toT22 ""; set BMPT6toT23 ""; set BMPT6toT33 ""; set BMPT6toSpan ""
    $widget(Checkbutton304_1) configure -state disable
    $widget(Checkbutton304_2) configure -state disable
    $widget(Checkbutton304_3) configure -state disable
    $widget(Checkbutton304_4) configure -state disable
    $widget(Checkbutton304_5) configure -state disable
    $widget(Checkbutton304_6) configure -state disable
    $widget(Checkbutton304_7) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel304); TextEditorRunTrace "Open Window Covariance Elements T6 - T11" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}} \
        -label {Matrix Elements - Master} 
    $site_4_0.men74.m add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SlrDirInput SlrDirOutput SinclairFonction
global CohDirInput CohDirOutput CohOutputDir CohOutputSubDir

#DATA PROCESS SNGL
global Load_SinclairElements
#DATA PROCESS DUAL
global Load_CovarianceElementsT4_T22 Load_CovarianceElementsT6_T22
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$DataFormatActive == "S2"} {
    if {$Load_SinclairElements == 0} {
        source "GUI/data_process_sngl/SinclairElements.tcl"
        set Load_SinclairElements 1
        WmTransient $widget(Toplevel86) $PSPTopLevel
        }

    set SlrDirInput ""
    set SlrDirOutput ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set SinclairFonction "S2"
    set SlrDirInput "$DataDirChannel2"
    set SlrDirOutput "$DataDirChannel2"
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""; set SlrtoPauli ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""; set BMPSlrtoPauli ""
    $widget(Checkbutton86_1) configure -state disable
    $widget(Checkbutton86_2) configure -state disable
    $widget(Checkbutton86_3) configure -state disable
    $widget(Checkbutton86_4) configure -state disable
    $widget(Checkbutton86_5) configure -state disable
    $widget(Checkbutton86_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label86_1) configure -state normal
        $widget(Label86_2) configure -state normal
        $widget(Label86_3) configure -state normal
        $widget(Label86_4) configure -state normal
        $widget(Label86_5) configure -state normal
        $widget(Label86_6) configure -state normal
        $widget(Radiobutton86_1) configure -state normal
        $widget(Radiobutton86_2) configure -state normal
        $widget(Radiobutton86_3) configure -state normal
        $widget(Radiobutton86_4) configure -state normal
        $widget(Radiobutton86_5) configure -state normal
        $widget(Radiobutton86_6) configure -state normal
        $widget(Radiobutton86_7) configure -state normal
        $widget(Radiobutton86_8) configure -state normal
        $widget(Radiobutton86_9) configure -state normal
        $widget(Radiobutton86_10) configure -state normal
        $widget(Radiobutton86_11) configure -state normal
        $widget(Radiobutton86_12) configure -state normal
        $widget(Radiobutton86_13) configure -state normal
        $widget(Radiobutton86_14) configure -state normal
        $widget(Radiobutton86_15) configure -state normal
        $widget(Radiobutton86_16) configure -state normal
        $widget(Radiobutton86_17) configure -state normal
        $widget(Radiobutton86_18) configure -state normal
        $widget(Radiobutton86_19) configure -state normal
        $widget(Radiobutton86_20) configure -state normal
        $widget(Radiobutton86_21) configure -state normal
        $widget(Radiobutton86_22) configure -state normal
        WidgetShow $widget(Toplevel86); TextEditorRunTrace "Open Window Sinclair Elements" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "SPP"} {
    if {$Load_SinclairElements == 0} {
        source "GUI/data_process_sngl/SinclairElements.tcl"
        set Load_SinclairElements 1
        WmTransient $widget(Toplevel86) $PSPTopLevel
        }

    set SinclairFonction "SPP"
    set SlrDirInput "$DataDirChannel2"
    set SlrDirOutput "$DataDirChannel2"
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""; set SlrtoPauli ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""; set BMPSlrtoPauli ""
    $widget(Checkbutton86_1) configure -state disable
    $widget(Checkbutton86_2) configure -state disable
    $widget(Checkbutton86_3) configure -state disable
    $widget(Checkbutton86_4) configure -state disable
    $widget(Checkbutton86_5) configure -state disable
    $widget(Checkbutton86_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            if { "$PolarType" == "pp1"} {
                $widget(Label86_1) configure -state normal
                $widget(Radiobutton86_1) configure -state normal
                $widget(Radiobutton86_2) configure -state normal
                $widget(Radiobutton86_3) configure -state normal
                $widget(Radiobutton86_4) configure -state normal
                $widget(Label86_2) configure -state normal
                $widget(Radiobutton86_5) configure -state normal
                $widget(Radiobutton86_6) configure -state normal
                $widget(Radiobutton86_7) configure -state normal
                $widget(Radiobutton86_8) configure -state normal
                $widget(Label86_3) configure -state disable
                $widget(Radiobutton86_9) configure -state disable
                $widget(Radiobutton86_10) configure -state disable
                $widget(Radiobutton86_11) configure -state disable
                $widget(Radiobutton86_12) configure -state disable
                $widget(Label86_4) configure -state disable
                $widget(Radiobutton86_13) configure -state disable
                $widget(Radiobutton86_14) configure -state disable
                $widget(Radiobutton86_15) configure -state disable
                $widget(Radiobutton86_16) configure -state disable
                }            
            if { "$PolarType" == "pp2"} {
                $widget(Label86_1) configure -state disable
                $widget(Radiobutton86_1) configure -state disable
                $widget(Radiobutton86_2) configure -state disable
                $widget(Radiobutton86_3) configure -state disable
                $widget(Radiobutton86_4) configure -state disable
                $widget(Label86_2) configure -state disable
                $widget(Radiobutton86_5) configure -state disable
                $widget(Radiobutton86_6) configure -state disable
                $widget(Radiobutton86_7) configure -state disable
                $widget(Radiobutton86_8) configure -state disable
                $widget(Label86_3) configure -state normal
                $widget(Radiobutton86_9) configure -state normal
                $widget(Radiobutton86_10) configure -state normal
                $widget(Radiobutton86_11) configure -state normal
                $widget(Radiobutton86_12) configure -state normal
                $widget(Label86_4) configure -state normal
                $widget(Radiobutton86_13) configure -state normal
                $widget(Radiobutton86_14) configure -state normal
                $widget(Radiobutton86_15) configure -state normal
                $widget(Radiobutton86_16) configure -state normal
                }            
            if { "$PolarType" == "pp3"} {
                $widget(Label86_1) configure -state normal
                $widget(Radiobutton86_1) configure -state normal
                $widget(Radiobutton86_2) configure -state normal
                $widget(Radiobutton86_3) configure -state normal
                $widget(Radiobutton86_4) configure -state normal
                $widget(Label86_2) configure -state disable
                $widget(Radiobutton86_5) configure -state disable
                $widget(Radiobutton86_6) configure -state disable
                $widget(Radiobutton86_7) configure -state disable
                $widget(Radiobutton86_8) configure -state disable
                $widget(Label86_3) configure -state disable
                $widget(Radiobutton86_9) configure -state disable
                $widget(Radiobutton86_10) configure -state disable
                $widget(Radiobutton86_11) configure -state disable
                $widget(Radiobutton86_12) configure -state disable
                $widget(Label86_4) configure -state normal
                $widget(Radiobutton86_13) configure -state normal
                $widget(Radiobutton86_14) configure -state normal
                $widget(Radiobutton86_15) configure -state normal
                $widget(Radiobutton86_16) configure -state normal
                }            
            $widget(Label86_5) configure -state normal
            $widget(Radiobutton86_17) configure -state normal
            $widget(Radiobutton86_18) configure -state normal
            $widget(Label86_6) configure -state disable
            $widget(Radiobutton86_19) configure -state disable
            $widget(Radiobutton86_20) configure -state disable
            $widget(Radiobutton86_21) configure -state disable
            $widget(Radiobutton86_22) configure -state disable
            WidgetShow $widget(Toplevel86); TextEditorRunTrace "Open Window Sinclair Elements" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        Window hide $widget(Toplevel86); TextEditorRunTrace "Close Window Sinclair Elements" "b"
        }
    }    
    
if {$DataFormatActive == "T4"} {
    if {$Load_CovarianceElementsT4_T22 == 0} {
        source "GUI/data_process_dual/CovarianceElementsT4_T22.tcl"
        set Load_CovarianceElementsT4_T22 1
        WmTransient $widget(Toplevel305PP) $PSPTopLevel
        }

    set CohDirInput ""
    set CohDirOutput ""
    set CohOutputDir ""
    set CohOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CohDirInput "$DataDirChannel1/T4"
    set CohDirOutput $DataDirChannel1
    set CohOutputDir $DataDirChannel1
    set CohOutputSubDir "T4"
    set BMPDirInput "$CohOutputDir/T4"
    set T4toT33 ""; set T4toT34 ""; set T4toT44 ""; set T4toSpan ""
    set BMPT4toT33 ""; set BMPT4toT34 ""; set BMPT4toT44 ""; set BMPT4toSpan ""
    $widget(Checkbutton305_1) configure -state disable
    $widget(Checkbutton305_2) configure -state disable
    $widget(Checkbutton305_3) configure -state disable
    $widget(Checkbutton305_4) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel305PP); TextEditorRunTrace "Open Window Covariance Elements T4 - T22" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "T6"} {
    if {$Load_CovarianceElementsT6_T22 == 0} {
        source "GUI/data_process_dual/CovarianceElementsT6_T22.tcl"
        set Load_CovarianceElementsT6_T22 1
        WmTransient $widget(Toplevel305) $PSPTopLevel
        }

    set CohDirInput ""
    set CohDirOutput ""
    set CohOutputDir ""
    set CohOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CohDirInput "$DataDirChannel1/T6"
    set CohDirOutput $DataDirChannel1
    set CohOutputDir $DataDirChannel1
    set CohOutputSubDir "T6"
    set BMPDirInput "$CohOutputDir/T6"
    set T6toT44 ""; set T6toT45 ""; set T6toT46 ""; set T6toT55 ""; set T6toT56 ""; set T6toT66 ""; set T6toSpan ""
    set BMPT6toT44 ""; set BMPT6toT45 ""; set BMPT6toT46 ""; set BMPT6toT55 ""; set BMPT6toT56 ""; set BMPT6toT66 ""; set BMPT6toSpan ""
    $widget(Checkbutton305_1) configure -state disable
    $widget(Checkbutton305_2) configure -state disable
    $widget(Checkbutton305_3) configure -state disable
    $widget(Checkbutton305_4) configure -state disable
    $widget(Checkbutton305_5) configure -state disable
    $widget(Checkbutton305_6) configure -state disable
    $widget(Checkbutton305_7) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel305); TextEditorRunTrace "Open Window Covariance Elements T6 - T22" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}} \
        -label {Matrix Elements - Slave} 
    $site_4_0.men74.m add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CohDirInput CohDirOutput CohOutputDir CohOutputSubDir

#DATA PROCESS DUAL
global Load_CovarianceElementsT4_O12 Load_CovarianceElementsT6_O12
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$DataFormatActive == "T4"} {
    if {$Load_CovarianceElementsT4_O12 == 0} {
        source "GUI/data_process_dual/CovarianceElementsT4_O12.tcl"
        set Load_CovarianceElementsT4_O12 1
        WmTransient $widget(Toplevel306PP) $PSPTopLevel
        }

    set CohDirInput ""
    set CohDirOutput ""
    set CohOutputDir ""
    set CohOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CohDirInput "$DataDirChannel1/T4"
    set CohDirOutput $DataDirChannel1
    set CohOutputDir $DataDirChannel1
    set CohOutputSubDir "T4"
    set BMPDirInput "$CohOutputDir/T4"
    set T4toT13 ""; set T4toT14 ""; set T4toT23 ""; set T4toT24 ""
    set BMPT4toT13 ""; set BMPT4toT14 ""; set BMPT4toT23 ""; set BMPT4toT24 ""
    $widget(Checkbutton306_1) configure -state disable
    $widget(Checkbutton306_2) configure -state disable
    $widget(Checkbutton306_3) configure -state disable
    $widget(Checkbutton306_4) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel306PP); TextEditorRunTrace "Open Window Covariance Elements T4 - O12" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "T6"} {
    if {$Load_CovarianceElementsT6_O12 == 0} {
        source "GUI/data_process_dual/CovarianceElementsT6_O12.tcl"
        set Load_CovarianceElementsT6_O12 1
        WmTransient $widget(Toplevel306) $PSPTopLevel
        }

    set CohDirInput ""
    set CohDirOutput ""
    set CohOutputDir ""
    set CohOutputSubDir ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set CohDirInput "$DataDirChannel1/T6"
    set CohDirOutput $DataDirChannel1
    set CohOutputDir $DataDirChannel1
    set CohOutputSubDir "T6"
    set BMPDirInput "$CohOutputDir/T6"
    set T6toT14 ""; set T6toT15 ""; set T6toT16 ""; set T6toT24 ""; set T6toT25 ""; set T6toT26 ""; set T6toT34 ""; set T6toT35 ""; set T6toT36 ""
    set BMPT6toT14 ""; set BMPT6toT15 ""; set BMPT6toT16 ""; set BMPT6toT24 ""; set BMPT6toT25 ""; set BMPT6toT26 ""; set BMPT6toT34 ""; set BMPT6toT35 ""; set BMPT6toT36 ""
    $widget(Checkbutton306_1) configure -state disable
    $widget(Checkbutton306_2) configure -state disable
    $widget(Checkbutton306_3) configure -state disable
    $widget(Checkbutton306_4) configure -state disable
    $widget(Checkbutton306_5) configure -state disable
    $widget(Checkbutton306_6) configure -state disable
    $widget(Checkbutton306_7) configure -state disable
    $widget(Checkbutton306_8) configure -state disable
    $widget(Checkbutton306_9) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel306); TextEditorRunTrace "Open Window Covariance Elements T6 - O12" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}
}} \
        -label {Matrix Elements - Cross} 
    $site_4_0.men74.m add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global RoMasterDirInput RoCohSlaveDirInput
global RoDirOutput RoOutputDir RoOutputSubDir
global NwinLRo NwinCRo BMPmodphaRo CorrelationFonction 
global Ro12 Ro13 Ro23 Ro45 Ro46 Ro56
global Ro14 Ro15 Ro16 Ro24 Ro25 Ro26
global Ro34 Ro35 Ro36

#DATA PROCESS / DUAL
global Load_CorrelationCoefficients4 Load_CorrelationCoefficients6
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
    if {$Load_CorrelationCoefficients4 == 0} {
        source "GUI/data_process_dual/CorrelationCoefficients4.tcl"
        set Load_CorrelationCoefficients4 1
        WmTransient $widget(Toplevel378PP) $PSPTopLevel
        }

    set RoMasterDirInput ""
    set RoSlaveDirInput ""
    set MasterSlaveOutputDir ""
    set RoDirOutput ""
    set RoOutputDir ""
    set RoOutputSubDir ""
    set ConfigFile ""

if {$DataFormatActive == "SPP"} {
    set RoMasterDirInput $DataDirChannel1
    set RoSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set RoOutputSubDir ""
    set CorrelationFonction "SPP"
    $widget(TitleFrame378PP_1) configure -text "Input Master Directory"    
    $widget(TitleFrame378PP_2) configure -text "Input Slave Directory"
    $widget(Entry378PP_02) configure -disabledbackground #FFFFFF
    $widget(Entry378PP_02) configure -state disable
    $widget(TitleFrame378PP_3) configure -text "Output Master-Slave Directory"    
    }

if {$DataFormatActive == "T4"} {
    set RoMasterDirInput "$DataDirChannel1/T4"
    set MasterSlaveOutputDir $DataDirChannel1
    set RoOutputSubDir "T4"
    set CorrelationFonction "T4"
    $widget(TitleFrame378PP_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame378PP_2) configure -text ""
    $widget(Entry378PP_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry378PP_02) configure -state disable
    $widget(TitleFrame378PP_3) configure -text "Output Master-Slave Directory"    
    }
    set RoDirOutput $MasterSlaveOutputDir
    set RoOutputDir $MasterSlaveOutputDir
    set ConfigFile "$RoMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinLRo "1"
        set NwinCRo "1"
        set Ro12 "0"; set Ro13 "0"; set Ro14 "0"
        set Ro23 "0"; set Ro24 "0"; set Ro34 "0"
        set BMPmodphaRo "0"
        WidgetShow $widget(Toplevel378PP); TextEditorRunTrace "Open Window Complex Coherence Estimation" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }
 
if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
    if {$Load_CorrelationCoefficients6 == 0} {
        source "GUI/data_process_dual/CorrelationCoefficients6.tcl"
        set Load_CorrelationCoefficients6 1
        WmTransient $widget(Toplevel378) $PSPTopLevel
        }

    set RoMasterDirInput ""
    set RoSlaveDirInput ""
    set MasterSlaveOutputDir ""
    set RoDirOutput ""
    set RoOutputDir ""
    set RoOutputSubDir ""
    set ConfigFile ""

if {$DataFormatActive == "S2"} {
    set RoMasterDirInput $DataDirChannel1
    set RoSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set RoOutputSubDir ""
    set CorrelationFonction "S2"
    $widget(TitleFrame378_1) configure -text "Input Master Directory"    
    $widget(TitleFrame378_2) configure -text "Input Slave Directory"
    $widget(Entry378_02) configure -disabledbackground #FFFFFF
    $widget(Entry378_02) configure -state disable
    $widget(TitleFrame378_3) configure -text "Output Master-Slave Directory"    
    }

if {$DataFormatActive == "T6"} {
    set RoMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    set RoOutputSubDir "T6"
    set CorrelationFonction "T6"
    $widget(TitleFrame378_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame378_2) configure -text ""
    $widget(Entry378_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry378_02) configure -state disable
    $widget(TitleFrame378_3) configure -text "Output Master-Slave Directory"    
    }
    set RoDirOutput $MasterSlaveOutputDir
    set RoOutputDir $MasterSlaveOutputDir
    set ConfigFile "$RoMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinLRo "1"
        set NwinCRo "1"
        set Ro12 "0"; set Ro13 "0"; set Ro23 "0"
        set Ro45 "0"; set Ro46 "0"; set Ro56 "0"
        set Ro14 "0"; set Ro15 "0"; set Ro16 "0"
        set Ro24 "0"; set Ro25 "0"; set Ro26 "0"
        set Ro34 "0"; set Ro35 "0"; set Ro36 "0"
        set BMPmodphaRo "0"
        WidgetShow $widget(Toplevel378); TextEditorRunTrace "Open Window Complex Coherence Estimation" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }
   
# Config Format
}} \
        -label {Correlation Coefficients} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men67" -command {} \
        -label {Pol-InSAR Speckle Filter} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men67 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterMasterDirInput FilterSlaveDirInput MasterSlaveOutputDir
global FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc
global NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilterDual
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_SpeckleFilterDual == 0} {
        source "GUI/speckle_filter/SpeckleFilterDual.tcl"
        set Load_SpeckleFilterDual 1
        WmTransient $widget(Toplevel303) $PSPTopLevel
        }

    set FilterMasterDirInput ""
    set FilterSlaveDirInput ""
    set MasterSlaveOutputDir ""
    set FilterDirOutput ""
    set FilterOutputDir ""
    set FilterOutputSubDir ""
    set ConfigFile ""

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
if {$DataFormatActive == "SPP"} {
    set FilterMasterDirInput $DataDirChannel1
    set FilterSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    $widget(TitleFrame303_1) configure -text "Input Master Directory"    
    $widget(TitleFrame303_2) configure -text "Input Slave Directory"    
    $widget(Entry303_02) configure -disabledbackground #FFFFFF
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "SPPT4"
    }

if {$DataFormatActive == "T4"} {
    set FilterMasterDirInput "$DataDirChannel1/T4"
    set MasterSlaveOutputDir $DataDirChannel1
    $widget(TitleFrame303_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame303_2) configure -text ""
    $widget(Entry303_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "T4"
    }

    set FilterDirOutput $MasterSlaveOutputDir
    set FilterOutputDir $MasterSlaveOutputDir
    append FilterOutputDir "_BOX"
    set FilterOutputSubDir "T4"
    set Nlook "1"
    set NwinFilterL "7"
    set NwinFilterC "7"
    set FilterFonction "BOXCAR Speckle Filter"
    $widget(Label303_1) configure -state disable
    $widget(Entry303_1) configure -state disable
    $widget(Label303_2) configure -state normal
    $widget(Entry303_2) configure -state normal
    $widget(Label303_3) configure -state normal
    $widget(Entry303_3) configure -state normal
    set FilterFunction "Soft/speckle_filter/boxcar_filter_dual_PP.exe"
}

if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
if {$DataFormatActive == "S2"} {
    set FilterMasterDirInput $DataDirChannel1
    set FilterSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    $widget(TitleFrame303_1) configure -text "Input Master Directory"    
    $widget(TitleFrame303_2) configure -text "Input Slave Directory"    
    $widget(Entry303_02) configure -disabledbackground #FFFFFF
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "S2T6"
    }

if {$DataFormatActive == "T6"} {
    set FilterMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    $widget(TitleFrame303_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame303_2) configure -text ""
    $widget(Entry303_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "T6"
    }

    set FilterDirOutput $MasterSlaveOutputDir
    set FilterOutputDir $MasterSlaveOutputDir
    append FilterOutputDir "_BOX"
    set FilterOutputSubDir "T6"
    set Nlook "1"
    set NwinFilterL "7"
    set NwinFilterC "7"
    set FilterFonction "BOXCAR Speckle Filter"
    $widget(Label303_1) configure -state disable
    $widget(Entry303_1) configure -state disable
    $widget(Label303_2) configure -state normal
    $widget(Entry303_2) configure -state normal
    $widget(Label303_3) configure -state normal
    $widget(Entry303_3) configure -state normal
    set FilterFunction "Soft/speckle_filter/boxcar_filter_dual.exe"
}

    set ConfigFile "$FilterMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel303); TextEditorRunTrace "Open Window Speckle Filter Dual" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Box Car Filter} 
    $site_6_0.men67 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterMasterDirInput FilterSlaveDirInput MasterSlaveOutputDir
global FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc
global NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilterDual
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_SpeckleFilterDual == 0} {
        source "GUI/speckle_filter/SpeckleFilterDual.tcl"
        set Load_SpeckleFilterDual 1
        WmTransient $widget(Toplevel303) $PSPTopLevel
        }

    set FilterMasterDirInput ""
    set FilterSlaveDirInput ""
    set MasterSlaveOutputDir ""
    set FilterDirOutput ""
    set FilterOutputDir ""
    set FilterOutputSubDir ""
    set ConfigFile ""

if {$DataFormatActive == "S2"} {
    set FilterMasterDirInput $DataDirChannel1
    set FilterSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    $widget(TitleFrame303_1) configure -text "Input Master Directory"    
    $widget(TitleFrame303_2) configure -text "Input Slave Directory"    
    $widget(Entry303_02) configure -disabledbackground #FFFFFF
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "S2T6"
    }

if {$DataFormatActive == "T6"} {
    set FilterMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    $widget(TitleFrame303_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame303_2) configure -text ""
    $widget(Entry303_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "T6"
    }

    set FilterDirOutput $MasterSlaveOutputDir
    set FilterOutputDir $MasterSlaveOutputDir
    append FilterOutputDir "_GSS"
    set FilterOutputSubDir "T6"
    set Nlook "1"
    set NwinFilterL "7"
    set NwinFilterC "7"
    set FilterFonction "GAUSSIAN Speckle Filter"
    $widget(Label303_1) configure -state disable
    $widget(Entry303_1) configure -state disable
    $widget(Label303_2) configure -state normal
    $widget(Entry303_2) configure -state normal
    $widget(Label303_3) configure -state normal
    $widget(Entry303_3) configure -state normal
    set FilterFunction "Soft/speckle_filter/gaussian_filter_dual.exe"

    set ConfigFile "$FilterMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel303); TextEditorRunTrace "Open Window Speckle Filter Dual" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Gaussian Filter} 
    $site_6_0.men67 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterMasterDirInput FilterSlaveDirInput MasterSlaveOutputDir
global FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc
global NwinFilterL NwinFilterC

#SPECKLE FILTER
global Load_SpeckleFilterDual
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

    if {$Load_SpeckleFilterDual == 0} {
        source "GUI/speckle_filter/SpeckleFilterDual.tcl"
        set Load_SpeckleFilterDual 1
        WmTransient $widget(Toplevel303) $PSPTopLevel
        }

    set FilterMasterDirInput ""
    set FilterSlaveDirInput ""
    set MasterSlaveOutputDir ""
    set FilterDirOutput ""
    set FilterOutputDir ""
    set FilterOutputSubDir ""
    set ConfigFile ""

if {$DataFormatActive == "S2"} {
    set FilterMasterDirInput $DataDirChannel1
    set FilterSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    $widget(TitleFrame303_1) configure -text "Input Master Directory"    
    $widget(TitleFrame303_2) configure -text "Input Slave Directory"    
    $widget(Entry303_02) configure -disabledbackground #FFFFFF
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "S2T6"
    }

if {$DataFormatActive == "T6"} {
    set FilterMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    $widget(TitleFrame303_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame303_2) configure -text ""
    $widget(Entry303_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry303_02) configure -state disable
    $widget(TitleFrame303_3) configure -text "Output Master-Slave Directory"    
    set FilterFonc "T6"
    }

    set FilterDirOutput $MasterSlaveOutputDir
    set FilterOutputDir $MasterSlaveOutputDir
    append FilterOutputDir "_LEE"
    set FilterOutputSubDir "T6"
    set Nlook "1"
    set NwinFilterL "7"
    set NwinFilterC "1"
    set FilterFonction "LEE Refined Speckle Filter"
    $widget(Label303_1) configure -state normal
    $widget(Entry303_1) configure -state normal
    $widget(Label303_2) configure -state normal
    $widget(Entry303_2) configure -state normal
    $widget(Label303_3) configure -state disable
    $widget(Entry303_3) configure -state disable
    set FilterFunction "Soft/speckle_filter/lee_refined_filter_dual.exe"

    set ConfigFile "$FilterMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel303); TextEditorRunTrace "Open Window Speckle Filter Dual" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Lee Refined Filter} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men70" -command {} \
        -label {Pol-InSAR Segmentation} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men70 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men70 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global POLSARDirInput POLSARDirOutput POLSAROutputDir POLSAROutputSubDir
global ColorMapWishart8 ColorMap9 ColorMapWishart16 RedPalette GreenPalette BluePalette
global HAAlpFlag HAAlpNwinL HAAlpNwinC BMPHAAlp IdentFlag MasterSlaveChannel
global WishartFlag BMPWishart WishartNwinL WishartNwinC WishartPourcentage WishartIteration

#DATA PROCESS / DUAL
global Load_POLSARClassification 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
    set WarningMessage "FUNCTIONALITY NOT YET AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_POLSARClassification == 0} {
    source "GUI/data_process_dual/POLSARClassification.tcl"
    set Load_POLSARClassification 1
    WmTransient $widget(Toplevel311) $PSPTopLevel
    }

set POLSARDirInput ""
set POLSARDirOutput ""
set POLSAROutputDir ""
set POLSAROutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set MasterSlave ""
set HAAlpFlag 0; set HAAlpNwinL ""; set HAAlpNwinC ""; set BMPHAAlp 0
set WishartFlag 0; set BMPWishart ""; set WishartNwinL ""; set WishartNwinC ""
set WishartPourcentage ""; set WishartIteration ""
set IdentFlag 0; set MasterSlaveChannel ""

set ColorMapWishart8 ""
set ColorMap9 ""
set ColorMapWishart16 ""
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
 
$widget(TitleFrame311_1) configure -state disable
$widget(Checkbutton311_1) configure -state disable
$widget(Label311_1) configure -state disable
$widget(Entry311_1) configure -state disable
$widget(Entry311_1) configure -disabledbackground $PSPBackgroundColor
$widget(Label311_1a) configure -state disable
$widget(Entry311_1a) configure -state disable
$widget(Entry311_1a) configure -disabledbackground $PSPBackgroundColor
$widget(Checkbutton311_2) configure -state disable

$widget(TitleFrame311_2) configure -state disable
$widget(Checkbutton311_3) configure -state disable
$widget(Label311_2) configure -state disable
$widget(Entry311_2) configure -state disable
$widget(Entry311_2) configure -disabledbackground $PSPBackgroundColor
$widget(Label311_3) configure -state disable
$widget(Entry311_3) configure -state disable
$widget(Entry311_3) configure -disabledbackground $PSPBackgroundColor
$widget(Label311_4) configure -state disable
$widget(Entry311_4) configure -state disable
$widget(Entry311_4) configure -disabledbackground $PSPBackgroundColor
$widget(Label311_4a) configure -state disable
$widget(Entry311_4a) configure -state disable
$widget(Entry311_4a) configure -disabledbackground $PSPBackgroundColor
$widget(Checkbutton311_4) configure -state disable

$widget(Checkbutton311_5) configure -state disable
$widget(Label311_5) configure -state disable
$widget(Entry311_5) configure -state disable
$widget(Entry311_5) configure -disabledbackground $PSPBackgroundColor
$widget(Button311_1) configure -state disable
$widget(Button311_2) configure -state disable
$widget(Label311_6) configure -state disable
$widget(Entry311_6) configure -state disable
$widget(Entry311_6) configure -disabledbackground $PSPBackgroundColor
$widget(Button311_3) configure -state disable
$widget(Button311_4) configure -state disable
$widget(Label311_7) configure -state disable
$widget(Entry311_7) configure -state disable
$widget(Entry311_7) configure -disabledbackground $PSPBackgroundColor
$widget(Button311_5) configure -state disable
$widget(Button311_6) configure -state disable

if {$DataFormatActive == "S2"} {
    set POLSARDirInput $DataDirChannel1
    set POLSAROutputSubDir ""
    set POLSARDirOutput $DataDirChannel1
    set POLSAROutputDir $DataDirChannel1
    set BMPDirInput "$POLSARDirOutput"
    }
if {$DataFormatActive == "T6"} {
    set POLSARDirInput "$DataDirChannel1/T6"
    set POLSAROutputSubDir "T6"
    set POLSARDirOutput $DataDirChannel1
    set POLSAROutputDir $DataDirChannel1
    set BMPDirInput "$POLSARDirOutput/T6"
    }
    set ConfigFile "$POLSARDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel311); TextEditorRunTrace "Open Window POLSAR - Unsupervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {PolSAR Segmentation} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 CONFIGDir
global SupervisedMasterDirInput SupervisedSlaveDirInput
global SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette COLORMAPDir
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix Fonction VarTrainingArea
global NwinSupervisedL NwinSupervisedC SupervisedFonction 

#DATA PROCESS SNGL
global Load_TrainingAreas_GraphicEditor
#DATA PROCESS / DUAL
global Load_POLinSARSupervisedClassification
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
    set WarningMessage "FUNCTIONALITY NOT YET AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

if {$Load_POLinSARSupervisedClassification == 0} {
    source "GUI/data_process_dual/POLinSARSupervisedClassification.tcl"
    set Load_POLinSARSupervisedClassification 1
    WmTransient $widget(Toplevel314) $PSPTopLevel
    }

set SupervisedMasterDirInput ""
set SupervisedSlaveDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set SupervisedClassifierConfusionMatrixFonction "Soft/data_process_sngl/wishart_confusion_matrix.exe"
set Fonction "FULL-POLinSAR SUPERVISED CLASSIFIER"
set ConfigFile ""
set SupervisedClassifierFonction "Soft/data_process_dual/wishart_supervised_classifier.exe"
set SupervisedClusterFonction "Soft/data_process_dual/wishart_training_set_sampler.exe"

set FileTrainingSet ""

set BMPSupervised 1
set RejectClass 0
set RejectRatio ""
set ConfusionMatrix 1
set NwinSupervisedL "1"; set NwinSupervisedC "1"
set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

if {$DataFormatActive == "S2"} {
    set SupervisedMasterDirInput $DataDirChannel1
    set SupervisedSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set SupervisedDirOutput $MasterSlaveOutputDir
    set SupervisedOutputDir $MasterSlaveOutputDir
    set SupervisedOutputSubDir ""
    set BMPDirInput $SupervisedDirOutput
    $widget(TitleFrame314_1) configure -text "Input Master Directory"    
    $widget(TitleFrame314_2) configure -text "Input Slave Directory"    
    $widget(Entry314_02) configure -disabledbackground #FFFFFF
    $widget(Entry314_02) configure -state disable
    $widget(TitleFrame314_3) configure -text "Output Master-Slave Directory"    
    set SupervisedFonction "S2"
    }

if {$DataFormatActive == "T6"} {
    set SupervisedMasterDirInput "$DataDirChannel1/T6"
    set SupervisedOutputDir $DataDirChannel1
    set SupervisedOutputSubDir "T6"
    set SupervisedDirOutput $DataDirChannel1
    set BMPDirInput "$SupervisedDirOutput/T6"
    $widget(TitleFrame314_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame314_2) configure -text ""
    $widget(Entry314_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry314_02) configure -state disable
    $widget(TitleFrame314_3) configure -text "Output Master-Slave Directory"    
    set SupervisedFonction "T6"
    }

    set ConfigFile "$SupervisedMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if [file exists "$SupervisedMasterDirInput/wishart_training_areas.txt"] {
            set FileTrainingArea "$SupervisedMasterDirInput/wishart_training_areas.txt"
            } else {
            set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
            } 

        set NTrainingArea(0) 0        
        set AreaPoint(0) 0
        set AreaPointLig(0) 0
        set AreaPointCol(0) 0
        set f [open $FileTrainingArea r]
        gets $f tmp
        gets $f NTrainingAreaClass
        gets $f tmp
        for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
            gets $f tmp
            gets $f tmp
            gets $f NTrainingArea($i)
            gets $f tmp
            for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                gets $f tmp
                gets $f NAreaPoint
                set Argument [expr (100*$i + $j)]
                set AreaPoint($Argument) $NAreaPoint
                for {set k 1} {$k <= $NAreaPoint} {incr k} {
                    gets $f tmp
                    set Argument1 [expr (10000*$i + 100*$j + $k)]
                    gets $f tmp
                    gets $f AreaPointLig($Argument1)
                    gets $f tmp
                    gets $f AreaPointCol($Argument1)
                    }
                gets $f tmp
                }
            }
        close $f

        set AreaClassN 1
        set AreaN 1
        $widget(Label314_7) configure -state disable
        $widget(Entry314_1) configure -state disable
        $widget(Button314_1) configure -state disable
        $widget(Button314_2) configure -state disable
        $widget(Button314_3) configure -state disable
        $widget(Button314_4) configure -state disable
        WidgetShow $widget(Toplevel314); TextEditorRunTrace "Open Window POLinSAR - Supervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Wishart Supervised Classification} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global POLinSARDirInput POLinSARDirOutput POLinSAROutputDir POLinSAROutputSubDir
global OptCohFlag OptCohAvg OptCohClassFile
global Opt1CohFile Opt2CohFile Opt3CohFile 
global WishartFlag WishartOptCohAvg WishartOptCohClassFile 
global WishartPourcentage WishartIteration WishartMaskType WishartMaskFile
global WishartRunSgl WishartRunDbl WishartRunVol WishartRunAll 
global WishartMaskFileSgl WishartMaskFileDbl WishartMaskFileVol
global WishartClassFileSgl WishartClassFileDbl WishartClassFileVol
global OptCohColorMap ColorMap9 ColorMap27
global TestVarError TestVarName TestVarType TestVarValue TestVarMin TestVarMax

#DATA PROCESS / DUAL
global Load_POLinSARUnsupervisedClassification 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
    set WarningMessage "FUNCTIONALITY NOT YET AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_POLinSARUnsupervisedClassification == 0} {
    source "GUI/data_process_dual/POLinSARUnsupervisedClassification.tcl"
    set Load_POLinSARUnsupervisedClassification 1
    WmTransient $widget(Toplevel312) $PSPTopLevel
    }

set POLinSARMasterDirInput ""
set POLinSARSlaveDirInput ""
set POLinSARDirOutput ""
set POLinSAROutputDir ""
set POLinSAROutputSubDir ""
set MasterSlaveOutputDir ""

set ConfigFile ""

if {$DataFormatActive == "S2"} {
    set POLinSARMasterDirInput $DataDirChannel1
    set POLinSARSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set POLinSARDirOutput $MasterSlaveOutputDir
    set POLinSAROutputDir $MasterSlaveOutputDir
    set POLinSAROutputSubDir ""
    set BMPDirInput $POLinSARDirOutput
    $widget(TitleFrame312_01) configure -text "Input Master Directory"    
    $widget(TitleFrame312_02) configure -text "Input Slave Directory"    
    $widget(Entry312_02) configure -disabledbackground #FFFFFF
    }

if {$DataFormatActive == "T6"} {
    set POLinSARMasterDirInput "$DataDirChannel1/T6"
    set POLinSAROutputDir $DataDirChannel1
    set POLinSAROutputSubDir "T6"
    set POLinSARDirOutput $DataDirChannel1
    set BMPDirInput "$POLinSARDirOutput/T6"
    $widget(TitleFrame312_01) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame312_02) configure -text ""    
    $widget(Entry312_02) configure -disabledbackground $PSPBackgroundColor
    }

    set ConfigFile "$POLinSARMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set OptCohFlag 0; set OptCohAvg 0; set OptCohClassFile ""
        set Opt1CohFile ""; set Opt2CohFile ""; set Opt3CohFile ""
        set WishartFlag 0; set WishartOptCohAvg 0; set WishartOptCohClassFile ""
        set WishartPourcentage ""; set WishartIteration ""; set WishartMaskType ""; set WishartMaskFile ""
        set WishartRunSgl "no"; set WishartRunDbl "no"; set WishartRunVol "no"; set WishartRunAll ""
        set WishartMaskFileSgl ""; set WishartMaskFileDbl ""; set WishartMaskFileVol ""
        set WishartClassFileSgl ""; set WishartClassFileDbl ""; set WishartClassFileVol ""
        set OptCohColorMap ""; set ColorMap9 ""; set ColorMap27 ""
    
        $widget(Checkbutton312_1) configure -state disable
        $widget(Label312_1) configure -state disable
        $widget(Entry312_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_1) configure -state disable
        $widget(Label312_2) configure -state disable
        $widget(Entry312_2) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_2) configure -state disable
        $widget(Label312_3) configure -state disable
        $widget(Entry312_3) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_3) configure -state disable
        $widget(Label312_4) configure -state disable
        $widget(Entry312_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_4) configure -state disable
        $widget(Button312_5) configure -state disable
    
        $widget(Label312_5) configure -state disable
        $widget(Entry312_5) configure -state disable
        $widget(Entry312_5) configure -disabledbackground $PSPBackgroundColor
        $widget(Label312_6) configure -state disable
        $widget(Entry312_6) configure -state disable
        $widget(Entry312_6) configure -disabledbackground $PSPBackgroundColor
        $widget(TitleFrame312_1) configure -state disable
        $widget(Radiobutton312_1) configure -state disable
        $widget(Radiobutton312_2) configure -state disable
        $widget(Radiobutton312_3) configure -state disable
        $widget(Radiobutton312_4) configure -state disable
        $widget(Radiobutton312_5) configure -state disable
        $widget(Label312_7) configure -state disable
        $widget(Entry312_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_6) configure -state disable
        $widget(TitleFrame312_2) configure -state disable
        $widget(Label312_8) configure -state disable
        $widget(Entry312_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_7) configure -state disable
        $widget(Button312_8) configure -state disable
        $widget(Label312_9) configure -state disable
        $widget(Entry312_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_9) configure -state disable
        $widget(Button312_10) configure -state disable
        $widget(Label312_10) configure -state disable
        $widget(Entry312_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Button312_11) configure -state disable
    
        WidgetShow $widget(Toplevel312); TextEditorRunTrace "Open Window POLinSAR - Unsupervised Classification" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Wishart Unsupervised Classification} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men68" -command {} \
        -label {Pol-InSAR Functionalities - 1} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men68 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men68 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CmplxCohMasterDirInput CmplxCohSlaveDirInput
global CmplxCohDirOutput CmplxCohOutputDir CmplxCohOutputSubDir
global FilterFonc CmplxCohFonc
global FiltRow FiltCol CmplxCohAvg
global CmplxCohI1 CmplxCohI2

#DATA PROCESS / DUAL
global Load_InterferogramEstimation Load_InterferogramEstimation_PP
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

set CmplxCohMasterDirInput ""
set CmplxCohSlaveDirInput ""
set MasterSlaveOutputDir ""
set CmplxCohDirOutput ""
set CmplxCohOutputDir ""
set CmplxCohOutputSubDir ""
set ConfigFile ""

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {

if {$Load_InterferogramEstimation_PP == 0} {
    source "GUI/data_process_dual/InterferogramEstimation_PP.tcl"
    set Load_InterferogramEstimation_PP 1
    WmTransient $widget(Toplevel315PP) $PSPTopLevel
    }

if {$DataFormatActive == "SPP"} {
    set CmplxCohMasterDirInput $DataDirChannel1
    set CmplxCohSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set CmplxCohOutputSubDir ""
    set CmplxCohFonc "SPP"
    $widget(TitleFrame315PP_1) configure -text "Input Master Directory"    
    $widget(TitleFrame315PP_2) configure -text "Input Slave Directory"    
    $widget(Entry315PP_02) configure -disabledbackground #FFFFFF
    $widget(Entry315PP_02) configure -state disable
    $widget(TitleFrame315PP_3) configure -text "Output Master-Slave Directory"    
    }

if {$DataFormatActive == "T4"} {
    set CmplxCohMasterDirInput "$DataDirChannel1/T4"
    set MasterSlaveOutputDir $DataDirChannel1
    set CmplxCohOutputSubDir "T4"
    set CmplxCohFonc "T4"
    $widget(TitleFrame315PP_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame315PP_2) configure -text ""
    $widget(Entry315PP_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry315PP_02) configure -state disable
    $widget(TitleFrame315PP_3) configure -text "Output Master-Slave Directory"    
    }

    set CmplxCohDirOutput $MasterSlaveOutputDir 
    set CmplxCohOutputDir $MasterSlaveOutputDir 
    set ConfigFile "$CmplxCohMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set FiltRow ""; set FiltCol ""
        $widget(TitleFrame315PP_4) configure -state disable; $widget(TitleFrame315PP_4) configure -text ""
        $widget(Entry315PP_4) configure -state disable; $widget(Entry315PP_4) configure -disabledbackground $PSPBackgroundColor; $widget(Label315PP_4) configure -state disable 
        $widget(Entry315PP_5) configure -state disable; $widget(Entry315PP_5) configure -disabledbackground $PSPBackgroundColor; $widget(Label315PP_5) configure -state disable 
        set CmplxCohAvg "0"; set CmplxCohI1 "Ch1"; set CmplxCohI2 "Ch1"
        WidgetShow $widget(Toplevel315PP); TextEditorRunTrace "Open Window Interferogram Estimation BMP" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {

if {$Load_InterferogramEstimation == 0} {
    source "GUI/data_process_dual/InterferogramEstimation.tcl"
    set Load_InterferogramEstimation 1
    WmTransient $widget(Toplevel315) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} {
    set CmplxCohMasterDirInput $DataDirChannel1
    set CmplxCohSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set CmplxCohOutputSubDir ""
    set CmplxCohFonc "S2"
    $widget(TitleFrame315_1) configure -text "Input Master Directory"    
    $widget(TitleFrame315_2) configure -text "Input Slave Directory"    
    $widget(Entry315_02) configure -disabledbackground #FFFFFF
    $widget(Entry315_02) configure -state disable
    $widget(TitleFrame315_3) configure -text "Output Master-Slave Directory"    
    }

if {$DataFormatActive == "T6"} {
    set CmplxCohMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    set CmplxCohOutputSubDir "T6"
    set CmplxCohFonc "T6"
    $widget(TitleFrame315_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame315_2) configure -text ""
    $widget(Entry315_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry315_02) configure -state disable
    $widget(TitleFrame315_3) configure -text "Output Master-Slave Directory"    
    }

    set CmplxCohDirOutput $MasterSlaveOutputDir 
    set CmplxCohOutputDir $MasterSlaveOutputDir 
    set ConfigFile "$CmplxCohMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set FiltRow ""; set FiltCol ""
        $widget(TitleFrame315_4) configure -state disable; $widget(TitleFrame315_4) configure -text ""
        $widget(Entry315_4) configure -state disable; $widget(Entry315_4) configure -disabledbackground $PSPBackgroundColor; $widget(Label315_4) configure -state disable 
        $widget(Entry315_5) configure -state disable; $widget(Entry315_5) configure -disabledbackground $PSPBackgroundColor; $widget(Label315_5) configure -state disable 
        set CmplxCohAvg "0"; set CmplxCohI1 "HV"; set CmplxCohI2 "HV"
        WidgetShow $widget(Toplevel315); TextEditorRunTrace "Open Window Interferogram Estimation BMP" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}} \
        -label Interferogram 
    $site_6_0.men68 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CmplxCohMasterDirInput CmplxCohSlaveDirInput
global CmplxCohDirOutput CmplxCohOutputDir CmplxCohOutputSubDir
global FilterFonc CmplxCohFonc
global NwinRow NwinCol FiltRow FiltCol CohAvg
global CohLinHH CohLinHV CohLinVV CohCirLL CohCirLR CohCirRR
global CohPauliHHpVV CohPauliHHmVV CohPauliHVpVH CohBMP
global CohOptSVD CohOptPD CohOptNR CohOptMM CohOptDF
global CohLinCh1 CohLinCh2 CohPauliCh1pCh2 CohPauliCh1mCh2
global NRTheta1 NRTheta2 NptsMM NptsDF

#DATA PROCESS / DUAL
global Load_ComplexCoherenceEstimation_PP Load_ComplexCoherenceEstimation
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

set CmplxCohMasterDirInput ""
set CmplxCohSlaveDirInput ""
set MasterSlaveOutputDir ""
set CmplxCohDirOutput ""
set CmplxCohOutputDir ""
set CmplxCohOutputSubDir ""
set ConfigFile ""

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {

if {$Load_ComplexCoherenceEstimation_PP == 0} {
    source "GUI/data_process_dual/ComplexCoherenceEstimation_PP.tcl"
    set Load_ComplexCoherenceEstimation_PP 1
    WmTransient $widget(Toplevel307PP) $PSPTopLevel
    }

if {$DataFormatActive == "SPP"} {
    set CmplxCohMasterDirInput $DataDirChannel1
    set CmplxCohSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set CmplxCohFonc "SPP"
    $widget(TitleFrame307PP_1) configure -text "Input Master Directory"    
    $widget(TitleFrame307PP_2) configure -text "Input Slave Directory"    
    $widget(Entry307PP_02) configure -disabledbackground #FFFFFF
    $widget(Entry307PP_02) configure -state disable
    $widget(TitleFrame307PP_3) configure -text "Output Master-Slave Directory"    
    }

if {$DataFormatActive == "T4"} {
    set CmplxCohMasterDirInput "$DataDirChannel1/T4"
    set MasterSlaveOutputDir $DataDirChannel1
    set CmplxCohOutputSubDir "T4"
    set CmplxCohFonc "T4"
    $widget(TitleFrame307PP_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame307PP_2) configure -text ""
    $widget(Entry307PP_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry307PP_02) configure -state disable
    $widget(TitleFrame307PP_3) configure -text "Output Master-Slave Directory"    
    }

    set CmplxCohDirOutput $MasterSlaveOutputDir 
    set CmplxCohOutputDir $MasterSlaveOutputDir 
    set ConfigFile "$CmplxCohMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton307PP_1) configure -state disable
        set NwinRow "7"; set NwinCol "7"
        set FiltRow ""; set FiltCol ""
        $widget(TitleFrame307PP_4) configure -state disable; $widget(TitleFrame307PP_4) configure -text ""
        $widget(Entry307PP_4) configure -state disable; $widget(Entry307PP_4) configure -disabledbackground $PSPBackgroundColor; $widget(Label307PP_4) configure -state disable 
        $widget(Entry307PP_5) configure -state disable; $widget(Entry307PP_5) configure -disabledbackground $PSPBackgroundColor; $widget(Label307PP_5) configure -state disable 
        set CohLinCh1 "0"; set CohLinCh2 "0"; set CohPauliCh1pCh2 "0"; set CohPauliCh1mCh2 "0"; set CohBMP "0"
        set CohOptSVD "0"; set CohOptPD "0"; set CohOptNR "0"; set CohOptMM "0"; set CohOptDF "0"; 
        set NRTheta1 ""; set NRTheta2 ""; set NptsMM ""; set NptsDF ""
        $widget(TitleFrame307PP_NR) configure -state disable;
        $widget(Entry307PP_NR1) configure -state disable; $widget(Entry307PP_NR1) configure -disabledbackground $PSPBackgroundColor; $widget(Label307PP_NR1) configure -state disable 
        $widget(Entry307PP_NR2) configure -state disable; $widget(Entry307PP_NR2) configure -disabledbackground $PSPBackgroundColor; $widget(Label307PP_NR2) configure -state disable 
        $widget(TitleFrame307PP_MM) configure -state disable;
        $widget(Entry307PP_MM) configure -state disable; $widget(Entry307PP_MM) configure -disabledbackground $PSPBackgroundColor; $widget(Label307PP_MM) configure -state disable 
        $widget(TitleFrame307PP_DF) configure -state disable;
        $widget(Entry307PP_DF) configure -state disable; $widget(Entry307PP_DF) configure -disabledbackground $PSPBackgroundColor; $widget(Label307PP_DF) configure -state disable 
        set CohAvg "0"
        $widget(Button307PP_1) configure -state disable
        WidgetShow $widget(Toplevel307PP); TextEditorRunTrace "Open Window Complex Coherence Estimation" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {

if {$Load_ComplexCoherenceEstimation == 0} {
    source "GUI/data_process_dual/ComplexCoherenceEstimation.tcl"
    set Load_ComplexCoherenceEstimation 1
    WmTransient $widget(Toplevel307) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} {
    set CmplxCohMasterDirInput $DataDirChannel1
    set CmplxCohSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set CmplxCohFonc "S2"
    $widget(TitleFrame307_1) configure -text "Input Master Directory"    
    $widget(TitleFrame307_2) configure -text "Input Slave Directory"    
    $widget(Entry307_02) configure -disabledbackground #FFFFFF
    $widget(Entry307_02) configure -state disable
    $widget(TitleFrame307_3) configure -text "Output Master-Slave Directory"    
    }

if {$DataFormatActive == "T6"} {
    set CmplxCohMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    set CmplxCohOutputSubDir "T6"
    set CmplxCohFonc "T6"
    $widget(TitleFrame307_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame307_2) configure -text ""
    $widget(Entry307_02) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry307_02) configure -state disable
    $widget(TitleFrame307_3) configure -text "Output Master-Slave Directory"    
    }

    set CmplxCohDirOutput $MasterSlaveOutputDir 
    set CmplxCohOutputDir $MasterSlaveOutputDir 
    set ConfigFile "$CmplxCohMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Checkbutton307_1) configure -state disable
        set NwinRow "7"; set NwinCol "7"
        set FiltRow ""; set FiltCol ""
        $widget(TitleFrame307_4) configure -state disable; $widget(TitleFrame307_4) configure -text ""
        $widget(Entry307_4) configure -state disable; $widget(Entry307_4) configure -disabledbackground $PSPBackgroundColor; $widget(Label307_4) configure -state disable 
        $widget(Entry307_5) configure -state disable; $widget(Entry307_5) configure -disabledbackground $PSPBackgroundColor; $widget(Label307_5) configure -state disable 
        set CohLinHH "0"; set CohLinHV "0"; set CohLinVV "0"; set CohCirLL "0"; set CohCirLR "0"; set CohCirRR "0"
        set CohPauliHHpVV "0"; set CohPauliHHmVV "0"; set CohPauliHVpVH "0"; set CohBMP "0"
        set CohOptSVD "0"; set CohOptPD "0"; set CohOptNR "0"; set CohOptMM "0"; set CohOptDF "0"; 
        set NRTheta1 ""; set NRTheta3 ""; set NptsMM ""; set NptsDF ""
        $widget(TitleFrame307_NR) configure -state disable;
        $widget(Entry307_NR1) configure -state disable; $widget(Entry307_NR1) configure -disabledbackground $PSPBackgroundColor; $widget(Label307_NR1) configure -state disable 
        $widget(Entry307_NR2) configure -state disable; $widget(Entry307_NR2) configure -disabledbackground $PSPBackgroundColor; $widget(Label307_NR2) configure -state disable 
        $widget(TitleFrame307_MM) configure -state disable;
        $widget(Entry307_MM) configure -state disable; $widget(Entry307_MM) configure -disabledbackground $PSPBackgroundColor; $widget(Label307_MM) configure -state disable 
        $widget(TitleFrame307_DF) configure -state disable;
        $widget(Entry307_DF) configure -state disable; $widget(Entry307_DF) configure -disabledbackground $PSPBackgroundColor; $widget(Label307_DF) configure -state disable 
        set CohAvg "0"
        $widget(Button307_1) configure -state disable
        WidgetShow $widget(Toplevel307); TextEditorRunTrace "Open Window Complex Coherence Estimation" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}} \
        -label {Coherence Estimation} 
    $site_6_0.men68 add cascade \
        -menu "$site_6_0.men68.men72" -command {} -label {Coherence Analysis} 
    set site_7_0 $site_6_0.men68
    menu $site_7_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men72 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CmplxPlaneDirInput CmplxPlaneDirOutput CmplxPlaneOutputDir CmplxPlaneOutputSubDir
global TMPCmplxPlaneTxt
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global BMPCmplxPlaneX BMPCmplxPlaneY BMPCmplxPlaneValue
global BMPCmplxPlaneX0 BMPCmplxPlaneY0
global CmplxPlaneHH CmplxPlaneHV CmplxPlaneVV
global CmplxPlaneHHpVV CmplxPlaneHHmVV CmplxPlaneHVpVH
global CmplxPlaneCh1 CmplxPlaneCh2 CmplxPlaneCh1pCh2 CmplxPlaneCh1mCh2
global CmplxPlaneOpt1 CmplxPlaneOpt2 CmplxPlaneOpt3
global CmplxPlaneRR CmplxPlaneLR CmplxPlaneLL
global CmplxPlaneNR1 CmplxPlaneNR2 CmplxPlaneNR3
global CmplxPlanePDH CmplxPlanePDL 
global CmplxPlaneMaxMag CmplxPlaneMinMag
global CmplxPlaneMaxPha CmplxPlaneMinPha
global CmplxPlaneMagHigh CmplxPlaneMagLow
global CmplxPlanePhaHigh CmplxPlanePhaLow
global CmplxPlaneAvgCoh
global CmplxPlaneExecFid CmplxPlaneOutputFile
global CmplxPlaneRepresentation CmplxPlaneLength
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeCmplxPlane
global GnuOutputFormat GnuOutputFile
global CmplxPlaneLabel CmplxPlaneFile CmplxPlaneTitle CmplxPlaneN

#DATA PROCESS / DUAL
global Load_CoherenceCmplxPlane Load_CoherenceCmplxPlane_PP
#BMP PROCESS
global Load_ViewBMPLens

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

set config "true"
if {$CmplxPlaneExecFid != ""} {
    set ErrorMessage "COMPLEX PLANE IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }


if {$config == "true"} {

set ConfigFile ""

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
if {$DataFormatActive == "SPP"} {
    set CmplxPlaneOutputDir ""
    set CmplxPlaneOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append CmplxPlaneOutputDir "_"
    append CmplxPlaneOutputDir $DirTmp
    set CmplxPlaneDirOutput $CmplxPlaneOutputDir
    set CmplxPlaneOutputSubDir ""
    set CmplxPlaneDirInput $CmplxPlaneOutputDir
    }

if {$DataFormatActive == "T4"} {
    set CmplxPlaneDirInput "$DataDirChannel1/T4"
    set CmplxPlaneOutputDir ""
    set CmplxPlaneOutputDir $DataDirChannel1
    set CmplxPlaneDirOutput $CmplxPlaneOutputDir
    set CmplxPlaneOutputSubDir "T4"
    }

if [file exists "$CmplxPlaneDirInput/config.txt"] {
    set BMPDirInput $CmplxPlaneDirInput
    set ConfigFile "$CmplxPlaneDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                ClosePSPViewer
                Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                set types {
                    {{BMP Files}        {.bmp}        }
                    }
                set FileName ""
                OpenFile $BMPDirInput $types "INPUT BMP FILE"

                if {$FileName != ""} {
                    set BMPImageOpen "1"
                    set BMPViewFileInput $FileName

                    if {$Load_ViewBMPLens == 0} {
                        source "GUI/bmp_process/ViewBMPLens.tcl"
                        set Load_ViewBMPLens 1
                        WmTransient $widget(Toplevel73) $PSPTopLevel
                        }
                    if {$Load_CoherenceCmplxPlane_PP == 0} {
                        source "GUI/data_process_dual/CoherenceCmplxPlane_PP.tcl"
                        set Load_CoherenceCmplxPlane_PP 1
                        WmTransient $widget(Toplevel330PP) $PSPTopLevel
                        } else {
                        $widget(CANVASLENSCMPLXPLANEPP) dtag $LineXLensInit
                        $widget(CANVASLENSCMPLXPLANEPP) dtag $LineYLensInit
                        }

                    set CmplxPlaneLabel(0) ""; for {set i 0} {$i <= 20} {incr i} {set CmplxPlaneLabel($i) ""}
                    set CmplxPlaneFile(0) ""; for {set i 0} {$i <= 20} {incr i} {set CmplxPlaneFile($i) ""}
                    set CmplxPlaneTitle(0) ""; for {set i 0} {$i <= 20} {incr i} {set CmplxPlaneTitle($i) ""}
                    set CmplxPlaneN "0"

                    $widget(Button330PP_1) configure -state disable; $widget(Button330PP_2) configure -state disable;
                    $widget(Button330PP_3) configure -state disable; $widget(Button330PP_4) configure -state disable; 
                    $widget(Checkbutton330PP_1) configure -state disable; $widget(Checkbutton330PP_2) configure -state disable
                    $widget(Checkbutton330PP_4) configure -state disable; $widget(Checkbutton330PP_5) configure -state disable
                    $widget(Checkbutton330PP_10) configure -state disable; $widget(Checkbutton330PP_11) configure -state disable
                    $widget(Checkbutton330PP_13) configure -state disable; $widget(Checkbutton330PP_14) configure -state disable
                    $widget(Checkbutton330PP_16) configure -state disable; $widget(Checkbutton330PP_17) configure -state disable; $widget(Checkbutton330PP_18) configure -state disable;
                    $widget(Checkbutton330PP_19) configure -state disable; $widget(Checkbutton330PP_20) configure -state disable; $widget(Checkbutton330PP_21) configure -state disable;
                    $widget(Checkbutton330PP_22) configure -state disable; $widget(Checkbutton330PP_23) configure -state disable; $widget(Checkbutton330PP_24) configure -state disable;
                    $widget(Checkbutton330PP_25) configure -state disable;
                    $widget(Checkbutton330PP_0) configure -state normal
                    $widget(Label330PP_1) configure -state disable
                    $widget(Entry330PP_1) configure -state disable
                    set line_color "white"
                    set b .top330PP.fra71.fra72.fra79.but80
                    $b configure -background $line_color -foreground $line_color
                    set BMPCmplxPlaneX ""; set BMPCmplxPlaneY ""
                    set BMPCmplxPlaneX0 ""; set BMPCmplxPlaneY0 ""
                    set BMPCmplxPlaneValue ""
                    set GnuOutputFormat "SCREEN"
                    set GnuOutputFile ""; set CmplxPlaneOutputFile ""
                    set CmplxPlaneRepresentation "point"; set CmplxPlaneLength "10"
                    LoadPSPViewer
                    load_bmp_caracteristics $BMPViewFileInput
                    load_bmp_file $BMPViewFileInput    
                    load_bmp_lens_line $widget(Toplevel330PP) $widget(CANVASLENSCMPLXPLANEPP)
                    MouseActiveFunction "LensCMPLXPLANEPP"
                    TextEditorRunTrace "Launch The Process Soft/data_process_dual/cmplx_plane_extract.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$CmplxPlaneDirInput\x22 \x22$TMPCmplxPlaneTxt\x22" "k"
                    set CmplxPlaneExecFid [ open "| Soft/data_process_dual/cmplx_plane_extract.exe \x22$CmplxPlaneDirInput\x22 \x22$TMPCmplxPlaneTxt\x22" r+]
                    set GnuplotPipeSave ""; set GnuplotPipeCmplxPlane ""
                    set CmplxPlaneCh1 0; set CmplxPlaneCh2 0
                    set CmplxPlaneCh1pCh2 0; set CmplxPlaneCh1mCh2 0
                    set CmplxPlaneOpt1 0; set CmplxPlaneOpt2 0
                    set CmplxPlaneNR1 0; set CmplxPlaneNR2 0
                    set CmplxPlanePDH 0; set CmplxPlanePDL 0
                    set CmplxPlaneMaxMag 0; set CmplxPlaneMinMag 0
                    set CmplxPlaneMaxPha 0; set CmplxPlaneMinPha 0
                    set CmplxPlaneMagHigh 0; set CmplxPlaneMagLow 0
                    set CmplxPlanePhaHigh 0; set CmplxPlanePhaLow 0                
                    set CmplxPlaneAvgCoh 0
                    CmplxPlaneOpenFilesPP
                    WidgetShow $widget(Toplevel330PP); TextEditorRunTrace "Open Window Coherence - Complex Plane" "b"
                    }
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
}

if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
if {$DataFormatActive == "S2"} {
    set CmplxPlaneOutputDir ""
    set CmplxPlaneOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append CmplxPlaneOutputDir "_"
    append CmplxPlaneOutputDir $DirTmp
    set CmplxPlaneDirOutput $CmplxPlaneOutputDir
    set CmplxPlaneOutputSubDir ""
    set CmplxPlaneDirInput $CmplxPlaneOutputDir
    }

if {$DataFormatActive == "T6"} {
    set CmplxPlaneDirInput "$DataDirChannel1/T6"
    set CmplxPlaneOutputDir ""
    set CmplxPlaneOutputDir $DataDirChannel1
    set CmplxPlaneDirOutput $CmplxPlaneOutputDir
    set CmplxPlaneOutputSubDir "T6"
    }

if [file exists "$CmplxPlaneDirInput/config.txt"] {
    set BMPDirInput $CmplxPlaneDirInput
    set ConfigFile "$CmplxPlaneDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                ClosePSPViewer
                Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                set types {
                    {{BMP Files}        {.bmp}        }
                    }
                set FileName ""
                OpenFile $BMPDirInput $types "INPUT BMP FILE"

                if {$FileName != ""} {
                    set BMPImageOpen "1"
                    set BMPViewFileInput $FileName

                    if {$Load_ViewBMPLens == 0} {
                        source "GUI/bmp_process/ViewBMPLens.tcl"
                        set Load_ViewBMPLens 1
                        WmTransient $widget(Toplevel73) $PSPTopLevel
                        }
                    if {$Load_CoherenceCmplxPlane == 0} {
                        source "GUI/data_process_dual/CoherenceCmplxPlane.tcl"
                        set Load_CoherenceCmplxPlane 1
                        WmTransient $widget(Toplevel330) $PSPTopLevel
                        } else {
                        $widget(CANVASLENSCMPLXPLANE) dtag $LineXLensInit
                        $widget(CANVASLENSCMPLXPLANE) dtag $LineYLensInit
                        }

                    set CmplxPlaneLabel(0) ""; for {set i 0} {$i <= 20} {incr i} {set CmplxPlaneLabel($i) ""}
                    set CmplxPlaneFile(0) ""; for {set i 0} {$i <= 20} {incr i} {set CmplxPlaneFile($i) ""}
                    set CmplxPlaneTitle(0) ""; for {set i 0} {$i <= 20} {incr i} {set CmplxPlaneTitle($i) ""}
                    set CmplxPlaneN "0"

                    $widget(Button330_1) configure -state disable; $widget(Button330_2) configure -state disable;
                    $widget(Button330_3) configure -state disable;  $widget(Button330_4) configure -state disable;
                    $widget(Checkbutton330_1) configure -state disable; $widget(Checkbutton330_2) configure -state disable; $widget(Checkbutton330_3) configure -state disable;
                    $widget(Checkbutton330_4) configure -state disable; $widget(Checkbutton330_5) configure -state disable; $widget(Checkbutton330_6) configure -state disable;
                    $widget(Checkbutton330_7) configure -state disable; $widget(Checkbutton330_8) configure -state disable; $widget(Checkbutton330_9) configure -state disable;
                    $widget(Checkbutton330_10) configure -state disable; $widget(Checkbutton330_11) configure -state disable; $widget(Checkbutton330_12) configure -state disable;
                    $widget(Checkbutton330_13) configure -state disable; $widget(Checkbutton330_14) configure -state disable; $widget(Checkbutton330_15) configure -state disable;
                    $widget(Checkbutton330_16) configure -state disable; $widget(Checkbutton330_17) configure -state disable; $widget(Checkbutton330_18) configure -state disable;
                    $widget(Checkbutton330_19) configure -state disable; $widget(Checkbutton330_20) configure -state disable; $widget(Checkbutton330_21) configure -state disable;
                    $widget(Checkbutton330_22) configure -state disable; $widget(Checkbutton330_23) configure -state disable; $widget(Checkbutton330_24) configure -state disable;
                    $widget(Checkbutton330_25) configure -state disable;
                    $widget(Checkbutton330_0) configure -state normal
                    $widget(Label330_1) configure -state disable
                    $widget(Entry330_1) configure -state disable
                    set line_color "white"
                    set b .top330.fra71.fra72.fra79.but80
                    $b configure -background $line_color -foreground $line_color
                    set BMPCmplxPlaneX ""; set BMPCmplxPlaneY ""
                    set BMPCmplxPlaneX0 ""; set BMPCmplxPlaneY0 ""
                    set BMPCmplxPlaneValue ""
                    set GnuOutputFormat "SCREEN"
                    set GnuOutputFile ""; set CmplxPlaneOutputFile ""
                    set CmplxPlaneRepresentation "point"; set CmplxPlaneLength "10"
                    LoadPSPViewer
                    load_bmp_caracteristics $BMPViewFileInput
                    load_bmp_file $BMPViewFileInput    
                    load_bmp_lens_line $widget(Toplevel330) $widget(CANVASLENSCMPLXPLANE)
                    MouseActiveFunction "LensCMPLXPLANE"
                    TextEditorRunTrace "Launch The Process Soft/data_process_dual/cmplx_plane_extract.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$CmplxPlaneDirInput\x22 \x22$TMPCmplxPlaneTxt\x22" "k"
                    set CmplxPlaneExecFid [ open "| Soft/data_process_dual/cmplx_plane_extract.exe \x22$CmplxPlaneDirInput\x22 \x22$TMPCmplxPlaneTxt\x22" r+]
                    set GnuplotPipeSave ""; set GnuplotPipeCmplxPlane ""
                    set CmplxPlaneHH 0; set CmplxPlaneHV 0; set CmplxPlaneVV 0
                    set CmplxPlaneHHpVV 0; set CmplxPlaneHHmVV 0; set CmplxPlaneHVpVH 0
                    set CmplxPlaneOpt1 0; set CmplxPlaneOpt2 0; set CmplxPlaneOpt3 0
                    set CmplxPlaneRR 0; set CmplxPlaneLR 0; set CmplxPlaneLL 0
                    set CmplxPlaneNR1 0; set CmplxPlaneNR2 0; set CmplxPlaneNR3 0
                    set CmplxPlanePDH 0; set CmplxPlanePDL 0
                    set CmplxPlaneMaxMag 0; set CmplxPlaneMinMag 0
                    set CmplxPlaneMaxPha 0; set CmplxPlaneMinPha 0
                    set CmplxPlaneMagHigh 0; set CmplxPlaneMagLow 0
                    set CmplxPlanePhaHigh 0; set CmplxPlanePhaLow 0                
                    set CmplxPlaneAvgCoh 0
                    CmplxPlaneOpenFiles
                    WidgetShow $widget(Toplevel330); TextEditorRunTrace "Open Window Coherence - Complex Plane" "b"
                    }
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
}

}
# Config Format
}} \
        -label {Complex Plane} 
    $site_7_0.men72 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global LociCmplxPlaneDirInput LociCmplxPlaneMasterDirInput LociCmplxPlaneSlaveDirInput
global LociCmplxPlaneDirOutput LociCmplxPlaneOutputDir LociCmplxPlaneOutputSubDir
global TMPLociCmplxPlaneTxt TMPLociCmplxPlaneLineTxt TMPLociCmplxPlaneLociTxt TMPLociCmplxPlaneTripletTxt
global BMPDirInput BMPViewFileInput CohPlot
global LineXLensInit LineYLensInit line_color
global BMPLociCmplxPlaneX BMPLociCmplxPlaneY BMPLociCmplxPlaneValue
global BMPLociCmplxPlaneX0 BMPLociCmplxPlaneY0
global LociCmplxPlaneExecFid LociCmplxPlaneOutputFile
global LociCmplxPlaneLoci LociCmplxPlaneTriplet LociCmplxPlaneLength
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeLociCmplxPlane
global GnuOutputFormat GnuOutputFile
global LociCmplxPlaneFileOpen

#DATA PROCESS / DUAL
global Load_CoherenceLociCmplxPlane Load_CoherenceLociCmplxPlane_PP
#BMP PROCESS
global Load_ViewBMPLens

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

set conf "true"
if {$LociCmplxPlaneExecFid != ""} {
    set ErrorMessage "COMPLEX PLANE IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set conf "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set conf "false"
    }
if {$conf == "true"} {

set ConfigFile ""
set LociCmplxPlaneDirInput ""
set LociCmplxPlaneMasterDirInput ""
set LociCmplxPlaneSlaveDirInput ""
set MasterSlaveOutputDir ""
set LociCmplxPlaneDirOutput ""
set LociCmplxPlaneOutputDir ""
set LociCmplxPlaneOutputSubDir ""

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
if {$DataFormatActive == "SPP"} {
    set LociCmplxPlaneMasterDirInput $DataDirChannel1
    set LociCmplxPlaneSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set LociCmplxPlaneOutputSubDir ""
    set LociCmplxPlaneDirInput $MasterSlaveOutputDir 
    }
if {$DataFormatActive == "T4"} {
    set LociCmplxPlaneMasterDirInput "$DataDirChannel1/T4"
    set MasterSlaveOutputDir $DataDirChannel1
    set LociCmplxPlaneOutputSubDir "T4"
    set LociCmplxPlaneDirInput $LociCmplxPlaneMasterDirInput
    }

    set LociCmplxPlaneOutputDir $MasterSlaveOutputDir 
    set LociCmplxPlaneDirOutput $MasterSlaveOutputDir 
    set BMPDirInput $LociCmplxPlaneDirInput
    set ConfigFile "$LociCmplxPlaneMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
    if {$OpenDirFile == 0} {
        set WarningMessage "OPEN A BMP FILE"
        set WarningMessage2 "TO SELECT AN AREA"
        set VarWarning ""
        Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning

        if {$VarWarning == "ok"} {
            ClosePSPViewer
            Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

            set types {
                {{BMP Files}        {.bmp}        }
                }
            set FileName ""
            OpenFile $BMPDirInput $types "INPUT BMP FILE"

            if {$FileName != ""} {
                set BMPImageOpen "1"
                set BMPViewFileInput $FileName

                if {$Load_ViewBMPLens == 0} {
                    source "GUI/bmp_process/ViewBMPLens.tcl"
                    set Load_ViewBMPLens 1
                    WmTransient $widget(Toplevel73) $PSPTopLevel
                    }
                if {$Load_CoherenceLociCmplxPlane_PP == 0} {
                    source "GUI/data_process_dual/CoherenceLociCmplxPlane_PP.tcl"
                    set Load_CoherenceLociCmplxPlane_PP 1
                    WmTransient $widget(Toplevel332PP) $PSPTopLevel
                    } else {
                    $widget(CANVASLENSLOCICMPLXPLANEPP) dtag $LineXLensInit
                    $widget(CANVASLENSLOCICMPLXPLANEPP) dtag $LineYLensInit
                    }

                DeleteFile $TMPLociCmplxPlaneTxt
                DeleteFile $TMPLociCmplxPlaneLineTxt
                DeleteFile $TMPLociCmplxPlaneLociTxt
                DeleteFile $TMPLociCmplxPlaneTripletTxt

                $widget(Button332PP_1) configure -state disable; $widget(Button332PP_2) configure -state disable;
                $widget(Button332PP_3) configure -state disable; $widget(Button332PP_6) configure -state disable; 
                $widget(Checkbutton332PP_1) configure -state disable; $widget(Checkbutton332PP_2) configure -state disable
                $widget(Label332PP_1) configure -state disable; $widget(Entry332PP_1) configure -state disable
                $widget(Radiobutton332PP_1) configure -state disable; $widget(Radiobutton332PP_2) configure -state disable
                $widget(Button332PP_5) configure -state normal
                set line_color "white"
                set b .top332PP.fra92.cpd76.but80
                $b configure -background $line_color -foreground $line_color
                set BMPLociCmplxPlaneX ""; set BMPLociCmplxPlaneY ""
                set BMPLociCmplxPlaneX0 ""; set BMPLociCmplxPlaneY0 ""
                set BMPLociCmplxPlaneValue ""
                set GnuOutputFormat "SCREEN"
                set GnuOutputFile ""; set LociCmplxPlaneOutputFile ""; set CohPlot ""
                set LociCmplxPlaneLoci 0; set LociCmplxPlaneTriplet 0; set LociCmplxPlaneLength ""
                LoadPSPViewer
                load_bmp_caracteristics $BMPViewFileInput
                load_bmp_file $BMPViewFileInput    
                load_bmp_lens_line $widget(Toplevel332PP) $widget(CANVASLENSLOCICMPLXPLANEPP)
                MouseActiveFunction "LensLOCICMPLXPLANEPPoff"

                if {$DataFormatActive == "SPP"} {
                    TextEditorRunTrace "Launch The Process Soft/data_process_dual/loci_cmplx_plane_extract_SPP.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$LociCmplxPlaneMasterDirInput\x22 \x22$LociCmplxPlaneSlaveDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" "k"
                    set LociCmplxPlaneExecFid [ open "| Soft/data_process_dual/loci_cmplx_plane_extract_SPP.exe \x22$LociCmplxPlaneMasterDirInput\x22 \x22$LociCmplxPlaneSlaveDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" r+]
                    }

                if {$DataFormatActive == "T4"} {
                    TextEditorRunTrace "Launch The Process Soft/data_process_dual/loci_cmplx_plane_extract_T4.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$LociCmplxPlaneMasterDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" "k"
                    set LociCmplxPlaneExecFid [ open "| Soft/data_process_dual/loci_cmplx_plane_extract_T4.exe \x22$LociCmplxPlaneMasterDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" r+]
                    }

                set GnuplotPipeSave ""; set GnuplotPipeLociCmplxPlane ""
                set LociCmplxPlaneFileOpen 0
                LociCmplxPlaneUpdatePP
                WidgetShow $widget(Toplevel332PP); TextEditorRunTrace "Open Window Coherence Loci - Complex Plane" "b"
                #FileName
                }
            #VarWarning
            }
        #OpenDir
        }
        #ErrorMessage   
        }
    }

if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
if {$DataFormatActive == "S2"} {
    set LociCmplxPlaneMasterDirInput $DataDirChannel1
    set LociCmplxPlaneSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set LociCmplxPlaneOutputSubDir ""
    set LociCmplxPlaneDirInput $MasterSlaveOutputDir 
    }
if {$DataFormatActive == "T6"} {
    set LociCmplxPlaneMasterDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    set LociCmplxPlaneOutputSubDir "T6"
    set LociCmplxPlaneDirInput $LociCmplxPlaneMasterDirInput
    }

    set LociCmplxPlaneOutputDir $MasterSlaveOutputDir 
    set LociCmplxPlaneDirOutput $MasterSlaveOutputDir 
    set BMPDirInput $LociCmplxPlaneDirInput
    set ConfigFile "$LociCmplxPlaneMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
    if {$OpenDirFile == 0} {
        set WarningMessage "OPEN A BMP FILE"
        set WarningMessage2 "TO SELECT AN AREA"
        set VarWarning ""
        Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning

        if {$VarWarning == "ok"} {
            ClosePSPViewer
            Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

            set types {
                {{BMP Files}        {.bmp}        }
                }
            set FileName ""
            OpenFile $BMPDirInput $types "INPUT BMP FILE"

            if {$FileName != ""} {
                set BMPImageOpen "1"
                set BMPViewFileInput $FileName

                if {$Load_ViewBMPLens == 0} {
                    source "GUI/bmp_process/ViewBMPLens.tcl"
                    set Load_ViewBMPLens 1
                    WmTransient $widget(Toplevel73) $PSPTopLevel
                    }
                if {$Load_CoherenceLociCmplxPlane == 0} {
                    source "GUI/data_process_dual/CoherenceLociCmplxPlane.tcl"
                    set Load_CoherenceLociCmplxPlane 1
                    WmTransient $widget(Toplevel332) $PSPTopLevel
                    } else {
                    $widget(CANVASLENSLOCICMPLXPLANE) dtag $LineXLensInit
                    $widget(CANVASLENSLOCICMPLXPLANE) dtag $LineYLensInit
                    }

                DeleteFile $TMPLociCmplxPlaneTxt
                DeleteFile $TMPLociCmplxPlaneLineTxt
                DeleteFile $TMPLociCmplxPlaneLociTxt
                DeleteFile $TMPLociCmplxPlaneTripletTxt

                $widget(Button332_1) configure -state disable; $widget(Button332_2) configure -state disable;
                $widget(Button332_3) configure -state disable; $widget(Button332_6) configure -state disable; 
                $widget(Checkbutton332_1) configure -state disable; $widget(Checkbutton332_2) configure -state disable
                $widget(Label332_1) configure -state disable; $widget(Entry332_1) configure -state disable
                $widget(Radiobutton332_1) configure -state disable; $widget(Radiobutton332_2) configure -state disable
                $widget(Button332_5) configure -state normal
                set line_color "white"
                set b .top332.fra92.cpd76.but80
                $b configure -background $line_color -foreground $line_color
                set BMPLociCmplxPlaneX ""; set BMPLociCmplxPlaneY ""
                set BMPLociCmplxPlaneX0 ""; set BMPLociCmplxPlaneY0 ""
                set BMPLociCmplxPlaneValue ""
                set GnuOutputFormat "SCREEN"
                set GnuOutputFile ""; set LociCmplxPlaneOutputFile ""; set CohPlot ""
                set LociCmplxPlaneLoci 0; set LociCmplxPlaneTriplet 0; set LociCmplxPlaneLength ""
                LoadPSPViewer
                load_bmp_caracteristics $BMPViewFileInput
                load_bmp_file $BMPViewFileInput    
                load_bmp_lens_line $widget(Toplevel332) $widget(CANVASLENSLOCICMPLXPLANE)
                MouseActiveFunction "LensLOCICMPLXPLANEoff"

                if {$DataFormatActive == "S2"} {
                    TextEditorRunTrace "Launch The Process Soft/data_process_dual/loci_cmplx_plane_extract_S2.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$LociCmplxPlaneMasterDirInput\x22 \x22$LociCmplxPlaneSlaveDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" "k"
                    set LociCmplxPlaneExecFid [ open "| Soft/data_process_dual/loci_cmplx_plane_extract_S2.exe \x22$LociCmplxPlaneMasterDirInput\x22 \x22$LociCmplxPlaneSlaveDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" r+]
                    }

                if {$DataFormatActive == "T6"} {
                    TextEditorRunTrace "Launch The Process Soft/data_process_dual/loci_cmplx_plane_extract_T6.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$LociCmplxPlaneMasterDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" "k"
                    set LociCmplxPlaneExecFid [ open "| Soft/data_process_dual/loci_cmplx_plane_extract_T6.exe \x22$LociCmplxPlaneMasterDirInput\x22 \x22$TMPLociCmplxPlaneTxt\x22 \x22$TMPLociCmplxPlaneLineTxt\x22 \x22$TMPLociCmplxPlaneLociTxt\x22 \x22$TMPLociCmplxPlaneTripletTxt\x22" r+]
                    }

                set GnuplotPipeSave ""; set GnuplotPipeLociCmplxPlane ""
                set LociCmplxPlaneFileOpen 0
                LociCmplxPlaneUpdate
                WidgetShow $widget(Toplevel332); TextEditorRunTrace "Open Window Coherence Loci - Complex Plane" "b"
                #FileName
                }
            #VarWarning
            }
        #OpenDir
        }
        #ErrorMessage   
        }
    }

#conf
}

# Config Format
}} \
        -label {Coherence Region - Optimum Triplet} 
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men69" -command {} \
        -label {Pol-InSAR Functionalities - 2} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men69 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men69 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HeightInvDirInput HeightInvDirOutput HeightInvOutputDir HeightInvOutputSubDir
global KzFile HeightInvNwin HeightInvFactor
global PhaseCenterHeight HeightInvDEM HeightInvCoh HeightInvRVOG

#DATA PROCESS / DUAL
global Load_HeightEstimationInversionProcedures
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_HeightEstimationInversionProcedures == 0} {
    source "GUI/data_process_dual/HeightEstimationInversionProcedures.tcl"
    set Load_HeightEstimationInversionProcedures 1
    WmTransient $widget(Toplevel319) $PSPTopLevel
    }

set ConfigFile ""

if {$DataFormatActive == "SPP"} {
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set HeightInvDirInput $MasterSlaveOutputDir 
    set HeightInvOutputSubDir ""
    }
if {$DataFormatActive == "T4"} {
    set HeightInvDirInput "$DataDirChannel1/T4"
    set MasterSlaveOutputDir $DataDirChannel1
    set HeightInvOutputSubDir "T4"
    }

if {$DataFormatActive == "S2"} {
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set HeightInvDirInput $MasterSlaveOutputDir 
    set HeightInvOutputSubDir ""
    }
if {$DataFormatActive == "T6"} {
    set HeightInvDirInput "$DataDirChannel1/T6"
    set MasterSlaveOutputDir $DataDirChannel1
    set HeightInvOutputSubDir "T6"
    }

set HeightInvOutputDir $MasterSlaveOutputDir 
set HeightInvDirOutput $HeightInvOutputDir

if [file exists "$HeightInvDirInput/config.txt"] {
    set ConfigFile "$HeightInvDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set HeightInvNwin ""; set HeightInvFactor ""; set KzFile ""
        set PhaseCenterHeight "0"; set HeightInvDEM "0"; set HeightInvCoh "0"; set HeightInvRVOG "0"
        $widget(Label319_1) configure -state disable
        $widget(ComboBox319_1) configure -state disabled -entrybg $PSPBackgroundColor
        $widget(Label319_2) configure -state disable; $widget(Button319_2) configure -state disable
        $widget(Button319_3) configure -state disable; $widget(Entry319_1) configure -state disable
        $widget(Entry319_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Label319_3) configure -state disable; $widget(Entry319_2) configure -state disable
        $widget(Entry319_2) configure -disabledbackground $PSPBackgroundColor
        $widget(Label319_4) configure -state disable; $widget(ComboBox319_2) configure -state disabled -entrybg $PSPBackgroundColor
        $widget(Label319_5) configure -state disable; $widget(ComboBox319_3) configure -state disabled -entrybg $PSPBackgroundColor
        $widget(TitleFrame319_1) configure -state disable; $widget(Button319_4) configure -state disable
        $widget(Entry319_3) configure -state disable; $widget(Entry319_3) configure -disabledbackground $PSPBackgroundColor
        $widget(Button319_1) configure -state disable
        WidgetShow $widget(Toplevel319); TextEditorRunTrace "Open Window Height Estimation from Inversion Procedures" "b"
        HeightInvUpdate
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

# Config Format
}} \
        -label {Forest Height Inversion Procedures} 
    $site_6_0.men69 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ForestHeightDirInput ForestHeightDirOutput ForestHeightOutputDir ForestHeightOutputSubDir
global KzFile KzSign ForestHeightCohAvg

#DATA PROCESS / DUAL
global Load_ForestHeightEstimation_PP Load_ForestHeightEstimation 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

set ConfigFile ""
set KzFile ""
set KzSign 0
set ForestHeightCohAvg 0

if {$DataFormatActive == "SPP" || $DataFormatActive == "T4"} {
if {$Load_ForestHeightEstimation_PP == 0} {
    source "GUI/data_process_dual/ForestHeightEstimation_PP.tcl"
    set Load_ForestHeightEstimation_PP 1
    WmTransient $widget(Toplevel313PP) $PSPTopLevel
    }

if {$DataFormatActive == "SPP"} {
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set ForestHeightDirInput $MasterSlaveOutputDir 
    set ForestHeightOutputSubDir ""
    }
if {$DataFormatActive == "T4"} {
    set ForestHeightDirInput "$DataDirChannel1/T4"
    set ForestHeightOutputSubDir "T4"
    set MasterSlaveOutputDir $DataDirChannel1
    }

set ForestHeightOutputDir $MasterSlaveOutputDir 
set ForestHeightDirOutput $ForestHeightOutputDir

if [file exists "$ForestHeightDirInput/config.txt"] {
    set ConfigFile "$ForestHeightDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "full"} {
            WidgetShow $widget(Toplevel313PP); TextEditorRunTrace "Open Window Vegetation Height Estimation" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE PARTIAL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
}

if {$DataFormatActive == "S2" || $DataFormatActive == "T6"} {
if {$Load_ForestHeightEstimation == 0} {
    source "GUI/data_process_dual/ForestHeightEstimation.tcl"
    set Load_ForestHeightEstimation 1
    WmTransient $widget(Toplevel313) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} {
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set ForestHeightDirInput $MasterSlaveOutputDir 
    set ForestHeightOutputSubDir ""
    }
if {$DataFormatActive == "T6"} {
    set ForestHeightDirInput "$DataDirChannel1/T6"
    set ForestHeightOutputSubDir "T6"
    set MasterSlaveOutputDir $DataDirChannel1
    }

set ForestHeightOutputDir $MasterSlaveOutputDir 
set ForestHeightDirOutput $ForestHeightOutputDir

if [file exists "$ForestHeightDirInput/config.txt"] {
    set ConfigFile "$ForestHeightDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" == "full"} {
            WidgetShow $widget(Toplevel313); TextEditorRunTrace "Open Window Vegetation Height Estimation" "b"
            } else {
            set ErrorMessage "INPUT DATA MUST BE FULL POLAR"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set ErrorMessage ""
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
}

# Config Format
}} \
        -label {Vegetation Height Estimation} 
    $site_6_0.men69 add separator \
        
    $site_6_0.men69 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global PCTMasterDirInput PCTSlaveDirInput PCTDir
global PCTDirOutput PCTOutputDir PCTOutputSubDir
global PCTFonction ConfigFile VarError ErrorMessage
global PCTpara KzPCTFile PCTNwinL PCTNwinC PCTEpsilon
global PCTeng PCTKzFile KzPCTFile PCTKvFile PCTTopoFile PCTHeightFile
global PCTChannel PCTPixAz PCTPixRg PCTMasterDirOutput

#DATA PROCESS / DUAL
global Load_PCT 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_PCT == 0} {
    source "GUI/data_process_dual/PolarizationCoherenceTomography.tcl"
    set Load_PCT 1
    WmTransient $widget(Toplevel342) $PSPTopLevel
    }

set PCTMasterDirInput ""
set PCTSlaveDirInput ""
set PCTDirOutput ""
set PCTOutputDir ""
set PCTOutputSubDir ""
set PCTDir ""
set ConfigFile ""

if {$DataFormatActive == "SPP"} {
    set PCTMasterDirInput $DataDirChannel1
    set PCTSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set PCTDir $MasterSlaveOutputDir
    set PCTOutputSubDir ""
    set PCTFonction "SPP"
    $widget(TitleFrame342_1) configure -text "Input Master Directory"    
    $widget(TitleFrame342_2) configure -text "Input Slave Directory"    
    $widget(Entry342_2) configure -disabledbackground #FFFFFF
    $widget(Entry342_2) configure -state disable
    }

if {$DataFormatActive == "T4"} {
    set MasterSlaveOutputDir $DataDirChannel1
    set PCTMasterDirInput "$DataDirChannel1/T4"
    set PCTDir "$DataDirChannel1/T4"
    set PCTOutputSubDir "T4"
    set PCTFonction "T4"
    $widget(TitleFrame342_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame342_2) configure -text ""
    $widget(Entry342_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry342_2) configure -state disable
    }

if {$DataFormatActive == "S2"} {
    set PCTMasterDirInput $DataDirChannel1
    set PCTSlaveDirInput $DataDirChannel2
    set MasterSlaveOutputDir ""
    set MasterSlaveOutputDir $DataDirChannel1
    set DirTmp [file tail $DataDirChannel2]
    append MasterSlaveOutputDir "_"
    append MasterSlaveOutputDir $DirTmp
    set PCTDir $MasterSlaveOutputDir
    set PCTOutputSubDir ""
    set PCTFonction "S2"
    $widget(TitleFrame342_1) configure -text "Input Master Directory"    
    $widget(TitleFrame342_2) configure -text "Input Slave Directory"    
    $widget(Entry342_2) configure -disabledbackground #FFFFFF
    $widget(Entry342_2) configure -state disable
    }

if {$DataFormatActive == "T6"} {
    set MasterSlaveOutputDir $DataDirChannel1
    set PCTMasterDirInput "$DataDirChannel1/T6"
    set PCTDir "$DataDirChannel1/T6"
    set PCTOutputSubDir "T6"
    set PCTFonction "T6"
    $widget(TitleFrame342_1) configure -text "Input Master-Slave Directory"    
    $widget(TitleFrame342_2) configure -text ""
    $widget(Entry342_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry342_2) configure -state disable
    }

    set PCTDirOutput $MasterSlaveOutputDir 
    set PCTOutputDir $MasterSlaveOutputDir 

    set ConfigFile "$PCTMasterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set PCTpara "0"; set PCTeng "0"
        set KzPCTFile ""; set PCTNwinL ""; set PCTNwinC ""; set PCTEpsilon ""
        $widget(TitleFrame342_3) configure -state disable
        $widget(Button342_1) configure -state disable
        $widget(Button342_2) configure -state disable
        $widget(Button342_3) configure -state disable
        $widget(Button342_2a) configure -state disable
        $widget(Button342_3a) configure -state disable
        $widget(Button342_4) configure -state disable
        $widget(Label342_1) configure -state disable
        $widget(Label342_1a) configure -state disable
        $widget(Label342_2) configure -state disable
        $widget(Entry342_3) configure -state disable
        $widget(Entry342_3) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_4) configure -state disable
        $widget(Entry342_4) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_4a) configure -state disable
        $widget(Entry342_4a) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_5) configure -state disable
        $widget(Entry342_5) configure -disabledbackground $PSPBackgroundColor   
        set PCTKzFile ""; set PCTKvFile ""; set PCTTopoFile ""; set PCTHeightFile ""
        set PCTChannel ""; set PCTPixAz ""; set PCTPixRg ""
        $widget(TitleFrame342_4) configure -state disable
        $widget(TitleFrame342_5) configure -state disable
        $widget(TitleFrame342_6) configure -state disable
        $widget(TitleFrame342_7) configure -state disable
        $widget(TitleFrame342_8) configure -state disable
        $widget(TitleFrame342_9) configure -state disable
        $widget(Button342_5) configure -state disable
        $widget(Button342_6) configure -state disable
        $widget(Button342_7) configure -state disable
        $widget(Button342_8) configure -state disable
        $widget(Button342_9) configure -state disable
        $widget(Button342_10) configure -state disable
        $widget(Label342_3) configure -state disable
        $widget(Label342_4) configure -state disable
        $widget(Entry342_6) configure -state disable
        $widget(Entry342_6) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_7) configure -state disable
        $widget(Entry342_7) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_8) configure -state disable
        $widget(Entry342_8) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_9) configure -state disable
        $widget(Entry342_9) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_10) configure -state disable
        $widget(Entry342_10) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry342_11) configure -state disable
        $widget(Entry342_11) configure -disabledbackground $PSPBackgroundColor
        $widget(ComboBox342_1) configure -state disabled -entrybg $PSPBackgroundColor   
        $widget(Button342_0) configure -state disable
        $widget(Button342_00) configure -state disable
        WidgetShow $widget(Toplevel342); TextEditorRunTrace "Open Window PCT" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}} \
        -label {Polarization Coherence Tomography (PCT)} 
    $site_4_0.men74.m add separator \
        
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men71" -command {} \
        -label {Polarimetric Data Analysis} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FileName HistoFileInput HistoFileOpen
global HistoDirInput HistoDirOutput HistoOutputDir HistoOutputSubDir
global TMPStatisticsTxt TMPStatisticsBin TMPStatResultsTxt
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global HistoExecFid HistoOutputFile
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeHisto
global GnuOutputFormat GnuOutputFile 
global GnuHistoTitle GnuHistoLabel GnuHistoStyle
global HistoInputFormat HistoOutputFormat
global MinMaxAutoHisto MinHisto MaxHisto
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol AreaPointN
global widget SourceWidth SourceHeight WidthBMP HeightBMP BMPWidth BMPHeight
global ZoomBMP BMPImage ImageSource BMPCanvas
global TrainingAreaToolLine rect_color VarHistoSave VarStatToolLine                    

#DATA PROCESS SNGL
global Load_Histograms
#BMP PROCESS
global Load_ViewBMPLens
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

set config "true"
if {$HistoExecFid != ""} {
    set ErrorMessage "STATISTICS - HISTOGRAM IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$config == "true"} {

    if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} {
        set HistoOutputDir ""
        set HistoOutputDir $DataDirChannel1
        set DirTmp [file tail $DataDirChannel2]
        append HistoOutputDir "_"
        append HistoOutputDir $DirTmp
        set HistoDirOutput $HistoOutputDir
        set HistoOutputSubDir ""
        set HistoDirInput $HistoOutputDir
        set BMPDirInput $HistoDirInput
        }       
    if { $DataFormatActive == "T4" } {
        set HistoDirInput "$DataDirChannel1/T4"
        set HistoDirOutput $DataDirChannel1
        set HistoOutputDir $DataDirChannel1
        set HistoOutputSubDir "T4"
        set BMPDirInput $HistoDirInput
        }
    if { $DataFormatActive == "T6" } {
        set HistoDirInput "$DataDirChannel1/T6"
        set HistoDirOutput $DataDirChannel1
        set HistoOutputDir $DataDirChannel1
        set HistoOutputSubDir "T6"
        set BMPDirInput $HistoDirInput
        }
    set ConfigFile "$HistoDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                LoadPSPViewer
                Window show $widget(Toplevel64); TextEditorRunTrace "Open Window PolSARpro Viewer" "b"

                if {$Load_Histograms == 0} {
                    source "GUI/data_process_sngl/Histograms.tcl"
                    set Load_Histograms 1
                    WmTransient $widget(Toplevel260) $PSPTopLevel
                    }
                set line_color "white"
                set b .top260.fra73.fra74.but77
                $b configure -background $line_color -foreground $line_color
                set GnuOutputFormat "SCREEN"
                set GnuOutputFile ""; set HistoOutputFile ""
                set NTrainingArea(0) 0; set AreaPoint(0) 0; set AreaPointLig(0) 0; set AreaPointCol(0) 0
                for {set i 0} {$i <= 2} {incr i} {
                    set NTrainingArea($i) ""
                    for {set j 0} {$j <= 2} {incr j} {
                        set Argument [expr (100*$i + $j)]
                        set AreaPoint($Argument) ""
                        for {set k 0} {$k <= 17} {incr k} {
                            set Argument [expr (10000*$i + 100*$j + $k)]
                            set AreaPointLig($Argument) ""
                            set AreaPointCol($Argument) ""
                            }
                        }
                    }           
                set AreaClassN 1; set NTrainingAreaClass 1; set AreaN 1; set NTrainingArea(1) 1; set AreaPointN ""
                set TrainingAreaToolLine "false"; set rect_color "white"; set VarHistoSave "no"; set VarStatToolLine "stop"                    
                set MouseInitX ""; set MouseInitY ""; set MouseEndX ""; set MouseEndY ""; set MouseNlig ""; set MouseNcol ""
                $widget(Button260_2) configure -state disable
                $widget(Button260_3) configure -state disable
                $widget(Button260_4) configure -state disable
                $widget(Button260_5) configure -state disable
                $widget(Button260_6) configure -state disable
                $widget(Radiobutton260_1) configure -state disable
                $widget(Radiobutton260_2) configure -state disable
                DeleteFile $TMPStatisticsTxt
                DeleteFile $TMPStatisticsBin
                DeleteFile $TMPStatResultsTxt
                TextEditorRunTrace "Launch The Process Soft/data_process_sngl/statistics_histogram_extract.exe" "k"
                TextEditorRunTrace "Arguments: \x22$TMPStatisticsTxt\x22 \x22$TMPStatisticsBin\x22" "k"
                set HistoExecFid [ open "| Soft/data_process_sngl/statistics_histogram_extract.exe \x22$TMPStatisticsTxt\x22 \x22$TMPStatisticsBin\x22" r+]
                set GnuplotPipeSave ""; set GnuplotPipeStat "";  set HistoFileInput ""; set HistoFileOpen 0
                set GnuHistoTitle "HISTOGRAM"; set GnuHistoLabel "Label"; set GnuHistoStyle "lines"
                set HistoInputFormat "float"; set HistoOutputFormat "real"
                $widget(Radiobutton260_3) configure -state disable; $widget(Radiobutton260_4) configure -state disable
                set MinMaxAutoHisto 1; set MinHisto "Auto"; set MaxHisto "Auto"
                $widget(TitleFrame260_1) configure -state disable; $widget(Checkbutton260_1) configure -state disable
                $widget(Label260_1) configure -state disable; $widget(Entry260_1) configure -state disable
                $widget(Label260_2) configure -state disable; $widget(Entry260_2) configure -state disable
                $widget(Button260_1) configure -state disable
                WidgetShow $widget(Toplevel260); TextEditorRunTrace "Open Window Histograms" "b"
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

# Config Format
}} \
        -label {Data Histograms} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FileName ProfileDirInput ProfileDirOutput ProfileOutputDir ProfileOutputSubDir
global TMPProfileTxt TMPProfileXTxt TMPProfileYTxt TMPProfileXYTxt
global TMPProfileXBin TMPProfileYBin TMPProfileXYBin
global TMPProfile1DXBin TMPProfile1DYBin TMPProfile3DBin
global ProfileFileInput ProfileFileOpen ProfileExecFid
global BMPDirInput BMPViewFileInput BMPImageOpen
global LineXLensInit LineYLensInit line_color PSPBackgroundColor
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeProfile
global GnuOutputFormat GnuOutputFile ProfileOutputFile 
global GnuXview GnuZview GnuOutputFile GnuProfileTitle

#DATA PROCESS SNGL
global Load_DataValueProfile
#BMP PROCESS
global Load_ViewBMPLens
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

set config "true"
if {$ProfileExecFid != ""} {
    set ErrorMessage "DATA PROFILE IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$config == "true"} {

    if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} {
        set ProfileOutputDir ""
        set ProfileOutputDir $DataDirChannel1
        set DirTmp [file tail $DataDirChannel2]
        append ProfileOutputDir "_"
        append ProfileOutputDir $DirTmp
        set ProfileDirOutput $ProfileOutputDir
        set ProfileOutputSubDir ""
        set ProfileDirInput $ProfileOutputDir
        set BMPDirInput $ProfileDirInput
        }       
    if { $DataFormatActive == "T4" } {
        set ProfileDirInput "$DataDirChannel1/T4"
        set ProfileDirOutput $DataDirChannel1
        set ProfileOutputDir $DataDirChannel1
        set ProfileOutputSubDir "T4"
        set BMPDirInput $ProfileDirInput
        }
    if { $DataFormatActive == "T6" } {
        set ProfileDirInput "$DataDirChannel1/T6"
        set ProfileDirOutput $DataDirChannel1
        set ProfileOutputDir $DataDirChannel1
        set ProfileOutputSubDir "T6"
        set BMPDirInput $ProfileDirInput
        }
    set ConfigFile "$ProfileDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT AN AREA"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                ClosePSPViewer
                Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                set types {
                    {{BMP Files}        {.bmp}        }
                    }
                set FileName ""
                OpenFile $BMPDirInput $types "INPUT BMP FILE"

                if {$FileName != ""} {
                    set BMPImageOpen "1"
                    set BMPViewFileInput $FileName

                    if {$Load_ViewBMPLens == 0} {
                        source "GUI/bmp_process/ViewBMPLens.tcl"
                        set Load_ViewBMPLens 1
                        WmTransient $widget(Toplevel73) $PSPTopLevel
                        }
                    if {$Load_DataValueProfile == 0} {
                        source "GUI/data_process_sngl/DataValueProfile.tcl"
                        set Load_DataValueProfile 1
                        WmTransient $widget(Toplevel257) $PSPTopLevel
                        } else {
                        $widget(CANVASLENSPROFILE) dtag $LineXLensInit
                        $widget(CANVASLENSPROFILE) dtag $LineYLensInit
                        }

                    set GnuplotPipeSave  ""; set GnuplotPipeProfile ""
                    set GnuOutputFormat "SCREEN"
                    set ProfileFileInput ""; set ProfileFileOpen 0

                    ProfileInitWidget
                    ProfileReset

                    set line_color "white"
                    set b .top257.fra71.cpd78.cpd71.fra87.cpd71
                    $b configure -background $line_color -foreground $line_color

                    LoadPSPViewer
                    load_bmp_caracteristics $BMPViewFileInput
                    load_bmp_file $BMPViewFileInput    
                    load_bmp_lens_line $widget(Toplevel257) $widget(CANVASLENSPROFILE)
                    MouseActiveFunction "LensPROFILE"
                    DeleteFile $TMPProfileTxt
                    DeleteFile $TMPProfileXTxt
                    DeleteFile $TMPProfileXBin
                    DeleteFile $TMPProfileYTxt
                    DeleteFile $TMPProfileYBin
                    DeleteFile $TMPProfileXYTxt
                    DeleteFile $TMPProfileXYBin
                    DeleteFile $TMPProfile1DXBin
                    DeleteFile $TMPProfile1DYBin
                    DeleteFile $TMPProfile3DBin
                    TextEditorRunTrace "Launch The Process Soft/data_process_sngl/data_profile_extract.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$TMPProfileTxt\x22 \x22$TMPProfileXTxt\x22 \x22$TMPProfileXBin\x22 \x22$TMPProfileYTxt\x22 \x22$TMPProfileYBin\x22 \x22$TMPProfileXYTxt\x22 \x22$TMPProfileXYBin\x22 \x22$TMPProfile1DXBin\x22 \x22$TMPProfile1DYBin\x22 \x22$TMPProfile3DBin\x22" "k"
                    set ProfileExecFid [ open "| Soft/data_process_sngl/data_profile_extract.exe \x22$TMPProfileTxt\x22 \x22$TMPProfileXTxt\x22 \x22$TMPProfileXBin\x22 \x22$TMPProfileYTxt\x22 \x22$TMPProfileYBin\x22 \x22$TMPProfileXYTxt\x22 \x22$TMPProfileXYBin\x22 \x22$TMPProfile1DXBin\x22 \x22$TMPProfile1DYBin\x22 \x22$TMPProfile3DBin\x22" r+]
                    WidgetShow $widget(Toplevel257); TextEditorRunTrace "Open Window Data Value - Profile" "b"
                    }
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config
    }

# Config Format
}} \
        -label {Data Profiles} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HistStatDirInput HistStatDirOutput HistStatFileInput HistStatFileOutput
global InputFormat OutputFormat HistStatFonc BMPHistStat NwinHistStatL NwinHistStatC

#DATA PROCESS
global Load_HistogramStatistics
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_HistogramStatistics == 0} {
        source "GUI/data_process_sngl/HistogramStatistics.tcl"
        set Load_HistogramStatistics 1
        WmTransient $widget(Toplevel335) $PSPTopLevel
        }

    set HistStatDirInput ""
    set HistStatDirOutput ""
    set ConfigFile ""

    if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} {
        set HistStatDirInput $DataDirChannel1
        set DirTmp [file tail $DataDirChannel2]
        append HistStatDirInput "_"
        append HistStatDirInput $DirTmp
        set HistStatDirOutput $HistStatDirInput
        }       
    if { $DataFormatActive == "T4" } {
       set HistStatDirInput "$DataDirChannel1/T4"
       set HistStatDirOutput "$DataDirChannel1/T4"
        }
    if { $DataFormatActive == "T6" } {
       set HistStatDirInput "$DataDirChannel1/T6"
       set HistStatDirOutput "$DataDirChannel1/T6"
        }
    set ConfigFile "$HistStatDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinHistStatL "7"; set NwinHistStatC "7"; set BMPHistStat ""
        set HistStatFileInput ""; set HistStatFileOutput ""
        set InputFormat ""; set OutputFormat ""; set HistStatFonc ""
        $widget(Radiobutton335_1) configure -state disable
        $widget(Radiobutton335_2) configure -state disable
        $widget(Radiobutton335_3) configure -state disable
        $widget(Radiobutton335_4) configure -state disable
        $widget(Radiobutton335_5) configure -state disable
        $widget(Radiobutton335_6) configure -state disable
        $widget(Radiobutton335_7) configure -state disable
        WidgetShow $widget(Toplevel335); TextEditorRunTrace "Open Window Histogram Based Statistics" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Histogram Based Statistics} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDirChannel1 DataDirChannel2 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global TextStatDirInput TextStatDirOutput TextStatFileInput TextStatFileOutput
global InputFormat OutputFormat TextStatFonc BMPTextStat NwinTextStatL NwinTextStatC TextOrient TextNcolor

#DATA PROCESS
global Load_TextureAnalysis
global PSPTopLevel

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    } else {

    if {$Load_TextureAnalysis == 0} {
        source "GUI/data_process_sngl/TextureAnalysis.tcl"
        set Load_TextureAnalysis 1
        WmTransient $widget(Toplevel390) $PSPTopLevel
        }

    set TextStatDirInput ""
    set TextStatDirOutput ""
    set ConfigFile ""

    if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} {
        set TextStatDirInput $DataDirChannel1
        set DirTmp [file tail $DataDirChannel2]
        append TextStatDirInput "_"
        append TextStatDirInput $DirTmp
        set TextStatDirOutput $TextStatDirInput
        }       
    if { $DataFormatActive == "T4" } {
       set TextStatDirInput "$DataDirChannel1/T4"
       set TextStatDirOutput "$DataDirChannel1/T4"
        }
    if { $DataFormatActive == "T6" } {
       set TextStatDirInput "$DataDirChannel1/T6"
       set TextStatDirOutput "$DataDirChannel1/T6"
        }
    set ConfigFile "$TextStatDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinTextStatL "7"; set NwinTextStatC "7"; set BMPTextStat ""
        set TextStatFileInput ""; set TextStatFileOutput ""
        set InputFormat ""; set OutputFormat ""; set TextStatFonc ""
        set TextOrient ""; set TextNcolor ""
        $widget(Radiobutton390_1) configure -state disable
        $widget(Radiobutton390_2) configure -state disable
        $widget(Radiobutton390_3) configure -state disable
        $widget(Radiobutton390_4) configure -state disable
        $widget(Radiobutton390_5) configure -state disable
        $widget(Radiobutton390_6) configure -state disable
        $widget(Entry390_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry390_2) configure -disabledbackground $PSPBackgroundColor
        $widget(Label390_1) configure -state disable
        $widget(Label390_2) configure -state disable
        $widget(Button390_1) configure -state disable
        $widget(Button390_2) configure -state disable
        $widget(Button390_3) configure -state disable
        $widget(Button390_4) configure -state disable

        WidgetShow $widget(Toplevel390); TextEditorRunTrace "Open Window Texture Analysis" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config Format
    }} \
        -label {Texture Analysis} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global DataDirChannel1 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global EdgeDirInput EdgeDirOutput EdgeFileInput EdgeFileOutput
global EdgeDetector EdgeCoeff InputFormat OutputFormat

#DATA PROCESS
global Load_EdgeDetector PSPTopLevel
 
set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_EdgeDetector == 0} {
    source "GUI/data_process_sngl/EdgeDetector.tcl"
    set Load_EdgeDetector 1
    WmTransient $widget(Toplevel337) $PSPTopLevel
    }

if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} { set EdgeDirInput "$DataDirChannel1" }
if {$DataFormatActive == "T4"} { set EdgeDirInput "$DataDirChannel1/T4" }
if {$DataFormatActive == "T6"} { set EdgeDirInput "$DataDirChannel1/T6" }

set EdgeDirOutput $EdgeDirInput
set InputFormat "float"
set OutputFormat "real"
set EdgeFileInput ""
set EdgeFileOutput "$EdgeDirOutput/canny_0.5.bin"
set MinMaxAutoBMP 1
set MinMaxContrastBMP 0
$widget(Label337_1) configure -state disable
$widget(Entry337_1) configure -state disable
$widget(Label337_2) configure -state disable
$widget(Entry337_2) configure -state disable
$widget(Button337_1) configure -state disable
set MinBMP "Auto"
set MaxBMP "Auto"
set EdgeDetector "canny"
set EdgeCoeff "0.5"
WidgetShow $widget(Toplevel337); TextEditorRunTrace "Open Window Edge Detector" "b"
}} \
        -label {Edge Detector} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirChannel1 FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ChangeDetectorDirOutput ChangeDetectorOutputFile
global ChangeDetectorInputFile1 ChangeDetectorInputFile2
global ChangeDetectorName ChangeDetectorNwinL ChangeDetectorNwinC
global NligInitFile1 NligEndFile1 NcolInitFile1 NcolEndFile1
global NligInitFile2 NligEndFile2 NcolInitFile2 NcolEndFile2

#DATA PROCESS
global Load_ChangeDetectorFile PSPTopLevel
 
set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

if {$Load_ChangeDetectorFile == 0} {
    source "GUI/data_process_sngl/ChangeDetectorFile.tcl"
    set Load_ChangeDetectorFile 1
    WmTransient $widget(Toplevel440) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} { set ChangeDetectorDirInput "$DataDirChannel1" }
if {$DataFormatActive == "T6"} { set ChangeDetectorDirInput "$DataDirChannel1/T6" }
if {$DataFormatActive == "SPP"} { set ChangeDetectorDirInput "$DataDirChannel1" }
if {$DataFormatActive == "T4"} { set ChangeDetectorDirInput "$DataDirChannel1/T4" }

set ChangeDetectorDirOutput $ChangeDetectorDirInput
set ChangeDetectorInputFile1 ""
set ChangeDetectorInputFile2 ""
set ChangeDetectorOutputFile ""
set ChangeDetectorNwinL ""
set ChangeDetectorNwinC ""
set ChangeDetectorName ""
set ChangeDetectorBMP "0"
set NligInitFile1 ""; set NligEndFile1 ""; set NcolInitFile1 ""; set NcolEndFile1 ""
set NligInitFile2 ""; set NligEndFile2 ""; set NcolInitFile2 ""; set NcolEndFile2 ""
WidgetShow $widget(Toplevel440); TextEditorRunTrace "Open Window Change Detector File" "b"
}} \
        -label {Change Detector} 
    menubutton $site_4_0.men68 \
        -borderwidth 0 -menu "$site_4_0.men68.m" -padx 0 -pady 0 \
        -state disabled 
    vTcl:DefineAlias "$site_4_0.men68" "PROMULT" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men68 "$site_4_0.men68 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Process Data}
    }
    menu $site_4_0.men68.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men68.m add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CoRegSlaveDirOutput CoRegFonction
global CoRegNwinRow CoRegNwinCol
global CoRegRTL CoRegCTL CoRegRTR CoRegCTR
global CoRegRC CoRegCC CoRegRBL CoRegCBL
global CoRegRBR CoRegCBR CoRegRAV CoRegCAV
global CoRegRTLMult CoRegCTLMult CoRegRTRMult CoRegCTRMult
global CoRegRCMult CoRegCCMult CoRegRBLMult CoRegCBLMult
global CoRegRBRMult CoRegCBRMult CoRegRMult CoRegCMult
global PolarCase PolarType CoRegFile 

#DATA PROCESS / MULT
global Load_CoarseCoRegistrationMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "T3" || $DataFormatActive == "C2" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_CoarseCoRegistrationMult == 0} {
    source "GUI/data_process_mult/CoarseCoRegistrationMult.tcl"
    set Load_CoarseCoRegistrationMult 1
    WmTransient $widget(Toplevel500) $PSPTopLevel
    }

set CoRegMasterDirInput ""
set CoRegSlaveDirInput ""
set CoRegSlaveDirOutput ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""
set iimult ""
set jjmult ""

for {set i 0} {$i <= 32} {incr i} {
    set CoRegRTLMult($i) ""
    set CoRegCTLMult($i) ""
    set CoRegRTRMult($i) ""
    set CoRegCTRMult($i) ""
    set CoRegRCMult($i) ""
    set CoRegCCMult($i) ""
    set CoRegRBLMult($i) ""
    set CoRegCBLMult($i) ""
    set CoRegRBRMult($i) ""
    set CoRegCBRMult($i) ""
    set CoRegRMult($i) ""
    set CoRegCMult($i) ""
    }

    set CoRegMasterDirInput $DataDirMult(1)
    set CoRegSlaveDirInput $DataDirMult(2)
    set CoRegSlaveDirOutput ""
    set CoRegNwinRow "1024"
    set CoRegNwinCol "256"
    set CoRegRTL ""; set CoRegCTL ""; set CoRegRTR ""; set CoRegCTR ""
    set CoRegRC ""; set CoRegCC ""; set CoRegRBL ""; set CoRegCBL ""
    set CoRegRBR ""; set CoRegCBR ""; set CoRegRAV ""; set CoRegCAV ""

    if {$DataFormatActive == "S2" } { set CoRegFonction "S2" }
    if {$DataFormatActive == "SPP" } { set CoRegFonction "SPP" }

    $widget(Button500_1) configure -state disable
    $widget(Button500_2) configure -state disable
    $widget(Button500_3) configure -state disable
    $widget(Button500_4) configure -state disable
    $widget(Button500_5) configure -state disable

    $widget(TitleFrame500_1) configure -state disable; $widget(TitleFrame500_2) configure -state disable
    $widget(TitleFrame500_3) configure -state disable; $widget(TitleFrame500_5) configure -state disable

    $widget(Label500_1) configure -state disable; $widget(Label500_2) configure -state disable
    $widget(Label500_3) configure -state disable; $widget(Label500_4) configure -state disable
    $widget(Label500_5) configure -state disable; $widget(Label500_6) configure -state disable
    $widget(Label500_7) configure -state disable; $widget(Label500_8) configure -state disable
    $widget(Label500_9) configure -state disable; $widget(Label500_10) configure -state disable
    $widget(Label500_11) configure -state disable; $widget(Label500_12) configure -state disable

    $widget(Entry500_1) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_2) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_3) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_4) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_5) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_6) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_7) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_8) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_9) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_10) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_11) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_12) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_11) configure -state disable; $widget(Entry500_12) configure -state disable
    $widget(Entry500_13) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_14) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_13) configure -state disable; $widget(Entry500_14) configure -state disable
    $widget(Entry500_15) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_16) configure -disabledbackground $PSPBackgroundColor
    $widget(Entry500_15) configure -state disable; $widget(Entry500_16) configure -state disable

    $widget(Entry500_21) configure -disabledbackground $PSPBackgroundColor; $widget(Entry500_21) configure -state disable

    WidgetShow $widget(Toplevel500); TextEditorRunTrace "Open Window Mult Coarse Co-Registration" "b"

}

# Config Format
}

}} \
        -label {Coarse Co-Registration} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SlrDirInput SlrDirOutput SinclairFonction
global CohDirInput CohDirOutput CohOutputDir CohOutputSubDir

#DATA PROCESS / MULT
global Load_SinclairElementsMult Load_CovarianceElementsMultT3 Load_CovarianceElementsMultC2

global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$DataFormatActive == "S2" || $DataFormatActive == "SPP"} {
    if {$Load_SinclairElementsMult == 0} {
        source "GUI/data_process_mult/SinclairElementsMult.tcl"
        set Load_SinclairElementsMult 1
        WmTransient $widget(Toplevel509) $PSPTopLevel
        }

    set SlrDirInput ""
    set SlrDirOutput ""
    set Fonction ""; set Fonction2 ""
    set ConfigFile ""

    set SinclairFonction "S2"
    set SlrDirInput $DataDirMult(1)
    set SlrDirOutput $DataDirMult(1)
    set BMPDirInput $SlrDirOutput
    set SlrtoS11 ""; set SlrtoS21 ""; set SlrtoS12 ""; set SlrtoS22 ""; set SlrtoSpan ""; set SlrtoPauli ""
    set BMPSlrtoS11 ""; set BMPSlrtoS21 ""; set BMPSlrtoS12 ""; set BMPSlrtoS22 ""; set BMPSlrtoSpan ""; set BMPSlrtoPauli ""
    $widget(Checkbutton509_1) configure -state disable
    $widget(Checkbutton509_2) configure -state disable
    $widget(Checkbutton509_3) configure -state disable
    $widget(Checkbutton509_4) configure -state disable
    $widget(Checkbutton509_5) configure -state disable
    $widget(Checkbutton509_6) configure -state disable
    set ConfigFile "$SlrDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Label509_6) configure -state disable
        $widget(Radiobutton509_19) configure -state disable
        $widget(Radiobutton509_20) configure -state disable
        $widget(Radiobutton509_21) configure -state disable
        $widget(Radiobutton509_22) configure -state disable
        if { "$PolarType" == "full"} {
            $widget(Label509_1) configure -state normal
            $widget(Label509_2) configure -state normal
            $widget(Label509_3) configure -state normal
            $widget(Label509_4) configure -state normal
            $widget(Radiobutton509_1) configure -state normal
            $widget(Radiobutton509_2) configure -state normal
            $widget(Radiobutton509_3) configure -state normal
            $widget(Radiobutton509_4) configure -state normal
            $widget(Radiobutton509_5) configure -state normal
            $widget(Radiobutton509_6) configure -state normal
            $widget(Radiobutton509_7) configure -state normal
            $widget(Radiobutton509_8) configure -state normal
            $widget(Radiobutton509_9) configure -state normal
            $widget(Radiobutton509_10) configure -state normal
            $widget(Radiobutton509_11) configure -state normal
            $widget(Radiobutton509_12) configure -state normal
            $widget(Radiobutton509_13) configure -state normal
            $widget(Radiobutton509_14) configure -state normal
            $widget(Radiobutton509_15) configure -state normal
            $widget(Radiobutton509_16) configure -state normal
            $widget(Radiobutton509_17) configure -state normal
            $widget(Radiobutton509_18) configure -state normal
            $widget(Label509_6) configure -state normal
            $widget(Radiobutton509_19) configure -state normal
            $widget(Radiobutton509_20) configure -state normal
            $widget(Radiobutton509_21) configure -state normal
            $widget(Radiobutton509_22) configure -state normal
            WidgetShow $widget(Toplevel509); TextEditorRunTrace "Open Window Sinclair Elements Mult" "b"
            }
        if { "$PolarType" == "pp1"} {
            $widget(Label509_1) configure -state normal
            $widget(Radiobutton509_1) configure -state normal
            $widget(Radiobutton509_2) configure -state normal
            $widget(Radiobutton509_3) configure -state normal
            $widget(Radiobutton509_4) configure -state normal
            $widget(Label509_2) configure -state normal
            $widget(Radiobutton509_5) configure -state normal
            $widget(Radiobutton509_6) configure -state normal
            $widget(Radiobutton509_7) configure -state normal
            $widget(Radiobutton509_8) configure -state normal
            $widget(Label509_3) configure -state disable
            $widget(Radiobutton509_9) configure -state disable
            $widget(Radiobutton509_10) configure -state disable
            $widget(Radiobutton509_11) configure -state disable
            $widget(Radiobutton509_12) configure -state disable
            $widget(Label509_4) configure -state disable
            $widget(Radiobutton509_13) configure -state disable
            $widget(Radiobutton509_14) configure -state disable
            $widget(Radiobutton509_15) configure -state disable
            $widget(Radiobutton509_16) configure -state disable
            }            
        if { "$PolarType" == "pp2"} {
            $widget(Label509_1) configure -state disable
            $widget(Radiobutton509_1) configure -state disable
            $widget(Radiobutton509_2) configure -state disable
            $widget(Radiobutton509_3) configure -state disable
            $widget(Radiobutton509_4) configure -state disable
            $widget(Label509_2) configure -state disable
            $widget(Radiobutton509_5) configure -state disable
            $widget(Radiobutton509_6) configure -state disable
            $widget(Radiobutton509_7) configure -state disable
            $widget(Radiobutton509_8) configure -state disable
            $widget(Label509_3) configure -state normal
            $widget(Radiobutton509_9) configure -state normal
            $widget(Radiobutton509_10) configure -state normal
            $widget(Radiobutton509_11) configure -state normal
            $widget(Radiobutton509_12) configure -state normal
            $widget(Label509_4) configure -state normal
            $widget(Radiobutton509_13) configure -state normal
            $widget(Radiobutton509_14) configure -state normal
            $widget(Radiobutton509_15) configure -state normal
            $widget(Radiobutton509_16) configure -state normal
            }            
        if { "$PolarType" == "pp3"} {
            $widget(Label509_1) configure -state normal
            $widget(Radiobutton509_1) configure -state normal
            $widget(Radiobutton509_2) configure -state normal
            $widget(Radiobutton509_3) configure -state normal
            $widget(Radiobutton509_4) configure -state normal
            $widget(Label509_2) configure -state disable
            $widget(Radiobutton509_5) configure -state disable
            $widget(Radiobutton509_6) configure -state disable
            $widget(Radiobutton509_7) configure -state disable
            $widget(Radiobutton509_8) configure -state disable
            $widget(Label509_3) configure -state disable
            $widget(Radiobutton509_9) configure -state disable
            $widget(Radiobutton509_10) configure -state disable
            $widget(Radiobutton509_11) configure -state disable
            $widget(Radiobutton509_12) configure -state disable
            $widget(Label509_4) configure -state normal
            $widget(Radiobutton509_13) configure -state normal
            $widget(Radiobutton509_14) configure -state normal
            $widget(Radiobutton509_15) configure -state normal
            $widget(Radiobutton509_16) configure -state normal
            }            
        $widget(Label509_5) configure -state normal
        $widget(Radiobutton509_17) configure -state normal
        $widget(Radiobutton509_18) configure -state normal
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "T3"} {
if {$Load_CovarianceElementsMultT3 == 0} {
    source "GUI/data_process_mult/CovarianceElementsMultT3.tcl"
    set Load_CovarianceElementsMultT3 1
    WmTransient $widget(Toplevel510) $PSPTopLevel
    }

set CohDirInput ""
set CohDirOutput ""
set CohOutputDir ""
set CohOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

    set CohDirInput "$DataDirMult(1)/T3"
    set CohDirOutput $DataDirMult(1)
    set CohOutputDir $DataDirMult(1)
    set CohOutputSubDir "T3"
    set BMPDirInput "$CohOutputDir/T3"
    set T3toT11 ""; set T3toT12 ""; set T3toT13 ""; set T3toT22 ""; set T3toT23 ""; set T3toT33 ""; set T3toSpan ""
    set BMPT3toT11 ""; set BMPT3toT12 ""; set BMPT3toT13 ""; set BMPT3toT22 ""; set BMPT3toT23 ""; set BMPT3toT33 ""; set BMPT3toSpan ""
    $widget(Checkbutton510_1) configure -state disable
    $widget(Checkbutton510_2) configure -state disable
    $widget(Checkbutton510_3) configure -state disable
    $widget(Checkbutton510_4) configure -state disable
    $widget(Checkbutton510_5) configure -state disable
    $widget(Checkbutton510_6) configure -state disable
    $widget(Checkbutton510_7) configure -state disable
    set ConfigFile "$CohDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        WidgetShow $widget(Toplevel510); TextEditorRunTrace "Open Window Covariance Elements T3 Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "C2"} {
if {$Load_CovarianceElementsMultC2 == 0} {
    source "GUI/data_process_mult/CovarianceElementsMultC2.tcl"
    set Load_CovarianceElementsMultC2 1
    WmTransient $widget(Toplevel511) $PSPTopLevel
    }

set CovDirInput ""
set CovDirOutput ""
set CovOutputDir ""
set CovOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

    set CovDirInput "$DataDirMult(1)/C2"
    set CovOutputDir $DataDirMult(1)
    set CovOutputSubDir "C2"
    set CovDirOutput $DataDirMult(1)
    set BMPDirInput "$CovDirOutput/C2"
    set C2toC11 ""; set C2toC12 ""; set C2toC22 ""; set C2toSpan ""
    set BMPC2toC11 ""; set BMPC2toC12 ""; set BMPC2toC22 ""; set BMPC2toSpan ""
    $widget(Checkbutton511_1) configure -state disable
    $widget(Checkbutton511_2) configure -state disable
    $widget(Checkbutton511_3) configure -state disable
    $widget(Checkbutton511_4) configure -state disable
    set ConfigFile "$CovDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if { "$PolarType" != "pp4"} {
            WidgetShow $widget(Toplevel511); TextEditorRunTrace "Open Window Covariance Elements C2 Mult" "b"
            } else {
            set ErrorMessage "IMPOSSIBLE WITH PARTIAL POLAR PP4"
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }    
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }
}
# Config Format
}} \
        -label {Matrix Elements} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men71" -command {} \
        -label {Polarimetric Speckle Filter} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc 
global NwinFilterL NwinFilterC

#SPECKLE FILTER MULT
global Load_SpeckleFilterMult PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_SpeckleFilterMult == 0} {
    source "GUI/speckle_filter/SpeckleFilterMult.tcl"
    set Load_SpeckleFilterMult 1
    WmTransient $widget(Toplevel501) $PSPTopLevel
    }

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set FilterDirOutput $DataDirMult(1)
set FilterOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "S2T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "T3"} {
    set FilterDirInput "$DataDirMult(1)/T3"
    set FilterFonc "T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "SPP"
    set FilterOutputSubDir "C2"
    }
if {$DataFormatActive == "C2"} {
    set FilterDirInput "$DataDirMult(1)/C2"
    set FilterFonc "C2"
    set FilterOutputSubDir "C2"
    }

    set FilterFunction "Soft/speckle_filter/boxcar_filter.exe"
    set FilterFonction "BOXCAR Speckle Filter"
    append FilterOutputDir "_BOX"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set Nlook "1"
        set NwinFilterL "7"
        set NwinFilterC "7"
        $widget(Label501_1) configure -state disable
        $widget(Entry501_1) configure -state disable
        $widget(Label501_2) configure -state normal
        $widget(Entry501_2) configure -state normal
        $widget(Label501_3) configure -state normal
        $widget(Entry501_3) configure -state normal
        WidgetShow $widget(Toplevel501); TextEditorRunTrace "Open Window Speckle Filter Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}

# Config Format
}} \
        -label {Box Car Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc 
global NwinFilterL NwinFilterC

#SPECKLE FILTER MULT
global Load_SpeckleFilterMult PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_SpeckleFilterMult == 0} {
    source "GUI/speckle_filter/SpeckleFilterMult.tcl"
    set Load_SpeckleFilterMult 1
    WmTransient $widget(Toplevel501) $PSPTopLevel
    }

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set FilterDirOutput $DataDirMult(1)
set FilterOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "S2T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "T3"} {
    set FilterDirInput "$DataDirMult(1)/T3"
    set FilterFonc "T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "SPP"
    set FilterOutputSubDir "C2"
    }
if {$DataFormatActive == "C2"} {
    set FilterDirInput "$DataDirMult(1)/C2"
    set FilterFonc "C2"
    set FilterOutputSubDir "C2"
    }

    set FilterFunction "Soft/speckle_filter/gaussian_filter.exe"
    set FilterFonction "GAUSSIAN Speckle Filter"
    append FilterOutputDir "_GSS"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set Nlook "1"
        set NwinFilterL "7"
        set NwinFilterC "7"
        $widget(Label501_1) configure -state disable
        $widget(Entry501_1) configure -state disable
        $widget(Label501_2) configure -state normal
        $widget(Entry501_2) configure -state normal
        $widget(Label501_3) configure -state normal
        $widget(Entry501_3) configure -state normal
        WidgetShow $widget(Toplevel501); TextEditorRunTrace "Open Window Speckle Filter Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
}

# Config Format
}} \
        -label {Gaussian Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc 
global NwinFilterL NwinFilterC

#SPECKLE FILTER MULT
global Load_SpeckleFilterMult PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_SpeckleFilterMult == 0} {
    source "GUI/speckle_filter/SpeckleFilterMult.tcl"
    set Load_SpeckleFilterMult 1
    WmTransient $widget(Toplevel501) $PSPTopLevel
    }

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set FilterDirOutput $DataDirMult(1)
set FilterOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "S2T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "T3"} {
    set FilterDirInput "$DataDirMult(1)/T3"
    set FilterFonc "T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "SPP"
    set FilterOutputSubDir "C2"
    }
if {$DataFormatActive == "C2"} {
    set FilterDirInput "$DataDirMult(1)/C2"
    set FilterFonc "C2"
    set FilterOutputSubDir "C2"
    }

    set FilterFunction "Soft/speckle_filter/idan_filter.exe"
    set FilterFonction "IDAN Speckle Filter"
    append FilterOutputDir "_IDAN"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set Nlook "1"
        set NwinFilterL "50"
        set NwinFilterC "1"
        $widget(Label501_1) configure -state disable
        $widget(Entry501_1) configure -state disable
        $widget(Label501_2) configure -state normal
        $widget(Entry501_2) configure -state normal
        $widget(Label501_3) configure -state disable
        $widget(Entry501_3) configure -state disable
        WidgetShow $widget(Toplevel501); TextEditorRunTrace "Open Window Speckle Filter Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
}

# Config Format
}} \
        -label {IDAN Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc 
global NwinFilterL NwinFilterC

#SPECKLE FILTER MULT
global Load_SpeckleFilterMult PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_SpeckleFilterMult == 0} {
    source "GUI/speckle_filter/SpeckleFilterMult.tcl"
    set Load_SpeckleFilterMult 1
    WmTransient $widget(Toplevel501) $PSPTopLevel
    }

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set FilterDirOutput $DataDirMult(1)
set FilterOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "S2T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "T3"} {
    set FilterDirInput "$DataDirMult(1)/T3"
    set FilterFonc "T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "SPP"
    set FilterOutputSubDir "C2"
    }
if {$DataFormatActive == "C2"} {
    set FilterDirInput "$DataDirMult(1)/C2"
    set FilterFonc "C2"
    set FilterOutputSubDir "C2"
    }

    set FilterFunction "Soft/speckle_filter/lee_refined_filter.exe"
    set FilterFonction "LEE Refined Speckle Filter"
    append FilterOutputDir "_LEE"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set Nlook "1"
        set NwinFilterL "7"
        set NwinFilterC "1"
        $widget(Label501_1) configure -state normal
        $widget(Entry501_1) configure -state normal
        $widget(Label501_2) configure -state normal
        $widget(Entry501_2) configure -state normal
        $widget(Label501_3) configure -state disable
        $widget(Entry501_3) configure -state disable
        WidgetShow $widget(Toplevel501); TextEditorRunTrace "Open Window Speckle Filter Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}

# Config Format
}} \
        -label {Lee Refined Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction FilterFonc
global NlookSigma Sigma NwinTgt NwinFilter

#SPECKLE FILTER MULT
global Load_SpeckleFilterMultSigma 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_SpeckleFilterMultSigma == 0} {
    source "GUI/speckle_filter/SpeckleFilterMultSigma.tcl"
    set Load_SpeckleFilterMultSigma 1
    WmTransient $widget(Toplevel503) $PSPTopLevel
    }

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set FilterDirOutput $DataDirMult(1)
set FilterOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "S2T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "T3"} {
    set FilterDirInput "$DataDirMult(1)/T3"
    set FilterFonc "T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "SPP"
    set FilterOutputSubDir "C2"
    }
if {$DataFormatActive == "C2"} {
    set FilterDirInput "$DataDirMult(1)/C2"
    set FilterFonc "C2"
    set FilterOutputSubDir "C2"
    }

    set FilterFunction "Soft/speckle_filter/lee_sigma_filter.exe"
    set FilterFonction "LEE Sigma Speckle Filter"
    append FilterOutputDir "_SIG"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NlookSigma "1"
        set Sigma "0.9"
        set NwinTgt "3"
        set NwinFilter "9"
        WidgetShow $widget(Toplevel503); TextEditorRunTrace "Open Window Speckle Filter Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}

# Config Format
}} \
        -label {Lee Sigma Filter} 
    $site_6_0.men71 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global FilterDirInput FilterDirOutput FilterOutputDir FilterOutputSubDir
global FilterFonction FilterFunction BestHVFilter FilterFonc
global NitFilter ImprovedFilter WeightFilter StrgFilter
global NwinFilterL NwinFilterC

#SPECKLE FILTER MULT
global Load_SpeckleFilterMultLopez 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_SpeckleFilterMultLopez == 0} {
    source "GUI/speckle_filter/SpeckleFilterMultLopez.tcl"
    set Load_SpeckleFilterMultLopez 1
    WmTransient $widget(Toplevel502) $PSPTopLevel
    }

set FilterDirInput ""
set FilterDirOutput ""
set FilterOutputDir ""
set FilterOutputSubDir ""
set ConfigFile ""

set NitFilter "1"
set ImprovedFilter "0"
set WeightFilter "1."
set StrgFilter "1."

set FilterDirOutput $DataDirMult(1)
set FilterOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "S2T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "T3"} {
    set FilterDirInput "$DataDirMult(1)/T3"
    set FilterFonc "T3"
    set FilterOutputSubDir "T3"
    }
if {$DataFormatActive == "SPP"} {
    set FilterDirInput $DataDirMult(1)
    set FilterFonc "SPP"
    set FilterOutputSubDir "C2"
    }
if {$DataFormatActive == "C2"} {
    set FilterDirInput "$DataDirMult(1)/C2"
    set FilterFonc "C2"
    set FilterOutputSubDir "C2"
    }

    set FilterFunction "Soft/speckle_filter/lopez_filter.exe"
    set FilterFonction "LOPEZ Speckle Filter"
    append FilterOutputDir "_LOP"
    set ConfigFile "$FilterDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinFilterL "7"
        set NwinFilterC "7"
        WidgetShow $widget(Toplevel502); TextEditorRunTrace "Open Window Speckle Filter Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}

# Config Format
}} \
        -label {Lopez Filter} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men72" -command {} \
        -label {H / A / Alpha Decomposition} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men72 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC alpbetdelgam alpbetepsdelgamnhu lambda alpha entropy anisotropy 
global combinationsHA CombHA CombH1mA Comb1mHA Comb1mH1mA
global BMPalpbetdelgam BMPalpbetepsdelgamnhu BMPlambda BMPalpha BMPentropy BMPanisotropy BMPcombinationsHA
global HAAlphaDecompositionFunction
global eigenvalues probabilities alpha12 delta12 alpdel delta shannon
global BMPeigenvalues BMPprobabilities BMPalpha12 BMPdelta12 BMPdelta
global BMPalpdel BMPshannon

#DATA PROCESS / MULT
global Load_HAAlphaDecompositionMult3 Load_HAAlphaDecompositionMult2 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {

if {$Load_HAAlphaDecompositionMult3 == 0} {
    source "GUI/data_process_mult/HAAlphaDecompositionMult3_1.tcl"
    set Load_HAAlphaDecompositionMult3 1
    WmTransient $widget(Toplevel505) $PSPTopLevel
    }
set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set HAAlpOutputDir $DataDirMult(1)
set HAAlpDirOutput $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDirMult(1)
    set HAAlpOutputSubDir ""
    set HAAlphaDecompositionFonction "S2"
    set BMPDirInput $HAAlpDirOutput
    }
if {$DataFormatActive == "T3"} {
    set HAAlpDirInput "$DataDirMult(1)/T3"
    set HAAlpOutputSubDir "T3"
    set BMPDirInput "$HAAlpDirOutput/T3"
    set HAAlphaDecompositionFonction "T3"
    }
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
            set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
            set alpbetdelgam "0"; set lambda "0"; set alpha "0"
            set entropy "0"; set anisotropy "0"
            set combinationsHA "0"
            set CombHA "0"; set CombH1mA "0"
            set Comb1mHA "0"; set Comb1mH1mA "0"
            set BMPalpbetdelgam "0"
            set BMPlambda "0"; set BMPalpha "0"
            set BMPentropy "0"; set BMPanisotropy "0"
            set BMPcombinationsHA "0"
            $widget(Checkbutton505_1) configure -state disable
            $widget(Checkbutton505_2) configure -state disable
            $widget(Checkbutton505_3) configure -state disable
            $widget(Checkbutton505_4) configure -state disable
            $widget(Checkbutton505_5) configure -state disable
            $widget(Checkbutton505_6) configure -state disable
            $widget(Checkbutton505_7) configure -state disable
            $widget(Checkbutton505_8) configure -state disable
            $widget(Checkbutton505_9) configure -state disable
            $widget(Checkbutton505_10) configure -state disable
            $widget(Checkbutton505_11) configure -state disable
            $widget(Label505_20) configure -state disable
            WidgetShow $widget(Toplevel505); TextEditorRunTrace "Open Window H A Alpha Decomposition Parameters 3 Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

if {$DataFormatActive == "SPP" || $DataFormatActive == "C2"} {

if {$Load_HAAlphaDecompositionMult2 == 0} {
    source "GUI/data_process_mult/HAAlphaDecompositionMult2.tcl"
    set Load_HAAlphaDecompositionMult2 1
    WmTransient $widget(Toplevel508) $PSPTopLevel
    }
set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set HAAlpOutputDir $DataDirMult(1)
set HAAlpDirOutput $DataDirMult(1)
if {$DataFormatActive == "SPP"} {
    set HAAlpDirInput $DataDirMult(1)
    set HAAlpOutputSubDir ""
    set BMPDirInput $HAAlpDirOutput
    set HAAlphaDecompositionFonction "SPP"
    set HAAlphaDecompositionFunction "Soft/data_process_sngl/h_a_alpha_decomposition_SPP.exe"
    }

if {$DataFormatActive == "C2"} {
    set HAAlpDirInput "$DataDirMult(1)/C2"
    set HAAlpOutputSubDir "C2"
    set BMPDirInput "$HAAlpDirOutput/C2"
    set HAAlphaDecompositionFonction "C2"
    set HAAlphaDecompositionFunction "Soft/data_process_sngl/h_a_alpha_decomposition_C2.exe"
    }
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinHAAlpL "?"; set NwinHAAlpC "?"
        set eigenvalues "0"; set probabilities "0"; set alpha12 "0"; set delta12 "0"; set alpdel "0"
        set lambda "0"; set alpha "0"; set delta "0"; set entropy "0"; set anisotropy "0";  set combinationsHA "0"
        set CombHA "0"; set CombH1mA "0"; set Comb1mHA "0"; set Comb1mH1mA "0";  set shannon "0"
        set BMPeigenvalues "0";  set BMPprobabilities "0"; set BMPalpha12 "0"; set BMPdelta12 "0"
        set BMPalpdel "0"; set BMPlambda "0"; set BMPalpha "0"; set BMPentropy "0"; set BMPanisotropy "0"
        set BMPcombinationsHA "0"; set BMPshannon "0"; set BMPdelta "0"
        $widget(Checkbutton508_1) configure -state disable
        $widget(Checkbutton508_2) configure -state disable
        $widget(Checkbutton508_3) configure -state disable
        $widget(Checkbutton508_4) configure -state disable
        $widget(Checkbutton508_5) configure -state disable
        $widget(Checkbutton508_6) configure -state disable
        $widget(Checkbutton508_7) configure -state disable
        $widget(Checkbutton508_8) configure -state disable
        $widget(Checkbutton508_9) configure -state disable
        $widget(Checkbutton508_10) configure -state disable
        $widget(Checkbutton508_11) configure -state disable
        $widget(Checkbutton508_12) configure -state disable
        $widget(Checkbutton508_13) configure -state disable
        $widget(Checkbutton508_14) configure -state disable
        $widget(Checkbutton508_15) configure -state disable
        $widget(Checkbutton508_16) configure -state disable
        WidgetShow $widget(Toplevel508); TextEditorRunTrace "Open Window H A Alpha Decomposition 2 Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    }

}
# Config Format
}} \
        -label {Decomposition Parameters} 
    $site_6_0.men72 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC alpha123 beta123 delta123 gamma123 alpbetdelgam
global alpha1234 beta1234 epsilon1234 delta1234 gamma1234 nhu1234 alpbetepsdelgamnhu
global BMPalpha123 BMPbeta123 BMPdelta123 BMPgamma123 BMPalpbetdelgam
global BMPalpha1234 BMPbeta1234 BMPepsilon1234 BMPdelta1234 BMPgamma1234 BMPnhu1234 BMPalpbetepsdelgamnhu

#DATA PROCESS / MULT
global Load_HAAlphaEigenvectorMult3
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "SPP" || $DataFormatActive == "C2" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_HAAlphaEigenvectorMult3 == 0} {
    source "GUI/data_process_mult/HAAlphaDecompositionMult3_2.tcl"
    set Load_HAAlphaEigenvectorMult3 1
    WmTransient $widget(Toplevel506) $PSPTopLevel
    }
set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set HAAlpOutputDir $DataDirMult(1)
set HAAlpDirOutput $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDirMult(1)
    set HAAlpOutputSubDir ""
    set BMPDirInput $HAAlpDirOutput
    set HAAlphaDecompositionFonction "S2"
    }
if {$DataFormatActive == "T3"} {
    set HAAlpDirInput "$DataDirMult(1)/T3"
    set HAAlpOutputSubDir "T3"
    set BMPDirInput "$HAAlpDirOutput/T3"
    set HAAlphaDecompositionFonction "T3"
    }
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
            set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
            set alpha123 "0"; set beta123 "0"
            set delta123 "0"; set gamma123 "0"
            set alpbetdelgam "0"
            set BMPalpha123 "0"; set BMPbeta123 "0"
            set BMPdelta123 "0"; set BMPgamma123 "0"
            set BMPalpbetdelgam "0"
            $widget(Checkbutton506_1) configure -state disable
            $widget(Checkbutton506_2) configure -state disable
            $widget(Checkbutton506_3) configure -state disable
            $widget(Checkbutton506_4) configure -state disable
            $widget(Checkbutton506_6) configure -state disable
            $widget(Checkbutton506_5) configure -state disable
            $widget(Label506_20) configure -state disable
            WidgetShow $widget(Toplevel506); TextEditorRunTrace "Open Window H A Alpha Eigenvector Set Parameters 3 Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}

# Config Format
}

}} \
        -label {Eigenvector Set Parameters} 
    $site_6_0.men72 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global HAAlphaDecompositionFonction EquivHAAlpDecomp
global NwinHAAlpL NwinHAAlpC eigenvalues probabilities anisotropy anisotropy12 anisotropy34 erd polarisationasymetry
global polarisationfraction lueneburganisotropy vanzylrvi vanzylpedestal shannon
global BMPeigenvalues BMPprobabilities BMPanisotropy BMPanisotropy12 BMPanisotropy34 BMPerd BMPpolarisationasymetry
global BMPpolarisationfraction BMPlueneburganisotropy BMPvanzylrvi BMPvanzylpedestal BMPshannon

#DATA PROCESS / MULT
global Load_HAAlphaEigenvalueMult3 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "SPP" || $DataFormatActive == "C2" } {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_HAAlphaEigenvalueMult3 == 0} {
    source "GUI/data_process_mult/HAAlphaDecompositionMult3_3.tcl"
    set Load_HAAlphaEigenvalueMult3 1
    WmTransient $widget(Toplevel507) $PSPTopLevel
    }
set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set HAAlpOutputDir $DataDirMult(1)
set HAAlpDirOutput $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDirMult(1)
    set HAAlpOutputSubDir ""
    set BMPDirInput $HAAlpDirOutput
    set HAAlphaDecompositionFonction "S2"
    }
if {$DataFormatActive == "T3"} {
    set HAAlpDirInput "$DataDirMult(1)/T3"
    set HAAlpOutputSubDir "T3"
    set BMPDirInput "$HAAlpDirOutput/T3"
    set HAAlphaDecompositionFonction "T3"
    }
    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
            set NwinHAAlpL "?"; set NwinHAAlpC "?"; set EquivHAAlpDecomp "0"
            set eigenvalues "0"; set probabilities "0"
            set anisotropy "0"; set anisotropy12 "0"
            set erd "0"; set polarisationasymetry "0"
            set polarisationfraction "0"
            set lueneburganisotropy "0"
            set vanzylrvi "0"; set vanzylpedestal "0"
            set shannon "0"
            set BMPeigenvalues "0"; set BMPprobabilities "0"
            set BMPanisotropy "0"; set BMPanisotropy12 "0"
            set BMPerd "0"; set BMPpolarisationasymetry "0"
            set BMPpolarisationfraction "0"
            set BMPlueneburganisotropy "0"
            set BMPvanzylrvi "0"; set BMPvanzylpedestal "0"
            set BMPshannon "0"
            $widget(Checkbutton507_1) configure -state disable
            $widget(Checkbutton507_2) configure -state disable
            $widget(Checkbutton507_3) configure -state disable
            $widget(Checkbutton507_4) configure -state disable
            $widget(Checkbutton507_5) configure -state disable
            $widget(Checkbutton507_6) configure -state disable
            $widget(Checkbutton507_7) configure -state disable
            $widget(Checkbutton507_10) configure -state disable
            $widget(Checkbutton507_11) configure -state disable
            $widget(Checkbutton507_12) configure -state disable
            $widget(Checkbutton507_13) configure -state disable
            $widget(Checkbutton507_14) configure -state disable
            $widget(Label507_20) configure -state disable
            WidgetShow $widget(Toplevel507); TextEditorRunTrace "Open Window H A Alpha Eigenvalue Set Parameters 3 Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
}

# Config Format
}

}} \
        -label {Eigenvalue Set Parameters} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men73" -command {} \
        -label {Polarimetric Segmentation} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men73 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men73 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global HAAlpDirInput HAAlpDirOutput HAAlpOutputDir HAAlpOutputSubDir
global ColorMapPlanes9 ColorMapPlanes27
global HAAlphaClassifFonction
global entropy anisotropy alpha lambda
global NwinHAAlpL NwinHAAlpC Halpha_plane HA_plane Aalpha_plane HalphaLambda_plane
global CombHA CombH1mA Comb1mHA Comb1mH1mA
global RGBHAAlpha RGBCombHA RGBTuoTuo

#DATA PROCESS / MULT
global Load_HAAlphaClassificationMult 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_HAAlphaClassificationMult == 0} {
    source "GUI/data_process_mult/HAAlphaClassificationMult.tcl"
    set Load_HAAlphaClassificationMult 1
    WmTransient $widget(Toplevel514) $PSPTopLevel
    }

set HAAlpDirInput ""
set HAAlpDirOutput ""
set HAAlpOutputDir ""
set HAAlpOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set ColorMapPlanes9 "$COLORMAPDir/Planes_H_A_Alpha_ColorMap9.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }
set ColorMapPlanes27 "$COLORMAPDir/Planes_H_Alpha_Lambda_ColorMap27.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set HAAlpOutputDir $DataDirMult(1)
set HAAlpDirOutput $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set HAAlpDirInput $DataDirMult(1)
    set HAAlpOutputSubDir ""
    set BMPDirInput $HAAlpDirOutput
    set HAAlphaClassifFonction "S2m"
    }
if {$DataFormatActive == "T3"} {
    set HAAlpDirInput "$DataDirMult(1)/T3"
    set HAAlpOutputSubDir "T3"
    set BMPDirInput "$HAAlpDirOutput/T3"
    set HAAlphaClassifFonction "T3"
    }
if {$DataFormatActive == "SPP"} {
    set HAAlpDirInput $DataDirMult(1)
    set HAAlpOutputSubDir ""
    set BMPDirInput $HAAlpDirOutput
    set HAAlphaClassifFonction "SPP"
    }
if {$DataFormatActive == "C2"} {
    set HAAlpDirInput "$DataDirMult(1)/C2"
    set HAAlpOutputSubDir "C2"
    set BMPDirInput "$HAAlpDirOutput/C2"
    set HAAlphaClassifFonction "C2"
    }

    set ConfigFile "$HAAlpDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
            set NwinHAAlpL "?"; set NwinHAAlpC "?"; set Halpha_plane "0"; set HA_plane "0"; set Aalpha_plane "0"; set HalphaLambda_plane "0"
            set entropy "0"; set anisotropy "0"; set alpha "0"; set lambda "0"
            set CombHA "0"; set CombH1mA "0"; set Comb1mHA "0"; set Comb1mH1mA "0"
            set RGBHAAlpha "0"; set RGBCombHA "0"; set RGBTuoTuo "0"
            $widget(Button514_1) configure -state disable
            $widget(Button514_2) configure -state disable
            WidgetShow $widget(Toplevel514); TextEditorRunTrace "Open Window H A Alpha Classification Mult" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}} \
        -label {H / A / Alpha Classification} 
    $site_6_0.men73 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 COLORMAPDir
global WishartDirInput WishartDirOutput WishartOutputDir WishartOutputSubDir
global ColorMapWishart8 ColorMapWishart16 RedPalette GreenPalette BluePalette
global BMPWishart WishartNwinL WishartNwinC WishartPourcentage WishartIteration
global ColorMapWishartCoded ColorMapWishartCodedPauli ColorMapWishartCodedSinclair
global WishartHAAlphaClassifFonction WishartHAAlpha

#DATA PROCESS / MULT
global Load_WishartHAAlphaClassificationMult Load_WishartHAAlphaClassificationMult_PP
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

set WishartDirInput ""
set WishartDirOutput ""
set WishartOutputDir ""
set WishartOutputSubDir ""
set Fonction ""; set Fonction2 ""
set ConfigFile ""

set BMPWishart 1
set WishartNwinL 3; set WishartNwinC 3
set WishartPourcentage 10
set WishartIteration 10

set ColorMapWishart8 "$COLORMAPDir/Wishart_ColorMap8.pal"
set ColorMapWishart16 "$COLORMAPDir/Wishart_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set ColorMapWishartCoded "0"
set ColorMapWishartCodedPauli "0"
set ColorMapWishartCodedSinclair "0"

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
if {$Load_WishartHAAlphaClassificationMult == 0} {
    source "GUI/data_process_mult/WishartHAAlphaClassificationMult.tcl"
    set Load_WishartHAAlphaClassificationMult 1
    WmTransient $widget(Toplevel518) $PSPTopLevel
    }
$widget(Checkbutton518_1) configure -state disable
$widget(Checkbutton518_2) configure -state disable
$widget(Label518_1) configure -state disable
$widget(Label518_2) configure -state disable
$widget(Label518_3) configure -state disable
$widget(Label518_4) configure -state disable
$widget(Label518_5) configure -state disable
$widget(Label518_6) configure -state disable
}

if {$DataFormatActive == "SPP" || $DataFormatActive == "C2"} {
if {$Load_WishartHAAlphaClassificationMult_PP == 0} {
    source "GUI/data_process_mult/WishartHAAlphaClassificationMult_PP.tcl"
    set Load_WishartHAAlphaClassificationMult_PP 1
    WmTransient $widget(Toplevel520) $PSPTopLevel
    }
$widget(Checkbutton520_1) configure -state disable
$widget(Checkbutton520_2) configure -state disable
$widget(Label520_1) configure -state disable
$widget(Label520_2) configure -state disable
$widget(Label520_3) configure -state disable
$widget(Label520_4) configure -state disable
$widget(Label520_5) configure -state disable
$widget(Label520_6) configure -state disable
}

set WishartDirOutput $DataDirMult(1)
set WishartOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2" } {
    set WishartDirInput $DataDirMult(1)
    set WishartOutputSubDir ""
    set BMPDirInput $WishartDirOutput
    set WishartHAAlphaClassifFonction "S2"
    }
if {$DataFormatActive == "T3" } {
    set WishartDirInput "$DataDirMult(1)/T3"
    set WishartOutputSubDir "T3"
    set BMPDirInput "$WishartDirOutput/T3"
    set WishartHAAlphaClassifFonction "T3"
    }
if {$DataFormatActive == "SPP" } {
    set WishartDirInput $DataDirMult(1)
    set WishartOutputSubDir ""
    set BMPDirInput $WishartDirOutput
    set WishartHAAlphaClassifFonction "SPP"
    }
if {$DataFormatActive == "C2" } {
    set WishartDirInput "$DataDirMult(1)/C2"
    set WishartOutputSubDir "C2"
    set BMPDirInput "$WishartDirOutput/C2"
    set WishartHAAlphaClassifFonction "C2"
    }
    set ConfigFile "$WishartDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set WishartEntropy ""; set WishartAnisotropy ""; set WishartAlpha ""
        set WishartEntropyFile ""; set WishartAnisotropyFile ""; set WishartAlphaFile ""
        if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
            WishartUpdateMult
            WidgetShow $widget(Toplevel518); TextEditorRunTrace "Open Window Wishart - H A Alpha Classification Mult" "b"
            }
        if {$DataFormatActive == "SPP" || $DataFormatActive == "C2"} {
            WishartUpdateMultPP
            WidgetShow $widget(Toplevel520); TextEditorRunTrace "Open Window Wishart - H A Alpha Classification Mult" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
}

# Config Format
}

}} \
        -label {H / A / Alpha - Wishart Classification} 
    $site_6_0.men73 add separator \
        
    $site_6_0.men73 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2 CONFIGDir COLORMAPDir
global SupervisedDirInput SupervisedDirOutput SupervisedOutputDir SupervisedOutputSubDir SupervisedTrainingProcess
global SupervisedClassifierFonction SupervisedClassifierConfusionMatrixFonction SupervisedClusterFonction
global ColorMapSupervised16 RedPalette GreenPalette BluePalette
global NTrainingAreaClass AreaClassN NTrainingArea AreaN AreaPoint AreaPointLig AreaPointCol
global FileTrainingSet FileTrainingArea BMPSupervised RejectClass RejectRatio ConfusionMatrix  VarTrainingArea
global NwinSupervisedL NwinSupervisedC SupervisedFonction ColorMapSupervisedCoded ColorMapSupervisedCodedPauli ColorMapSupervisedCodedSinclair ColorMapSupervisedCoded1 ColorMapSupervisedCoded2

#DATA PROCESS / MULT
global Load_TrainingAreas_GraphicEditor Load_WishartSupervisedClassificationMult Load_WishartSupervisedClassificationMult_PP 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_TrainingAreas_GraphicEditor == 0} {
    source "GUI/data_process_sngl/TrainingAreas_GraphicEditor.tcl"
    set Load_TrainingAreas_GraphicEditor 1
    WmTransient $widget(Toplevel47) $PSPTopLevel
    }

set SupervisedDirInput ""
set SupervisedDirOutput ""
set SupervisedOutputDir ""
set SupervisedOutputSubDir ""

set SupervisedTrainingProcess 0
set ConfigFile ""

set FileTrainingSet ""

set BMPSupervised 1
set RejectClass 0
set RejectRatio ""
set ConfusionMatrix 1
set NwinSupervisedL "3"; set NwinSupervisedC "3"

set ColorMapSupervised16 "$COLORMAPDir/Supervised_ColorMap16.pal"
for {set i 0} {$i < 256} {incr i} {
    set RedPalette($i) 1
    set GreenPalette($i) 1
    set BluePalette($i) 1
    }

set NTrainingArea(0) 0        
set AreaPoint(0) 0
set AreaPointLig(0) 0
set AreaPointCol(0) 0
for {set i 0} {$i <= 17} {incr i} {
    set NTrainingArea($i) ""
    for {set j 0} {$j <= 17} {incr j} {
        set Argument [expr (100*$i + $j)]
        set AreaPoint($Argument) ""
        for {set k 0} {$k <= 17} {incr k} {
            set Argument [expr (10000*$i + 100*$j + $k)]
            set AreaPointLig($Argument) ""
            set AreaPointCol($Argument) ""
            }
        }
    }           

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
set Fonction "FULL-POLSAR SUPERVISED CLASSIFIER"
if {$Load_WishartSupervisedClassificationMult == 0} {
    source "GUI/data_process_mult/WishartSupervisedClassificationMult.tcl"
    set Load_WishartSupervisedClassificationMult 1
    WmTransient $widget(Toplevel516) $PSPTopLevel
    }
set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCodedPauli "0"
set ColorMapSupervisedCodedSinclair "0"
$widget(Checkbutton516_1) configure -state disable
$widget(Checkbutton516_2) configure -state disable
$widget(Label516_1) configure -state disable
$widget(Label516_2) configure -state disable
$widget(Label516_3) configure -state disable
$widget(Label516_4) configure -state disable
$widget(Label516_5) configure -state disable
$widget(Label516_6) configure -state disable
}
if {$DataFormatActive == "SPP" || $DataFormatActive == "C2"} {
set Fonction "PARTIAL-POLAR SUPERVISED CLASSIFIER"
if {$Load_WishartSupervisedClassificationMult_PP == 0} {
    source "GUI/data_process_mult/WishartSupervisedClassificationMult_PP.tcl"
    set Load_WishartSupervisedClassificationMult_PP 1
    WmTransient $widget(Toplevel517) $PSPTopLevel
    }
set ColorMapSupervisedCoded "0"
set ColorMapSupervisedCoded1 "0"
set ColorMapSupervisedCoded2 "0"
$widget(Checkbutton517_1) configure -state disable
$widget(Checkbutton517_2) configure -state disable
$widget(Label517_1) configure -state disable
$widget(Label517_2) configure -state disable
$widget(Label517_3) configure -state disable
$widget(Label517_4) configure -state disable
$widget(Label517_5) configure -state disable
$widget(Label517_6) configure -state disable
}

set SupervisedOutputDir $DataDirMult(1)
set SupervisedDirOutput $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set SupervisedDirInput $DataDirMult(1)
    set SupervisedOutputSubDir ""
    set BMPDirInput $SupervisedDirOutput
    set SupervisedFonction "S2m"
    }
if {$DataFormatActive == "T3"} {
    set SupervisedDirInput "$DataDirMult(1)/T3"
    set SupervisedOutputSubDir "T3"
    set BMPDirInput "$SupervisedDirOutput/T3"
    set SupervisedFonction "T3"
    }
if {$DataFormatActive == "SPP"} {
    set SupervisedDirInput $DataDirMult(1)
    set SupervisedOutputSubDir ""
    set BMPDirInput $SupervisedDirOutput
    set SupervisedFonction "SPP"
    }
if {$DataFormatActive == "C2"} {
    set SupervisedDirInput "$DataDirMult(1)/C2"
    set SupervisedOutputSubDir "C2"
    set BMPDirInput "$SupervisedDirOutput/C2"
    set SupervisedFonction "C2"
    }
    set ConfigFile "$SupervisedDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
            if [file exists "$SupervisedDirInput/wishart_training_areas.txt"] {
                set FileTrainingArea "$SupervisedDirInput/wishart_training_areas.txt"
                } else {
                set FileTrainingArea "$CONFIGDir/wishart_training_areas.txt"
                } 
            set NTrainingArea(0) 0        
            set AreaPoint(0) 0
            set AreaPointLig(0) 0
            set AreaPointCol(0) 0
            set f [open $FileTrainingArea r]
            gets $f tmp
            gets $f NTrainingAreaClass
            gets $f tmp
            for {set i 1} {$i <= $NTrainingAreaClass} {incr i} {
                gets $f tmp
                gets $f tmp
                gets $f NTrainingArea($i)
                gets $f tmp
                for {set j 1} {$j <= $NTrainingArea($i)} {incr j} {
                    gets $f tmp
                    gets $f NAreaPoint
                    set Argument [expr (100*$i + $j)]
                    set AreaPoint($Argument) $NAreaPoint
                    for {set k 1} {$k <= $NAreaPoint} {incr k} {
                        gets $f tmp
                        set Argument1 [expr (10000*$i + 100*$j + $k)]
                        gets $f tmp
                        gets $f AreaPointLig($Argument1)
                        gets $f tmp
                        gets $f AreaPointCol($Argument1)
                        }
                    gets $f tmp
                    }
                }
            close $f

            set AreaClassN 1
            set AreaN 1
            if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
            $widget(Label516_7) configure -state disable
            $widget(Entry516_1) configure -state disable
            $widget(Button516_1) configure -state disable
            $widget(Button516_2) configure -state disable
            $widget(Button516_3) configure -state disable
            $widget(Button516_4) configure -state disable
            WidgetShow $widget(Toplevel516); TextEditorRunTrace "Open Window Wishart Supervised Classification Mult" "b"
            }
            if {$DataFormatActive == "SPP" || $DataFormatActive == "C2"} {
            $widget(Label517_7) configure -state disable
            $widget(Entry517_1) configure -state disable
            $widget(Button517_1) configure -state disable
            $widget(Button517_2) configure -state disable
            $widget(Button517_3) configure -state disable
            $widget(Button517_4) configure -state disable
            WidgetShow $widget(Toplevel517); TextEditorRunTrace "Open Window Wishart Supervised Classification Mult" "b"
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
 
}
# Config Format
}} \
        -label {Wishart Supervised Classification} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men70" -command {} \
        -label {Polarimetric Functionalities} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men70 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaFaraday 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Faraday Rotation Estimation} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3" } {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaConformity 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Conformity Coefficient} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaScattPred 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Scattering Predominance} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaScattDiv 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Scattering Diversity} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaDegPur 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Degree of Purity} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaDepInd 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Depolarisation Index} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP ParaName
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""; set ParaName ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaAlpha 1; set ParaName "prakscolin"; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Alpha Approximation (Praks & Colin)} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP ParaName
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""; set ParaName ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaAlpha 1; set ParaName "ancuiyang"; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Alpha Approximation (An, Cui & Yang)} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP ParaName
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""; set ParaName ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaEntropy 1; set ParaName "prakscolin"; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Entropy Approximation (Praks & Colin)} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP ParaName
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""; set ParaName ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaEntropy 1; set ParaName "ancuiyang"; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Entropy Approximation (An, Cui & Yang)} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaFreemanEntropy 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Scattering Mechanism Entropy (Freeman)} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaVanZylEntropy 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Scattering Mechanism Entropy (Van Zyl)} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaKozlovAni 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Kozlov Anisotropy} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaLueneburgAni 1; WidgetOn519Mult
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Lueneburg Anisotropy} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParaConformity ParaFaraday
global ParaScattPred ParaScattDiv ParaDegPur ParaDepInd ParaEntropy ParaAlpha
global ParaKozlovAni ParaLueneburgAni ParaFreemanEntropy ParaVanZylEntropy 
global ParaPPS ParaPPSp1 ParaPPSalpha1
global ParaNwinL ParaNwinC ParaBMP
global ParaPOC ParaRVOG

#DATA PROCESS SNGL
global Load_ParametersMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2" || $DataFormatActive == "T3"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMult == 0} {
        source "GUI/data_process_mult/ParametersMult.tcl"
        set Load_ParametersMult 1
        WmTransient $widget(Toplevel519) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParaConformity 0; set ParaFaraday 0
    set ParaScattPred 0; set ParaScattDiv 0; 
    set ParaDegPur 0; set ParaDepInd 0;
    set ParaEntropy 0; set ParaAlpha 0;
    set ParaKozlovAni 0; set ParaLueneburgAni 0;
    set ParaFreemanEntropy 0; set ParaVanZylEntropy 0
    set ParaPPS 0; set ParaPPSp1 ""; set ParaPPSalpha1 ""
    set ParaPOC 0; set ParaRVOG 0;
       
    set ParaNwinL "?"; set ParaNwinC "?"
    set ParaBMP 0; WidgetOn519Mult
       
    $widget(TitleFrame519_1) configure -state disable -relief flat
    $widget(TitleFrame519_1) configure -text ""
    $widget(Label519_1) configure -state disable
    $widget(Label519_1) configure -text ""
    $widget(Entry519_1) configure -state disable -relief flat
    $widget(Entry519_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Label519_2) configure -state disable
    $widget(Label519_2) configure -text ""
    $widget(Entry519_2) configure -state disable -relief flat
    $widget(Entry519_2) configure -disabledbackground $PSPBackgroundColor

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }
    if {$DataFormatActive == "T3"} {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {   
        set ParaPPS 1; set ParaPPSp1 "?"; set ParaPPSalpha1 "?"; WidgetOn519Mult
        $widget(TitleFrame519_1) configure -state normal -relief groove
        $widget(TitleFrame519_1) configure -text "P.P.S Detection"
        $widget(Label519_1) configure -state normal
        $widget(Label519_1) configure -text "p1"
        $widget(Entry519_1) configure -state normal -relief sunken
        $widget(Entry519_1) configure -disabledbackground #FFFFFF
        $widget(Label519_2) configure -state normal
        $widget(Label519_2) configure -text "alpha 1"
        $widget(Entry519_2) configure -state normal -relief sunken
        $widget(Entry519_2) configure -disabledbackground #FFFFFF
        WidgetShow $widget(Toplevel519); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}
}} \
        -label {Polarized Point Scatterer Detection} 
    $site_6_0.men70 add separator \
        
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParametersFonctionPP
global ParaHHovHV ParaHVovHH ParaHHovVV ParaVVovHH ParaHVovVV ParaVVovHV
global ParaHHovVH ParaVHovHH ParaHVovVH ParaVHovHV ParaVHovVV ParaVVovVH
global ParaNwinL ParaNwinC ParaBMP  

#DATA PROCESS SNGL
global Load_ParametersMultPR
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMultPR == 0} {
        source "GUI/data_process_mult/ParametersPRMult.tcl"
        set Load_ParametersMultPR 1
        WmTransient $widget(Toplevel519a) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }       
    if {$DataFormatActive == "C2"} {
        set ParametersDirInput "$DataDirMult(1)/C2"
        set ParametersOutputSubDir "C2"
        set BMPDirInput "$ParametersDirOutput/C2"
        set ParametersFonction "C2"
        }    
    if { $DataFormatActive == "T3" } {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "SPP"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "SPP"
        set ParametersFonctionPP $PolarType
        }    
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set ParaHHovHV 0; set ParaHVovHH 0; set ParaHHovVV 0; set ParaVVovHH 0; set ParaHVovVV 0; set ParaVVovHV 0
        set ParaHHovVH 0; set ParaVHovHH 0; set ParaHVovVH 0; set ParaVHovHV 0; set ParaVHovVV 0; set ParaVVovVH 0
        set ParaNwinL "?"; set ParaNwinC "?"
        set ParaBMP 0; WidgetOn519aMult
        WidgetShow $widget(Toplevel519a); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}} \
        -label {Reflectivity Ratio} 
    $site_6_0.men70 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ParametersDirInput ParametersDirOutput ParametersOutputDir ParametersOutputSubDir
global ParametersFonction ParametersFonctionPP 
global ParaZDRHHHV ParaZDRHVHH ParaZDRHHVV ParaZDRVVHH ParaZDRHVVV ParaZDRVVHV
global ParaZDRHHVH ParaZDRVHHH ParaZDRHVVH ParaZDRVHHV ParaZDRVHVV ParaZDRVVVH
global ParaNwinL ParaNwinC ParaBMP 

#DATA PROCESS SNGL
global Load_ParametersMultZDR
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ParametersMultZDR == 0} {
        source "GUI/data_process_mult/ParametersZDRMult.tcl"
        set Load_ParametersMultZDR 1
        WmTransient $widget(Toplevel519b) $PSPTopLevel
        }

    set ParametersDirInput ""
    set ParametersDirOutput ""
    set ParametersOutputDir ""
    set ParametersOutputSubDir ""
    set ConfigFile ""

    set ParametersDirOutput $DataDirMult(1)
    set ParametersOutputDir $DataDirMult(1)
    if {$DataFormatActive == "S2"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        if { "$PolarCase" == "monostatic"} { set ParametersFonction "S2m" }
        if { "$PolarCase" == "bistatic"} { set ParametersFonction "S2b" }
        }       
    if {$DataFormatActive == "C2"} {
        set ParametersDirInput "$DataDirMult(1)/C2"
        set ParametersOutputSubDir "C2"
        set BMPDirInput "$ParametersDirOutput/C2"
        set ParametersFonction "C2"
        }    
    if { $DataFormatActive == "T3" } {
        set ParametersDirInput "$DataDirMult(1)/T3"
        set ParametersOutputSubDir "T3"
        set BMPDirInput "$ParametersDirOutput/T3"
        set ParametersFonction "T3"
        }
    if {$DataFormatActive == "SPP"} {
        set ParametersDirInput $DataDirMult(1)
        set ParametersOutputSubDir ""
        set BMPDirInput $ParametersDirOutput
        set ParametersFonction "SPP"
        set ParametersFonctionPP $PolarType
        }    
    set ConfigFile "$ParametersDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set ParaZDRHHHV 0; set ParaZDRHVHH 0; set ParaZDRHHVV 0; set ParaZDRVVHH 0; set ParaZDRHVVV 0; set ParaZDRVVHV 0
        set ParaZDRHHVH 0; set ParaZDRVHHH 0; set ParaZDRHVVH 0; set ParaZDRVHHV 0; set ParaZDRVHVV 0; set ParaZDRVVVH 0
        set ParaNwinL "?"; set ParaNwinC "?"
        set ParaBMP 0; WidgetOn519bMult
        WidgetShow $widget(Toplevel519b); TextEditorRunTrace "Open Window Parameters" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}} \
        -label {Differential Reflectivity (ZDR)} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive 
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global PTOMDirInput PTOMDirOutput PTOMOutputDir PTOMOutputSubDir
global PTOMProcessDirInput PTOMProcessDirOutput PTOMProcessOutputDir PTOMProcessOutputSubDir
global PTOMSRmin PTOMSRmax PTOMSRunit PTOMTHmin PTOMTHmax PTOMTHunit PTOMSRtomo PTOMTHtomo
global PTOMDEMFile PTOMHeightFile
global BMPPTOMX BMPPTOMY BMPPTOMValue
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global PTOMNwinL PTOMNwinC PTOMDEM PTOMalgo PTOMSlice PTOMzmin PTOMzmax PTOMdz
global PTOMhh PTOMhv PTOMvv PTOMhhpvv PTOMhhmvv PTOMrr PTOMlr PTOMll PTOMspan PTOMcorrT3 PTOMcorrC3 PTOMcorrCCC PTOMcorrCCCN
global PTOMnned PTOMvz PTOMfree PTOMsingh PTOMyam PTOMhaalp PTOMshannon PTOMerd PTOMprob PTOMasym 
global PTOMprocessNwinL PTOMprocessNwinC PSPBackgroundColor
#BMP PROCESS
global Load_ViewBMPLens
#DATA PROCESS MULT
global Load_PolarTomography PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }
if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY NOT AVAILABLE FOR THIS"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {
    CheckDataDirMult
    if {$TestDataDirMult == "OK"} {
        set PTOMProcessDirInput ""
        set PTOMProcessDirOutput ""
        set PTOMProcessOutputDir ""
        set PTOMProcessOutputSubDir ""

        set ConfigFile ""

        set PTOMDirInput $DataDirMult(1)
        set PTOMDirOutput $DataDirMult(1)
        set PTOMOutputDir $DataDirMult(1)
        append PTOMOutputDir "/profile_beamformer_woDEM_col_1"
        set PTOMOutputSubDir "T3"

        set PTOMSRmin "?"
        set PTOMSRmax "?"
        set PTOMSRunit ""
        set PTOMTHmin "?"
        set PTOMTHmax "?"
        set PTOMTHunit ""
        set PTOMSRtomo "KO"
        set PTOMTHtomo "KO"

        set ConfigFile "$PTOMDirInput/config.txt"
        set ErrorMessage ""
        LoadConfigTomo
        if {"$ErrorMessage" == ""} {
            if {$OpenDirFile == 0} {     
                set WarningMessage "OPEN A BMP FILE"
                set WarningMessage2 "TO SELECT AN AREA"
                set VarWarning ""
                Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
                tkwait variable VarWarning

                if {$VarWarning == "ok"} {
                    ClosePSPViewer
                    Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                    set types {
                        {{BMP Files}        {.bmp}        }
                        }
                    set FileName ""
                    OpenFile $BMPDirInput $types "INPUT BMP FILE"

                    if {$FileName != ""} {
                        set BMPImageOpen "1"
                        set BMPViewFileInput $FileName
                        Window show $widget(Toplevel336); TextEditorRunTrace "Open Window Loading BMP" "b"

                        if {$Load_ViewBMPLens == 0} {
                            source "GUI/bmp_process/ViewBMPLens.tcl"
                            set Load_ViewBMPLens 1
                            WmTransient .top73 $PSPTopLevel
                            }
                        if {$Load_PolarTomography == 0} {
                            source "GUI/data_process_mult/PolarTomography.tcl"
                            set Load_PolarTomography 1
                            WmTransient $widget(Toplevel523) $PSPTopLevel
                            } else {
                            $widget(CANVASLENSPTOM) dtag $LineXLensInit
                            $widget(CANVASLENSPTOM) dtag $LineYLensInit
                            }
                        set line_color "white"
                        #set b .top523.fra71.fra72.fra79.but80
                        #$b configure -background $line_color -foreground $line_color
                        set BMPPTOMX ""; set BMPPTOMY ""; set BMPPTOMValue ""
                        LoadPSPViewer
                        load_bmp_caracteristics $BMPViewFileInput
                        load_bmp_file $BMPViewFileInput    
                        load_bmp_lens_line $widget(Toplevel523) $widget(CANVASLENSPTOM)
                        MouseActiveFunction "LensPTOM"
                        Window hide $widget(Toplevel336); TextEditorRunTrace "Close Window Loading BMP" "b"
                        $widget(TitleFrame523_3) configure -state disable; $widget(TitleFrame523_4) configure -state disable
                        $widget(TitleFrame523_5) configure -state disable; $widget(TitleFrame523_6) configure -state disable
                        $widget(TitleFrame523_8) configure -state disable; $widget(TitleFrame523_9) configure -state disable
                        $widget(Entry523_3) configure -state disable; $widget(Entry523_3) configure -disabledbackground $PSPBackgroundColor
                        $widget(Radiobutton523_1) configure -state disable; $widget(Radiobutton523_2) configure -state disable
                        $widget(Button523_3) configure -state disable; $widget(Button523_4) configure -state disable
                        $widget(Button523_5) configure -state disable; $widget(Button523_6) configure -state disable
                        $widget(Checkbutton523_1) configure -state disable; $widget(Checkbutton523_2) configure -state disable
                        $widget(Checkbutton523_3) configure -state disable; $widget(Checkbutton523_4) configure -state disable
                        $widget(Checkbutton523_5) configure -state disable; $widget(Checkbutton523_6) configure -state disable
                        $widget(Checkbutton523_7) configure -state disable; $widget(Checkbutton523_8) configure -state disable
                        $widget(Checkbutton523_9) configure -state disable; $widget(Checkbutton523_10) configure -state disable
                        $widget(Checkbutton523_11) configure -state disable; $widget(Checkbutton523_12) configure -state disable
                        $widget(Checkbutton523_13) configure -state disable; $widget(Checkbutton523_14) configure -state disable
                        $widget(Checkbutton523_15) configure -state disable; $widget(Checkbutton523_16) configure -state disable
                        $widget(Checkbutton523_17) configure -state disable; $widget(Checkbutton523_18) configure -state disable
                        $widget(Checkbutton523_19) configure -state disable; $widget(Checkbutton523_20) configure -state disable
                        $widget(Checkbutton523_21) configure -state disable; $widget(Checkbutton523_22) configure -state disable
                        $widget(Checkbutton523_23) configure -state disable
                        set PTOMhh ""; set PTOMhv ""; set PTOMvv ""; set PTOMhhpvv ""; set PTOMhhmvv ""; set PTOMrr ""; set PTOMlr ""; set PTOMll ""
                        set PTOMspan ""; set PTOMcorrT3 ""; set PTOMcorrC3 ""; set PTOMcorrCCC ""; set PTOMcorrCCCN ""
                        set PTOMnned ""; set PTOMvz ""; set PTOMfree ""; set PTOMsingh ""; set PTOMyam ""
                        set PTOMhaalp ""; set PTOMshannon ""; set PTOMprob ""; set PTOMasym ""; set PTOMerd ""
                        set PTOMprocessNwinL ""; set PTOMprocessNwinC ""; set PTOMDEM ""
                        set PTOMNwinL "7"; set PTOMNwinC "7"; set PTOMDEM "1"; set PTOMalgo ""
                        set PTOMSlice "col"; set PTOMzmin "?"; set PTOMzmax "?"; set PTOMdz "?"                      
                        if [file exists "$PTOMDirInput/DEM.bin"] {
                            set PTOMDEMFile "$PTOMDirInput/DEM.bin"
                            } else {
                            set PTOMDEMFile "Select Input Slant-Range DEM File"
                            }
                        if [file exists "$PTOMDirInput/z_top.bin"] {
                            set PTOMHeightFile "$PTOMDirInput/z_top.bin"
                            } else {
                            set PTOMHeightFile "Select Input Slant-Range Top Height File"
                            }                      
                        WidgetShow $widget(Toplevel523); TextEditorRunTrace "Open Window Polarimetric Tomography" "b"
                        }
                    }
                }
            } else {
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            }
        # Test
        }
    # Config Format
    }} \
        -label {Polarimetric Tomography} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men74" -command {} \
        -label {Multi-Datasets Analysis} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men74 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men74 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global MultDataDirInput MultDataBinFile
global MultDataAvg MultDataStd MultDataCV MultDataBMP MultDataNwinL MultDataNwinC
global MultDataFormatIn MultDataFormatOut MultDataFonction

#DATA PROCESS / MULT
global Load_DataAnalysisMult
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_DataAnalysisMult == 0} {
    source "GUI/data_process_mult/DataAnalysisMult.tcl"
    set Load_DataAnalysisMult 1
    WmTransient $widget(Toplevel512) $PSPTopLevel
    }

set MultDataDirInput ""
set MultDataBinFile ""
set ConfigFile ""

set MultDataAvg 0
set MultDataStd 0
set MultDataCV 0
set MultDataBMP 0
set MultDataNwinL "?"
set MultDataNwinC "?"
set MultDataFormatIn ""
set MultDataFormatOut ""

if {$DataFormatActive == "S2"} {
    set MultDataFonction "S2"
    set MultDataDirInput $DataDirMult(1)
    }
if {$DataFormatActive == "T3"} {
    set MultDataFonction "T3"
    set MultDataDirInput "$DataDirMult(1)/T3"
    }
if {$DataFormatActive == "SPP"} {
    set MultDataFonction "SPP"
    set MultDataDirInput $DataDirMult(1)
    }
if {$DataFormatActive == "C2"} {
    set MultDataFonction "C2"
    set MultDataDirInput "$DataDirMult(1)/C2"
    }
    set ConfigFile "$MultDataDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Button512_0) configure -state disable
        $widget(Radiobutton512_1) configure -state disable
        $widget(Radiobutton512_2) configure -state disable
        $widget(Radiobutton512_3) configure -state disable
        $widget(Radiobutton512_4) configure -state disable
        $widget(Radiobutton512_5) configure -state disable
        WidgetShow $widget(Toplevel512); TextEditorRunTrace "Open Window Mult Data Analysis" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set ConfigFile ""
        }

}
# Config Format
}} \
        -label {Avg / Std / CV Analysis} 
    $site_6_0.men74 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global MultAvgDirInput MultAvgDirOutput MultAvgOutputDir MultAvgOutputSubDir
global MultAvgFonction MultAvgFunction MultAvgFonc NwinMultAvgL NwinMultAvgC

#DATA PROCESS / MULT
global Load_DataAveragingMult 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_DataAveragingMult == 0} {
    source "GUI/data_process_mult/DataAveragingMult.tcl"
    set Load_DataAveragingMult 1
    WmTransient $widget(Toplevel515) $PSPTopLevel
    }

set MultAvgDirInput ""
set MultAvgDirOutput ""
set MultAvgOutputDir ""
set MultAvgOutputSubDir ""
set ConfigFile ""

set MultAvgDirOutput $DataDirMult(1)
set MultAvgOutputDir $DataDirMult(1)
if {$DataFormatActive == "S2"} {
    set MultAvgDirInput $DataDirMult(1)
    append MultAvgOutputDir "_AVG"
    set MultAvgOutputSubDir "T3"
    set MultAvgFonction "Multi Time / Freq Averaging S2 -> T3"
    set MultAvgFonc "S2T3"
    set MultAvgFunction "Soft/data_process_mult/data_averaging_mult_S2.exe"
    }
if {$DataFormatActive == "T3"} {
    set MultAvgDirInput "$DataDirMult(1)/T3"
    append MultAvgOutputDir "_AVG"
    set MultAvgOutputSubDir "T3"
    set MultAvgFonction "Multi Time / Freq Averaging T3 -> T3"
    set MultAvgFonc "T3"
    set MultAvgFunction "Soft/data_process_mult/data_averaging_mult_T3.exe"
    }
if {$DataFormatActive == "SPP"} {
    set MultAvgDirInput $DataDirMult(1)
    append MultAvgOutputDir "_AVG"
    set MultAvgOutputSubDir "C2"
    set MultAvgFonction "Multi Time / Freq Averaging SPP -> C2"
    set MultAvgFonc "SPPC2"
    set MultAvgFunction "Soft/data_process_mult/data_averaging_mult_SPP.exe"
    }
if {$DataFormatActive == "C2"} {
    set MultAvgDirInput "$DataDirMult(1)/C2"
    append MultAvgOutputDir "_AVG"
    set MultAvgOutputSubDir "C2"
    set MultAvgFonction "Multi Time / Freq Averaging C2 -> C2"
    set MultAvgFonc "C2"
    set MultAvgFunction "Soft/data_process_mult/data_averaging_mult_C2.exe"
    }
    set ConfigFile "$MultAvgDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set NwinMultAvgL "3"
        set NwinMultAvgC "3"
        WidgetShow $widget(Toplevel515); TextEditorRunTrace "Open Window Multi Time / Freq Averaging" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

}
# Config Format
}} \
        -label {Time / Freq Data Averaging} 
    $site_6_0.men74 add separator \
        
    $site_6_0.men74 add cascade \
        -menu "$site_6_0.men74.men66" -command {} -label {Change Detector} 
    set site_7_0 $site_6_0.men74
    menu $site_7_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men66 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ChangeDetectorDirOutput ChangeDetectorOutputFile
global ChangeDetectorInputFile1 ChangeDetectorInputFile2
global ChangeDetectorName ChangeDetectorNwinL ChangeDetectorNwinC
global NligInitFile1 NligEndFile1 NcolInitFile1 NcolEndFile1
global NligInitFile2 NligEndFile2 NcolInitFile2 NcolEndFile2

#DATA PROCESS
global Load_ChangeDetectorFileMult PSPTopLevel
 
set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_ChangeDetectorFileMult == 0} {
    source "GUI/data_process_mult/ChangeDetectorFileMult.tcl"
    set Load_ChangeDetectorFileMult 1
    WmTransient $widget(Toplevel521) $PSPTopLevel
    }

if {$DataFormatActive == "S2"} { set ChangeDetectorDirInput "$DataDirMult(1)" }
if {$DataFormatActive == "C2"} { set ChangeDetectorDirInput "$DataDirMult(1)/C2" }
if {$DataFormatActive == "T3"} { set ChangeDetectorDirInput "$DataDirMult(1)/T3" }
if {$DataFormatActive == "SPP"} { set ChangeDetectorDirInput "$DataDirMult(1)" }

set ChangeDetectorDirOutput $ChangeDetectorDirInput
set ChangeDetectorInputFile1 ""
set ChangeDetectorInputFile2 ""
set ChangeDetectorOutputFile ""
set ChangeDetectorNwinL "?"
set ChangeDetectorNwinC "?"
set ChangeDetectorName ""
set ChangeDetectorBMP "0"
set NligInitFile1 ""; set NligEndFile1 ""; set NcolInitFile1 ""; set NcolEndFile1 ""
set NligInitFile2 ""; set NligEndFile2 ""; set NcolInitFile2 ""; set NcolEndFile2 ""
WidgetShow $widget(Toplevel521); TextEditorRunTrace "Open Window Change Detector File" "b"
}
# Config Format
}} \
        -label {Binary File} 
    $site_7_0.men66 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global ChangeDetectorDirOutput ChangeDetectorOutputFile
global ChangeDetectorInputDir1 ChangeDetectorInputDir2
global ChangeDetectorName ChangeDetectorNwinL ChangeDetectorNwinC
global ChangeDetectorNDataDirMultActive1 ChangeDetectorNDataDirMultActive2

#DATA PROCESS SNGL
global Load_ChangeDetectorMatMult PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

    if {$Load_ChangeDetectorMatMult == 0} {
        source "GUI/data_process_mult/ChangeDetectorMatMult.tcl"
        set Load_ChangeDetectorMatMult 1
        WmTransient $widget(Toplevel522) $PSPTopLevel
        }

    set ChangeDetectorInputDir1 ""
    set ChangeDetectorInputDir2 ""
    set ChangeDetectorOutputFile ""
    set ChangeDetectorNwinL "?"
    set ChangeDetectorNwinC "?"
    set ChangeDetectorName ""
    set ChangeDetectorBMP "0"
    set ConfigFile ""

    set ChangeDetectorNDataDirMultActive1 "0"
    set ChangeDetectorNDataDirMultActive2 "0"

    WidgetShow $widget(Toplevel522); TextEditorRunTrace "Open Window Change Detector Matrix" "b"

}
# Config Format
}} \
        -label {Polarimetric Matrix} 
    $site_6_0.men74 add separator \
        
    $site_6_0.men74 add command \
        \
        -command {global DataDirMult TestDataDirMult FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global MultAnimDirInput MultAnimBMPFile MultAnimGIFFile MultAnimFonction

#DATA PROCESS / MULT
global Load_DataAnimationMult 
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    }

if {$configformat == "true"} {

CheckDataDirMult
if {$TestDataDirMult == "OK"} {

if {$Load_DataAnimationMult == 0} {
    source "GUI/data_process_mult/DataAnimationMult.tcl"
    set Load_DataAnimationMult 1
    WmTransient $widget(Toplevel513) $PSPTopLevel
    }

set MultAnimDirInput ""
set MultAnimBMPFile ""
set MultAnimGIFFile ""
set ConfigFile ""

if {$DataFormatActive == "S2"} {
    set MultAnimFonction "S2"
    set MultAnimDirInput $DataDirMult(1)
    }
if {$DataFormatActive == "T3"} {
    set MultAnimFonction "T3"
    set MultAnimDirInput "$DataDirMult(1)/T3"
    }
if {$DataFormatActive == "SPP"} {
    set MultAnimFonction "SPP"
    set MultAnimDirInput $DataDirMult(1)
    }
if {$DataFormatActive == "C2"} {
    set MultAnimFonction "C2"
    set MultAnimDirInput "$DataDirMult(1)/C2"
    }
    set ConfigFile "$MultAnimDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        $widget(Button513_0) configure -state disable
        WidgetShow $widget(Toplevel513); TextEditorRunTrace "Open Window Mult Data Animation" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set ConfigFile ""
        }

}
# Config Format
}} \
        -label {Animated GIF} 
    pack $site_4_0.men58 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men71 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men75 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men77 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men101 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men74 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.men68 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra79 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra79" "FrameDisplay" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra79
    button $site_4_0.cpd75 \
        -borderwidth 0 \
        -command {global DataDir ConfigFile ErrorMessage
global DataDirChannel1 DataDirChannel2
global DataDirMult TestDataDirMult DataFormatActive
global PolarType PolarCase ActiveProgram
#BMP PROCESS
global Load_DisplayMenu Load_DisplayMenuDual PSPTopLevel

set ConfigDisplay "SNGL"
if {$ActiveProgram == "POLINSAR"} { set ConfigDisplay "DUAL" }
if {$ActiveProgram == "POLMULT"} { set ConfigDisplay "MULT" }

if {$ConfigDisplay == "SNGL" } {
    if {$Load_DisplayMenu == 0} {
        source "GUI/bmp_process/DisplayMenu.tcl"
        set Load_DisplayMenu 1
        WmTransient $widget(Toplevel214) $PSPTopLevel
        }
    Window show $widget(Toplevel214); TextEditorRunTrace "Open Window Display Menu" "b"
    }

if {$ConfigDisplay == "DUAL" } {
    if {$Load_DisplayMenuDual == 0} {
        source "GUI/bmp_process/DisplayMenuDual.tcl"
        set Load_DisplayMenuDual 1
        WmTransient $widget(Toplevel308) $PSPTopLevel
        }

    $widget(Menubutton308_1) configure -state disable
    $widget(Menubutton308_2) configure -state disable
    $widget(Menubutton308_3) configure -state disable
    $widget(Menubutton308_4) configure -state disable
    $widget(Menubutton308_5) configure -state disable
    $widget(Menubutton308_6) configure -state disable
    if {$DataFormatActive == "S2"} {
        $widget(Menubutton308_1) configure -state normal
        $widget(Menubutton308_2) configure -state normal
        }
    if {$DataFormatActive == "SPP"} {
        $widget(Menubutton308_4) configure -state normal
        $widget(Menubutton308_5) configure -state normal
        }
    if {$DataFormatActive == "T6"} {
        $widget(Menubutton308_3) configure -state normal
        }
    if {$DataFormatActive == "T4"} {
        $widget(Menubutton308_6) configure -state normal
        }
    Window show $widget(Toplevel308); TextEditorRunTrace "Open Window Display Dual Menu" "b"
    }

if {$ConfigDisplay == "MULT" } {
    CheckDataDirMult
    if {$TestDataDirMult == "OK"} {
        if {$Load_DisplayMenu == 0} {
            source "GUI/bmp_process/DisplayMenu.tcl"
            set Load_DisplayMenu 1
            WmTransient $widget(Toplevel214) $PSPTopLevel
            }
        Window show $widget(Toplevel214); TextEditorRunTrace "Open Window Display Menu" "b"
        }
    }} \
        -padx 0 -pady 0 -relief flat -state disabled -text Display 
    vTcl:DefineAlias "$site_4_0.cpd75" "DISP" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd75 "$site_4_0.cpd75 Button $top all _vTclBalloon"
    bind $site_4_0.cpd75 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Display Mode}
    }
    pack $site_4_0.cpd75 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side top 
    frame $site_3_0.fra81 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra81" "FrameCalibration" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra81
    menubutton $site_4_0.men78 \
        -borderwidth 0 -menu "$site_4_0.men78.m" -padx 0 -pady 0 \
        -state disabled -text Calibration 
    vTcl:DefineAlias "$site_4_0.men78" "CALIB" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men78 "$site_4_0.men78 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men78 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Calibration}
    }
    menu $site_4_0.men78.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men78.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CalibDirInput CalibDirOutput CalibOutputDir CalibOutputSubDir
global TMPCalibratorTxt TMPCalibratorBin TMPCalibratorValTxt TMPCalibratorValBin
global TMPCalibrator3Ds11Txt TMPCalibrator3Ds12Txt TMPCalibrator3Ds21Txt TMPCalibrator3Ds22Txt
global TMPCalibrator3Ds11Bin TMPCalibrator3Ds12Bin TMPCalibrator3Ds21Bin TMPCalibrator3Ds22Bin
global BMPDirInput BMPViewFileInput
global LineXLensInit LineYLensInit line_color
global BMPCalibX BMPCalibY BMPCalibValue
global BMPCalibX0 BMPCalibY0 CalibOutputUnit0
global BMPCalibXSize BMPCalibYSize
global CalibExecFid CalibOutputFormat CalibOutputUnit CalibOutputFile
global CalibOutputRepresentation CalibOutputRangeLength
global GnuPlotPath GnuplotPipeFid GnuplotPipeSave GnuplotPipeCalib
global GnuXview GnuZview GnuOutputFormat GnuOutputFile
global GnuCalibChannel GnuCalibChannelId

#CALIBRATION
global Load_CalibrationCalibrator
#BMP PROCESS
global Load_ViewBMPLens PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY ONLY AVAILABLE FOR"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT = S2"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

set config "true"
if {$CalibExecFid != ""} {
    set ErrorMessage "CALIBRATION IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }
if {$GnuplotPipeFid != ""} {
    set ErrorMessage "GNUPLOT IS ALREADY RUNNING" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set config "false"
    }

if {$config == "true"} {
    set CalibDirInput $DataDir
    set CalibDirOutput $DataDir
    set CalibOutputDir $DataDir
    set CalibOutputSubDir ""
    set BMPDirInput $CalibDirInput
    set ConfigFile "$CalibDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$OpenDirFile == 0} {
            set WarningMessage "OPEN A BMP FILE"
            set WarningMessage2 "TO SELECT A CALIBRATOR"
            set VarWarning ""
            Window show $widget(Toplevel32); TextEditorRunTrace "Open Window Warning" "b"
            tkwait variable VarWarning

            if {$VarWarning == "ok"} {
                ClosePSPViewer
                Window hide $widget(Toplevel64); TextEditorRunTrace "Close Window PolSARpro Viewer" "b"

                set types {
                    {{BMP Files}        {.bmp}        }
                    }
                set FileName ""
                OpenFile $BMPDirInput $types "INPUT BMP FILE"

                if {$FileName != ""} {
                    set BMPImageOpen "1"
                    set BMPViewFileInput $FileName

                    if {$Load_ViewBMPLens == 0} {
                        source "GUI/bmp_process/ViewBMPLens.tcl"
                        set Load_ViewBMPLens 1
                        WmTransient $widget(Toplevel73) $PSPTopLevel
                        }
                    if {$Load_CalibrationCalibrator == 0} {
                        source "GUI/calibration/CalibrationCalibrator.tcl"
                        set Load_CalibrationCalibrator 1
                        WmTransient $widget(Toplevel245) $PSPTopLevel
                        } else {
                        $widget(CANVASLENSCALIB) dtag $LineXLensInit
                        $widget(CANVASLENSCALIB) dtag $LineYLensInit
                        }
                    $widget(Radiobutton245_5) configure -state normal
                    $widget(Radiobutton245_6) configure -state normal
                    $widget(Radiobutton245_7) configure -state normal
                    $widget(TitleFrame245_1) configure -state normal
                    set line_color "white"
                    set b .top245.fra71.cpd78.cpd71.fra87.cpd71
                    $b configure -background $line_color -foreground $line_color
                    set BMPCalibX ""; set BMPCalibY ""
                    set BMPCalibX0 ""; set BMPCalibY0 ""
                    set BMPCalibValue ""
                    set BMPCalibXSize "1"
                    set BMPCalibYSize "1"
                    set CalibOutputFormat "mesh"
                    set CalibOutputUnit "dB";set CalibOutputUnit0 "dB" 
                    set GnuXview "60"
                    set GnuZview "30"
                    set GnuOutputFormat "SCREEN"
                    set GnuOutputFile ""
                    set GnuCalibChannel ""; set GnuCalibChannelId "0"
                    set CalibOutputFile ""
                    set CalibOutputRepresentation "amplitude"
                    set CalibOutputRangeLength "30"
                    LoadPSPViewer
                    load_bmp_caracteristics $BMPViewFileInput
                    load_bmp_file $BMPViewFileInput    
                    load_bmp_lens_line $widget(Toplevel245) $widget(CANVASLENSCALIB)
                    MouseActiveFunction "LensCALIB"
                    TextEditorRunTrace "Launch The Process Soft/calibration/extract_calibrator.exe" "k"
                    TextEditorRunTrace "Arguments: \x22$CalibDirInput\x22 \x22$TMPCalibratorTxt\x22 \x22$TMPCalibratorBin\x22 \x22$TMPCalibratorValTxt\x22 \x22$TMPCalibratorValBin\x22 \x22$TMPCalibrator3Ds11Txt\x22 \x22$TMPCalibrator3Ds11Bin\x22 \x22$TMPCalibrator3Ds12Txt\x22 \x22$TMPCalibrator3Ds12Bin\x22 \x22$TMPCalibrator3Ds21Txt\x22 \x22$TMPCalibrator3Ds21Bin\x22 \x22$TMPCalibrator3Ds22Txt\x22 \x22$TMPCalibrator3Ds22Bin\x22" "k"
                    set CalibExecFid [ open "| Soft/calibration/extract_calibrator.exe \x22$CalibDirInput\x22 \x22$TMPCalibratorTxt\x22 \x22$TMPCalibratorBin\x22 \x22$TMPCalibratorValTxt\x22 \x22$TMPCalibratorValBin\x22 \x22$TMPCalibrator3Ds11Txt\x22 \x22$TMPCalibrator3Ds11Bin\x22 \x22$TMPCalibrator3Ds12Txt\x22 \x22$TMPCalibrator3Ds12Bin\x22 \x22$TMPCalibrator3Ds21Txt\x22 \x22$TMPCalibrator3Ds21Bin\x22 \x22$TMPCalibrator3Ds22Txt\x22 \x22$TMPCalibrator3Ds22Bin\x22" r+]
                    set GnuplotPipeSave  ""; set GnuplotPipeCalib ""
                    WidgetShow $widget(Toplevel245); TextEditorRunTrace "Open Window Calibration Calibrator" "b"
                    }
                }
            }
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

    # Config
    }

# Config Format
}
}} \
        -label {Calibrator Assessment} 
    $site_4_0.men78.m add separator \
        
    $site_4_0.men78.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CalibDirInput CalibDirOutput CalibOutputDir CalibOutputSubDir
global BMPDirInput
global CalibProcedure NwinCalibRow NwinCalibCol

#CALIBRATION
global Load_CalibrationProcedures
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY ONLY AVAILABLE FOR"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT = S2"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    set CalibDirInput $DataDir
    set CalibDirOutput $DataDir
    set CalibOutputDir $DataDir
    append CalibOutputDir "_CAL"
    set CalibOutputSubDir ""
    set BMPDirInput $CalibDirInput
    set ConfigFile "$CalibDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$Load_CalibrationProcedures == 0} {
            source "GUI/calibration/CalibrationProcedures.tcl"
            set Load_CalibrationProcedures 1
            WmTransient $widget(Toplevel249) $PSPTopLevel
            }
        set NwinCalibRow "7"; set NwinCalibCol "7"
        set CalibProcedure "papathanassiou"
        WidgetShow $widget(Toplevel249); TextEditorRunTrace "Open Window Calibration Procedures" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Calibration Procedures} 
    $site_4_0.men78.m add separator \
        
    $site_4_0.men78.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global SquintDirInput SquintDirOutput SquintOutputDir SquintOutputSubDir
global BMPDirInput GnuplotPipeFid GnuplotPipeSave GnuplotPipeSquint

#DATA PROCESS SNGL
global Load_CalibrationSquintCheck PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY ONLY AVAILABLE FOR"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT = S2"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    set SquintDirInput $DataDir
    set SquintDirOutput $DataDir
    set SquintOutputDir $DataDir
    set SquintOutputSubDir ""
    set BMPDirInput $SquintDirInput
    set ConfigFile "$SquintDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$Load_CalibrationSquintCheck == 0} {
            source "GUI/calibration/CalibrationSquintCheck.tcl"
            set Load_CalibrationSquintCheck 1
            WmTransient $widget(Toplevel389) $PSPTopLevel
            }
        $widget(Button389_1) configure -state disable
        $widget(Button389_2) configure -state disable
        $widget(Button389_3) configure -state disable
        $widget(TitleFrame389_0) configure -state disable
        $widget(Entry389_0) configure -state disable
        $widget(Button389_4) configure -state disable
        $widget(Button389_5) configure -state disable
        $widget(Button389_6) configure -state disable
        $widget(Radiobutton389_1) configure -state disable
        $widget(Radiobutton389_2) configure -state disable

        set SquintAzimutFlag "1"
        set GnuplotPipeSave ""; set GnuplotPipeSquint ""
        if {$GnuplotPipeFid != ""} {
            set ErrorMessage "GNUPLOT ERROR - CHECK SPECTRUM NOT AVAILABLE" 
            Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
            tkwait variable VarError
            set conf "false"
            }
        WidgetShow $widget(Toplevel389); TextEditorRunTrace "Open Window Calibration - Squint Check" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Calibration - Squint Check} 
    $site_4_0.men78.m add separator \
        
    $site_4_0.men78.m add command \
        \
        -command {global DataDir FileName DataFormatActive
global VarError ErrorMessage VarWarning WarningMessage WarningMessage2
global ConfigFile Fonction Fonction2
global CalibDirInput CalibDirOutput CalibOutputDir CalibOutputSubDir
global BMPDirInput
global NwinCalibL NwinCalibC Calib12 CalibL1L2 Calibp1p2
global BMPmodCalib12 BMPmodCalib12b BMPphaCalib12 BMPL1L2 BMPp1p2
#CALIBRATION
global Load_CalibrationQualityCheck
global PSPTopLevel

set configformat "true"

if {$DataFormatActive == "---"} {
    set ErrorMessage "INPUT POLARIMETRIC DATA FORMAT NOT DEFINED"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    set ErrorMessage ""
    set configformat "false"
    } else {

if {$DataFormatActive == "S2"} {
    set configformat "true"
    } else {
    set WarningMessage "FUNCTIONALITY ONLY AVAILABLE FOR"
    set WarningMessage2 "INPUT POLARIMETRIC DATA FORMAT = S2"
    set VarWarning ""
    Window show $widget(Toplevel388); TextEditorRunTrace "Open Window Advice Warning" "b"
    tkwait variable VarWarning
    set VarWarning ""
    set configformat "false"
    }

if {$configformat == "true"} {

    set CalibDirInput $DataDir
    set CalibDirOutput $DataDir
    set CalibOutputDir $DataDir
    set CalibOutputSubDir ""
    set BMPDirInput $CalibDirInput
    set ConfigFile "$CalibDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        if {$Load_CalibrationQualityCheck == 0} {
            source "GUI/calibration/CalibrationQualityCheck.tcl"
            set Load_CalibrationQualityCheck 1
            WmTransient $widget(Toplevel455) $PSPTopLevel
            }
        set NwinCalibL "7"; set NwinCalibC "7"
        set Calib12 "0"; set CalibL1L2 "0"; set Calibp1p2 "0"
        set BMPmodCalib12 "0"; set BMPmodCalib12b "0"; set BMPphaCalib12 "0"
        set BMPL1L2 "0"; set BMPp1p2 "0"
        $widget(Checkbutton455_2) configure -state disable
        $widget(Checkbutton455_3) configure -state disable
        $widget(Checkbutton455_4) configure -state disable
        $widget(Checkbutton455_5) configure -state disable
        $widget(Checkbutton455_6) configure -state disable
        WidgetShow $widget(Toplevel455); TextEditorRunTrace "Open Window Calibration : Data Quality Check" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }

# Config Format
}
}} \
        -label {Calibration - Data Quality Check HV.VH*} 
    pack $site_4_0.men78 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side top 
    button $site_3_0.but66 \
        \
        -command {global OpenDirFile PSPCalcDirInput PSPCalcMaskCmd
global TMPPSPCalcDirResult1 TMPPSPCalcDirResult2 TMPPSPCalcDirResult3
global Load_PolSARproCalc Load_PolSARproCalcOutputFile Load_PolSARproCalcOutputMat Load_PolSARproCalcFilter PSPTopLevel

if {$Load_PolSARproCalcOutputFile == 0} {
    source "GUI/util/PolSARproCalcOutputFile.tcl"
    set Load_PolSARproCalcOutputFile 1
    WmTransient $widget(Toplevel601) $PSPTopLevel
    }
if {$Load_PolSARproCalcOutputMat == 0} {
    source "GUI/util/PolSARproCalcOutputMat.tcl"
    set Load_PolSARproCalcOutputMat 1
    WmTransient $widget(Toplevel602) $PSPTopLevel
    }
if {$Load_PolSARproCalcFilter == 0} {
    source "GUI/util/PolSARproCalcFilter.tcl"
    set Load_PolSARproCalcFilter 1
    WmTransient $widget(Toplevel603) $PSPTopLevel
    WidgetShowFromMenuFix $widget(Toplevel603) $widget(Toplevel600)
    }

if {$OpenDirFile == 0} {
    if [file isdirectory $TMPPSPCalcDirResult1] {
        } else {
        if { [catch {file mkdir $TMPPSPCalcDirResult1} ErrorCreateDir] } {
            set FatalErrorMessage $ErrorCreateDir
            Window show $widget(Toplevel236)
            }
        }
    if [file isdirectory $TMPPSPCalcDirResult2] {
        } else {
        if { [catch {file mkdir $TMPPSPCalcDirResult2} ErrorCreateDir] } {
            set FatalErrorMessage $ErrorCreateDir
            Window show $widget(Toplevel236)
            }
        }
    if [file isdirectory $TMPPSPCalcDirResult3] {
        } else {
        if { [catch {file mkdir $TMPPSPCalcDirResult3} ErrorCreateDir] } {
            set FatalErrorMessage $ErrorCreateDir
            Window show $widget(Toplevel236)
            }
        }
    set PSPCalcDirInput $DataDir
    set PSPCalcMaskCmd ""
    Window show $widget(Toplevel600); TextEditorRunTrace "Open Window PolSARpro Calculator v1.0" "b"
    PSPCalcRAZ
    }} \
        -image [vTcl:image:get_image [file join . GUI Images calculator.gif]] \
        -pady 0 -text button 
    vTcl:DefineAlias "$site_3_0.but66" "Button2" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_3_0.but66 "$site_3_0.but66 Button $top all _vTclBalloon"
    bind $site_3_0.but66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {PSP Calculator v1.0}
    }
    frame $site_3_0.fra67 \
        -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra67" "Frame7" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra67
    menubutton $site_4_0.men68 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images ASF.gif]] \
        -menu "$site_4_0.men68.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men68" "MenubuttonMapReady" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men68 "$site_4_0.men68 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {MAP READY}
    }
    menu $site_4_0.men68.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men68.m add command \
        \
        -command {global wshMapReady MapReadyReader MapReadyKmlReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage MapReadyReaderFlag 

set MapReadyReaderFlag ""
if {$MapReadyReader == ""} {
    set MapReadyReaderFlag "null"
    } else {
    if [file exists $MapReadyReader] {
        set MapReadyReaderFlag "true"
        } else {
        set MapReadyReaderFlag "link"
        }
    }
if {$MapReadyReaderFlag == "true"} {
    set WarningMessage "MAP READY APPLICATION IS"
    set WarningMessage2 "ALREADY LINKED WITH PolSARpro"
    set VarAdvice ""
    Window show .top242; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
    } else {
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "MAP READY APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "MAPREADY"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "asf_mapready"
        set ConfigFileNameList "asf_mapready"
        .top341.fra74.lab76 configure -text "MAP READY"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/ASFshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration MAP READY Software" "b"
        tkwait variable VarConfigFileName 
        if {$MapReadyReader != ""} {
            set MapReadyKmlReader [file dirname $MapReadyReader]
            append MapReadyKmlReader "/asf_kml_overlay.exe"
            }
        }
    }} \
        -label {Config MAP READY} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global wshMapReady MapReadyReader MapReadyKmlReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage


    if [file exists $MapReadyReader] {
        set MapReadyOpen [file dirname $MapReadyReader]
        append MapReadyOpen "/mapready.exe" 
        if {$PlatForm == "windows"} {
            package require tcom
            set wshMapReady [::tcom::ref createobject "WScript.Shell"]
            set taskIdMapReady [$wshMapReady Run "\x22$MapReadyOpen\x22"]
            }
        if {$PlatForm == "unix"} {set taskIdMapReady [ open "| \x22$MapReadyOpen\x22" r]}
        } else {
        #error message
        set VarError ""
        set ErrorMessage "MAP READY APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "MAP READY APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "MAPREADY"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "asf_mapready"
            set ConfigFileNameList "asf_mapready"
            .top341.fra74.lab76 configure -text "MAP READY"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/ASFshortcut.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration MAP READY Software" "b"
            tkwait variable VarConfigFileName 
            if {$MapReadyReader != ""} {
                set MapReadyKmlReader [file dirname $MapReadyReader]
                append MapReadyKmlReader "/asf_kml_overlay.exe"
                }
            }        
        }} \
        -label {Run MAP READY} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men66" -command {} -label {ALOS - PALSAR} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men66 add cascade \
        -menu "$site_6_0.men66.men70" -command {} -label {[C2]} 
    set site_7_0 $site_6_0.men66
    menu $site_7_0.men70 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men70 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadyOutputDir MapReadyOutputSubDir 
global MapReadyLeaderFile MapReadySensor MapReadySensorPol MapReadyState
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyMatrix Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyMatrix == 0} {
    source "GUI/data_import/MapReadyMatrix.tcl"
    set Load_MapReadyMatrix 1
    WmTransient $widget(Toplevel381) $PSPTopLevel
    }

set MapReadyDirInput ""
set MapReadyDirOutput ""
set MapReadyOutputDir ""
set MapReadyOutputSubDir ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set MapReadyDirInput "$DataDir/C2"
    set MapReadyOutputDir $DataDir
    append MapReadyOutputDir "_MapReady"
    set MapReadyDirOutput $MapReadyOutputDir
    set MapReadyOutputSubDir "C2"
    set BMPDirInput "$MapReadyDirOutput/C2"
    set ConfigFile "$MapReadyDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set MapReadyLeaderFile ""
        set MapReadySensor "ALOS"
        set MapReadySensorPol "C2"
        
        $widget(TitleFrame381_1) configure -text "SAR Leader File  ( LED-xxxxxxxxxxxx-xx.x__x )"
        set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

        set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
        set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
        set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
        set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
        set MapReadyTerrainGeo "geo"; set MapReadyState "0"
        set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

        if {$Load_MapReadyTerrain == 1} {
            $widget(Checkbutton385_1) configure -state disable
            $widget(Checkbutton385_2) configure -state disable
            $widget(Checkbutton385_3) configure -state disable
            $widget(Checkbutton385_4) configure -state disable
            $widget(Radiobutton385_1) configure -state disable
            $widget(Radiobutton385_2) configure -state disable
            $widget(TitleFrame385_1) configure -state disable
            $widget(Entry385_1) configure -state disable
            $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Button385_1) configure -state disable
            }

        WidgetShow $widget(Toplevel381); TextEditorRunTrace "Open Window MapReady - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [C2] Matrix} 
    $site_7_0.men70 add separator \
        
    $site_7_0.men70 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadySensor MapReadySensorPol MapReadyState
global MapReadyLeaderFile MapReadyParameterFile MapReadyParameterInput MapReadyParameterOutput
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyParameter Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyParameter == 0} {
    source "GUI/data_import/MapReadyParameter.tcl"
    set Load_MapReadyParameter 1
    WmTransient $widget(Toplevel382) $PSPTopLevel
    }

set MapReadyDirInput "$DataDir/C2"
set MapReadyDirOutput $DataDir
append MapReadyDirOutput "_MapReady"
set BMPDirInput $MapReadyDirOutput
set MapReadyLeaderFile ""
set MapReadyParameterFile ""
set MapReadyParameterInput ""
set MapReadyParameterOutput ""
set MapReadySensor "ALOS"
set MapReadySensorPol "C2"

$widget(TitleFrame382_1) configure -text "SAR Leader File  ( LED-xxxxxxxxxxxx-xx.x__x )"
set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
set MapReadyTerrainGeo "geo"; set MapReadyState "0"
set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

if {$Load_MapReadyTerrain == 1} {
    $widget(Checkbutton385_1) configure -state disable
    $widget(Checkbutton385_2) configure -state disable
    $widget(Checkbutton385_3) configure -state disable
    $widget(Checkbutton385_4) configure -state disable
    $widget(Radiobutton385_1) configure -state disable
    $widget(Radiobutton385_2) configure -state disable
    $widget(TitleFrame385_1) configure -state disable
    $widget(Entry385_1) configure -state disable
    $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Button385_1) configure -state disable
    }

WidgetShow $widget(Toplevel382); TextEditorRunTrace "Open Window MapReady - Geocode Parameter" "b"
}} \
        -label {Geocode Parameter} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add cascade \
        -menu "$site_6_0.men66.men71" -command {} -label {[T3]} 
    set site_7_0 $site_6_0.men66
    menu $site_7_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men71 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadyOutputDir MapReadyOutputSubDir 
global MapReadyLeaderFile MapReadySensor MapReadySensorPol MapReadyState
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyMatrix Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyMatrix == 0} {
    source "GUI/data_import/MapReadyMatrix.tcl"
    set Load_MapReadyMatrix 1
    WmTransient $widget(Toplevel381) $PSPTopLevel
    }

set MapReadyDirInput ""
set MapReadyDirOutput ""
set MapReadyOutputDir ""
set MapReadyOutputSubDir ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set MapReadyDirInput "$DataDir/T3"
    set MapReadyOutputDir $DataDir
    append MapReadyOutputDir "_MapReady"
    set MapReadyDirOutput $MapReadyOutputDir
    set MapReadyOutputSubDir "T3"
    set BMPDirInput "$MapReadyDirOutput/T3"
    set ConfigFile "$MapReadyDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set MapReadyLeaderFile ""
        set MapReadySensor "ALOS"
        set MapReadySensorPol "T3"
        
        $widget(TitleFrame381_1) configure -text "SAR Leader File  ( LED-xxxxxxxxxxxx-xx.x__x )"
        set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

        set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
        set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
        set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
        set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
        set MapReadyTerrainGeo "geo"; set MapReadyState "0"
        set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

        if {$Load_MapReadyTerrain == 1} {
            $widget(Checkbutton385_1) configure -state disable
            $widget(Checkbutton385_2) configure -state disable
            $widget(Checkbutton385_3) configure -state disable
            $widget(Checkbutton385_4) configure -state disable
            $widget(Radiobutton385_1) configure -state disable
            $widget(Radiobutton385_2) configure -state disable
            $widget(TitleFrame385_1) configure -state disable
            $widget(Entry385_1) configure -state disable
            $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Button385_1) configure -state disable
            }

        WidgetShow $widget(Toplevel381); TextEditorRunTrace "Open Window MapReady - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [T3] Matrix} 
    $site_7_0.men71 add separator \
        
    $site_7_0.men71 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadySensor MapReadySensorPol MapReadyState
global MapReadyLeaderFile MapReadyParameterFile MapReadyParameterInput MapReadyParameterOutput
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyParameter Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyParameter == 0} {
    source "GUI/data_import/MapReadyParameter.tcl"
    set Load_MapReadyParameter 1
    WmTransient $widget(Toplevel382) $PSPTopLevel
    }

set MapReadyDirInput "$DataDir/T3"
set MapReadyDirOutput $DataDir
append MapReadyDirOutput "_MapReady"
set BMPDirInput $MapReadyDirOutput
set MapReadyLeaderFile ""
set MapReadyParameterFile ""
set MapReadyParameterInput ""
set MapReadyParameterOutput ""
set MapReadySensor "ALOS"
set MapReadySensorPol "T3"

$widget(TitleFrame382_1) configure -text "SAR Leader File  ( LED-xxxxxxxxxxxx-xx.x__x )"
set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
set MapReadyTerrainGeo "geo"; set MapReadyState "0"
set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

if {$Load_MapReadyTerrain == 1} {
    $widget(Checkbutton385_1) configure -state disable
    $widget(Checkbutton385_2) configure -state disable
    $widget(Checkbutton385_3) configure -state disable
    $widget(Checkbutton385_4) configure -state disable
    $widget(Radiobutton385_1) configure -state disable
    $widget(Radiobutton385_2) configure -state disable
    $widget(TitleFrame385_1) configure -state disable
    $widget(Entry385_1) configure -state disable
    $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Button385_1) configure -state disable
    }

WidgetShow $widget(Toplevel382); TextEditorRunTrace "Open Window MapReady - Geocode Parameter" "b"
}} \
        -label {Geocode Parameter} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men67" -command {} -label {RADARSAT 2} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men67 add cascade \
        -menu "$site_6_0.men67.men72" -command {} -label {[C2]} 
    set site_7_0 $site_6_0.men67
    menu $site_7_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men72 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadyOutputDir MapReadyOutputSubDir 
global MapReadyLeaderFile MapReadySensor MapReadySensorPol MapReadyState
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyMatrix Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyMatrix == 0} {
    source "GUI/data_import/MapReadyMatrix.tcl"
    set Load_MapReadyMatrix 1
    WmTransient $widget(Toplevel381) $PSPTopLevel
    }

set MapReadyDirInput ""
set MapReadyDirOutput ""
set MapReadyOutputDir ""
set MapReadyOutputSubDir ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set MapReadyDirInput "$DataDir/C2"
    set MapReadyOutputDir $DataDir
    append MapReadyOutputDir "_MapReady"
    set MapReadyDirOutput $MapReadyOutputDir
    set MapReadyOutputSubDir "C2"
    set BMPDirInput "$MapReadyDirOutput/C2"
    set ConfigFile "$MapReadyDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set MapReadyLeaderFile ""
        set MapReadySensor "RS2"
        set MapReadySensorPol "C2"
        
        $widget(TitleFrame381_1) configure -text "SAR Product File"
        set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

        set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
        set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
        set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
        set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
        set MapReadyTerrainGeo "geo"; set MapReadyState "0"
        set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

        if {$Load_MapReadyTerrain == 1} {
            $widget(Checkbutton385_1) configure -state disable
            $widget(Checkbutton385_2) configure -state disable
            $widget(Checkbutton385_3) configure -state disable
            $widget(Checkbutton385_4) configure -state disable
            $widget(Radiobutton385_1) configure -state disable
            $widget(Radiobutton385_2) configure -state disable
            $widget(TitleFrame385_1) configure -state disable
            $widget(Entry385_1) configure -state disable
            $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Button385_1) configure -state disable
            }

        WidgetShow $widget(Toplevel381); TextEditorRunTrace "Open Window MapReady - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [C2] Matrix} 
    $site_7_0.men72 add separator \
        
    $site_7_0.men72 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadySensor MapReadySensorPol MapReadyState
global MapReadyLeaderFile MapReadyParameterFile MapReadyParameterInput MapReadyParameterOutput
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyParameter Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyParameter == 0} {
    source "GUI/data_import/MapReadyParameter.tcl"
    set Load_MapReadyParameter 1
    WmTransient $widget(Toplevel382) $PSPTopLevel
    }

set MapReadyDirInput "$DataDir/C2"
set MapReadyDirOutput $DataDir
append MapReadyDirOutput "_MapReady"
set BMPDirInput $MapReadyDirOutput
set MapReadyLeaderFile ""
set MapReadyParameterFile ""
set MapReadyParameterInput ""
set MapReadyParameterOutput ""
set MapReadySensor "RS2"
set MapReadySensorPol "C2"

$widget(TitleFrame382_1) configure -text "SAR Product File"
set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
set MapReadyTerrainGeo "geo"; set MapReadyState "0"
set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

if {$Load_MapReadyTerrain == 1} {
    $widget(Checkbutton385_1) configure -state disable
    $widget(Checkbutton385_2) configure -state disable
    $widget(Checkbutton385_3) configure -state disable
    $widget(Checkbutton385_4) configure -state disable
    $widget(Radiobutton385_1) configure -state disable
    $widget(Radiobutton385_2) configure -state disable
    $widget(TitleFrame385_1) configure -state disable
    $widget(Entry385_1) configure -state disable
    $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Button385_1) configure -state disable
    }

WidgetShow $widget(Toplevel382); TextEditorRunTrace "Open Window MapReady - Geocode Parameter" "b"
}} \
        -label {Geocode Parameter} 
    $site_6_0.men67 add separator \
        
    $site_6_0.men67 add cascade \
        -menu "$site_6_0.men67.men73" -command {} -label {[T3]} 
    set site_7_0 $site_6_0.men67
    menu $site_7_0.men73 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men73 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadyOutputDir MapReadyOutputSubDir 
global MapReadyLeaderFile MapReadySensor MapReadySensorPol MapReadyState
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyMatrix Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyMatrix == 0} {
    source "GUI/data_import/MapReadyMatrix.tcl"
    set Load_MapReadyMatrix 1
    WmTransient $widget(Toplevel381) $PSPTopLevel
    }

set MapReadyDirInput ""
set MapReadyDirOutput ""
set MapReadyOutputDir ""
set MapReadyOutputSubDir ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set MapReadyDirInput "$DataDir/T3"
    set MapReadyOutputDir $DataDir
    append MapReadyOutputDir "_MapReady"
    set MapReadyDirOutput $MapReadyOutputDir
    set MapReadyOutputSubDir "T3"
    set BMPDirInput "$MapReadyDirOutput/T3"
    set ConfigFile "$MapReadyDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set MapReadyLeaderFile ""
        set MapReadySensor "RS2"
        set MapReadySensorPol "T3"
        
        $widget(TitleFrame381_1) configure -text "SAR Product File"
        set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

        set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
        set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
        set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
        set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
        set MapReadyTerrainGeo "geo"; set MapReadyState "0"
        set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

        if {$Load_MapReadyTerrain == 1} {
            $widget(Checkbutton385_1) configure -state disable
            $widget(Checkbutton385_2) configure -state disable
            $widget(Checkbutton385_3) configure -state disable
            $widget(Checkbutton385_4) configure -state disable
            $widget(Radiobutton385_1) configure -state disable
            $widget(Radiobutton385_2) configure -state disable
            $widget(TitleFrame385_1) configure -state disable
            $widget(Entry385_1) configure -state disable
            $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Button385_1) configure -state disable
            }

        WidgetShow $widget(Toplevel381); TextEditorRunTrace "Open Window MapReady - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [T3] Matrix} 
    $site_7_0.men73 add separator \
        
    $site_7_0.men73 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadySensor MapReadySensorPol MapReadyState
global MapReadyLeaderFile MapReadyParameterFile MapReadyParameterInput MapReadyParameterOutput
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyParameter Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyParameter == 0} {
    source "GUI/data_import/MapReadyParameter.tcl"
    set Load_MapReadyParameter 1
    WmTransient $widget(Toplevel382) $PSPTopLevel
    }

set MapReadyDirInput "$DataDir/T3"
set MapReadyDirOutput $DataDir
append MapReadyDirOutput "_MapReady"
set BMPDirInput $MapReadyDirOutput
set MapReadyLeaderFile ""
set MapReadyParameterFile ""
set MapReadyParameterInput ""
set MapReadyParameterOutput ""
set MapReadySensor "RS2"
set MapReadySensorPol "T3"

$widget(TitleFrame382_1) configure -text "SAR Product File"
set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
set MapReadyTerrainGeo "geo"; set MapReadyState "0"
set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

if {$Load_MapReadyTerrain == 1} {
    $widget(Checkbutton385_1) configure -state disable
    $widget(Checkbutton385_2) configure -state disable
    $widget(Checkbutton385_3) configure -state disable
    $widget(Checkbutton385_4) configure -state disable
    $widget(Radiobutton385_1) configure -state disable
    $widget(Radiobutton385_2) configure -state disable
    $widget(TitleFrame385_1) configure -state disable
    $widget(Entry385_1) configure -state disable
    $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Button385_1) configure -state disable
    }

WidgetShow $widget(Toplevel382); TextEditorRunTrace "Open Window MapReady - Geocode Parameter" "b"
}} \
        -label {Geocode Parameter} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add cascade \
        -menu "$site_4_0.men68.m.men68" -command {} -label {TERRASAR - X} 
    set site_6_0 $site_4_0.men68.m
    menu $site_6_0.men68 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men68 add cascade \
        -menu "$site_6_0.men68.men66" -command {} -label {[C2]} 
    set site_7_0 $site_6_0.men68
    menu $site_7_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men66 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadyOutputDir MapReadyOutputSubDir 
global MapReadyLeaderFile MapReadySensor MapReadySensorPol MapReadyState
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyMatrix Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyMatrix == 0} {
    source "GUI/data_import/MapReadyMatrix.tcl"
    set Load_MapReadyMatrix 1
    WmTransient $widget(Toplevel381) $PSPTopLevel
    }

set MapReadyDirInput ""
set MapReadyDirOutput ""
set MapReadyOutputDir ""
set MapReadyOutputSubDir ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set MapReadyDirInput "$DataDir/C2"
    set MapReadyOutputDir $DataDir
    append MapReadyOutputDir "_MapReady"
    set MapReadyDirOutput $MapReadyOutputDir
    set MapReadyOutputSubDir "C2"
    set BMPDirInput "$MapReadyDirOutput/C2"
    set ConfigFile "$MapReadyDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set MapReadyLeaderFile ""
        set MapReadySensor "TSX"
        set MapReadySensorPol "C2"
        
        $widget(TitleFrame381_1) configure -text "TSX-1 Product File"
        set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

        set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
        set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
        set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
        set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
        set MapReadyTerrainGeo "geo"; set MapReadyState "0"
        set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

        if {$Load_MapReadyTerrain == 1} {
            $widget(Checkbutton385_1) configure -state disable
            $widget(Checkbutton385_2) configure -state disable
            $widget(Checkbutton385_3) configure -state disable
            $widget(Checkbutton385_4) configure -state disable
            $widget(Radiobutton385_1) configure -state disable
            $widget(Radiobutton385_2) configure -state disable
            $widget(TitleFrame385_1) configure -state disable
            $widget(Entry385_1) configure -state disable
            $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
            $widget(Button385_1) configure -state disable
            }

        WidgetShow $widget(Toplevel381); TextEditorRunTrace "Open Window MapReady - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [C2] Matrix} 
    $site_7_0.men66 add separator \
        
    $site_7_0.men66 add command \
        \
        -command {global DataDir MapReadyDirInput MapReadyDirOutput MapReadySensor MapReadySensorPol MapReadyState
global MapReadyLeaderFile MapReadyParameterFile MapReadyParameterInput MapReadyParameterOutput
global ConfigFile VarError ErrorMessage Fonction

#DATA IMPORT
global Load_MapReadyParameter Load_MapReadyTerrain PSPTopLevel
global MapReadyTerrainAutoMask MapReadyTerrainMask
global MapReadyMaskFile MapReadyTerrainInterp
global MapReadyTerrainRadio MapReadyTerrainSkip
global MapReadyDEMFile MapReadyTerrainSmooth
global MapReadyTerrain MapReadyResampling
global MapReadyTerrainGeo
global MapReadyAutomaticInterpolate MapReadyPixelSize

if {$DataDir != ""} {

if {$Load_MapReadyParameter == 0} {
    source "GUI/data_import/MapReadyParameter.tcl"
    set Load_MapReadyParameter 1
    WmTransient $widget(Toplevel382) $PSPTopLevel
    }

set MapReadyDirInput "$DataDir/C2"
set MapReadyDirOutput $DataDir
append MapReadyDirOutput "_MapReady"
set BMPDirInput $MapReadyDirOutput
set MapReadyLeaderFile ""
set MapReadyParameterFile ""
set MapReadyParameterInput ""
set MapReadyParameterOutput ""
set MapReadySensor "TSX"
set MapReadySensorPol "C2"

$widget(TitleFrame382_1) configure -text "TSX-1 Product File"
set MapReadyTerrain "0"; set MapReadyResampling "bilinear"

set MapReadyTerrainAutoMask "0"; set MapReadyTerrainMask ""
set MapReadyMaskFile ""; set MapReadyTerrainInterp "0"
set MapReadyTerrainRadio "0"; set MapReadyTerrainSkip "0"
set MapReadyDEMFile ""; set MapReadyTerrainSmooth "0"
set MapReadyTerrainGeo "geo"; set MapReadyState "0"
set MapReadyAutomaticInterpolate "1"; set MapReadyPixelSize ""

if {$Load_MapReadyTerrain == 1} {
    $widget(Checkbutton385_1) configure -state disable
    $widget(Checkbutton385_2) configure -state disable
    $widget(Checkbutton385_3) configure -state disable
    $widget(Checkbutton385_4) configure -state disable
    $widget(Radiobutton385_1) configure -state disable
    $widget(Radiobutton385_2) configure -state disable
    $widget(TitleFrame385_1) configure -state disable
    $widget(Entry385_1) configure -state disable
    $widget(Entry385_1) configure -disabledbackground $PSPBackgroundColor
    $widget(Button385_1) configure -state disable
    }

WidgetShow $widget(Toplevel382); TextEditorRunTrace "Open Window MapReady - Geocode Parameter" "b"
}} \
        -label {Geocode Parameter} 
    $site_6_0.men68 add separator \
        
    $site_6_0.men68 add cascade \
        -menu "$site_6_0.men68.men67" -command {} -label {[T3]} 
    set site_7_0 $site_6_0.men68
    menu $site_7_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men67 add command \
        \
        -command {Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"} \
        -label {Geocode [T3] Matrix} 
    $site_7_0.men67 add separator \
        
    $site_7_0.men67 add command \
        \
        -command {Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"} \
        -label {Geocode Parameter} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global wshMapReady MapReadyReader MapReadyKmlReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage


    if [file exists $MapReadyReader] {
        set MapReadyOpen [file dirname $MapReadyReader]
        append MapReadyOpen "/asf_view.exe" 
        if {$PlatForm == "windows"} {
            package require tcom
            set wshMapReady [::tcom::ref createobject "WScript.Shell"]
            set taskIdMapReady [$wshMapReady Run "\x22$MapReadyOpen\x22"]
            }
        if {$PlatForm == "unix"} {set taskIdMapReady [ open "| \x22$MapReadyOpen\x22" r]}
        } else {
        #error message
        set VarError ""
        set ErrorMessage "MAP READY APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "MAP READY APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "MAPREADY"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "asf_mapready"
            set ConfigFileNameList "asf_mapready"
            .top341.fra74.lab76 configure -text "MAP READY"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/ASFshortcut.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration MAP READY Software" "b"
            tkwait variable VarConfigFileName 
            if {$MapReadyReader != ""} {
                set MapReadyKmlReader [file dirname $MapReadyReader]
                append MapReadyKmlReader "/asf_kml_overlay.exe"
                }
            }        
        }} \
        -label {Run ASF View} 
    menubutton $site_4_0.men69 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images SNAP.gif]] \
        -menu "$site_4_0.men69.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men69" "MenubuttonSnap" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men69 "$site_4_0.men69 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men69 <<SetBalloon>> {
        set ::vTcl::balloon::%W {SNAP}
    }
    menu $site_4_0.men69.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men69.m add command \
        \
        -command {global wshSnap SnapReader PlatForm ImageConfig
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage SnapReaderFlag 

set SnapReaderFlag ""
if {$SnapReader == ""} {
    set SnapReaderFlag "null"
    } else {
    if [file exists $SnapReader] {
        set SnapReaderFlag "true"
        } else {
        set SnapReaderFlag "link"
        }
    }
if {$SnapReaderFlag == "true"} {
    set WarningMessage "SNAP S1-TBX APPLICATION IS"
    set WarningMessage2 "ALREADY LINKED WITH PolSARpro"
    set VarAdvice ""
    Window show .top242; TextEditorRunTrace "Open Window Advice" "b"
    tkwait variable VarAdvice
    } else {
    set WarningMessage "CREATE THE LINK WITH THE"
    set WarningMessage2 "SNAP S1-TBX APPLICATION ?"
    set VarWarning ""
    Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
    tkwait variable VarWarning
    if {"$VarWarning"=="ok"} {
        set VarConfigFileName ""
        set ConfigFileNameSearch "SNAP"
        set ConfigFileNamePath ""
        set ConfigFileNameVar "s1tbx"
        set ConfigFileNameList "s1tbx"
        .top341.fra74.lab76 configure -text "SNAP S1-TBX"
        package require Img
        image create photo ImageConfig
        ImageConfig blank
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        image delete ImageConfig
        image create photo ImageConfig -file "GUI/Images/SNAPshortcut.gif"
        .top341.fra74.lab75 configure -anchor nw -image ImageConfig
        WidgetShow .top341; TextEditorRunTrace "Open Window Configuration SNAP Software" "b"
        tkwait variable VarConfigFileName 
        }
    }} \
        -label {Config SNAP S1-TBX} 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add command \
        \
        -command {global wshSnap SnapReader PlatForm ImageConfig CONFIGDir
global ConfigFileNameSearch ConfigFileNamePath ConfigFileNameVar VarConfigFileName 
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage

    if [file exists $SnapReader] {
        set taskIdSnap [ open "| \x22$SnapReader\x22" r]
        } else {
        #error message
        set VarError ""
        set ErrorMessage "SNAP S1-TBX APPLICATION NOT LINKED WITH PolSARpro"
        Window show .top44; TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set WarningMessage "CREATE THE LINK WITH THE"
        set WarningMessage2 "SNAP S1-TBX APPLICATION ?"
        set VarWarning ""
        Window show .top32; TextEditorRunTrace "Open Window Warning" "b"
        tkwait variable VarWarning
        if {"$VarWarning"=="ok"} {
            set VarConfigFileName ""
            set ConfigFileNameSearch "SNAP"
            set ConfigFileNamePath ""
            set ConfigFileNameVar "s1tbx"
            set ConfigFileNameList "s1tbx"
            .top341.fra74.lab76 configure -text "SNAP S1-TBX"
            package require Img
            image create photo ImageConfig
            ImageConfig blank
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            image delete ImageConfig
            image create photo ImageConfig -file "GUI/Images/SNAPshortcut.gif"
            .top341.fra74.lab75 configure -anchor nw -image ImageConfig
            WidgetShow .top341; TextEditorRunTrace "Open Window Configuration SNAP Software" "b"
            tkwait variable VarConfigFileName 
            }        
        }} \
        -label {Run SNAP S1-TBX} 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add cascade \
        -menu "$site_4_0.men69.m.men66" -command {} -label {RADARSAT 2} 
    set site_6_0 $site_4_0.men69.m
    menu $site_6_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men66 add cascade \
        -menu "$site_6_0.men66.men67" -command {} -label {[C2]} 
    set site_7_0 $site_6_0.men66
    menu $site_7_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men67 add command \
        \
        -command {global DataDir SNAPDirInput SNAPDirOutput SNAPOutputDir SNAPOutputSubDir 
global SNAPLeaderFile SNAPSensor SNAPSensorPol SNAPState SNAPParameterFile
global SNAPResamplingIMG SNAPResamplingDEM SNAPGeocoding 
global SNAPPixelSizeAz SNAPPixelSizeRg SNAPPixelSize
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global ConfigFile VarError ErrorMessage Fonction PSPBackgroundColor

#DATA IMPORT
global Load_SNAPMatrix PSPTopLevel

if {$DataDir != ""} {

if {$Load_SNAPMatrix == 0} {
    source "GUI/data_import/SNAPMatrix.tcl"
    set Load_SNAPMatrix 1
    WmTransient $widget(Toplevel427) $PSPTopLevel
    }

set SNAPDirInput ""
set SNAPDirOutput ""
set SNAPOutputDir ""
set SNAPOutputSubDir ""
set SNAPParameterFile ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set SNAPDirInput "$DataDir/C2"
    set SNAPOutputDir $DataDir
    append SNAPOutputDir "_SNAP"
    set SNAPDirOutput $SNAPOutputDir
    set SNAPOutputSubDir "C2"
    set BMPDirInput "$SNAPDirOutput/C2"
    set ConfigFile "$SNAPDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set SNAPLeaderFile ""
        set SNAPSensor "RS2"
        set SNAPSensorPol "C2"
        set SNAPState "0"
        set SNAPMlkRgIn "1"; set SNAPMlkAzIn "1"
        set SNAPMlkRgOut "1"; set SNAPMlkAzOut "1"
        set SNAPResamplingIMG "BILINEAR_INTERPOLATION"
        set SNAPResamplingDEM "BILINEAR_INTERPOLATION"
        set SNAPPixelSize ""; set SNAPPixelSizeAz ""; set SNAPPixelSizeRg ""
        set SNAPDEM "srtm"; set SNAPDEMFile ""; set SNAPRadioCorrec "none"
        set SNAPSaveDEM "0"; set SNAPSaveIncAng "0"; set SNAPSaveProjIncAng "0"
        $widget(Button427_1) configure -state disable
        $widget(Button427_2) configure -state disable
        $widget(Button427_3) configure -state disable
        $widget(Button427_4) configure -state disable
        $widget(Button427_6) configure -state disable
        $widget(Button427_7) configure -state disable
        $widget(Button427_8) configure -state disable
        $widget(Button427_9) configure -state disable
        $widget(Entry427_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry427_1) configure -state disable
        $widget(Button427_5) configure -state disable
        WidgetShow $widget(Toplevel427); TextEditorRunTrace "Open Window SNAP S1-TBX - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [C2] Matrix} 
    $site_7_0.men67 add separator \
        
    $site_7_0.men67 add command \
        \
        -command {global DataDir SNAPDirInput SNAPDirOutput SNAPOutputDir SNAPOutputSubDir 
global SNAPLeaderFile SNAPSensor SNAPSensorPol SNAPState
global SNAPResamplingIMG SNAPResamplingDEM SNAPGeocoding 
global SNAPParameterFile SNAPParameterInput SNAPParameterOutput 
global SNAPPixelSizeAz SNAPPixelSizeRg SNAPPixelSize
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global ConfigFile VarError ErrorMessage Fonction PSPBackgroundColor

#DATA IMPORT
global Load_SNAPParameter PSPTopLevel

if {$DataDir != ""} {

if {$Load_SNAPParameter == 0} {
    source "GUI/data_import/SNAPParameter.tcl"
    set Load_SNAPParameter 1
    WmTransient $widget(Toplevel428) $PSPTopLevel
    }

set SNAPDirInput "$DataDir/C2"
set SNAPDirOutput $DataDir
append SNAPDirOutput "_SNAP"
set BMPDirInput $SNAPDirOutput
set SNAPLeaderFile ""
set SNAPParameterFile ""
set SNAPParameterInput ""
set SNAPParameterOutput ""
set SNAPSensor "RS2"
set SNAPSensorPol "C2"
set SNAPState "0"
set SNAPMlkRgIn "1"; set SNAPMlkAzIn "1"
set SNAPMlkRgOut "1"; set SNAPMlkAzOut "1"
set SNAPResamplingIMG "BILINEAR_INTERPOLATION"
set SNAPResamplingDEM "BILINEAR_INTERPOLATION"
set SNAPPixelSize ""; set SNAPPixelSizeAz ""; set SNAPPixelSizeRg ""
set SNAPDEM "srtm"; set SNAPDEMFile ""; set SNAPRadioCorrec "none"
set SNAPSaveDEM "0"; set SNAPSaveIncAng "0"; set SNAPSaveProjIncAng "0"
$widget(Button428_1) configure -state disable
$widget(Button428_2) configure -state disable
$widget(Button428_3) configure -state disable
$widget(Button428_4) configure -state disable
$widget(Button428_6) configure -state disable
$widget(Button428_7) configure -state disable
$widget(Button428_8) configure -state disable
$widget(Button428_9) configure -state disable
$widget(Entry428_1) configure -disabledbackground $PSPBackgroundColor
$widget(Entry428_1) configure -state disable
$widget(Button428_5) configure -state disable
WidgetShow $widget(Toplevel428); TextEditorRunTrace "Open Window SNAP S1-TBX - Geocode Parameter" "b"

}} \
        -label {Geocode Parameter} 
    $site_6_0.men66 add separator \
        
    $site_6_0.men66 add cascade \
        -menu "$site_6_0.men66.men68" -command {} -label {[T3]} 
    set site_7_0 $site_6_0.men66
    menu $site_7_0.men68 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men68 add command \
        \
        -command {global DataDir SNAPDirInput SNAPDirOutput SNAPOutputDir SNAPOutputSubDir 
global SNAPLeaderFile SNAPSensor SNAPSensorPol SNAPState SNAPParameterFile
global SNAPResamplingIMG SNAPResamplingDEM SNAPGeocoding 
global SNAPPixelSizeAz SNAPPixelSizeRg SNAPPixelSize
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global ConfigFile VarError ErrorMessage Fonction PSPBackgroundColor

#DATA IMPORT
global Load_SNAPMatrix PSPTopLevel

if {$DataDir != ""} {

if {$Load_SNAPMatrix == 0} {
    source "GUI/data_import/SNAPMatrix.tcl"
    set Load_SNAPMatrix 1
    WmTransient $widget(Toplevel427) $PSPTopLevel
    }

set SNAPDirInput ""
set SNAPDirOutput ""
set SNAPOutputDir ""
set SNAPOutputSubDir ""
set SNAPParameterFile ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/T3"] {
if [file exists "$DataDir/T3/config.txt"] {
if [file exists "$DataDir/T3/T11.bin"] {
    set SNAPDirInput "$DataDir/T3"
    set SNAPOutputDir $DataDir
    append SNAPOutputDir "_SNAP"
    set SNAPDirOutput $SNAPOutputDir
    set SNAPOutputSubDir "T3"
    set BMPDirInput "$SNAPDirOutput/T3"
    set ConfigFile "$SNAPDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set SNAPLeaderFile ""
        set SNAPSensor "RS2"
        set SNAPSensorPol "T3"
        set SNAPState "0"
        set SNAPMlkRgIn "1"; set SNAPMlkAzIn "1"
        set SNAPMlkRgOut "1"; set SNAPMlkAzOut "1"
        set SNAPResamplingIMG "BILINEAR_INTERPOLATION"
        set SNAPResamplingDEM "BILINEAR_INTERPOLATION"
        set SNAPPixelSize ""; set SNAPPixelSizeAz ""; set SNAPPixelSizeRg ""
        set SNAPDEM "srtm"; set SNAPDEMFile ""; set SNAPRadioCorrec "none"
        set SNAPSaveDEM "0"; set SNAPSaveIncAng "0"; set SNAPSaveProjIncAng "0"
        $widget(Button427_1) configure -state disable
        $widget(Button427_2) configure -state disable
        $widget(Button427_3) configure -state disable
        $widget(Button427_4) configure -state disable
        $widget(Button427_6) configure -state disable
        $widget(Button427_7) configure -state disable
        $widget(Button427_8) configure -state disable
        $widget(Button427_9) configure -state disable
        $widget(Entry427_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry427_1) configure -state disable
        $widget(Button427_5) configure -state disable
        WidgetShow $widget(Toplevel427); TextEditorRunTrace "Open Window SNAP S1-TBX - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY T3 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [T3] Matrix} 
    $site_7_0.men68 add separator \
        
    $site_7_0.men68 add command \
        \
        -command {global DataDir SNAPDirInput SNAPDirOutput SNAPOutputDir SNAPOutputSubDir 
global SNAPLeaderFile SNAPSensor SNAPSensorPol SNAPState
global SNAPResamplingIMG SNAPResamplingDEM SNAPGeocoding 
global SNAPParameterFile SNAPParameterInput SNAPParameterOutput 
global SNAPPixelSizeAz SNAPPixelSizeRg SNAPPixelSize
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global ConfigFile VarError ErrorMessage Fonction PSPBackgroundColor

#DATA IMPORT
global Load_SNAPParameter PSPTopLevel

if {$DataDir != ""} {

if {$Load_SNAPParameter == 0} {
    source "GUI/data_import/SNAPParameter.tcl"
    set Load_SNAPParameter 1
    WmTransient $widget(Toplevel428) $PSPTopLevel
    }

set SNAPDirInput "$DataDir/T3"
set SNAPDirOutput $DataDir
append SNAPDirOutput "_SNAP"
set BMPDirInput $SNAPDirOutput
set SNAPLeaderFile ""
set SNAPParameterFile ""
set SNAPParameterInput ""
set SNAPParameterOutput ""
set SNAPSensor "RS2"
set SNAPSensorPol "T3"
set SNAPState "0"
set SNAPMlkRgIn "1"; set SNAPMlkAzIn "1"
set SNAPMlkRgOut "1"; set SNAPMlkAzOut "1"
set SNAPResamplingIMG "BILINEAR_INTERPOLATION"
set SNAPResamplingDEM "BILINEAR_INTERPOLATION"
set SNAPPixelSize ""; set SNAPPixelSizeAz ""; set SNAPPixelSizeRg ""
set SNAPDEM "srtm"; set SNAPDEMFile ""; set SNAPRadioCorrec "none"
set SNAPSaveDEM "0"; set SNAPSaveIncAng "0"; set SNAPSaveProjIncAng "0"
$widget(Button428_1) configure -state disable
$widget(Button428_2) configure -state disable
$widget(Button428_3) configure -state disable
$widget(Button428_4) configure -state disable
$widget(Button428_6) configure -state disable
$widget(Button428_7) configure -state disable
$widget(Button428_8) configure -state disable
$widget(Button428_9) configure -state disable
$widget(Entry428_1) configure -disabledbackground $PSPBackgroundColor
$widget(Entry428_1) configure -state disable
$widget(Button428_5) configure -state disable
WidgetShow $widget(Toplevel428); TextEditorRunTrace "Open Window SNAP S1-TBX - Geocode Parameter" "b"

}} \
        -label {Geocode Parameter} 
    $site_4_0.men69.m add separator \
        
    $site_4_0.men69.m add cascade \
        -menu "$site_4_0.men69.m.men69" -command {} -label {TERRASAR - X} 
    set site_6_0 $site_4_0.men69.m
    menu $site_6_0.men69 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men69 add cascade \
        -menu "$site_6_0.men69.men70" -label {[C2]} 
    set site_7_0 $site_6_0.men69
    menu $site_7_0.men70 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men70 add command \
        \
        -command {global DataDir SNAPDirInput SNAPDirOutput SNAPOutputDir SNAPOutputSubDir 
global SNAPLeaderFile SNAPSensor SNAPSensorPol SNAPState SNAPParameterFile
global SNAPResamplingIMG SNAPResamplingDEM SNAPGeocoding 
global SNAPPixelSizeAz SNAPPixelSizeRg SNAPPixelSize
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global ConfigFile VarError ErrorMessage Fonction PSPBackgroundColor

#DATA IMPORT
global Load_SNAPMatrix PSPTopLevel

if {$DataDir != ""} {

if {$Load_SNAPMatrix == 0} {
    source "GUI/data_import/SNAPMatrix.tcl"
    set Load_SNAPMatrix 1
    WmTransient $widget(Toplevel427) $PSPTopLevel
    }

set SNAPDirInput ""
set SNAPDirOutput ""
set SNAPOutputDir ""
set SNAPOutputSubDir ""
set SNAPParameterFile ""

set ConfigFile ""
          
if [file isdirectory "$DataDir/C2"] {
if [file exists "$DataDir/C2/config.txt"] {
if [file exists "$DataDir/C2/C11.bin"] {
    set SNAPDirInput "$DataDir/C2"
    set SNAPOutputDir $DataDir
    append SNAPOutputDir "_SNAP"
    set SNAPDirOutput $SNAPOutputDir
    set SNAPOutputSubDir "C2"
    set BMPDirInput "$SNAPDirOutput/C2"
    set ConfigFile "$SNAPDirInput/config.txt"
    set ErrorMessage ""
    LoadConfig
    if {"$ErrorMessage" == ""} {
        set SNAPLeaderFile ""
        set SNAPSensor "TSX"
        set SNAPSensorPol "C2"
        set SNAPState "0"
        set SNAPMlkRgIn "1"; set SNAPMlkAzIn "1"
        set SNAPMlkRgOut "1"; set SNAPMlkAzOut "1"
        set SNAPResamplingIMG "BILINEAR_INTERPOLATION"
        set SNAPResamplingDEM "BILINEAR_INTERPOLATION"
        set SNAPPixelSize ""; set SNAPPixelSizeAz ""; set SNAPPixelSizeRg ""
        set SNAPDEM "srtm"; set SNAPDEMFile ""; set SNAPRadioCorrec "none"
        set SNAPSaveDEM "0"; set SNAPSaveIncAng "0"; set SNAPSaveProjIncAng "0"
        $widget(Button427_1) configure -state disable
        $widget(Button427_2) configure -state disable
        $widget(Button427_3) configure -state disable
        $widget(Button427_4) configure -state disable
        $widget(Button427_6) configure -state disable
        $widget(Button427_7) configure -state disable
        $widget(Button427_8) configure -state disable
        $widget(Button427_9) configure -state disable
        $widget(Entry427_1) configure -disabledbackground $PSPBackgroundColor
        $widget(Entry427_1) configure -state disable
        $widget(Button427_5) configure -state disable
        WidgetShow $widget(Toplevel427); TextEditorRunTrace "Open Window SNAP S1-TBX - Geocode Matrix" "b"
        } else {
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        }
    } else {
    set ErrorMessage "CHANGE THE DATA INPUT DIRECTORY" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "ENTER A VALID DIRECTORY"
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }
    } else {
    set ErrorMessage "THE DIRECTORY C2 DOES NOT EXIST" 
    Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    }

}} \
        -label {Geocode [C2] Matrix} 
    $site_7_0.men70 add separator \
        
    $site_7_0.men70 add command \
        \
        -command {global DataDir SNAPDirInput SNAPDirOutput SNAPOutputDir SNAPOutputSubDir 
global SNAPLeaderFile SNAPSensor SNAPSensorPol SNAPState
global SNAPResamplingIMG SNAPResamplingDEM SNAPGeocoding 
global SNAPParameterFile SNAPParameterInput SNAPParameterOutput 
global SNAPPixelSizeAz SNAPPixelSizeRg SNAPPixelSize
global SNAPMlkRgIn SNAPMlkAzIn SNAPMlkRgOut SNAPMlkAzOut SNAPDEM SNAPDEMFile SNAPRadioCorrec
global SNAPSaveDEM SNAPSaveIncAng SNAPSaveProjIncAng
global ConfigFile VarError ErrorMessage Fonction PSPBackgroundColor

#DATA IMPORT
global Load_SNAPParameter PSPTopLevel

if {$DataDir != ""} {

if {$Load_SNAPParameter == 0} {
    source "GUI/data_import/SNAPParameter.tcl"
    set Load_SNAPParameter 1
    WmTransient $widget(Toplevel428) $PSPTopLevel
    }

set SNAPDirInput "$DataDir/C2"
set SNAPDirOutput $DataDir
append SNAPDirOutput "_SNAP"
set BMPDirInput $SNAPDirOutput
set SNAPLeaderFile ""
set SNAPParameterFile ""
set SNAPParameterInput ""
set SNAPParameterOutput ""
set SNAPSensor "TSX"
set SNAPSensorPol "C2"
set SNAPState "0"
set SNAPMlkRgIn "1"; set SNAPMlkAzIn "1"
set SNAPMlkRgOut "1"; set SNAPMlkAzOut "1"
set SNAPResamplingIMG "BILINEAR_INTERPOLATION"
set SNAPResamplingDEM "BILINEAR_INTERPOLATION"
set SNAPPixelSize ""; set SNAPPixelSizeAz ""; set SNAPPixelSizeRg ""
set SNAPDEM "srtm"; set SNAPDEMFile ""; set SNAPRadioCorrec "none"
set SNAPSaveDEM "0"; set SNAPSaveIncAng "0"; set SNAPSaveProjIncAng "0"
$widget(Button428_1) configure -state disable
$widget(Button428_2) configure -state disable
$widget(Button428_3) configure -state disable
$widget(Button428_4) configure -state disable
$widget(Button428_6) configure -state disable
$widget(Button428_7) configure -state disable
$widget(Button428_8) configure -state disable
$widget(Button428_9) configure -state disable
$widget(Entry428_1) configure -disabledbackground $PSPBackgroundColor
$widget(Entry428_1) configure -state disable
$widget(Button428_5) configure -state disable
WidgetShow $widget(Toplevel428); TextEditorRunTrace "Open Window SNAP S1-TBX - Geocode Parameter" "b"

}} \
        -label {Geocode Parameter} 
    $site_6_0.men69 add separator \
        
    $site_6_0.men69 add cascade \
        -menu "$site_6_0.men69.men71" -label {[T3]} 
    set site_7_0 $site_6_0.men69
    menu $site_7_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men71 add command \
        \
        -command {Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"} \
        -label {Geocode [T3] Matrix} 
    $site_7_0.men71 add separator \
        
    $site_7_0.men71 add command \
        \
        -command {Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"} \
        -label {Geocode Parameter} 
    pack $site_4_0.men68 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_4_0.men69 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra66 \
        -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra66" "Frame4" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra66
    menubutton $site_4_0.men67 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images SRTM.gif]] \
        -menu "$site_4_0.men67.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men67" "Menubutton5" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men67 "$site_4_0.men67 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {S.R.T.M}
    }
    menu $site_4_0.men67.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men67.m add command \
        \
        -command {global DataDir FileName GoogleInputFile OpenDirFile
global VarError ErrorMessage VarAdvice CONFIGDir
global WarningMessage WarningMessage2 WarningMessage3 WarningMessage4

if {$OpenDirFile == 0} {

set WarningMessage "OPEN A GEARTH_POLY FILE TO DEFINE"
set WarningMessage2 "THE LONG / LAT CHARACTERISTICS"
set VarAdvice ""
Window show $widget(Toplevel242); TextEditorRunTrace "Open Window Advice" "b"
tkwait variable VarAdvice

set GoogleInputFile ""

set types {
    {{KML Files}        {.kml}        }
    }
set FileName ""
OpenFile $DataDir $types "INPUT KML FILE"

if {$FileName != ""} {
    set GoogleInputFile [file tail $FileName]
    if {$GoogleInputFile != "GEARTH_POLY.kml"} {
        set VarError ""
        set ErrorMessage "INVALID INPUT GEARTH_POLY FILE"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set GoogleInputFile ""
        } else {
        set WarningMessage "DOWNLOAD A SRTM GeoTIFF FORMAT FILE AT:"
        set WarningMessage2 "xftp.jrc.it/pub/srtmV4/tiff/"
        set VarAdvice ""
        Window show $widget(Toplevel242); TextEditorRunTrace "Open Window Advice" "b"
        tkwait variable VarAdvice
        GoogleEarth "$CONFIGDir/SRTM41.kml"
        GoogleEarth $FileName
        }
    }
}} \
        -label Download 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global OpenDirFile DataDir DEMoutputDir
global DEMInputFile1 DEMInputFile2 DEMInputFile3 DEMInputFile4 DEMNfile DEMNlig DEMNcol
global DEMLatCenter DEMLongCenter DEMLat00 DEMLong00 DEMLat0N DEMLong0N GoogleLatCenter
global DEMLatN0 DEMLongN0 DEMLatNN DEMLongNN DEMWest DEMEast DEMNorth DEMSouth
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage
global GoogleLatLong GoogleLatCenter GoogleLongCenter GoogleLat00 GoogleLong00 GoogleLat0N GoogleLong0N
global GoogleLatN0 GoogleLongN0 GoogleLatNN GoogleLongNN GoogleInputFile
#DATA IMPORT
global Load_ExtractDEM Load_ReadGEARTH_POLY PSPTopLevel

if {$GoogleLatCenter == "?"} {
    #error message
    set VarError ""
    set ErrorMessage "LONG / LAT CHARACTERISTICS NOT DEFINED : READ A GEARTH_POLY FILE FIRST"
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    
    if {$Load_ReadGEARTH_POLY == 0} {
        source "GUI/data_import/ReadGEARTH_POLY.tcl"
        set Load_ReadGEARTH_POLY 1
        WmTransient $widget(Toplevel359) $PSPTopLevel
        }

    if {$OpenDirFile == 0} {
        set GoogleLatLong ""
        set GoogleLatCenter "?"
        set GoogleLongCenter "?"
        set GoogleLat00 "?"
        set GoogleLong00 "?"
        set GoogleLat0N "?"
        set GoogleLong0N "?"
        set GoogleLatN0 "?"
        set GoogleLongN0 "?"
        set GoogleLatNN "?"
        set GoogleLongNN "?"
        set GoogleInputFile ""
        $widget(Button359_1) configure -state disable
        WidgetShow $widget(Toplevel359); TextEditorRunTrace "Open Window Read GEARTH_POLY File" "b"
        }    
            
} else {

if {$OpenDirFile == 0} {

if {$Load_ExtractDEM == 0} {
    source "GUI/data_import/ExtractDEM.tcl"
    set Load_ExtractDEM 1
    WmTransient $widget(Toplevel361) $PSPTopLevel
    }

set DEMNfile ""
set DEMInputFile1 ""
set DEMInputFile2 ""
set DEMInputFile3 ""
set DEMInputFile4 ""
set DEMoutputDir ""

set DEMLatCenter "?"
set DEMLongCenter "?"
set DEMLat00 "?"
set DEMLong00 "?"
set DEMLat0N "?"
set DEMLong0N "?"
set DEMLatN0 "?"
set DEMLongN0 "?"
set DEMLatNN "?"
set DEMLongNN "?"

$widget(TitleFrame361_1) configure -state disable
$widget(Entry361_1) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_1) configure -state disable
$widget(Button361_1) configure -state disable

$widget(TitleFrame361_2) configure -state disable
$widget(Entry361_2) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_2) configure -state disable
$widget(Button361_2) configure -state disable

$widget(TitleFrame361_3) configure -state disable
$widget(Entry361_3) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_3) configure -state disable
$widget(Button361_3) configure -state disable

$widget(TitleFrame361_4) configure -state disable
$widget(Entry361_4) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_4) configure -state disable
$widget(Button361_4) configure -state disable

WidgetShow $widget(Toplevel361); TextEditorRunTrace "Open Window Extract DEM File" "b"
}
}} \
        -label Extract 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global DataDir FileName DEMInputFile DEMoutputDir OpenDirFile
global VarError ErrorMessage

if {$OpenDirFile == 0} {

set DEMInputFile ""

set types {
    {{KML Files}        {.kml}        }
    }
set FileName ""

if {$DEMoutputDir == ""} {
    OpenFile $DataDir $types "INPUT KML FILE"
    } else {
    OpenFile $DEMoutputDir $types "INPUT KML FILE"
    }

if {$FileName != ""} {
    set DEMInputFile [file tail $FileName]
    if {$DEMInputFile != "DEM.kml"} {
        set VarError ""
        set ErrorMessage "INVALID INPUT DEM FILE"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set DEMInputFile ""
        } else {
        GoogleEarth $FileName
        }
    }
}} \
        -label Display 
    menubutton $site_4_0.men68 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images ASTER.gif]] \
        -menu "$site_4_0.men68.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men68" "Menubutton8" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men68 "$site_4_0.men68 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {ASTER}
    }
    menu $site_4_0.men68.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men68.m add command \
        \
        -command {global DataDir FileName GoogleInputFile OpenDirFile
global VarError ErrorMessage VarAdvice CONFIGDir
global WarningMessage WarningMessage2

if {$OpenDirFile == 0} {

set WarningMessage "OPEN A GEARTH_POLY FILE TO DEFINE"
set WarningMessage2 "THE LONG / LAT CHARACTERISTICS"
set VarAdvice ""
Window show $widget(Toplevel242); TextEditorRunTrace "Open Window Advice" "b"
tkwait variable VarAdvice

set GoogleInputFile ""

set types {
    {{KML Files}        {.kml}        }
    }
set FileName ""
OpenFile $DataDir $types "INPUT KML FILE"

if {$FileName != ""} {
    set GoogleInputFile [file tail $FileName]
    if {$GoogleInputFile != "GEARTH_POLY.kml"} {
        set VarError ""
        set ErrorMessage "INVALID INPUT GEARTH_POLY FILE"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set GoogleInputFile ""
        } else {
        set WarningMessage "DOWNLOAD AN ASTER G-DEM GeoTIFF FORMAT FILE AT:"
        set WarningMessage2 "http://www.ersdac.or.jp/GDEM/E/index.html"
        set VarAdvice ""
        Window show $widget(Toplevel242); TextEditorRunTrace "Open Window Advice" "b"
        tkwait variable VarAdvice
        GoogleEarth "$DataDirInit/Config/ASTER.kml"
        GoogleEarth $FileName
        }
    }
}} \
        -label Download 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global OpenDirFile DataDir DEMoutputDir
global DEMInputFile1 DEMInputFile2 DEMInputFile3 DEMInputFile4 DEMNfile DEMNlig DEMNcol
global DEMLatCenter DEMLongCenter DEMLat00 DEMLong00 DEMLat0N DEMLong0N GoogleLatCenter
global DEMLatN0 DEMLongN0 DEMLatNN DEMLongNN DEMWest DEMEast DEMNorth DEMSouth
global VarWarning WarningMessage WarningMessage2 VarError ErrorMessage
global GoogleLatLong GoogleLatCenter GoogleLongCenter GoogleLat00 GoogleLong00 GoogleLat0N GoogleLong0N
global GoogleLatN0 GoogleLongN0 GoogleLatNN GoogleLongNN GoogleInputFile
#DATA IMPORT
global Load_ExtractDEM Load_ReadGEARTH_POLY PSPTopLevel

if {$GoogleLatCenter == "?"} {
    #error message
    set VarError ""
    set ErrorMessage "LONG / LAT CHARACTERISTICS NOT DEFINED : READ A GEARTH_POLY FILE FIRST"
    Window show .top44; TextEditorRunTrace "Open Window Error" "b"
    tkwait variable VarError
    
    if {$Load_ReadGEARTH_POLY == 0} {
        source "GUI/data_import/ReadGEARTH_POLY.tcl"
        set Load_ReadGEARTH_POLY 1
        WmTransient $widget(Toplevel359) $PSPTopLevel
        }

    if {$OpenDirFile == 0} {
        set GoogleLatLong ""
        set GoogleLatCenter "?"
        set GoogleLongCenter "?"
        set GoogleLat00 "?"
        set GoogleLong00 "?"
        set GoogleLat0N "?"
        set GoogleLong0N "?"
        set GoogleLatN0 "?"
        set GoogleLongN0 "?"
        set GoogleLatNN "?"
        set GoogleLongNN "?"
        set GoogleInputFile ""
        $widget(Button359_1) configure -state disable
        WidgetShow $widget(Toplevel359); TextEditorRunTrace "Open Window Read GEARTH_POLY File" "b"
        }    
            
} else {

if {$OpenDirFile == 0} {

if {$Load_ExtractDEM == 0} {
    source "GUI/data_import/ExtractDEM.tcl"
    set Load_ExtractDEM 1
    WmTransient $widget(Toplevel361) $PSPTopLevel
    }

set DEMNfile ""
set DEMInputFile1 ""
set DEMInputFile2 ""
set DEMInputFile3 ""
set DEMInputFile4 ""
set DEMoutputDir ""

set DEMLatCenter "?"
set DEMLongCenter "?"
set DEMLat00 "?"
set DEMLong00 "?"
set DEMLat0N "?"
set DEMLong0N "?"
set DEMLatN0 "?"
set DEMLongN0 "?"
set DEMLatNN "?"
set DEMLongNN "?"

$widget(TitleFrame361_1) configure -state disable
$widget(Entry361_1) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_1) configure -state disable
$widget(Button361_1) configure -state disable

$widget(TitleFrame361_2) configure -state disable
$widget(Entry361_2) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_2) configure -state disable
$widget(Button361_2) configure -state disable

$widget(TitleFrame361_3) configure -state disable
$widget(Entry361_3) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_3) configure -state disable
$widget(Button361_3) configure -state disable

$widget(TitleFrame361_4) configure -state disable
$widget(Entry361_4) configure -disabledbackground $PSPBackgroundColor
$widget(Entry361_4) configure -state disable
$widget(Button361_4) configure -state disable

WidgetShow $widget(Toplevel361); TextEditorRunTrace "Open Window Extract DEM File" "b"
}
}} \
        -label Extract 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global DataDir FileName DEMInputFile DEMoutputDir OpenDirFile
global VarError ErrorMessage

if {$OpenDirFile == 0} {

set DEMInputFile ""

set types {
    {{KML Files}        {.kml}        }
    }
set FileName ""

if {$DEMoutputDir == ""} {
    OpenFile $DataDir $types "INPUT KML FILE"
    } else {
    OpenFile $DEMoutputDir $types "INPUT KML FILE"
    }

if {$FileName != ""} {
    set DEMInputFile [file tail $FileName]
    if {$DEMInputFile != "DEM.kml"} {
        set VarError ""
        set ErrorMessage "INVALID INPUT DEM FILE"
        Window show $widget(Toplevel44); TextEditorRunTrace "Open Window Error" "b"
        tkwait variable VarError
        set DEMInputFile ""
        } else {
        GoogleEarth $FileName
        }
    }
}} \
        -label Display 
    pack $site_4_0.men67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_4_0.men68 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.fra72 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 2 -side right 
    pack $site_3_0.fra70 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 2 -side left 
    pack $site_3_0.fra75 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.fra76 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.fra77 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.fra78 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.fra79 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.fra81 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 5 -side left 
    pack $site_3_0.but66 \
        -in $site_3_0 -anchor center -expand 1 -fill none -side left 
    pack $site_3_0.fra67 \
        -in $site_3_0 -anchor center -expand 1 -fill none -side left 
    pack $site_3_0.fra66 \
        -in $site_3_0 -anchor center -expand 1 -fill none -side left 
    frame $top.cpd73 \
        -borderwidth 2 -relief sunken -width 155 
    vTcl:DefineAlias "$top.cpd73" "Frame454" vTcl:WidgetProc "Toplevel2" 1
    set site_3_0 $top.cpd73
    frame $site_3_0.cpd79 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.cpd79" "Frame13" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.cpd79
    menubutton $site_4_0.men73 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images PSPv2small.gif]] \
        -menu "$site_4_0.men73.m" -padx 7 -pady 5 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men73" "MenubuttonPSP" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men73 "$site_4_0.men73 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men73 <<SetBalloon>> {
        set ::vTcl::balloon::%W {PolSARpro v5.0}
    }
    menu $site_4_0.men73.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men73.m add command \
        \
        -command {global ActiveProgram ActiveImportData couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "POLSARPRO"} {
set ActiveProgram ""
$widget(MenubuttonPSP) configure -background $couleur_fond
$widget(MenubuttonPSP) configure -image ImgMenuPSP
MenuEnv
TextEditorRunTrace "Close PolSARpro v5.0" "b"
} else {
set ActiveProgram "POLSARPRO"
set ActiveImportData ""
$widget(MenubuttonPSP) configure -background #FFFF00
$widget(MenubuttonPSP) configure -image ImgMenuPSPon
MenuEnv
InitDataDir
TextEditorRunTrace "Open PolSARpro v5.0" "b"
}} \
        -label {Single Data Set} 
    $site_4_0.men73.m add separator \
        
    $site_4_0.men73.m add cascade \
        -menu "$site_4_0.men73.m.men71" -command {} -label {Multi Data Sets} 
    set site_6_0 $site_4_0.men73.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram ActiveImportData couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "POLINSAR"} {
set ActiveProgram ""
$widget(MenubuttonPSP) configure -background $couleur_fond
$widget(MenubuttonPSP) configure -image ImgMenuPSP
MenuEnv
TextEditorRunTrace "Close PolSARpro v5.0 Dual" "b"
} else {
set ActiveProgram "POLINSAR"
set ActiveImportData ""
$widget(MenubuttonPSP) configure -background #FFFF00
$widget(MenubuttonPSP) configure -image ImgMenuPSPon
MenuEnv
InitDataDir
TextEditorRunTrace "Open PolSARpro v5.0 Dual" "b"
}} \
        -label {Dual Pol-InSAR Data Sets} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {global ActiveProgram ActiveImportData couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "POLMULT"} {
set ActiveProgram ""
$widget(MenubuttonPSP) configure -background $couleur_fond
$widget(MenubuttonPSP) configure -image ImgMenuPSP
MenuEnv
TextEditorRunTrace "Close PolSARpro v5.0 Mult" "b"
} else {
set ActiveProgram "POLMULT"
set ActiveImportData ""
$widget(MenubuttonPSP) configure -background #FFFF00
$widget(MenubuttonPSP) configure -image ImgMenuPSPon
MenuEnv
InitDataDir
TextEditorRunTrace "Open PolSARpro v5.0 Mult" "b"
}} \
        -label {Multi Time / Freq Data Sets} 
    pack $site_4_0.men73 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra23 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra23" "Frame455" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra23
    menubutton $site_4_0.men72 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images ALOSsmall.gif]] \
        -menu "$site_4_0.men72.m" -padx 7 -pady 5 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men72" "MenubuttonALOS" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men72 "$site_4_0.men72 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men72 <<SetBalloon>> {
        set ::vTcl::balloon::%W {ALOS / PALSAR}
    }
    menu $site_4_0.men72.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men72.m add cascade \
        -menu "$site_4_0.men72.m.men71" -command {} \
        -label {Data Processing Level 1.1} 
    set site_6_0 $site_4_0.men72.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men73" -label {Dual - Pol} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men73 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men73 add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS"} {
if {$ALOSDataFormat == "dual1.1"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS) configure -background $couleur_fond
$widget(MenubuttonALOS) configure -image ImgMenuALOS
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "dual1.1"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "dual1.1"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {JAXA - CEOS Format} 
    $site_7_0.men73 add separator \
        
    $site_7_0.men73 add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS"} {
if {$ALOSDataFormat == "dual1.1vex"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS) configure -background $couleur_fond
$widget(MenubuttonALOS) configure -image ImgMenuALOS
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "dual1.1vex"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "dual1.1vex"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {ERSDAC - Vexcel Format} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men74" -label {Quad - Pol} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men74 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men74 add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS"} {
if {$ALOSDataFormat == "quad1.1"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS) configure -background $couleur_fond
$widget(MenubuttonALOS) configure -image ImgMenuALOS
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "quad1.1"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "quad1.1"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label {JAXA - CEOS Format} 
    $site_7_0.men74 add separator \
        
    $site_7_0.men74 add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS"} {
if {$ALOSDataFormat == "quad1.1vex"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS) configure -background $couleur_fond
$widget(MenubuttonALOS) configure -image ImgMenuALOS
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "quad1.1vex"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "quad1.1vex"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label {ERSDAC - Vexcel Format} 
    $site_4_0.men72.m add separator \
        
    $site_4_0.men72.m add cascade \
        -menu "$site_4_0.men72.m.men72" -command {} \
        -label {Data Processing Level 1.5} 
    set site_6_0 $site_4_0.men72.m
    menu $site_6_0.men72 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men72 add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS"} {
if {$ALOSDataFormat == "dual1.5"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS) configure -background $couleur_fond
$widget(MenubuttonALOS) configure -image ImgMenuALOS
MenuEnv
TextEditorRunTrace "Close EO-SI ALOS" "b"
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "dual1.5"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI ALOS" "b"
}
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "dual1.5"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI ALOS" "b"
}} \
        -label Dual-Pol 
    $site_6_0.men72 add separator \
        
    $site_6_0.men72 add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS"} {
if {$ALOSDataFormat == "quad1.5"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS) configure -background $couleur_fond
$widget(MenubuttonALOS) configure -image ImgMenuALOS
MenuEnv
TextEditorRunTrace "Close EO-SI ALOS" "b"
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "quad1.5"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI ALOS" "b"
}
} else {
set ActiveProgram "ALOS"
set ALOSDataFormat "quad1.5"
$widget(MenubuttonALOS) configure -background #FFFF00
$widget(MenubuttonALOS) configure -image ImgMenuALOSon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI ALOS" "b"
}} \
        -label Quad-Pol 
    menubutton $site_4_0.men67 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images ALOS2small.gif]] \
        -menu "$site_4_0.men67.m" -padx 7 -pady 5 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men67" "MenubuttonALOS2" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men67 "$site_4_0.men67 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {ALOS - 2}
    }
    menu $site_4_0.men67.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men67.m add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS2"} {
if {$ALOSDataFormat == "dual1.1"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS2) configure -background $couleur_fond
$widget(MenubuttonALOS2) configure -image ImgMenuALOS2
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "ALOS2"
set ALOSDataFormat "dual1.1"
$widget(MenubuttonALOS2) configure -background #FFFF00
$widget(MenubuttonALOS2) configure -image ImgMenuALOS2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "ALOS2"
set ALOSDataFormat "dual1.1"
$widget(MenubuttonALOS2) configure -background #FFFF00
$widget(MenubuttonALOS2) configure -image ImgMenuALOS2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {Data Processing Level 1.1 : Dual - Pol} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global ActiveProgram ALOSDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ALOS2"} {
if {$ALOSDataFormat == "quad1.1"} {
set ActiveProgram ""
set ALOSDataFormat ""
$widget(MenubuttonALOS2) configure -background $couleur_fond
$widget(MenubuttonALOS2) configure -image ImgMenuALOS2
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "ALOS2"
set ALOSDataFormat "quad1.1"
$widget(MenubuttonALOS2) configure -background #FFFF00
$widget(MenubuttonALOS2) configure -image ImgMenuALOS2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}
} else {
set ActiveProgram "ALOS2"
set ALOSDataFormat "quad1.1"
$widget(MenubuttonALOS2) configure -background #FFFF00
$widget(MenubuttonALOS2) configure -image ImgMenuALOS2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label {Data Processing Level 1.1 : Quad - Pol} 
    button $site_4_0.cpd66 \
        \
        -command {global ActiveProgram CSKDirInput CSKDataFormat CSKFileInput CSKQuickLook CSKFileInputFlag couleur_fond
global CSKSatelliteID CSKStationID CSKFrequency CSKIncAngle CSKLookSide CSKOrbit
global CSKSceneStart CSKSceneStop CSKPolar1 CSKPolar2 CSKColumn CSKLine

set CSKFileInput ""
set CSKSatelliteID ""
set CSKStationID ""
set CSKFrequency ""
set CSKIncAngle ""
set CSKLookSide ""
set CSKOrbit ""
set CSKSceneStart ""
set CSKSceneStop ""
set CSKPolar1 ""
set CSKPolar2 ""
set CSKColumn ""
set CSKLine ""

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "CSK"} {
  set ActiveProgram ""
  set CSKDirInput ""
  set CSKDataFormat ""
  set CSKQuickLook 0
  set CSKFileInputFlag 0
  $widget(ButtonCSK) configure -background $couleur_fond
  $widget(ButtonCSK) configure -image ImgMenuCSK
  MenuEnv
  TextEditorRunTrace "Close EO-SI Dual Pol" "b"
  } else {
  set ActiveProgram "CSK"
  set CSKDirInput ""
  set CSKDataFormat "dual"
  set CSKQuickLook 0
  set CSKFileInputFlag 0
  $widget(ButtonCSK) configure -background #FFFF00
  $widget(ButtonCSK) configure -image ImgMenuCSKon
  MenuEnv
  InitDataDir
  TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images CSKsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.cpd66" "ButtonCSK" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd66 "$site_4_0.cpd66 Button $top all _vTclBalloon"
    bind $site_4_0.cpd66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {COSMO-SKYMED}
    }
    menubutton $site_4_0.men71 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images RADARSAT2small.gif]] \
        -menu "$site_4_0.men71.m" -padx 7 -pady 5 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men71" "MenubuttonRAD2" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men71 "$site_4_0.men71 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men71 <<SetBalloon>> {
        set ::vTcl::balloon::%W {RADARSAT 2}
    }
    menu $site_4_0.men71.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men71.m add command \
        \
        -command {global ActiveProgram RADARSAT2DataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "RADARSAT2"} {
if {$RADARSAT2DataFormat == "dual"} {
set ActiveProgram ""
set RADARSAT2DataFormat ""
$widget(MenubuttonRAD2) configure -background $couleur_fond
$widget(MenubuttonRAD2) configure -image ImgMenuRAD2
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "RADARSAT2"
set RADARSAT2DataFormat "dual"
$widget(MenubuttonRAD2) configure -background #FFFF00
$widget(MenubuttonRAD2) configure -image ImgMenuRAD2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "RADARSAT2"
set RADARSAT2DataFormat "dual"
$widget(MenubuttonRAD2) configure -background #FFFF00
$widget(MenubuttonRAD2) configure -image ImgMenuRAD2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {Dual - Pol} 
    $site_4_0.men71.m add separator \
        
    $site_4_0.men71.m add command \
        \
        -command {global ActiveProgram RADARSAT2DataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "RADARSAT2"} {
if {$RADARSAT2DataFormat == "quad"} {
set ActiveProgram ""
set RADARSAT2DataFormat ""
$widget(MenubuttonRAD2) configure -background $couleur_fond
$widget(MenubuttonRAD2) configure -image ImgMenuRAD2
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "RADARSAT2"
set RADARSAT2DataFormat "quad"
$widget(MenubuttonRAD2) configure -background #FFFF00
$widget(MenubuttonRAD2) configure -image ImgMenuRAD2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}
} else {
set ActiveProgram "RADARSAT2"
set RADARSAT2DataFormat "quad"
$widget(MenubuttonRAD2) configure -background #FFFF00
$widget(MenubuttonRAD2) configure -image ImgMenuRAD2on
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label {Quad - Pol} 
    button $site_4_0.cpd68 \
        \
        -command {Window show .top35; TextEditorRunTrace "Open Window Under Construction" "b"} \
        -image [vTcl:image:get_image [file join . GUI Images RCMsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.cpd68" "ButtonRCM" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd68 "$site_4_0.cpd68 Button $top all _vTclBalloon"
    bind $site_4_0.cpd68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {RADARSAT 3 - R.C.M}
    }
    button $site_4_0.cpd70 \
        \
        -command {global ActiveProgram RISATDataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "RISAT"} {
    if {$RISATDataFormat == "dual1.1"} {
        set ActiveProgram ""
        set RISATDataFormat ""
        $widget(ButtonRISAT) configure -background $couleur_fond
        $widget(ButtonRISAT) configure -image ImgMenuRISAT
        MenuEnv
        TextEditorRunTrace "Close EO-SI Dual Pol" "b"
        } else {
        set ActiveProgram "RISAT"
        set RISATDataFormat "dual1.1"
        $widget(ButtonRISAT) configure -background #FFFF00
        $widget(ButtonRISAT) configure -image ImgMenuRISATon
        MenuEnv
        InitDataDir
        TextEditorRunTrace "Open EO-SI Dual Pol" "b"
        }
    } else {
    set ActiveProgram "RISAT"
    set RISATDataFormat "dual1.1"
    $widget(ButtonRISAT) configure -background #FFFF00
    $widget(ButtonRISAT) configure -image ImgMenuRISATon
    MenuEnv
    InitDataDir
    TextEditorRunTrace "Open EO-SI Dual Pol" "b"
    }} \
        -image [vTcl:image:get_image [file join . GUI Images RISATsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.cpd70" "ButtonRISAT" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd70 "$site_4_0.cpd70 Button $top all _vTclBalloon"
    bind $site_4_0.cpd70 <<SetBalloon>> {
        set ::vTcl::balloon::%W {RISAT - 1}
    }
    button $site_4_0.cpd67 \
        \
        -command {global ActiveProgram SENTINEL1DataFormat couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "SENTINEL1"} {
if {$SENTINEL1DataFormat == "dual"} {
set ActiveProgram ""
set SENTINEL1DataFormat ""
$widget(ButtonS1A) configure -background $couleur_fond
$widget(ButtonS1A) configure -image ImgMenuS1A
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "SENTINEL1"
set SENTINEL1DataFormat "dual"
$widget(ButtonS1A) configure -background #FFFF00
$widget(ButtonS1A) configure -image ImgMenuS1Aon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "SENTINEL1"
set SENTINEL1DataFormat "dual"
$widget(ButtonS1A) configure -background #FFFF00
$widget(ButtonS1A) configure -image ImgMenuS1Aon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images SENTINEL1small.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.cpd67" "ButtonS1A" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd67 "$site_4_0.cpd67 Button $top all _vTclBalloon"
    bind $site_4_0.cpd67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {SENTINEL 1}
    }
    menubutton $site_4_0.men74 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images TERRASARXsmall.gif]] \
        -menu "$site_4_0.men74.m" -padx 7 -pady 5 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men74" "MenubuttonTSX" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men74 "$site_4_0.men74 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men74 <<SetBalloon>> {
        set ::vTcl::balloon::%W {TERRASAR - X}
    }
    menu $site_4_0.men74.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men75" -label {Dual - Pol} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men75 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men75 add command \
        \
        -command {global ActiveProgram TERRASARXDataFormat TERRASARXDataLevel couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "TERRASARX"} {
if {$TERRASARXDataFormat == "dual"} {
if {$TERRASARXDataLevel == "SSC"} {
set ActiveProgram ""
set TERRASARXDataFormat ""
set TERRASARXDataLevel ""
$widget(MenubuttonTSX) configure -background $couleur_fond
$widget(MenubuttonTSX) configure -image ImgMenuTSX
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "SSC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "SSC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "SSC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {SSC : Single Look Slant Range Complex} 
    $site_6_0.men75 add separator \
        
    $site_6_0.men75 add separator \
        
    $site_6_0.men75 add command \
        \
        -command {global ActiveProgram TERRASARXDataFormat TERRASARXDataLevel couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "TERRASARX"} {
if {$TERRASARXDataFormat == "dual"} {
if {$TERRASARXDataLevel == "EEC"} {
set ActiveProgram ""
set TERRASARXDataFormat ""
set TERRASARXDataLevel ""
$widget(MenubuttonTSX) configure -background $couleur_fond
$widget(MenubuttonTSX) configure -image ImgMenuTSX
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "EEC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "EEC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "EEC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {EEC : Enhanced Ellipsoid Corrected} 
    $site_6_0.men75 add separator \
        
    $site_6_0.men75 add command \
        \
        -command {global ActiveProgram TERRASARXDataFormat TERRASARXDataLevel couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "TERRASARX"} {
if {$TERRASARXDataFormat == "dual"} {
if {$TERRASARXDataLevel == "GEC"} {
set ActiveProgram ""
set TERRASARXDataFormat ""
set TERRASARXDataLevel ""
$widget(MenubuttonTSX) configure -background $couleur_fond
$widget(MenubuttonTSX) configure -image ImgMenuTSX
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "GEC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "GEC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "GEC"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {GEC : Geocoded Ellipsoid Corrected} 
    $site_6_0.men75 add separator \
        
    $site_6_0.men75 add command \
        \
        -command {global ActiveProgram TERRASARXDataFormat TERRASARXDataLevel couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "TERRASARX"} {
if {$TERRASARXDataFormat == "dual"} {
if {$TERRASARXDataLevel == "MGD"} {
set ActiveProgram ""
set TERRASARXDataFormat ""
set TERRASARXDataLevel ""
$widget(MenubuttonTSX) configure -background $couleur_fond
$widget(MenubuttonTSX) configure -image ImgMenuTSX
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "MGD"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "MGD"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "TERRASARX"
set TERRASARXDataFormat "dual"
set TERRASARXDataLevel "MGD"
$widget(MenubuttonTSX) configure -background #FFFF00
$widget(MenubuttonTSX) configure -image ImgMenuTSXon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {MGD : Multi Look Ground Range} 
    $site_4_0.men74.m add cascade \
        -menu "$site_4_0.men74.m.men66" -label {Quad - Pol} 
    set site_6_0 $site_4_0.men74.m
    menu $site_6_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men66 add command \
        \
        -command {global ActiveProgram TERRASARXDataFormat TERRASARXDataLevel couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "TERRASARX"} {
    if {$TERRASARXDataFormat == "quad"} {
        if {$TERRASARXDataLevel == "SSC"} {
            set ActiveProgram ""
            set TERRASARXDataFormat ""
            set TERRASARXDataLevel ""
            $widget(MenubuttonTSX) configure -background $couleur_fond
            $widget(MenubuttonTSX) configure -image ImgMenuTSX
            MenuEnv
            TextEditorRunTrace "Close EO-SI Quad Pol" "b"
            } else {
            set ActiveProgram "TERRASARX"
            set TERRASARXDataFormat "quad"
            set TERRASARXDataLevel "SSC"
            $widget(MenubuttonTSX) configure -background #FFFF00
            $widget(MenubuttonTSX) configure -image ImgMenuTSXon
            MenuEnv
            InitDataDir
            TextEditorRunTrace "Open EO-SI Quad Pol" "b"
            }
        } else {
        set ActiveProgram "TERRASARX"
        set TERRASARXDataFormat "quad"
        set TERRASARXDataLevel "SSC"
        $widget(MenubuttonTSX) configure -background #FFFF00
        $widget(MenubuttonTSX) configure -image ImgMenuTSXon
        MenuEnv
        InitDataDir
        TextEditorRunTrace "Open EO-SI Quad Pol" "b"
        }
    } else {
    set ActiveProgram "TERRASARX"
    set TERRASARXDataFormat "quad"
    set TERRASARXDataLevel "SSC"
    $widget(MenubuttonTSX) configure -background #FFFF00
    $widget(MenubuttonTSX) configure -image ImgMenuTSXon
    MenuEnv
    InitDataDir
    TextEditorRunTrace "Open EO-SI Quad Pol" "b"
    }} \
        -label {SSC : Single Look Slant Range Complex} 
    button $site_4_0.cpd69 \
        \
        -command {global ActiveProgram TANDEMXDataFormat TANDEMXDataLevel couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "TANDEMX"} {
    if {$TANDEMXDataFormat == "dual"} {
        if {$TANDEMXDataLevel == "SSC"} {
            set ActiveProgram ""
            set TANDEMXDataFormat ""
            set TANDEMXDataLevel ""
            $widget(ButtonTDX) configure -background $couleur_fond
            $widget(ButtonTDX) configure -image ImgMenuTDX
            MenuEnv
            TextEditorRunTrace "Close EO-SI Dual Pol" "b"
            } else {
            set ActiveProgram "TANDEMX"
            set TANDEMXDataFormat "dual"
            set TANDEMXDataLevel "SSC"
            $widget(ButtonTDX) configure -background #FFFF00
            $widget(ButtonTDX) configure -image ImgMenuTDXon
            MenuEnv
            InitDataDir
            TextEditorRunTrace "Open EO-SI Dual Pol" "b"
            }
        } else {
        set ActiveProgram "TANDEMX"
        set TANDEMXDataFormat "dual"
        set TANDEMXDataLevel "SSC"
        $widget(ButtonTDX) configure -background #FFFF00
        $widget(ButtonTDX) configure -image ImgMenuTDXon
        MenuEnv
        InitDataDir
        TextEditorRunTrace "Open EO-SI Dual Pol" "b"
        }
    } else {
    set ActiveProgram "TANDEMX"
    set TANDEMXDataFormat "dual"
    set TANDEMXDataLevel "SSC"
    $widget(ButtonTDX) configure -background #FFFF00
    $widget(ButtonTDX) configure -image ImgMenuTDXon
    MenuEnv
    InitDataDir
    TextEditorRunTrace "Open EO-SI Dual Pol" "b"
    }} \
        -image [vTcl:image:get_image [file join . GUI Images TANDEMXsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.cpd69" "ButtonTDX" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd69 "$site_4_0.cpd69 Button $top all _vTclBalloon"
    bind $site_4_0.cpd69 <<SetBalloon>> {
        set ::vTcl::balloon::%W {TANDEM-X}
    }
    menubutton $site_4_0.men75 \
        -image [vTcl:image:get_image [file join . GUI Images down.gif]] \
        -menu "$site_4_0.men75.m" -padx 5 -pady 4 -relief ridge -text menu 
    vTcl:DefineAlias "$site_4_0.men75" "MenubuttonSPACEBORNE" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men75 "$site_4_0.men75 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men75 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Other Spaceborne Sensors}
    }
    menu $site_4_0.men75.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men75.m add command \
        \
        -command {global ActiveProgram AsarDirInput AsarDataFormat FileInputASAR AsarQuickLook ASARFileInputFlag couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ASAR"} {
set ActiveProgram ""
set AsarDirInput ""
set AsarDataFormat ""
set AsarQuickLook 0
set ASARFileInputFlag 0
$widget(MenubuttonSPACEBORNE) configure -background $couleur_fond
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNE
MenuEnv
TextEditorRunTrace "Close ENVISAT-ASAR" "b"
} else {
set ActiveProgram "ASAR"
set AsarDirInput ""
set AsarDataFormat ""
set AsarQuickLook 0
set ASARFileInputFlag 0
$widget(MenubuttonSPACEBORNE) configure -background #FFFF00
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open ENVISAT-ASAR" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images ASARsmall.gif]] \
        -label ASAR 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add cascade \
        -menu "$site_4_0.men75.m.men76" -command {} \
        -image [vTcl:image:get_image [file join . GUI Images SIRCsmall.gif]] \
        -label SIR-C 
    set site_6_0 $site_4_0.men75.m
    menu $site_6_0.men76 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men76 add command \
        \
        -command {global ActiveProgram SIRCDataFormatPol couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "SIRC"} {
if {$SIRCDataFormat == "dual"} {
set ActiveProgram ""
set SIRCDataFormatPol ""
$widget(MenubuttonSPACEBORNE) configure -background $couleur_fond
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNE
MenuEnv
TextEditorRunTrace "Close EO-SI Dual Pol" "b"
} else {
set ActiveProgram "SIRC"
set SIRCDataFormatPol "dual"
$widget(MenubuttonSPACEBORNE) configure -background #FFFF00
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}
} else {
set ActiveProgram "SIRC"
set SIRCDataFormatPol "dual"
$widget(MenubuttonSPACEBORNE) configure -background #FFFF00
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI Dual Pol" "b"
}} \
        -label {Dual - Pol} 
    $site_6_0.men76 add separator \
        
    $site_6_0.men76 add command \
        \
        -command {global ActiveProgram SIRCDataFormatPol couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "SIRC"} {
if {$SIRCDataFormat == "quad"} {
set ActiveProgram ""
set SIRCDataFormatPol ""
$widget(MenubuttonSPACEBORNE) configure -background $couleur_fond
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNE
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "SIRC"
set SIRCDataFormatPol "quad"
$widget(MenubuttonSPACEBORNE) configure -background #FFFF00
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}
} else {
set ActiveProgram "SIRC"
set SIRCDataFormatPol "quad"
$widget(MenubuttonSPACEBORNE) configure -background #FFFF00
$widget(MenubuttonSPACEBORNE) configure -image ImgMenuSPACEBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label {Quad - Pol} 
    pack $site_4_0.men72 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.men67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 1 -side left 
    pack $site_4_0.cpd66 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.men71 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.cpd68 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.cpd70 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.cpd67 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.men74 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.cpd69 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.men75 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.fra29 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra29" "Frame456" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra29
    button $site_4_0.but24 \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "AIRSAR"} {
set ActiveProgram ""
$widget(ButtonAIRSAR) configure -background $couleur_fond
$widget(ButtonAIRSAR) configure -image ImgMenuAIRSAR
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "AIRSAR"
$widget(ButtonAIRSAR) configure -background #FFFF00
$widget(ButtonAIRSAR) configure -image ImgMenuAIRSARon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images AIRSARsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.but24" "ButtonAIRSAR" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.but24 "$site_4_0.but24 Button $top all _vTclBalloon"
    bind $site_4_0.but24 <<SetBalloon>> {
        set ::vTcl::balloon::%W {AIRSAR}
    }
    menubutton $site_4_0.men66 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images ESARsmall.gif]] \
        -menu "$site_4_0.men66.m" -padx 7 -pady 5 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men66" "MenubuttonESAR" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men66 "$site_4_0.men66 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {ESAR - FSAR}
    }
    menu $site_4_0.men66.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men66.m add command \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "ESAR"} {
set ActiveProgram ""
$widget(MenubuttonESAR) configure -background $couleur_fond
$widget(MenubuttonESAR) configure -image ImgMenuESAR
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "ESAR"
$widget(MenubuttonESAR) configure -background #FFFF00
$widget(MenubuttonESAR) configure -image ImgMenuESARon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label E-SAR 
    $site_4_0.men66.m add separator \
        
    $site_4_0.men66.m add command \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "FSAR"} {
set ActiveProgram ""
$widget(MenubuttonESAR) configure -background $couleur_fond
$widget(MenubuttonESAR) configure -image ImgMenuESAR
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "FSAR"
$widget(MenubuttonESAR) configure -background #FFFF00
$widget(MenubuttonESAR) configure -image ImgMenuESARon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -label F-SAR 
    button $site_4_0.but23 \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "SETHI"} {
set ActiveProgram ""
$widget(ButtonSETHI) configure -background $couleur_fond
$widget(ButtonSETHI) configure -image ImgMenuSETHI
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "SETHI"
$widget(ButtonSETHI) configure -background #FFFF00
$widget(ButtonSETHI) configure -image ImgMenuSETHIon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images SETHIsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.but23" "ButtonSETHI" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.but23 "$site_4_0.but23 Button $top all _vTclBalloon"
    bind $site_4_0.but23 <<SetBalloon>> {
        set ::vTcl::balloon::%W {SETHI}
    }
    button $site_4_0.cpd66 \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "UAVSAR"} {
set ActiveProgram ""
$widget(ButtonUAVSAR) configure -background $couleur_fond
$widget(ButtonUAVSAR) configure -image ImgMenuUAVSAR
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "UAVSAR"
$widget(ButtonUAVSAR) configure -background #FFFF00
$widget(ButtonUAVSAR) configure -image ImgMenuUAVSARon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images UAVSARsmall.gif]] \
        -padx 7 -pady 5 -text button 
    vTcl:DefineAlias "$site_4_0.cpd66" "ButtonUAVSAR" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd66 "$site_4_0.cpd66 Button $top all _vTclBalloon"
    bind $site_4_0.cpd66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {UAVSAR}
    }
    menubutton $site_4_0.men67 \
        -image [vTcl:image:get_image [file join . GUI Images down.gif]] \
        -menu "$site_4_0.men67.m" -padx 5 -pady 4 -relief ridge -text menu 
    vTcl:DefineAlias "$site_4_0.men67" "MenubuttonAIRBORNE" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men67 "$site_4_0.men67 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Other Airborne Sensors}
    }
    menu $site_4_0.men67.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men67.m add command \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "CONVAIR"} {
set ActiveProgram ""
$widget(MenubuttonAIRBORNE) configure -background $couleur_fond
$widget(MenubuttonAIRBORNE) configure -image ImgMenuAIRBORNE
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "CONVAIR"
$widget(MenubuttonAIRBORNE) configure -background #FFFF00
$widget(MenubuttonAIRBORNE) configure -image ImgMenuAIRBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images CONVAIRsmall.gif]] \
        -label {CONVAIR / SAR-580} 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "EMISAR"} {
set ActiveProgram ""
$widget(MenubuttonAIRBORNE) configure -background $couleur_fond
$widget(MenubuttonAIRBORNE) configure -image ImgMenuAIRBORNE
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "EMISAR"
$widget(MenubuttonAIRBORNE) configure -background #FFFF00
$widget(MenubuttonAIRBORNE) configure -image ImgMenuAIRBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images EMISARsmall.gif]] \
        -label EMISAR 
    $site_4_0.men67.m add separator \
        
    $site_4_0.men67.m add command \
        \
        -command {global ActiveProgram couleur_fond

MenuRAZ
CloseAllWidget
$widget(MenubuttonMapReady) configure -state disable
$widget(MenubuttonSnap) configure -state disable
if {$ActiveProgram == "PISAR"} {
set ActiveProgram ""
$widget(MenubuttonAIRBORNE) configure -background $couleur_fond
$widget(MenubuttonAIRBORNE) configure -image ImgMenuAIRBORNE
MenuEnv
TextEditorRunTrace "Close EO-SI" "b"
} else {
set ActiveProgram "PISAR"
$widget(MenubuttonAIRBORNE) configure -background #FFFF00
$widget(MenubuttonAIRBORNE) configure -image ImgMenuAIRBORNEon
MenuEnv
InitDataDir
TextEditorRunTrace "Open EO-SI" "b"
}} \
        -image [vTcl:image:get_image [file join . GUI Images PISARsmall.gif]] \
        -label PISAR 
    pack $site_4_0.but24 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.men66 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.but23 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.cpd66 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_4_0.men67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    frame $site_3_0.cpd74 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.cpd74" "Frame9" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.cpd74
    menubutton $site_4_0.men68 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images PolSARproSIMshortcut.gif]] \
        -menu "$site_4_0.men68.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men68" "Menubutton4" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men68 "$site_4_0.men68 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men68 <<SetBalloon>> {
        set ::vTcl::balloon::%W {PolSARproSIM}
    }
    menu $site_4_0.men68.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men68.m add command \
        \
        -command {global OpenDirFile DataDir DataDirChannel1 DataDirChannel2
global ActiveProgram ActiveImportData
global PSPSIMChannel1 PSPSIMChannel2
global PSPSIMAltitude PSPSIMIncAngle1 PSPSIMIncAngle2
global PSPSIMSlantRange1 PSPSIMSlantRange2
global PSPSIMHorBaseline PSPSIMVerBaseline
global PSPSIMFrequency PSPSIMAzResol PSPSIMRgResol
global PSPSIMSurface PSPSIMMoisture PSPSIMAzSlope PSPSIMRgSlope
global PSPSIMTreeSpecies PSPSIMTreeHeight PSPSIMForestArea PSPSIMForestDensity
global PSPSIMSurfArea PSPSIMVegHeight PSPOutputFormat
global PSPSIMRandom PSPSIMNrows PSPSIMNcols PSPSIMConfig
#TOOLS
global Load_PolSARproSIMgr PSPTopLevel

if {$OpenDirFile == 0} {

if {$Load_PolSARproSIMgr == 0} {
    source "GUI/tools/PolSARproSIMgr.tcl"
    set Load_PolSARproSIMgr 1
    WmTransient $widget(Toplevel403) $PSPTopLevel
    }

set ActiveProgram "POLINSAR"
set ActiveImportData ""
MenuOff

set PSPSIMChannel1 "$DataDirChannel1/track_master"
set PSPSIMChannel2 "$DataDirChannel2/track_slave"
set PSPSIMAltitude "3000."; set PSPSIMIncAngle1 "45."; set PSPSIMIncAngle2 "0.0"
set PSPSIMSlantRange1 "0.0"; set PSPSIMSlantRange2 "0.0"
set PSPSIMHorBaseline "10.0"; set PSPSIMVerBaseline "1.0"
set PSPSIMFrequency "1.30"; set PSPSIMAzResol "1.5"; set PSPSIMRgResol "1.06066"
set PSPSIMSurface "0"; set PSPSIMMoisture "1"; set PSPSIMAzSlope "2.0"; set PSPSIMRgSlope "1.0"
set PSPSIMTreeSpecies "0"; set PSPSIMTreeHeight "0.0"; set PSPSIMForestArea "1.0"; set PSPSIMForestDensity "0"
set PSPSIMSurfArea "1.0"; set PSPSIMVegHeight "0.0"
set PSPSIMRandom [expr round(65535*rand())]; set PSPSIMNrows ""; set PSPSIMNcols ""; set PSPSIMConfig ""
set PSPOutputFormat "quad"

$widget(Label403_1) configure -state disable
$widget(Entry403_1) configure -disabledbackground $PSPBackgroundColor
$widget(Label403_2) configure -state disable
$widget(Entry403_2) configure -disabledbackground $PSPBackgroundColor
$widget(TitleFrame403_1) configure -state disable
$widget(Entry403_3) configure -state disable
$widget(Entry403_3) configure -disabledbackground $PSPBackgroundColor
$widget(Button403_0) configure -state disable
WidgetShow $widget(Toplevel403); TextEditorRunTrace "Open Window PolSARpro Ground Simulator" "b"
}} \
        -label Ground 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global OpenDirFile DataDir DataDirChannel1 DataDirChannel2
global ActiveProgram ActiveImportData
global PSPSIMChannel1 PSPSIMChannel2
global PSPSIMAltitude PSPSIMIncAngle1 PSPSIMIncAngle2
global PSPSIMSlantRange1 PSPSIMSlantRange2
global PSPSIMHorBaseline PSPSIMVerBaseline
global PSPSIMFrequency PSPSIMAzResol PSPSIMRgResol
global PSPSIMSurface PSPSIMMoisture PSPSIMAzSlope PSPSIMRgSlope
global PSPSIMTreeSpecies PSPSIMTreeHeight PSPSIMForestArea PSPSIMForestDensity
global PSPSIMSurfArea PSPSIMVegHeight PSPOutputFormat
global PSPSIMRandom PSPSIMNrows PSPSIMNcols PSPSIMConfig
#TOOLS
global Load_PolSARproSIMsv PSPTopLevel

if {$OpenDirFile == 0} {

if {$Load_PolSARproSIMsv == 0} {
    source "GUI/tools/PolSARproSIMsv.tcl"
    set Load_PolSARproSIMsv 1
    WmTransient $widget(Toplevel404) $PSPTopLevel
    }

set ActiveProgram "POLINSAR"
set ActiveImportData ""
MenuOff

set PSPSIMChannel1 "$DataDirChannel1/track_master"
set PSPSIMChannel2 "$DataDirChannel2/track_slave"
set PSPSIMAltitude "3000."; set PSPSIMIncAngle1 "45."; set PSPSIMIncAngle2 "0.0"
set PSPSIMSlantRange1 "0.0"; set PSPSIMSlantRange2 "0.0"
set PSPSIMHorBaseline "10.0"; set PSPSIMVerBaseline "1.0"
set PSPSIMFrequency "1.30"; set PSPSIMAzResol "1.5"; set PSPSIMRgResol "1.06066"
set PSPSIMSurface "0"; set PSPSIMMoisture "1"; set PSPSIMAzSlope "2.0"; set PSPSIMRgSlope "1.0"
set PSPSIMTreeSpecies "0"; set PSPSIMTreeHeight "0.0"; set PSPSIMForestArea "1.0"; set PSPSIMForestDensity "0"
set PSPSIMSurfArea "1.0"; set PSPSIMVegHeight "0.5"
set PSPSIMRandom [expr round(65535*rand())]; set PSPSIMNrows ""; set PSPSIMNcols ""; set PSPSIMConfig ""
set PSPOutputFormat "quad"

$widget(Label404_1) configure -state disable
$widget(Entry404_1) configure -disabledbackground $PSPBackgroundColor
$widget(Label404_2) configure -state disable
$widget(Entry404_2) configure -disabledbackground $PSPBackgroundColor
$widget(TitleFrame404_1) configure -state disable
$widget(Entry404_3) configure -state disable
$widget(Entry404_3) configure -disabledbackground $PSPBackgroundColor
$widget(Button404_0) configure -state disable
WidgetShow $widget(Toplevel404); TextEditorRunTrace "Open Window PolSARpro Ground + Small Vegetation Simulator" "b"
}} \
        -label {Ground + Small Vegetation} 
    $site_4_0.men68.m add separator \
        
    $site_4_0.men68.m add command \
        \
        -command {global OpenDirFile DataDir DataDirChannel1 DataDirChannel2
global ActiveProgram ActiveImportData
global PSPSIMChannel1 PSPSIMChannel2
global PSPSIMAltitude PSPSIMIncAngle1 PSPSIMIncAngle2
global PSPSIMSlantRange1 PSPSIMSlantRange2
global PSPSIMHorBaseline PSPSIMVerBaseline
global PSPSIMFrequency PSPSIMAzResol PSPSIMRgResol
global PSPSIMSurface PSPSIMMoisture PSPSIMAzSlope PSPSIMRgSlope
global PSPSIMTreeSpecies PSPSIMTreeHeight PSPSIMForestArea PSPSIMForestDensity
global PSPSIMRandom PSPSIMNrows PSPSIMNcols PSPSIMConfig PSPOutputFormat
#TOOLS
global Load_PolSARproSIM PSPTopLevel

if {$OpenDirFile == 0} {

if {$Load_PolSARproSIM == 0} {
    source "GUI/tools/PolSARproSIM.tcl"
    set Load_PolSARproSIM 1
    WmTransient $widget(Toplevel400) $PSPTopLevel
    }

set ActiveProgram "POLINSAR"
set ActiveImportData ""
MenuOff

set PSPSIMChannel1 "$DataDirChannel1/track_master"
set PSPSIMChannel2 "$DataDirChannel2/track_slave"
set PSPSIMAltitude "3000."; set PSPSIMIncAngle1 "45."; set PSPSIMIncAngle2 "0.0"
set PSPSIMSlantRange1 "0.0"; set PSPSIMSlantRange2 "0.0"
set PSPSIMHorBaseline "10.0"; set PSPSIMVerBaseline "1.0"
set PSPSIMFrequency "1.30"; set PSPSIMAzResol "1.5"; set PSPSIMRgResol "1.06066"
set PSPSIMSurface "0"; set PSPSIMMoisture "1"; set PSPSIMAzSlope "2.0"; set PSPSIMRgSlope "1.0"
set PSPSIMTreeSpecies "4"; set PSPSIMTreeHeight "18.0"; set PSPSIMForestArea "0.282745"; set PSPSIMForestDensity "300"
set PSPSIMRandom [expr round(65535*rand())]; set PSPSIMNrows ""; set PSPSIMNcols ""; set PSPSIMConfig ""
set PSPOutputFormat "quad"

$widget(Label400_1) configure -state disable
$widget(Entry400_1) configure -disabledbackground $PSPBackgroundColor
$widget(Label400_2) configure -state disable
$widget(Entry400_2) configure -disabledbackground $PSPBackgroundColor
$widget(TitleFrame400_1) configure -state disable
$widget(Entry400_3) configure -state disable
$widget(Entry400_3) configure -disabledbackground $PSPBackgroundColor
$widget(Button400_0) configure -state disable
WidgetShow $widget(Toplevel400); TextEditorRunTrace "Open Window PolSARpro Forest Simulator" "b"
}} \
        -label Forest 
    menubutton $site_4_0.men75 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images TUTORIALsmall.gif]] \
        -menu "$site_4_0.men75.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men75" "Menubutton24" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men75 "$site_4_0.men75 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men75 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Tutorial}
    }
    menu $site_4_0.men75.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men75.m add cascade \
        -menu "$site_4_0.men75.m.men76" -command {} \
        -label {PolSARap Tutorial (C. Lopez - E. Pottier)} 
    set site_6_0 $site_4_0.men75.m
    menu $site_6_0.men76 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men76 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolSARap_Tutorial/PolSARap_part1.pdf"} \
        -label {Part 1 : Theory of Radar Polarimetry} 
    $site_6_0.men76 add separator \
        
    $site_6_0.men76 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolSARap_Tutorial/PolSARap_part2.pdf"} \
        -label {Part 2 : SAR Data Statistical Description and Speckle Noise Filetring} 
    $site_6_0.men76 add separator \
        
    $site_6_0.men76 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolSARap_Tutorial/PolSARap_part3.pdf"} \
        -label {Part 3 : Polarimetric Scattering Decomposition Theorems} 
    $site_6_0.men76 add separator \
        
    $site_6_0.men76 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolSARap_Tutorial/PolSARap_part4.pdf"} \
        -label {Part 4 : Pol-InSAR and Pol-TomSAR} 
    $site_6_0.men76 add separator \
        
    $site_6_0.men76 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolSARap_Tutorial/PolSARap_part5.pdf"} \
        -label {Part 5 : References} 
    $site_4_0.men75.m add separator \
        
    $site_4_0.men75.m add cascade \
        -menu "$site_4_0.men75.m.men71" -command {} -label {Lectures Notes} 
    set site_6_0 $site_4_0.men75.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "Tutorial/Lecture_Notes/Recent_Advances.pdf"} \
        -label {Recent Advances (W.M. Boerner)} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "Tutorial/Lecture_Notes/Basic_Concepts.pdf"} \
        -label {Basic Concepts (W.M. Boerner)} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "Tutorial/Lecture_Notes/Advanced_Concepts.pdf"} \
        -label {Advanced Concepts (E. Pottier, J.S. Lee, L. Ferro-Famil)} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men66" -command {} \
        -label {Polarimetric SAR Interferometry (S.R. Cloude, K. Papathanassiou)} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men66 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men66 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolarimetricSARInterferometry/Single_vs_Multi_Polarization_Interferometry.pdf"} \
        -label {Single vs multi polarization interferometry} 
    $site_7_0.men66 add separator \
        
    $site_7_0.men66 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolarimetricSARInterferometry/Pol-InSAR_Training_Course.pdf"} \
        -label {Pol-InSAR (Training Course)} 
    $site_7_0.men66 add separator \
        
    $site_7_0.men66 add command \
        \
        -command {HelpPdfEdit "Tutorial/PolarimetricSARInterferometry/PCT_Training_Course.pdf"} \
        -label {Polarization Coherence Tomography (Training Course)} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add cascade \
        -menu "$site_6_0.men71.men67" -command {} \
        -label {Surface Parameter Retrieval (I. Hajnsek, K. Papathanassiou)} 
    set site_7_0 $site_6_0.men71
    menu $site_7_0.men67 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_7_0.men67 add command \
        \
        -command {HelpPdfEdit "Tutorial/SurfaceParameterRetrieval/Description_Of_Natural_Surfaces.pdf"} \
        -label {Description of natural surfaces} 
    $site_7_0.men67 add separator \
        
    $site_7_0.men67 add command \
        \
        -command {HelpPdfEdit "Tutorial/SurfaceParameterRetrieval/Rough_Surface_Scattering_Models.pdf"} \
        -label {Rough surface scattering models} 
    $site_7_0.men67 add separator \
        
    $site_7_0.men67 add command \
        \
        -command {HelpPdfEdit "Tutorial/SurfaceParameterRetrieval/Single_vs_Multi_Polarization_Descriptors.pdf"} \
        -label {Single vs multi polarization descriptors} 
    $site_7_0.men67 add separator \
        
    $site_7_0.men67 add command \
        \
        -command {HelpPdfEdit "Tutorial/SurfaceParameterRetrieval/Estimation_Of_Surface_Characteristics.pdf"} \
        -label {Estimation of surface characteristics} 
    menubutton $site_4_0.men72 \
        -borderwidth 3 \
        -image [vTcl:image:get_image [file join . GUI Images HELPBOOKsmall.gif]] \
        -menu "$site_4_0.men72.m" -padx 5 -pady 4 -relief raised -text menu 
    vTcl:DefineAlias "$site_4_0.men72" "Menubutton25" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.men72 "$site_4_0.men72 Menubutton $top all _vTclBalloon"
    bind $site_4_0.men72 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Help Files}
    }
    menu $site_4_0.men72.m \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_4_0.men72.m add command \
        -command {HelpPdfEdit "TechDoc/PolSARpro_v5.0_Presentation.pdf"} \
        -label {PolSARpro v5.0 Presentation} 
    $site_4_0.men72.m add separator \
        
    $site_4_0.men72.m add command \
        -command {HelpPdfEdit "Help/util/PolSARpro_DataFormat.pdf"} \
        -label {Standard Data Format} 
    $site_4_0.men72.m add separator \
        
    $site_4_0.men72.m add command \
        -command {HelpPdfEdit "Help/util/PolSARpro_MainMenu.pdf"} \
        -label {Main Menu} 
    $site_4_0.men72.m add separator \
        
    $site_4_0.men72.m add cascade \
        -menu "$site_4_0.men72.m.men71" -command {} \
        -label {Technical Documentation} 
    set site_6_0 $site_4_0.men72.m
    menu $site_6_0.men71 \
        -activeborderwidth 1 -borderwidth 1 -tearoff 0 
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_basis_change.pdf"} \
        -label {Basis Change} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_bmp_process.pdf"} \
        -label {BMP process} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_calculator.pdf"} \
        -label Calculator 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_calibration.pdf"} \
        -label Calibration 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_data_convert.pdf"} \
        -label {Data Convert} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_data_import.pdf"} \
        -label {Data Import} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_data_process_dual.pdf"} \
        -label {Data Process Dual} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_data_process_mult.pdf"} \
        -label {Data Process Mult} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_data_process_sngl.pdf"} \
        -label {Data Process Sngl} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_PolSARap.pdf"} \
        -label PolSARap 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_speckle_filter.pdf"} \
        -label {Speckle Filter} 
    $site_6_0.men71 add separator \
        
    $site_6_0.men71 add command \
        -command {HelpPdfEdit "TechDoc/C_Routines/Routine_tools.pdf"} \
        -label Tools 
    button $site_4_0.cpd66 \
        \
        -command {global PolSARapShortcut

if {$PolSARapShortcut == 0} {
    set PolSARapShortcut 1
    Window show $widget(Toplevel530); TextEditorRunTrace "Open Window PolSARap Showcase : Menu" "b"
    } else {
    set PolSARapShortcut 0
    Window hide $widget(Toplevel530); TextEditorRunTrace "Close Window PolSARap Showcase : Menu" "b"
    }} \
        -image [vTcl:image:get_image [file join . GUI Images PolSARapsmall.gif]] \
        -padx 7 -pady 5 -text button 
    bindtags $site_4_0.cpd66 "$site_4_0.cpd66 Button $top all _vTclBalloon"
    bind $site_4_0.cpd66 <<SetBalloon>> {
        set ::vTcl::balloon::%W {PolSARap}
    }
    pack $site_4_0.men68 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 2 -side left 
    pack $site_4_0.men75 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 2 -side left 
    pack $site_4_0.men72 \
        -in $site_4_0 -anchor center -expand 0 -fill none -padx 2 -side left 
    pack $site_4_0.cpd66 \
        -in $site_4_0 -anchor center -expand 1 -fill none -padx 1 -side left 
    pack $site_3_0.cpd79 \
        -in $site_3_0 -anchor center -expand 0 -fill none -side left 
    pack $site_3_0.fra23 \
        -in $site_3_0 -anchor center -expand 1 -fill none -padx 10 -side left 
    pack $site_3_0.fra29 \
        -in $site_3_0 -anchor center -expand 1 -fill none -padx 10 -side left 
    pack $site_3_0.cpd74 \
        -in $site_3_0 -anchor center -expand 0 -fill none -padx 2 -side right 
    frame $top.fra84 \
        -height 75 -width 125 
    vTcl:DefineAlias "$top.fra84" "Frame1" vTcl:WidgetProc "Toplevel2" 1
    set site_3_0 $top.fra84
    frame $site_3_0.fra71 \
        -borderwidth 2 -relief sunken -background #999999 -height 75 \
        -width 125 
    vTcl:DefineAlias "$site_3_0.fra71" "Frame2" vTcl:WidgetProc "Toplevel2" 1
    frame $site_3_0.fra66 \
        -borderwidth 2 -height 75 -width 125 
    vTcl:DefineAlias "$site_3_0.fra66" "Frame3" vTcl:WidgetProc "Toplevel2" 1
    set site_4_0 $site_3_0.fra66
    button $site_4_0.cpd67 \
        -borderwidth 1 \
        -command {global PSPMemoryTmp PSPMemory
    set PSPMemoryTmp $PSPMemory
    Window show $widget(Toplevel10); TextEditorRunTrace "Open Window PolSARpro Memory" "b"
    } \
        -image [vTcl:image:get_image [file join . GUI Images memory.gif]] \
        -padx 0 -pady 0 -text button 
    vTcl:DefineAlias "$site_4_0.cpd67" "ButtonMemory" vTcl:WidgetProc "Toplevel2" 1
    bindtags $site_4_0.cpd67 "$site_4_0.cpd67 Button $top all _vTclBalloon"
    bind $site_4_0.cpd67 <<SetBalloon>> {
        set ::vTcl::balloon::%W {Memory}
    }
    ::progressbar::progressbar $site_4_0.pro68 \
        -borderwidth 0 -variable ProgressLine -width 980 
    vTcl:DefineAlias "$site_4_0.pro68" "ProgressbarPSP" vTcl:WidgetProc "Toplevel2" 1
    pack $site_4_0.cpd67 \
        -in $site_4_0 -anchor center -expand 0 -fill none -side left 
    pack $site_4_0.pro68 \
        -in $site_4_0 -anchor center -expand 0 -fill x -side left 
    TitleFrame $site_3_0.cpd67 \
        -ipad 0 -text {PolSARpro v5.0 - Run Trace} 
    vTcl:DefineAlias "$site_3_0.cpd67" "TitleFrame2" vTcl:WidgetProc "Toplevel2" 1
    bind $site_3_0.cpd67 <Destroy> {
        Widget::destroy %W; rename %W {}
    }
    set site_5_0 [$site_3_0.cpd67 getframe]
    text $site_5_0.cpd69 \
        -background white -height 3 -width 100 \
        -yscrollcommand "$site_5_0.scr70 set" 
    vTcl:DefineAlias "$site_5_0.cpd69" "Text1" vTcl:WidgetProc "Toplevel2" 1
    scrollbar $site_5_0.scr70 \
        -command "$site_5_0.cpd69 yview" -width 12 
    vTcl:DefineAlias "$site_5_0.scr70" "Scrollbar1" vTcl:WidgetProc "Toplevel2" 1
    pack $site_5_0.cpd69 \
        -in $site_5_0 -anchor center -expand 1 -fill x -side left 
    pack $site_5_0.scr70 \
        -in $site_5_0 -anchor center -expand 0 -fill y -side right 
    pack $site_3_0.fra71 \
        -in $site_3_0 -anchor center -expand 1 -fill both -side top 
    pack $site_3_0.fra66 \
        -in $site_3_0 -anchor center -expand 0 -fill x -side bottom 
    pack $site_3_0.cpd67 \
        -in $site_3_0 -anchor center -expand 0 -fill x -side top 
    ###################
    # SETTING GEOMETRY
    ###################
    pack $top.fra71 \
        -in $top -anchor center -expand 0 -fill both -side top 
    pack $top.cpd73 \
        -in $top -anchor center -expand 0 -fill x -side top 
    pack $top.fra84 \
        -in $top -anchor center -expand 1 -fill both -side top 

    vTcl:FireEvent $base <<Ready>>
}

#############################################################################
## Binding tag:  _TopLevel

bind "_TopLevel" <<Create>> {
    if {![info exists _topcount]} {set _topcount 0}; incr _topcount
}
bind "_TopLevel" <<DeleteWindow>> {
    if {[set ::%W::_modal]} {
                vTcl:Toplevel:WidgetProc %W endmodal
            } else {
                destroy %W; if {$_topcount == 0} {exit}
            }
}
bind "_TopLevel" <Destroy> {
    if {[winfo toplevel %W] == "%W"} {incr _topcount -1}
}
#############################################################################
## Binding tag:  _vTclBalloon


if {![info exists vTcl(sourcing)]} {
bind "_vTclBalloon" <<KillBalloon>> {
    namespace eval ::vTcl::balloon {
        after cancel $id
        if {[winfo exists .vTcl.balloon]} {
            destroy .vTcl.balloon
        }
        set set 0
    }
}
bind "_vTclBalloon" <<vTclBalloon>> {
    if {$::vTcl::balloon::first != 1} {break}

    namespace eval ::vTcl::balloon {
        set first 2
        if {![winfo exists .vTcl]} {
            toplevel .vTcl; wm withdraw .vTcl
        }
        if {![winfo exists .vTcl.balloon]} {
            toplevel .vTcl.balloon -bg black
        }
        wm overrideredirect .vTcl.balloon 1
        label .vTcl.balloon.l  -text ${%W} -relief flat  -bg #ffffaa -fg black -padx 2 -pady 0 -anchor w
        pack .vTcl.balloon.l -side left -padx 1 -pady 1
        wm geometry  .vTcl.balloon  +[expr {[winfo rootx %W]+[winfo width %W]/2}]+[expr {[winfo rooty %W]+[winfo height %W]+4}]
        set set 1
    }
}
bind "_vTclBalloon" <Button> {
    namespace eval ::vTcl::balloon {
        set first 0
    }
    vTcl:FireEvent %W <<KillBalloon>>
}
bind "_vTclBalloon" <Enter> {
    namespace eval ::vTcl::balloon {
        ## self defining balloon?
        if {![info exists %W]} {
            vTcl:FireEvent %W <<SetBalloon>>
        }
        set set 0
        set first 1
        set id [after 500 {vTcl:FireEvent %W <<vTclBalloon>>}]
    }
}
bind "_vTclBalloon" <Leave> {
    namespace eval ::vTcl::balloon {
        set first 0
    }
    vTcl:FireEvent %W <<KillBalloon>>
}
bind "_vTclBalloon" <Motion> {
    namespace eval ::vTcl::balloon {
        if {!$set} {
            after cancel $id
            set id [after 500 {vTcl:FireEvent %W <<vTclBalloon>>}]
        }
    }
}
}

Window show .
Window show .top1
Window show .top2

main $argc $argv
